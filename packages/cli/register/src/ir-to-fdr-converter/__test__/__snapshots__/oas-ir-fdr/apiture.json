{
  "types": {
    "accountIds": {
      "description": "An array of account IDs.",
      "name": "accountIds",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "resourceId"
          }
        }
      }
    },
    "accountAllowsFilter": {
      "description": "Values for the `?allows=` filter in [`listAccounts`](#op-listAccounts).\n\n<strong><code>accountAllowsFilter</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>billPay</code></strong></td><td>Bill Pay: <p>Include each account where the caller is allowed to use the bill pay feature.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>transferFrom</code></strong></td><td>Transfer From: <p>Include each account where the caller is allowed to transfer money from the account.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>transferTo</code></strong></td><td>Transfer To: <p>Include each account where the caller is allowed to transfer money into the account.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>mobileCheckDeposit</code></strong></td><td>Mobile Check Deposit: <p>Include each account where the caller is allowed to deposit mobile checks.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>view</code></strong></td><td>View: <p>Include each account where the caller is allowed to view full account details (balances, full account number, transactions, etc).</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>viewCards</code></strong></td><td>View Cards: <p>Include each account where the caller is allowed to view debit card details.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>manageCards</code></strong></td><td>Manage Cards: <p>Include each account where the caller is allowed to manage debit card details.</p>\n</td>\n    </tr>\n</table>\n\n",
      "name": "accountAllowsFilter",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "billPay"
          },
          {
            "value": "transferFrom"
          },
          {
            "value": "transferTo"
          },
          {
            "value": "mobileCheckDeposit"
          },
          {
            "value": "view"
          },
          {
            "value": "viewCards"
          },
          {
            "value": "manageCards"
          }
        ]
      }
    },
    "accountPermissions": {
      "description": "Flags which indicate the permissions the current authorized user has on this account item resource. Most of these properties may only be `true` for internal accounts. These permissions are available in account items in the [`accounts`](#schema-accounts) list. See [`fullAccountPermissions`](#schema-fullAccountPermissions) for all capabilities a customer has on an account (the `account.allows` object in the [`account`](#schema-account) object response from [`getAccount`](#op-getAccount).)",
      "name": "accountPermissions",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "If `true`, the customer may use this account for Bill Pay.",
            "key": "billPay",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "If `true`, the customer may use this account for mobile check deposits.",
            "key": "mobileCheckDeposit",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "If `true`, the customer may use this account as the target (deposit) account for account-to-account transfers.",
            "key": "transferFrom",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "If `true`, the customer may use this account as the source (debit) account for account-to-account transfers.",
            "key": "transferTo",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "If `true`, the customer may view the details of this account, including the account balance and transactions.",
            "key": "view",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "If `true`, the customer may view debit cards associated with this account.",
            "key": "viewCards",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "If true, the customer may manage debit cards associated with this account. This includes locking and unlocking cards, changing card controls, ordering cards, or canceling cards.",
            "key": "manageCards",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    },
    "fullAccountPermissions": {
      "description": "Flags which indicate the permissions the current authorized user has on this account resource. Most of these properties may only be `true` for internal accounts. These permissions are available in [`account`](#schema-account) response from the [`getAccount`](#op-getAccount) operation. See [`accountPermissions`](#schema-accountPermissions) for the subset of permission in `account.allows` flags in the [`listAccounts`](#op-listAccounts) response.",
      "name": "fullAccountPermissions",
      "shape": {
        "type": "object",
        "extends": [
          "accountPermissions"
        ],
        "properties": [
          {
            "description": "If `true`, the customer can list the other joint owners on the account and invite new joint owners.",
            "key": "manageJointOwners",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "If `true`, the customer can list and manage overdraft account settings.",
            "key": "manageOverdraftAccounts",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    },
    "AccountAllows": {
      "description": "Flags which indicate the permissions the current authorized user has on this account resource.",
      "name": "AccountAllows",
      "shape": {
        "type": "object",
        "extends": [
          "fullAccountPermissions"
        ],
        "properties": []
      }
    },
    "account": {
      "description": "An internal customer account.",
      "name": "account",
      "shape": {
        "type": "object",
        "extends": [
          "abstractBody",
          "accountFields"
        ],
        "properties": [
          {
            "description": "Flags which indicate the permissions the current authorized user has on this account resource.",
            "key": "allows",
            "valueType": {
              "type": "id",
              "value": "AccountAllows"
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "If `true`, the customer has opted in to receive account statements electronically.",
            "key": "electronicStatements",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    },
    "overdraftAccountFields": {
      "description": "Fields of an overdraft protection account, used to compose other schemas.",
      "name": "overdraftAccountFields",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique ID of the account resource. Use this as the `{accountId}` in [`getAccount`](#op-getAccount) or [`listAccountBalances`](#op-listAccountBalances).",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "resourceId"
              }
            }
          },
          {
            "description": "The human-readable label for this account. This is either the `nickname` (if assigned for the current customer), or the `product.label` concatenated with the `maskedNumber`.",
            "key": "label",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 80
                }
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "key": "maskedNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "maskedAccountNumber"
              }
            }
          }
        ]
      }
    },
    "eligibleOverdraftAccountItem": {
      "description": "An account that is eligible to be assigned as an overdraft protection account for another account.",
      "name": "eligibleOverdraftAccountItem",
      "shape": {
        "type": "object",
        "extends": [
          "overdraftAccountFields"
        ],
        "properties": []
      }
    },
    "eligibleOverdraftAccounts": {
      "description": "A page of zero or more accounts that are eligible to be assigned as an overdraft protection account for another account.",
      "name": "eligibleOverdraftAccounts",
      "shape": {
        "type": "object",
        "extends": [
          "abstractPagedBody"
        ],
        "properties": [
          {
            "description": "The maximum number of overdraft protection accounts that may be linked to the account.",
            "key": "maximumOverdraftAccounts",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "maximum": 4
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The URL of the next page of eligible accounts. If this URL is omitted, there are no more accounts.",
            "key": "nextPage_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uri-reference",
                  "maxLength": 256
                }
              }
            },
            "propertyAccess": "READ_ONLY"
          }
        ]
      }
    },
    "overdraftAccountItem": {
      "description": "An overdraft protection account linked to another protected account. The `label` and `maskedNumber` are informational only.",
      "name": "overdraftAccountItem",
      "shape": {
        "type": "object",
        "extends": [
          "overdraftAccountFields"
        ],
        "properties": []
      }
    },
    "overdraftProtectionFields": {
      "description": "Fields used to compose other overdraft protection schemas.",
      "name": "overdraftProtectionFields",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "overdraftProtection": {
      "description": "Representation of the overdraft protection settings, consisting of a list of overdraft protection accounts linked to the account identified by the `{accountId}`.",
      "name": "overdraftProtection",
      "shape": {
        "type": "object",
        "extends": [
          "abstractBody",
          "overdraftProtectionFields"
        ],
        "properties": [
          {
            "description": "The maximum number of overdraft protection accounts that may be linked to the account.",
            "key": "maximumOverdraftAccounts",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "maximum": 4
              }
            },
            "propertyAccess": "READ_ONLY"
          }
        ]
      }
    },
    "overdraftProtectionPatch": {
      "description": "Representation of request used to patch the overdraft protection settings consisting of a list of overdraft protection accounts linked to the account identified by the `{accountId}`.",
      "name": "overdraftProtectionPatch",
      "shape": {
        "type": "object",
        "extends": [
          "abstractBody",
          "overdraftProtectionFields"
        ],
        "properties": []
      }
    },
    "accounts": {
      "description": "A paginated list of the customer's accounts. This list contains internal banking accounts and external banking accounts. and outside fund accounts. The `location` property indicates where the account is held. Items in the list contain `url` links to the actual account resource which are in the `accounts`, `externalAccounts` or `outsideAccounts` collections.",
      "name": "accounts",
      "shape": {
        "type": "object",
        "extends": [
          "abstractPagedBody"
        ],
        "properties": [
          {
            "description": "The array of items in this page of accounts. This array may be empty.",
            "key": "items",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "accountItem"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The total number of accounts for which the user has access. This value ignores any filters. This value is _optional_ and may be omitted if the count is not computable efficiently.",
            "key": "count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "description": "The `id` of the customer's primary account. This property only exists for retail customers, and only if the customer has designated a primary account.",
            "key": "primaryAccountId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "readOnlyResourceId"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The URL of the next page of accounts. If this URL is omitted, there are no more accounts.",
            "key": "nextPage_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uri-reference",
                  "maxLength": 256
                }
              }
            },
            "propertyAccess": "READ_ONLY"
          }
        ]
      }
    },
    "accountLocation": {
      "description": "Indicates where an account is held:\n  * `internal` accounts at the current financial institution;\n  * `external` accounts at another financial institution;\n  * `outside` accounts non-banking accounts such as brokerage and fund accounts.\nAccount transfers are only allowed between `internal` and `external` accounts. All accounts are considered when calculating total cash balance.",
      "name": "accountLocation",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "internal"
          },
          {
            "value": "external"
          },
          {
            "value": "outside"
          }
        ]
      }
    },
    "AccountFieldsId": {
      "description": "The unique identifier for this account resource. This is an immutable opaque string.",
      "name": "AccountFieldsId",
      "shape": {
        "type": "object",
        "extends": [
          "readOnlyResourceId"
        ],
        "properties": []
      }
    },
    "AccountFieldsLocation": {
      "description": "Indicates where an account is held:\n  * `internal` accounts at the current financial institution;\n  * `external` accounts at another financial institution;\n  * `outside` accounts non-banking accounts such as brokerage and fund accounts.\nAccount transfers are only allowed between `internal` and `external` accounts. All accounts are considered when calculating total cash balance.",
      "name": "AccountFieldsLocation",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "internal"
          },
          {
            "value": "external"
          },
          {
            "value": "outside"
          }
        ]
      }
    },
    "accountFields": {
      "description": "Fragment schema use to build other account schemas.",
      "name": "accountFields",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique identifier for this account resource. This is an immutable opaque string.",
            "key": "id",
            "valueType": {
              "type": "id",
              "value": "AccountFieldsId"
            }
          },
          {
            "description": "The human-readable label for this account. This is either the `nickname` (if assigned for the current customer), or the `product.label` concatenated with the `maskedNumber`.",
            "key": "label",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 80
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "key": "nickname",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "accountNickname"
              }
            }
          },
          {
            "key": "maskedNumber",
            "valueType": {
              "type": "id",
              "value": "maskedAccountNumber"
            }
          },
          {
            "key": "product",
            "valueType": {
              "type": "id",
              "value": "productReference"
            }
          },
          {
            "description": "Indicates where an account is held.",
            "key": "location",
            "valueType": {
              "type": "id",
              "value": "AccountFieldsLocation"
            }
          }
        ]
      }
    },
    "AccountItemId": {
      "description": "The unique identifier for this account resource. This is an immutable opaque string.",
      "name": "AccountItemId",
      "shape": {
        "type": "object",
        "extends": [
          "readOnlyResourceId"
        ],
        "properties": []
      }
    },
    "AccountItemLocation": {
      "description": "Indicates where an account is held:\n  * `internal` accounts at the current financial institution;\n  * `external` accounts at another financial institution;\n  * `outside` accounts non-banking accounts such as brokerage and fund accounts.\nAccount transfers are only allowed between `internal` and `external` accounts. All accounts are considered when calculating total cash balance.",
      "name": "AccountItemLocation",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "internal"
          },
          {
            "value": "external"
          },
          {
            "value": "outside"
          }
        ]
      }
    },
    "accountItem": {
      "description": "An account item in a list items in the `accounts` schema.",
      "name": "accountItem",
      "shape": {
        "type": "object",
        "extends": [
          "accountFields"
        ],
        "properties": [
          {
            "description": "The unique identifier for this account resource. This is an immutable opaque string.",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AccountItemId"
              }
            }
          },
          {
            "description": "The human-readable label for this account. This is either the `nickname` (if assigned for the current customer), or the `product.label` concatenated with the `maskedNumber`.",
            "key": "label",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 80
                }
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "key": "nickname",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "accountNickname"
              }
            }
          },
          {
            "key": "maskedNumber",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "maskedAccountNumber"
              }
            }
          },
          {
            "key": "allows",
            "valueType": {
              "type": "id",
              "value": "accountPermissions"
            }
          },
          {
            "key": "product",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "productReference"
              }
            }
          },
          {
            "description": "Indicates where an account is held.",
            "key": "location",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AccountItemLocation"
              }
            }
          }
        ]
      }
    },
    "externalAccountVerificationMethod": {
      "description": "The method used to verify the customer has access to the external account.\n\n<strong><code>externalAccountVerificationMethod</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>instant</code></strong></td><td>Instant Account Verification: <p>Access to the external account is verified via integration with an account verification service provider.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>microDeposits</code></strong></td><td>Micro-Deposits: <p>Access to the external account is verified via verifying a set of micro-deposits.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>manual</code></strong></td><td>Manual: <p>Access to the external account is verified manually by the financial institution.</p>\n</td>\n    </tr>\n</table>\n\n",
      "name": "externalAccountVerificationMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "instant"
          },
          {
            "value": "microDeposits"
          },
          {
            "value": "manual"
          }
        ]
      }
    },
    "accountRoutingNumber": {
      "description": "An account ABA routing and transit number.",
      "name": "accountRoutingNumber",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "regex": "^[0-9]{9}$",
            "minLength": 9,
            "maxLength": 9
          }
        }
      }
    },
    "accountNickname": {
      "description": "The nickname (friendly name) the customer has given this account. Each customer can define their own nickname for the same account. If omitted, the customer has not set a nickname.",
      "name": "accountNickname",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "maxLength": 50
          }
        }
      }
    },
    "maskedAccountNumber": {
      "description": "A masked account number: an asterisk `*` followed by one to four characters of the `fullAccountNumber`.",
      "name": "maskedAccountNumber",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "regex": "^\\*[- _a-zA-Z0-9.]{1,4}$",
            "minLength": 2,
            "maxLength": 5
          }
        }
      }
    },
    "fullAccountNumber": {
      "description": "A full account number. This is the number that the customer uses to reference the account within the financial institution.",
      "name": "fullAccountNumber",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "regex": "^[- a-zA-Z0-9.]{1,32}$",
            "minLength": 1,
            "maxLength": 32
          }
        }
      }
    },
    "accountBalances": {
      "description": "An array of account balances by account ID.",
      "name": "accountBalances",
      "shape": {
        "type": "object",
        "extends": [
          "abstractBody"
        ],
        "properties": [
          {
            "description": "An array of items, one for each of the `?accounts=` in the request, returned in the same order.",
            "key": "items",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "accountBalance"
              }
            }
          }
        ]
      }
    },
    "incompleteAccountBalances": {
      "description": "An array of account balances by account ID, some of which are incomplete. Use the values in `incompleteAccounts` and `retryCount` to retry the [`listAccountBalances`](#op-listAccountBalances) operation.",
      "name": "incompleteAccountBalances",
      "shape": {
        "type": "object",
        "extends": [
          "abstractBody"
        ],
        "properties": [
          {
            "description": "An array of items, one for each of the `?accounts=` in the request, returned in the same order.",
            "key": "items",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "accountBalance"
              }
            }
          },
          {
            "description": "Pass these values as the `?accounts=` query parameter on the next retry of the [`listAccountBalances`](#op-listAccountBalances) operation. This value is empty if the client has reached the retry limit.",
            "key": "incompleteAccounts",
            "valueType": {
              "type": "id",
              "value": "accountIds"
            }
          },
          {
            "description": "Pass this value as the as the `?retryCount=` parameter with the next retry of the [`listAccountBalances`](#op-listAccountBalances) operation.",
            "key": "retryCount",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 1,
                "maximum": 10
              }
            }
          }
        ]
      }
    },
    "accountBalance": {
      "description": "The current balances of the given account.",
      "name": "accountBalance",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The account ID.",
            "key": "id",
            "valueType": {
              "type": "id",
              "value": "readOnlyResourceId"
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The available balance: the funds available for use. This is the string representation of the exact decimal amount.",
            "key": "available",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(-|\\+)?(0|[1-9][0-9]*)\\.[0-9][0-9]$"
                }
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The current balance. This is the balance at the end of the previous business day. This is the string representation of the exact decimal amount.",
            "key": "current",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(-|\\+)?(0|[1-9][0-9]*)\\.[0-9][0-9]$"
                }
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The time when the balance values were last updated from the banking core.",
            "key": "updatedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "readOnlyTimestamp"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The current balance, with posted transactions. This is the string representation of the exact decimal amount.",
            "key": "currentWithPending",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(-|\\+)?(0|[1-9][0-9]*)\\.[0-9][0-9]$"
                }
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "If `true`, the response is incomplete and the client may retry the operation after the `Retry-After` time in order to fetch balances for any incomplete accounts in the `items`. The retry operation should only pass in accounts that are `incomplete`.",
            "key": "incomplete",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    },
    "accountJointOwner": {
      "description": "Representation of account joint owner resources.",
      "name": "accountJointOwner",
      "shape": {
        "type": "object",
        "extends": [
          "abstractBody"
        ],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "id",
              "value": "readOnlyResourceId"
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The full name of the joint owner.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 50
              }
            }
          }
        ]
      }
    },
    "accountJointOwners": {
      "description": "Collection of account joint owners. The items in the collection are ordered in the `items` array.",
      "name": "accountJointOwners",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "An array containing account joint owner items.",
            "key": "items",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "accountJointOwner"
              }
            }
          }
        ]
      }
    },
    "jointOwnerInvitationFields": {
      "description": "Fields used to compose other joint owner invitation schemas.",
      "name": "jointOwnerInvitationFields",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The invitee's first name.",
            "key": "firstName",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1,
                "maxLength": 32
              }
            }
          },
          {
            "description": "The invitee's last name name.",
            "key": "lastName",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1,
                "maxLength": 32
              }
            }
          },
          {
            "description": "The last 4 digits of the invitee's tax ID number (Social Security Number). This is not sent in the invitation email, but if the invitee enrolls in digital banking, this identification must match the last four digits of the tax ID they use to enroll.",
            "key": "taxId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9]{4}$",
                  "minLength": 4,
                  "maxLength": 4
                }
              }
            }
          },
          {
            "description": "A string shared by the inviter with the invitee to verify their identity. This is not sent in the invitation. The inviter should share this string with the invitee though another channel.",
            "key": "sharedSecret",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 8,
                "maxLength": 100
              }
            }
          },
          {
            "description": "The invitee's email address.",
            "key": "emailAddress",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "email",
                "maxLength": 80
              }
            }
          },
          {
            "description": "If `true`, the invitee is not allowed to order or manage debit cards for the account.",
            "key": "disallowDebitCardAccess",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "default": false
                }
              }
            }
          }
        ]
      }
    },
    "newJointOwnerInvitation": {
      "description": "A request to create an invitation to add a new joint owner to an account.",
      "name": "newJointOwnerInvitation",
      "shape": {
        "type": "object",
        "extends": [
          "abstractBody",
          "jointOwnerInvitationFields"
        ],
        "properties": []
      }
    },
    "jointOwnerInvitation": {
      "description": "A joint owner invitation.",
      "name": "jointOwnerInvitation",
      "shape": {
        "type": "object",
        "extends": [
          "abstractBody",
          "jointOwnerInvitationFields"
        ],
        "properties": [
          {
            "description": "The unique ID of the invitation.",
            "key": "id",
            "valueType": {
              "type": "id",
              "value": "readOnlyResourceId"
            },
            "propertyAccess": "READ_ONLY"
          }
        ]
      }
    },
    "institutionLocatorType": {
      "description": "Indicates the type of the institution `locator`.\n\n<strong><code>institutionLocatorType</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>abaRoutingNumber</code></strong></td><td>ABA Routing Number: <p>The <a href=\"https://www.aba.com/about-us/routing-number\">American Bankers Association routing number</a> of a financial institution</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>swiftBicCode</code></strong></td><td>swiftBicCode: <p>The <a href=\"https://www.swift.com/standards/data-standards/bic-business-identifier-code\">SWIFT Business Identifier Code (BIC) code</a> of a financial institution</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>ibanAccountNumber</code></strong></td><td>IBAN: <p><a href=\"https://www.ecbs.org/iban.htm\">International Bank Account Number (IBAN)</a></p>\n</td>\n    </tr>\n</table>\n\n",
      "name": "institutionLocatorType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "abaRoutingNumber"
          },
          {
            "value": "swiftBicCode"
          },
          {
            "value": "ibanAccountNumber"
          }
        ]
      }
    },
    "simpleInstitution": {
      "description": "A simple representation of a financial institution.",
      "name": "simpleInstitution",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The financial institution's name.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 35
              }
            }
          },
          {
            "description": "The financial institution's postal mailing address.",
            "key": "address",
            "valueType": {
              "type": "id",
              "value": "address"
            }
          },
          {
            "description": "The [American Bankers Association routing number](https://www.aba.com/about-us/routingnumber), [SWIFT Business Identifier Code (BIC) code](https://www.swift.com/standards/data-standards/bic-business-identifier-code), or [IBAN account number](https://www.ecbs.org/iban.htm) of the institution. The form of this institution locator string is set with the `locatorType` property.",
            "key": "locator",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 36
              }
            }
          },
          {
            "description": "Indicates the type of this institution's `locator`.",
            "key": "locatorType",
            "valueType": {
              "type": "id",
              "value": "institutionLocatorType"
            }
          }
        ]
      }
    },
    "wireTransferInstitution": {
      "description": "A representation of a financial institution used for wire transfers.",
      "name": "wireTransferInstitution",
      "shape": {
        "type": "object",
        "extends": [
          "simpleInstitution"
        ],
        "properties": [
          {
            "description": "The clearing code used to identify the financial institution for select countries.",
            "key": "localClearingCode",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "[a-zA-Z0-9]{3,12}",
                  "minLength": 3,
                  "maxLength": 12
                }
              }
            }
          }
        ]
      }
    },
    "institutionLookupResult": {
      "description": "Successful institution lookup result.",
      "name": "institutionLookupResult",
      "shape": {
        "type": "object",
        "extends": [
          "abstractBody"
        ],
        "properties": [
          {
            "description": "`true` if a financial institution was found matching the requested FI locator, `false` if none was found.",
            "key": "found",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "The name and other information about the financial institution, if found.",
            "key": "institution",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "simpleInstitution"
              }
            }
          },
          {
            "description": "Optional intermediary institutions, if requested and if intermediary institutions are required for for international wire transfers to the beneficiary institution. This array is omitted if there none are required.",
            "key": "intermediaryInstitutions",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "simpleInstitution"
                }
              }
            }
          }
        ]
      }
    },
    "cutoffTimes": {
      "description": "A representation of financial institution cutoff times for different money movement processes. A money movement process can have multiple cutoff times. The cutoff times are sorted in ascending chronological order by money movement process.",
      "name": "cutoffTimes",
      "shape": {
        "type": "object",
        "extends": [
          "abstractBody"
        ],
        "properties": [
          {
            "description": "The identifier of the time zone for which all of the `items[].time` are returned in.\nThe client can use this value to localize the `items[].time` values to the local time zone of the customer, as well as for formatting to localized names, such as `EST` and `EDT`.",
            "key": "timeZoneId",
            "valueType": {
              "type": "id",
              "value": "timeZoneId"
            }
          },
          {
            "description": "A list of cutoff times for a financial institution.",
            "key": "items",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "cutoffTime"
              }
            }
          }
        ]
      }
    },
    "timeZoneId": {
      "description": "The identifier of a time zone, as described by [RFC 7808](https://datatracker.ietf.org/doc/html/rfc7808.html#section-3.6). This value corresponds with the `tzid` value described in [RFC 5545](https://datatracker.ietf.org/doc/html/rfc5545#section-3.2.19) and defined by the [IANA Time Zone Database](https://www.iana.org/time-zones).",
      "name": "timeZoneId",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "regex": "^America\\/[a-zA-Z_]+(?:\\/[a-zA-Z_]+)*",
            "maxLength": 36
          }
        }
      }
    },
    "cutoffTime": {
      "description": "A representation of a cutoff time for a money movement process at a financial institution.",
      "name": "cutoffTime",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "cutoffTimeType"
            }
          },
          {
            "description": "The cutoff time for a product formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) `time` format: `hh:mm`. The time is expressed in 24 hour time and is set to the local time zone of the financial institution.",
            "key": "time",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^(?<hour>[0-2][0-9]):(?<minute>[0-5][0-9])$"
              }
            }
          }
        ]
      }
    },
    "cutoffTimeType": {
      "description": "Indicates the type of a cutoff time.\n\n<strong><code>cutoffTimeType</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>ach</code></strong></td><td>ACH</td>\n    </tr>\n<tr>\n    <td><strong><code>sameDayAch</code></strong></td><td>Same Day ACH</td>\n    </tr>\n<tr>\n    <td><strong><code>domesticWireTransfer</code></strong></td><td>Domestic Wire Transfer</td>\n    </tr>\n<tr>\n    <td><strong><code>internationalWireTransfer</code></strong></td><td>International Wire Transfer</td>\n    </tr>\n<tr>\n    <td><strong><code>internalTransfer</code></strong></td><td>Internal Account Transfer: <p>A transfer between accounts at the same financial institution</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>externalTransfer</code></strong></td><td>External Account Transfer: <p>A transfer to or from an account at an external financial institution</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>billPay</code></strong></td><td>Bill Pay</td>\n    </tr>\n</table>\n\n",
      "name": "cutoffTimeType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ach"
          },
          {
            "value": "sameDayAch"
          },
          {
            "value": "domesticWireTransfer"
          },
          {
            "value": "internationalWireTransfer"
          },
          {
            "value": "internalTransfer"
          },
          {
            "value": "externalTransfer"
          },
          {
            "value": "billPay"
          }
        ]
      }
    },
    "transferScheduleDirection": {
      "description": "Provides the direction in which a transfer flows.\n\n<strong><code>transferScheduleDirection</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>debit</code></strong></td><td>Debit: <p>Money is transferred from a payer to the financial institution</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>credit</code></strong></td><td>Credit: <p>Money is transferred from the financial institution to a payee</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>both</code></strong></td><td>Both: <p>Money is transferred both to and from a payee/payer</p>\n</td>\n    </tr>\n</table>\n\n",
      "name": "transferScheduleDirection",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "debit"
          },
          {
            "value": "credit"
          },
          {
            "value": "both"
          }
        ]
      }
    },
    "transferSchedules": {
      "description": "List of transfer methods. The items in the list are ordered in the `items` array.",
      "name": "transferSchedules",
      "shape": {
        "type": "object",
        "extends": [
          "abstractBody"
        ],
        "properties": [
          {
            "description": "An array containing upcoming transfer schedule items.",
            "key": "items",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "transferScheduleItem"
              }
            }
          }
        ]
      }
    },
    "transferScheduleItem": {
      "description": "Summary representation of a transfer schedule resource in transfer schedule list.",
      "name": "transferScheduleItem",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The scheduled date of the calculated calendar recurrence in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) date format.",
            "key": "scheduledOn",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date"
              }
            }
          },
          {
            "description": "The effective date of the recurrence in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. When the effective date differs from the scheduled date, it is due to a banking holiday, weekend, or other non-business day. The date is adjusted to before the scheduled date when the transfer direction is `credit` and adjusted to after the scheduled date when the transfer direction is `debit`.",
            "key": "effectiveOn",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date"
              }
            }
          }
        ]
      }
    },
    "transferDateRestrictionType": {
      "description": "Indicates why a transfer date is restricted.\n\n<strong><code>transferDateRestrictionType</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>pastDate</code></strong></td><td>Past Date: <p>The transfer date is in the past</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>pastCutoffTime</code></strong></td><td>Past Cutoff Time: <p>Transfers disallowed because the current time is past the financial institutions&#39; cutoff time</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>riskRestricted</code></strong></td><td>Risk Restricted: <p>The date is restricted because the risk level requires one or more days for a debit to clear</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>holiday</code></strong></td><td>Holiday: <p>A <a href=\"https://www.federalreserve.gov/aboutthefed/k8.htm\">Federal Reserve System observed holiday</a></p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>closure</code></strong></td><td>Closure: <p>Financial institution closure, such as a weekend or other planned closure</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>other</code></strong></td><td>Other: <p>Other</p>\n</td>\n    </tr>\n</table>\n\n",
      "name": "transferDateRestrictionType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "pastDate"
          },
          {
            "value": "pastCutoffTime"
          },
          {
            "value": "riskRestricted"
          },
          {
            "value": "holiday"
          },
          {
            "value": "closure"
          },
          {
            "value": "other"
          }
        ]
      }
    },
    "transferTypeForDateRestrictions": {
      "description": "Indicates the type of transfer. This determines what business rules and adjustments to make to the date restrictions.\n\n<strong><code>transferTypeForDateRestrictions</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>internal</code></strong></td><td>Internal: <p>Internal account to internal account transfer</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>ach</code></strong></td><td>ACH: <p>An ACH transfer that includes both debit and credit transfers</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>achCredit</code></strong></td><td>ACH Credit: <p>An ACH transfer debiting an internal account and crediting an external account</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>achDebit</code></strong></td><td>ACH Debit: <p>An ACH transfer debiting an external account and crediting an internal account</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>domesticWireTransfer</code></strong></td><td>Domestic Wire Transfer</td>\n    </tr>\n<tr>\n    <td><strong><code>internationalWireTransfer</code></strong></td><td>International Wire Transfer</td>\n    </tr>\n</table>\n\n",
      "name": "transferTypeForDateRestrictions",
      "shape": {
        "type": "enum",
        "default": "internal",
        "values": [
          {
            "value": "internal"
          },
          {
            "value": "ach"
          },
          {
            "value": "achDebit"
          },
          {
            "value": "achCredit"
          },
          {
            "value": "domesticWireTransfer"
          },
          {
            "value": "internationalWireTransfer"
          }
        ]
      }
    },
    "transferDateRestrictions": {
      "description": "A list of the financial institution's transfer date restrictions. This is a list of weekdays and specific dates when the institution cannot perform the requested transfers.\nThe response may include dates prior to requested the start date, as that is useful for populating a calendar that shows the current month and the last few days of the previous month.",
      "name": "transferDateRestrictions",
      "shape": {
        "type": "object",
        "extends": [
          "abstractBody"
        ],
        "properties": [
          {
            "description": "A list of restricted transfer dates as determined by the requested transfer parameters, holidays, and scheduled closures. This includes dates that correspond to normal day-of-week restrictions as listed in `restrictedDays`.",
            "key": "restrictedDates",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "transferDateRestriction"
                }
              }
            }
          },
          {
            "description": "The service only knows [bank holidays](https://www.federalreserve.gov/aboutthefed/k8.htm) for about two to four years in advance. This date is the end of that known holiday schedule, although the requested dates may extend well beyond this date. Any dates in the response beyond this date may omit holidays but may include other restricted dates based on the financial institution's normal scheduled closures such as Saturdays and Sundays.",
            "key": "accuracyEndsOn",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date"
                }
              }
            }
          }
        ]
      }
    },
    "transferDateRestriction": {
      "description": "A date where a transfer restriction occurs, and the `reason` it is restricted. If the `reason` is `holiday`, `closure` and the transfer is an ACH transfer, the object also contains either a `debitOn` or `creditOn` date or both.",
      "name": "transferDateRestriction",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The date that a transfers restriction occurs, is in the [ISO 8601 Date](https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates) format, `yyyy-mm-dd`.",
            "key": "occursOn",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date"
              }
            }
          },
          {
            "description": "Indicates why this date is restricted.",
            "key": "reason",
            "valueType": {
              "type": "id",
              "value": "transferDateRestrictionType"
            }
          },
          {
            "description": "The date the local financial institution account is credited in [RFC 3339 `YYYY-MM-DD`](https://tools.ietf.org/html/rfc3339) date format. This is derived from the `date` based on the `risk` level. The credit-on date normally falls one business day after the restricted `date`. This property is only returned if the payment `type` is `achDebit` or `ach`.",
            "key": "creditOn",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date"
                }
              }
            }
          },
          {
            "description": "The date the local financial institution account is debited in [RFC 3339 `YYYY-MM-DD`](https://tools.ietf.org/html/rfc3339) date format. This is derived from the `date` based on the `risk` level and the transfer direction (`achDebit` or `achCredit`). The debit-on date normally falls one to three business days before the restricted `date`. This property is only returned if the payment `type` is `achCredit` or `ach`.",
            "key": "debitOn",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date"
                }
              }
            }
          }
        ]
      }
    },
    "checkNumberRange": {
      "description": "A numeric range for a checking account check number.",
      "name": "checkNumberRange",
      "shape": {
        "type": "object",
        "extends": [
          "positiveIntegerRange"
        ],
        "properties": []
      }
    },
    "transactionFields": {
      "description": "Common fields of the transaction resource used to build other model schemas.",
      "name": "transactionFields",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "This transaction's unique identifier.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[-_:,.~$a-zA-Z0-9]{6,128}$",
                "minLength": 6,
                "maxLength": 128
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The transaction type. If the `type` is `debit` or `credit`, the `subtype` conveys further transaction type details.",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "transactionType"
            }
          },
          {
            "description": "The transaction's kind of debit or credit.",
            "key": "subtype",
            "valueType": {
              "type": "id",
              "value": "transactionSubType"
            }
          },
          {
            "description": "The date of the transaction in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) `date` format. This is derived and immutable.",
            "key": "occurredOn",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The date when the transaction occurred in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) `date` format. This is derived and immutable.<br>**Warning**: The property `createdOn` was deprecated on version `v2.1.0` of the schema. Use the `occurredOn` property instead. `createdOn` will be removed on version `v3.0.0` of the schema.",
            "key": "createdOn",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date"
                }
              }
            },
            "availability": "Deprecated",
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The date when this transaction was posted (cleared and applied to the account balance) in [RFC 3339](https://tools.ietf.org/html/rfc3339) date `YYYY-MM-DD` format, UTC. This is derived and immutable and only present if `posted` is `true`.<br>**Warning**: The property `postedOn` was deprecated on version `v2.1.0` of the schema. Use the `occurredOn` property instead. `postedOn` will be removed on version `v3.0.0` of the schema.",
            "key": "postedOn",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date"
                }
              }
            },
            "availability": "Deprecated",
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The transaction amount in dollars. This value is negative if the transaction is a debit and positive if it is a credit.",
            "key": "amount",
            "valueType": {
              "type": "id",
              "value": "creditOrDebitValue"
            }
          },
          {
            "description": "If `true`, the transaction has been posted (cleared) and applied to the account. If `false`, the transaction is still pending and might be canceled. `posted` is only valid for credit and debit transactions and omitted for balance transactions.",
            "key": "posted",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "The account's running current balance as of this transaction. The `balance` may be omitted if the request includes filters which preclude the inclusion of a running balance.",
            "key": "balance",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "creditOrDebitValue"
              }
            }
          },
          {
            "description": "The user-settable transaction memo.",
            "key": "memo",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 128
                }
              }
            }
          },
          {
            "description": "The transaction description assigned by the transaction cleansing service.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 128
                }
              }
            }
          },
          {
            "description": "The transaction category, if assigned.",
            "key": "category",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "transactionCategorization"
              }
            }
          },
          {
            "key": "merchant",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "transactionMerchant"
              }
            }
          },
          {
            "key": "check",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "transactionCheck"
              }
            }
          }
        ]
      }
    },
    "transactionMerchant": {
      "description": "Describes the merchant associated with a transaction.",
      "name": "transactionMerchant",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The merchant\\'s name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 32
                }
              }
            }
          },
          {
            "description": "The merchant's website URL.",
            "key": "website_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uri-reference",
                  "maxLength": 400
                }
              }
            }
          },
          {
            "description": "The optional URL of the merchant's logo. This image must be an image resource (SVG, PNG, GIF, JPEG image) that does not require any authentication. The URL may contain query parameters.",
            "key": "logo_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uri-reference",
                  "maxLength": 400
                }
              }
            }
          }
        ]
      }
    },
    "transactionCheck": {
      "description": "Describes a check associated with a transaction for a checking account. This object is only present if the transaction `type` is `debit` and the `subtype` is `check`.",
      "name": "transactionCheck",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The check number.",
            "key": "number",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 1
              }
            }
          },
          {
            "description": "The URL for downloading the image of the front of the check.",
            "key": "imageFront_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uri-reference",
                  "maxLength": 400
                }
              }
            }
          },
          {
            "description": "The URL for downloading the image of the front of the check.",
            "key": "imageBack_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uri-reference",
                  "maxLength": 400
                }
              }
            }
          }
        ]
      }
    },
    "transactionCategorization": {
      "description": "The transaction categorization.",
      "name": "transactionCategorization",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "label",
            "valueType": {
              "type": "id",
              "value": "transactionCategoryLabel"
            }
          },
          {
            "description": "The unique ID of this transaction's category.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[-_:.~$a-zA-Z0-9]{1,32}$",
                "minLength": 1,
                "maxLength": 32
              }
            },
            "propertyAccess": "READ_ONLY"
          }
        ]
      }
    },
    "transactionCategoryLabel": {
      "description": "The label of a transaction category, such as `\"Shopping\"`, `\"Deposit\"`, `\"Bill\"`, `\"Transfer\"`, or `\"Other\"`.",
      "name": "transactionCategoryLabel",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "minLength": 1,
            "maxLength": 64
          }
        }
      }
    },
    "transactionType": {
      "description": "Distinguishes between balance, debit, or credit transactions.\n\n<strong><code>transactionType</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>balance</code></strong></td><td>Balance: <p>A pseudo-transaction that conveys the account balance.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>debit</code></strong></td><td>Debit: <p>A debit against the account.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>credit</code></strong></td><td>Credit: <p>A credit transaction.</p>\n</td>\n    </tr>\n</table>\n\n",
      "name": "transactionType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "balance"
          },
          {
            "value": "debit"
          },
          {
            "value": "credit"
          }
        ]
      }
    },
    "transactionSubType": {
      "description": "If the type is `debit` or `credit`, the subtype conveys further transaction type details.\n\n<strong><code>transactionSubType</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>check</code></strong></td><td>Check: <p>A check drawn from a checking account.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>other</code></strong></td><td>Other: <p>Some other transaction type.</p>\n</td>\n    </tr>\n</table>\n\n",
      "name": "transactionSubType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "check"
          },
          {
            "value": "other"
          }
        ]
      }
    },
    "transactionItem": {
      "description": "Summary representation of a transaction resource in transactions collections.",
      "name": "transactionItem",
      "shape": {
        "type": "object",
        "extends": [
          "abstractBody",
          "transactionFields"
        ],
        "properties": []
      }
    },
    "transactions": {
      "description": "Collection of transactions. The items in the collection are ordered in the `items` array. The response object may contain the `nextPage_url` pagination link.",
      "name": "transactions",
      "shape": {
        "type": "object",
        "extends": [
          "abstractPagedBody"
        ],
        "properties": [
          {
            "description": "An array containing a page of transaction items.",
            "key": "items",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "transactionItem"
              }
            }
          },
          {
            "description": "The total number of transactions which satisfy the request filters. This is optional and only included if the service can calculate it.",
            "key": "count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "incompleteTransactions": {
      "description": "Response when requesting transactions that are not yet available.",
      "name": "incompleteTransactions",
      "shape": {
        "type": "object",
        "extends": [
          "abstractBody"
        ],
        "properties": [
          {
            "description": "Pass this value as the as the `?retryCount=` parameter with the next retry of the [`listTransactions`](#op-listTransactions) operation.",
            "key": "retryCount",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 1,
                "maximum": 10
              }
            }
          }
        ]
      }
    },
    "transactionCategoryType": {
      "description": "Classifies a transaction category as applying to either debit or credit transactions.\n\n<strong><code>transactionCategoryType</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>credit</code></strong></td><td>Credit: <p>This transaction category applies to credit (expense) transactions.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>debit</code></strong></td><td>Debit: <p>This transaction category applies to debit (income) transactions.</p>\n</td>\n    </tr>\n</table>\n\n",
      "name": "transactionCategoryType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "credit"
          },
          {
            "value": "debit"
          }
        ]
      }
    },
    "transactionCategory": {
      "description": "Representation of transaction category resources.",
      "name": "transactionCategory",
      "shape": {
        "type": "object",
        "extends": [
          "abstractBody",
          "transactionCategorization"
        ],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "transactionCategoryType"
            }
          }
        ]
      }
    },
    "transactionCategories": {
      "description": "Collection of transaction categories. The list contains both financial institution defined immutable categories and customer defined categories.",
      "name": "transactionCategories",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "An array containing transaction category items.",
            "key": "items",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "transactionCategory"
              }
            }
          }
        ]
      }
    },
    "transferSchedule": {
      "description": "The scheduled date when the transfer should be completed, the recurrence, if any, and other derived dates based on the scheduled date.\n\nFor recurring transfer schedules, `endsOn`, `count`, and `amountLimit` are mutually exclusive.",
      "name": "transferSchedule",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The date the the customer scheduled the transfer to occur in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) `date` format.",
            "key": "scheduledOn",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date"
                }
              }
            }
          },
          {
            "key": "recurrenceType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "transferRecurrenceType"
              }
            }
          },
          {
            "key": "frequency",
            "valueType": {
              "type": "id",
              "value": "transferFrequency"
            }
          },
          {
            "description": "The optional date when the recurring transfer schedule ends, in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Subsequent recurring transfers may be scheduled up to and including this date, but not after. This property is ignored if `frequency` is `once`.",
            "key": "endsOn",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date"
                }
              }
            }
          },
          {
            "description": "For recurring schedules (`frequency` is not `once`), this is the total number of transfers to make, including the first transfer. This property is ignored if `frequency` is `once`.",
            "key": "count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 1,
                  "default": 1
                }
              }
            }
          },
          {
            "description": "For recurring schedules (`frequency` is not `once`), this is the total dollar amount limit including the first transfer. No transfers are scheduled if they would exceed this amount. This property is ignored if `frequency` is `once`.",
            "key": "amountLimit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "monetaryValue"
              }
            }
          }
        ]
      }
    },
    "transferItemSchedule": {
      "description": "A transfer's schedule: when the transfer is scheduled, its recurrence properties, and derived credit and debit dates.",
      "name": "transferItemSchedule",
      "shape": {
        "type": "object",
        "extends": [
          "transferSchedule"
        ],
        "properties": [
          {
            "description": "The effective date the transfer is scheduled to debit the source account, in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) `date` format. This is derived from the `scheduledOn` date, based on the financial institution's transfer rules.",
            "key": "debitsOn",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date"
                }
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The effective the transfer is scheduled to credit the target account, in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) `date` format. This is derived from the `scheduledOn` date, based on the financial institution's transfer rules.",
            "key": "creditsOn",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date"
                }
              }
            },
            "propertyAccess": "READ_ONLY"
          }
        ]
      }
    },
    "transferAccountReference": {
      "description": "A reference to a banking account used within an account to account transfer. This object may be set from an account's `account.reference` object.",
      "name": "transferAccountReference",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique ID of a banking account.",
            "key": "id",
            "valueType": {
              "type": "id",
              "value": "resourceId"
            }
          },
          {
            "description": "The human-readable label for this account. This is either the `nickname` (if assigned for the current customer), or the `product.label` concatenated with the `maskedNumber`.",
            "key": "label",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 80
                }
              }
            }
          },
          {
            "description": "The product type of the account.",
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "productType"
              }
            }
          },
          {
            "description": "Indicates where an account is held.",
            "key": "location",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "accountLocation"
              }
            }
          }
        ]
      }
    },
    "transferFields": {
      "description": "Common fields of the transfer resource used to build other model schemas.",
      "name": "transferFields",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The amount of money to transfer between accounts.",
            "key": "amount",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "monetaryValue"
              }
            }
          },
          {
            "description": "The source account where the funds are withdrawn.",
            "key": "sourceAccount",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "transferAccountReference"
              }
            }
          },
          {
            "description": "The target account where the funds are deposited.",
            "key": "targetAccount",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "transferAccountReference"
              }
            }
          },
          {
            "description": "A customer-defined memo to describe the transfer.",
            "key": "memo",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 128
                }
              }
            }
          }
        ]
      }
    },
    "newTransfer": {
      "description": "Representation used to create a new transfer.",
      "name": "newTransfer",
      "shape": {
        "type": "object",
        "extends": [
          "abstractBody",
          "transferFields"
        ],
        "properties": [
          {
            "description": "When the transfer should occur and any recurrence.",
            "key": "schedule",
            "valueType": {
              "type": "id",
              "value": "transferSchedule"
            }
          }
        ]
      }
    },
    "transferPatch": {
      "description": "Representation used to patch an existing transfer using the [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7396) format and processing rules.",
      "name": "transferPatch",
      "shape": {
        "type": "object",
        "extends": [
          "abstractBody",
          "transferFields"
        ],
        "properties": [
          {
            "description": "When the transfer should occur and any recurrence.",
            "key": "schedule",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "transferSchedule"
              }
            }
          }
        ]
      }
    },
    "transferState": {
      "description": "The state of a transfer resource.\n\n<strong><code>transferState</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>unscheduled</code></strong></td><td>Unscheduled: <p>A transfer which is not ready to be queued for processing</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>pendingApproval</code></strong></td><td>Pending Approval: <p>A transfer which is awaiting approval before it can be queued for processing</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>scheduled</code></strong></td><td>Scheduled: <p>A transfer which has been queued for processing</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>processing</code></strong></td><td>Processing: <p>A transfer which is being processed</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>processed</code></strong></td><td>Processed: <p>A transfer which has completed processing</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>failed</code></strong></td><td>Failed: <p>A transfer which has cannot be processed or failed while processing</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>other</code></strong></td><td>Other: <p>A transfer which is in some other state</p>\n</td>\n    </tr>\n</table>\n\n",
      "name": "transferState",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "unscheduled"
          },
          {
            "value": "pendingApproval"
          },
          {
            "value": "scheduled"
          },
          {
            "value": "processing"
          },
          {
            "value": "processed"
          },
          {
            "value": "failed"
          },
          {
            "value": "other"
          }
        ]
      }
    },
    "TransferItemId": {
      "description": "The unique identifier for this transfer resource. This is an immutable opaque string.",
      "name": "TransferItemId",
      "shape": {
        "type": "object",
        "extends": [
          "readOnlyResourceId"
        ],
        "properties": []
      }
    },
    "TransferItemState": {
      "description": "The state of a transfer resource.\n\n<strong><code>transferState</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>unscheduled</code></strong></td><td>Unscheduled: <p>A transfer which is not ready to be queued for processing</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>pendingApproval</code></strong></td><td>Pending Approval: <p>A transfer which is awaiting approval before it can be queued for processing</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>scheduled</code></strong></td><td>Scheduled: <p>A transfer which has been queued for processing</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>processing</code></strong></td><td>Processing: <p>A transfer which is being processed</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>processed</code></strong></td><td>Processed: <p>A transfer which has completed processing</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>failed</code></strong></td><td>Failed: <p>A transfer which has cannot be processed or failed while processing</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>other</code></strong></td><td>Other: <p>A transfer which is in some other state</p>\n</td>\n    </tr>\n</table>\n\n",
      "name": "TransferItemState",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "unscheduled"
          },
          {
            "value": "pendingApproval"
          },
          {
            "value": "scheduled"
          },
          {
            "value": "processing"
          },
          {
            "value": "processed"
          },
          {
            "value": "failed"
          },
          {
            "value": "other"
          }
        ]
      }
    },
    "transferItem": {
      "description": "Summary representation of a transfer resource in transfers collections. To fetch the full representation of this transfer, use the [`getTransfer`](#op-getTransfer) operation, passing this item's `id` field as the `transferId` path parameter.",
      "name": "transferItem",
      "shape": {
        "type": "object",
        "extends": [
          "transferFields",
          "timestampFields"
        ],
        "properties": [
          {
            "description": "The unique identifier for this transfer resource. This is an immutable opaque string.",
            "key": "id",
            "valueType": {
              "type": "id",
              "value": "TransferItemId"
            }
          },
          {
            "description": "When the transfer should occur and any recurrence.",
            "key": "schedule",
            "valueType": {
              "type": "id",
              "value": "transferItemSchedule"
            }
          },
          {
            "description": "The state of this transfer resource.",
            "key": "state",
            "valueType": {
              "type": "id",
              "value": "TransferItemState"
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The date/time the transfer was processed.",
            "key": "processedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The full name of the banking customer who last updated the transfer.",
            "key": "updatedBy",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 48
                }
              }
            },
            "propertyAccess": "READ_ONLY"
          }
        ]
      }
    },
    "transfer": {
      "description": "Representation of a transfer resource.",
      "name": "transfer",
      "shape": {
        "type": "object",
        "extends": [
          "abstractBody",
          "transferItem"
        ],
        "properties": []
      }
    },
    "transfers": {
      "description": "Collection of transfers. The items in the collection are ordered in the `items` array. The response object may contain the `nextPage_url` pagination link..",
      "name": "transfers",
      "shape": {
        "type": "object",
        "extends": [
          "abstractPagedBody"
        ],
        "properties": [
          {
            "description": "An array containing a page of transfer items.",
            "key": "items",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "transferItem"
              }
            }
          },
          {
            "description": "The number of transfers that meet the filters in the `listTransfers` operation. This is optional and only included if the service can calculate it efficiently.",
            "key": "count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "productType": {
      "description": "The type (or category) of bank account.\n\n<strong><code>productType</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>savings</code></strong></td><td>Savings: <p>Savings Account</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>checking</code></strong></td><td>Checking: <p>Checking Account</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>cd</code></strong></td><td>CD: <p>Certificate of Deposit Account</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>ira</code></strong></td><td>IRA: <p>Individual Retirement Account</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>loan</code></strong></td><td>Loan: <p>Loan Account</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>creditCard</code></strong></td><td>Credit Card: <p>Credit Card Account</p>\n</td>\n    </tr>\n</table>\n\n",
      "name": "productType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "savings"
          },
          {
            "value": "checking"
          },
          {
            "value": "cd"
          },
          {
            "value": "ira"
          },
          {
            "value": "loan"
          },
          {
            "value": "creditCard"
          }
        ]
      }
    },
    "problemResponse": {
      "description": "API problem or error response, as per [RFC 7807 application/problem+json](https://tools.ietf.org/html/rfc7807).",
      "name": "problemResponse",
      "shape": {
        "type": "object",
        "extends": [
          "abstractBody",
          "apiProblem"
        ],
        "properties": []
      }
    },
    "transferFrequency": {
      "description": "For recurring transfers, the interval at which the money movement recurs.\n\n<strong><code>transferFrequency</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>once</code></strong></td><td>Once: <p>Transfer does not repeat</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>occasional</code></strong></td><td>Occasional: <p>Transfer recurs but without a new scheduled date</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>daily</code></strong></td><td>Daily: <p>Repeat daily on business days</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>weekly</code></strong></td><td>Weekly: <p>Repeat weekly</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>biweekly</code></strong></td><td>biweekly: <p>Repeat every two weeks (26 times a year)</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>semimonthly</code></strong></td><td>Semimonthly: <p>Repeat twice a month (24 times a year)</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>monthly</code></strong></td><td>Monthly: <p>Repeat monthly</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>monthlyFirstDay</code></strong></td><td>Monthly First Day: <p>Repeat on the first business day of the month</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>monthlyLastDay</code></strong></td><td>Monthly Last Day: <p>Repeat on the last business day of the month</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>bimonthly</code></strong></td><td>Bimonthly: <p>Repeat every other month</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>quarterly</code></strong></td><td>Quarterly: <p>Repeat quarterly (four times a year)</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>semiyearly</code></strong></td><td>Semiyearly: <p>Repeat every six months (twice a year)</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>yearly</code></strong></td><td>Yearly: <p>Repeat once every year</p>\n</td>\n    </tr>\n</table>\n\n",
      "name": "transferFrequency",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "once"
          },
          {
            "value": "occasional"
          },
          {
            "value": "daily"
          },
          {
            "value": "weekly"
          },
          {
            "value": "biweekly"
          },
          {
            "value": "semimonthly"
          },
          {
            "value": "monthly"
          },
          {
            "value": "monthlyFirstDay"
          },
          {
            "value": "monthlyLastDay"
          },
          {
            "value": "bimonthly"
          },
          {
            "value": "quarterly"
          },
          {
            "value": "semiyearly"
          },
          {
            "value": "yearly"
          }
        ]
      }
    },
    "achAccountRisk": {
      "description": "Describes the risk level of a payment batch's settlement account.\n\n<strong><code>achAccountRisk</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>early</code></strong></td><td>Early: <p>The account is debited three business days before the ACH transfer&#39;s effective date. The account balance is also checked for sufficient funds before the account is debited. A risk limit may apply for commercial accounts with an <code>early</code> risk level.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>normal</code></strong></td><td>Normal: <p>The account is debited two business days before the ACH transfer&#39;s effective date. The account balance is also checked for sufficient funds before the account is debited. A risk limit may apply for commercial accounts with a <code>normal</code> risk level.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>float</code></strong></td><td>Float: <p>The account is debited on the ACH transfer&#39;s effective date. The account balance is not checked for sufficient funds before the account is debited. A risk limit applies for commercial accounts with a <code>float</code> risk level.</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>sameDay</code></strong></td><td>Same Day: <p>The account is credited on the ACH transfer&#39;s effective day. The account balance is not checked because <code>sameDay</code> is used for credit. A risk limit and per-transaction limit applies.</p>\n</td>\n    </tr>\n</table>\n\n",
      "name": "achAccountRisk",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "early"
          },
          {
            "value": "normal"
          },
          {
            "value": "float"
          },
          {
            "value": "sameDay"
          }
        ]
      }
    },
    "dateRange": {
      "description": "A date range, supporting inclusive or exclusive endpoints. Dates ranges use dates expressed in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) `date` format. The value may have the following forms: <ul> <li>`YYYY-MM-DD` match the date exactly; equivalent to matching dates in the range `[YYYY-MM-DD,YYYY-MM-DD]`</li> <li>`[YYYY-MM-DD,YYYY-MM-DD]` between two dates, inclusive of the endpoints</li> <li>`(YYYY-MM-DD,YYYY-MM-DD)` between two dates, exclusive of the endpoints</li> <li>`[YYYY-MM-DD,]` on or after the date</li> <li>`(YYYY-MM-DD,)` after the date</li> <li>`[,YYYY-MM-DD]` before or on the date</li> <li>`(,YYYY-MM-DD)` before the date</li> </ul>",
      "name": "dateRange",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "regex": "^\\d{4}-\\d{2}-\\d{2}|([[(](\\d{4}-\\d{2}-\\d{2},(\\d{4}-\\d{2}-\\d{2})?|,\\d{4}-\\d{2}-\\d{2})[)\\]])$"
          }
        }
      }
    },
    "amountRange": {
      "description": "A monetary amount range, supporting inclusive or exclusive endpoints. The value may have the following forms: <ul> <li>`1200.50` match the dollar amount 1,200.50 exactly</li> <li>`[1000.00,1200.00)` matches items where `1000.00 <= amount < 1200.00`</li> <li>`[1000.00,1199.99]` matches items where `1000.00 <= amount <= 1199.99`</li> <li>`[999.99,1200.00]` matches items where `999.99 < amount < 1200.00`</li> <li>`[1200.50,]` matches items where `amount >= 1200.50`</li> <li>`(1200.50,)` matches items where `amount >= 1200.50`</li> <li>`[,1200.50]` matches items where `amount <= 1200.50`</li> <li>`(,1200.50)` matches items where `amount < 1200.50`</li> </ul>",
      "name": "amountRange",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "regex": "^((\\d+(\\.\\d{0,2})?)|([\\[\\(](((\\d+(\\.\\d{0,2})?),((\\d+(\\.\\d{0,2})?))?)|(,(\\d+(\\.\\d{0,2})?)))[\\]\\)]))$"
          }
        }
      }
    },
    "resourceId": {
      "description": "The unique, opaque system identifier for a resource. This case-sensitive ID is also used as path parameters in URLs or in other properties or parameters that reference a resource by ID rather than URL.",
      "name": "resourceId",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "regex": "^[-_:.~$a-zA-Z0-9]+$",
            "minLength": 6,
            "maxLength": 48
          }
        }
      }
    },
    "abstractBody": {
      "description": "An abstract schema used to define other request and response body model schemas.",
      "name": "abstractBody",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "abstractPagedBody": {
      "description": "An abstract schema used to define paginated collections of resources. Collection classes which extend this schema define an array of `items` which represent a page of data.",
      "name": "abstractPagedBody",
      "shape": {
        "type": "object",
        "extends": [
          "abstractBody",
          "abstractPagedBodyFields"
        ],
        "properties": [
          {
            "description": "The opaque cursor that specifies the starting location of this page of items.",
            "key": "start",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 256
                }
              }
            }
          }
        ]
      }
    },
    "readOnlyResourceId": {
      "description": "The unique, opaque system-assigned identifier for a resource. This case-sensitive ID is also used in URLs as path parameters or in other properties or parameters that reference a resource by ID rather than URL. Resource IDs are immutable.",
      "name": "readOnlyResourceId",
      "shape": {
        "type": "object",
        "extends": [
          "resourceId"
        ],
        "properties": []
      }
    },
    "productReference": {
      "description": "A reference to a banking product.",
      "name": "productReference",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The type of account.",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "productType"
            }
          },
          {
            "description": "The product's product code. Codes are unique to the financial institution.",
            "key": "code",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 16
              }
            }
          },
          {
            "description": "A human-readable label for this banking product.",
            "key": "label",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 48
              }
            }
          },
          {
            "description": "A human-readable description of this banking product.",
            "key": "description",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "markdown",
                "maxLength": 400
              }
            }
          }
        ]
      }
    },
    "creditOrDebitValue": {
      "description": "The monetary value representing a credit (positive amounts with no prefix or a `+` prefix) or debit (negative amounts with a `-` prefix). The numeric value is  represented as a string so that it can be exact with no loss of precision.<br>The schema `creditOrDebitValue` was added on version `0.4.0` of the API.",
      "name": "creditOrDebitValue",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "regex": "^(-|\\+)?(0|[1-9][0-9]*)\\.[0-9][0-9]$"
          }
        }
      }
    },
    "readOnlyTimestamp": {
      "description": "A readonly or derived timestamp (an instant in time) formatted in [RFC 3339](https://tools.ietf.org/html/rfc3339) `date-time` UTC format: `YYYY-MM-DDThh:mm:ss.sssZ`.<br>The schema `readOnlyTimestamp` was added on version `0.4.0` of the API.",
      "name": "readOnlyTimestamp",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "format": "date-time",
            "minLength": 20,
            "maxLength": 30
          }
        }
      }
    },
    "address": {
      "description": "A postal address that can hold a US address or an international (non-US) postal addresses.",
      "name": "address",
      "shape": {
        "type": "object",
        "extends": [
          "addressFields"
        ],
        "properties": [
          {
            "description": "The state, district, or outlying area of the postal address. This is required if `countryCode` is not `US`. `regionCode` and `regionName` are mutually exclusive.",
            "key": "regionName",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "minLength": 2,
                  "maxLength": 20
                }
              }
            }
          },
          {
            "description": "The state, district, or outlying area of the postal address. This is required if `countryCode` is `US` `regionCode` and `regionName` are mutually exclusive.",
            "key": "regionCode",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "minLength": 2,
                  "maxLength": 2
                }
              }
            }
          },
          {
            "description": "The postal code, which varies in format by country. If `countryCode` is `US`, this should be a five digit US ZIP code or ten character ZIP+4.",
            "key": "postalCode",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 5,
                "maxLength": 10
              }
            }
          },
          {
            "description": "The [ISO-3611 alpha-2](https://www.iso.org/glossary-for-iso-3166.html) value for the country associated with the postal address.",
            "key": "countryCode",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 2,
                "maxLength": 2
              }
            }
          }
        ]
      }
    },
    "positiveIntegerRange": {
      "description": "A positive integer range, supporting inclusive or exclusive endpoints. The value may have the following forms: <ul> <li>`1200` match the integer 1,200 exactly</li> <li>`[1000,1200)` matches items where `1000 <= number < 1200`</li> <li>`[1000,1199]` matches items where`1000 <= number <= 1199`</li> <li>`[999,1200]` matches items where `999 < number < 1200`</li> <li>`[1200,]`  `number >= 1200`</li> <li>`(1200,)` greater than the value: `number >= 1200`</li> <li>`[,1200]` less than or equal to the value: `number <= 1200`</li> <li>`(,1200)` less than the value: `number < 1200`</li> </ul>",
      "name": "positiveIntegerRange",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "regex": "^\\d+|([[(](\\d+,(\\d+)?|,\\d+)[)\\]])$"
          }
        }
      }
    },
    "transferRecurrenceType": {
      "description": "Describes whether the transfer amount in the transfer varies or is fixed when the transfer recurs. This is ignored if the transfer frequency is `once`.\n\n<strong><code>transferRecurrenceType</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>fixed</code></strong></td><td>Fixed: <p>The transfer amounts are the same each time a transfer recurs</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>variable</code></strong></td><td>Variable: <p>The transfer amounts vary and must be entered/verified each time a transfer recurs</p>\n</td>\n    </tr>\n</table>\n\n",
      "name": "transferRecurrenceType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "fixed"
          },
          {
            "value": "variable"
          }
        ]
      }
    },
    "monetaryValue": {
      "description": "The monetary value, supporting only positive amounts. The numeric value is  represented as a string so that it can be exact with no loss of precision.<br>The schema `monetaryValue` was added on version `0.4.0` of the API.",
      "name": "monetaryValue",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "regex": "^(0|[1-9][0-9]*)\\.[0-9][0-9]$"
          }
        }
      }
    },
    "timestampFields": {
      "description": "Timestamps which describe when a resource was created or last updated.",
      "name": "timestampFields",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The date-time when this resource was created, in [RFC 3339](https://tools.ietf.org/html/rfc3339) date-time `YYYY-MM-DDThh:mm:ss.sssZ` format, UTC. This is derived and immutable.",
            "key": "createdAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The date-time when the resource was last updated, in [RFC 3339](https://tools.ietf.org/html/rfc3339) date-time `YYYY-MM-DDThh:mm:ss.sssZ` format, UTC. This is derived and immutable.",
            "key": "updatedAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "propertyAccess": "READ_ONLY"
          }
        ]
      }
    },
    "ApiProblemAttributes": {
      "description": "Additional optional attributes related to the problem. This data conforms to the schema associated with the error type.",
      "name": "ApiProblemAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [],
        "extraProperties": {
          "type": "unknown"
        }
      }
    },
    "apiProblem": {
      "description": "API problem or error, as per [RFC 7807 application/problem+json](https://tools.ietf.org/html/rfc7807).",
      "name": "apiProblem",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A [URI reference (RFC3986)](https://tools.ietf.org/html/rfc3986) that identifies the problem type. If present, this is the URL of human-readable HTML documentation for the problem type. When this member is not present, its value is assumed to be `\"about:blank\"`.\n",
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uri-reference"
                }
              }
            }
          },
          {
            "description": "A short, human-readable summary of the problem type. The title is usually the same for all problem with the same `type`.\n",
            "key": "title",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The [HTTP status code](https://datatracker.ietf.org/doc/html/rfc7231#section-6) for this occurrence of the problem.\n",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 100,
                  "maximum": 599
                }
              }
            }
          },
          {
            "description": "A human-readable explanation specific to this occurrence of the problem.\n",
            "key": "detail",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A URI reference that identifies the specific occurrence of the problem. This is the URI of an API resource that the problem is related to, with a unique error correlation ID URI fragment\n",
            "key": "instance",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uri-reference"
                }
              }
            }
          },
          {
            "description": "The unique identifier for this problem. This is an immutable opaque string.",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "readOnlyResourceId"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The timestamp when the problem occurred, in [RFC 3339](https://tools.ietf.org/html/rfc3339) date-time `YYYY-MM-DDThh:mm:ss.sssZ` format, UTC.",
            "key": "occurredAt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "readOnlyTimestamp"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "Optional root-causes if there are multiple problems in the request or API call processing.",
            "key": "problems",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "apiProblem"
                }
              }
            }
          },
          {
            "description": "Additional optional attributes related to the problem. This data conforms to the schema associated with the error type.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ApiProblemAttributes"
              }
            }
          }
        ]
      }
    },
    "achSecCode": {
      "description": "The ACH transfer type.\n\n<strong><code>achSecCode</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>arc</code></strong></td><td>Accounts Receivable</td>\n    </tr>\n<tr>\n    <td><strong><code>boc</code></strong></td><td>Back Office Conversion</td>\n    </tr>\n<tr>\n    <td><strong><code>ccd</code></strong></td><td>Credit or Debit</td>\n    </tr>\n<tr>\n    <td><strong><code>cie</code></strong></td><td>Customer-Initiated</td>\n    </tr>\n<tr>\n    <td><strong><code>ctx</code></strong></td><td>Corporate Trade Exchange</td>\n    </tr>\n<tr>\n    <td><strong><code>pop</code></strong></td><td>Point of Purchase</td>\n    </tr>\n<tr>\n    <td><strong><code>ppd</code></strong></td><td>Prearranged Payment and Deposit</td>\n    </tr>\n<tr>\n    <td><strong><code>rck</code></strong></td><td>Re-Presented Check</td>\n    </tr>\n<tr>\n    <td><strong><code>tel</code></strong></td><td>Telephone-initiated</td>\n    </tr>\n<tr>\n    <td><strong><code>web</code></strong></td><td>Internet-initiated/Mobile</td>\n    </tr>\n</table>\n\n",
      "name": "achSecCode",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "arc"
          },
          {
            "value": "boc"
          },
          {
            "value": "ccd"
          },
          {
            "value": "cie"
          },
          {
            "value": "ctx"
          },
          {
            "value": "pop"
          },
          {
            "value": "ppd"
          },
          {
            "value": "rck"
          },
          {
            "value": "tel"
          },
          {
            "value": "web"
          }
        ]
      }
    },
    "institutionId": {
      "description": "The unique immutable identifier of a financial institution.",
      "name": "institutionId",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "regex": "^[A-Z0-9_]{2,8}$",
            "minLength": 2,
            "maxLength": 9
          }
        }
      }
    },
    "challengeToken": {
      "description": "The value of the identity `Challenge` request header that the client must send when retrying an operation which required a challenge.",
      "name": "challengeToken",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "regex": "^[-_:.~%$a-zA-Z0-9]{6,255}$",
            "minLength": 8,
            "maxLength": 255
          }
        }
      }
    },
    "requiredIdentityChallenge": {
      "description": "A request from the service for the user to verify their identity. This contains a challenge ID, the corresponding operation ID, and a list of challenge factors for identity verification. The user must complete one of these challenge factors to satisfy the challenge. This schema defines the attributes in the 401 [Unauthorized problem response](#schema-apiProblem) when the 401 problem type name is `challengeRequired`. See the \"Challenge API\" for details.",
      "name": "requiredIdentityChallenge",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the API operation for which the user must verify their identity. This is passed when starting a challenge factor or when validating the identity challenge responses.",
            "key": "x-fern-sdk-method-name",
            "valueType": {
              "type": "id",
              "value": "readOnlyResourceId"
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The unique ID of this challenge instance. This is an opaque string. This is passed when starting a challenge factor or when validating the identity challenge responses.",
            "key": "challengeId",
            "valueType": {
              "type": "id",
              "value": "readOnlyResourceId"
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "A list of challenge factors. The user must complete one of these challenge factors. The `labels` in each factor identify one or more channels the user may use, such as a list of email addresses the system may use to send a one-time passcode to the user. ***Note**: The same channel may be used by multiple factors in the array of factors. For example, the user's primary mobile phone number may be used for both an `sms` factor and a `voice` factor.",
            "key": "factors",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "challengeFactor"
              }
            }
          }
        ]
      }
    },
    "abstractPagedBodyFields": {
      "description": "Common properties of collection page responses.",
      "name": "abstractPagedBodyFields",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The number of items requested for this page response. The length of the `items` array may be less that `limit`.",
            "key": "limit",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0,
                "default": 100
              }
            }
          },
          {
            "description": "The URL of the next page of resources. If this URL is omitted, there are no more resources in the collection.",
            "key": "nextPage_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uri-reference",
                  "maxLength": 8000
                }
              }
            },
            "propertyAccess": "READ_ONLY"
          }
        ]
      }
    },
    "addressFields": {
      "description": "Properties of a simple address, used to compose other addresses.",
      "name": "addressFields",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The first line of the postal address. In the US, this typically includes the building number and street name.",
            "key": "address1",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 35
              }
            }
          },
          {
            "description": "The second line of the street address. This should only be used if it has a value. Typical values include building numbers, suite numbers, and other identifying information beyond the first line of the postal address.",
            "key": "address2",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 35
                }
              }
            }
          },
          {
            "description": "The city/town/municipality of the address.",
            "key": "locality",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 20
              }
            }
          },
          {
            "description": "The [ISO-3611 alpha-2](https://www.iso.org/glossary-for-iso-3166.html) value for the country associated with the postal address.",
            "key": "countryCode",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 2,
                "maxLength": 2
              }
            }
          }
        ]
      }
    },
    "challengeFactor": {
      "description": "An challenge factor. See [`requiredIdentityChallenge`](#schema-requiredIdentityChallenge) for multiple examples.",
      "name": "challengeFactor",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "challengeFactorType"
            }
          },
          {
            "description": "A list of text label which identifies the channel(s) though which the user completes the challenge. For an `sms` or `voice` challenge, the only label item is the last four digits of the corresponding phone number. For an `email` challenge, each label is the masked email address.",
            "key": "labels",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 40
                  }
                }
              }
            }
          },
          {
            "key": "securityQuestions",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "challengeSecurityQuestions"
              }
            }
          }
        ]
      }
    },
    "challengeFactorType": {
      "description": "The name of challenge factor.\n\n<strong><code>challengeFactorType</code></strong> strings may have one of the following\n[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):\n\n<table>\n<tr>\n  <th>Value</th><th>Description</th>\n</tr>\n\n<tr>\n    <td><strong><code>sms</code></strong></td><td>SMS: <p>One-time passcode sent to the primary mobile phone number</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>email</code></strong></td><td>Email: <p>One-time passcode sent to the primary email address</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>voice</code></strong></td><td>Voice: <p>One-time passcode communicated via automated voice phone call</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>authenticatorToken</code></strong></td><td>authenticator Token: <p>One-time passcode issued by a pre-registered hardware device, such as a token key fob, or an authenticator app</p>\n</td>\n    </tr>\n<tr>\n    <td><strong><code>securityQuestions</code></strong></td><td>Security Questions: <p>Prompt with the user&#39;s security questions registered with their security profile</p>\n</td>\n    </tr>\n</table>\n\n",
      "name": "challengeFactorType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "sms"
          },
          {
            "value": "email"
          },
          {
            "value": "voice"
          },
          {
            "value": "securityQuestions"
          },
          {
            "value": "authenticatorToken"
          }
        ]
      }
    },
    "challengeSecurityQuestions": {
      "description": "Describes a `securityQuestions` challenge. This is omitted if the challenge `type` is not `securityQuestions`.",
      "name": "challengeSecurityQuestions",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The array of security questions.",
            "key": "questions",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "challengeSecurityQuestion"
              }
            }
          }
        ]
      }
    },
    "challengeSecurityQuestion": {
      "description": "A single security question within the `questions` array of the [`challengeSecurityQuestions`](#schema-challengeSecurityQuestions)",
      "name": "challengeSecurityQuestion",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique ID of security question prompt. This should be included in the [`challengeVerification`](#schema-challengeVerification) response as the `promptId`.",
            "key": "id",
            "valueType": {
              "type": "id",
              "value": "challengePromptId"
            }
          },
          {
            "description": "The text prompt of this security question.",
            "key": "prompt",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 50
              }
            }
          }
        ]
      }
    },
    "challengePromptId": {
      "description": "The unique ID of a prompt (such as a security question) in a challenge factor.",
      "name": "challengePromptId",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "regex": "^[-_:.~$a-zA-Z0-9]+$",
            "minLength": 1,
            "maxLength": 48
          }
        }
      }
    },
    "AccountsGetParametersSchema": {
      "name": "AccountsGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "internal"
          },
          {
            "value": "external"
          }
        ]
      }
    }
  },
  "subpackages": {
    "subpackage_accounts": {
      "subpackageId": "subpackage_accounts",
      "name": "accounts",
      "endpoints": [
        {
          "auth": true,
          "description": "Return a paginated list of the customer's accounts, consisting of internal accounts at this financial institution and accounts at other financial institutions, if any.",
          "method": "GET",
          "defaultEnvironment": "https://api.apiture.com/banking",
          "environments": [
            {
              "id": "https://api.apiture.com/banking",
              "baseUrl": "https://api.apiture.com/banking"
            }
          ],
          "id": "listAccounts",
          "originalEndpointId": "accounts.listAccounts",
          "name": "List Accounts",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/accounts"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Include only accounts whose `product.type` is in pipe-delimited set. For example, to list only savings, checking, and CD accounts, use <br>`?productType=savings|checking|cd`.",
              "key": "productType",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "productType"
                  }
                }
              }
            },
            {
              "description": "Filter accounts to just a subset of `internal` or `external` accounts (per the `location` property on the [`accountItem`](#schema-accountItem) schema).",
              "key": "location",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "AccountsGetParametersSchema"
                }
              }
            },
            {
              "description": "Filter the result to accounts that have corresponding `true` values in `account.allows`. For example `?allows=transferTo,transferFrom,view` returns only accounts where `account.allows.transferTo`, `account.allows.transferFrom`, and `account.allows.view` are all `true` for the caller.",
              "key": "allows",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "accountAllowsFilter"
                  }
                }
              }
            },
            {
              "description": "The location of the next item in the collection. This is an opaque cursor supplied by the API service. Omit this to start at the beginning of the collection. The client does not define this value; the API services automatically pass the `?start=` parameter on the `nextPage_url`.",
              "key": "start",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 256,
                    "default": ""
                  }
                }
              }
            },
            {
              "description": "The maximum number of items to return in this paged response.",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1000,
                    "default": 100
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "accounts"
              }
            },
            "statusCode": 200,
            "description": "OK. A page from the full list of the customer's accounts. This list contains only accounts that the customer is entitled to access. While the `nextPage_url` property is present in the response, the client can fetch the next page of accounts by performing a `GET` on that URL."
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request. The request body, request headers, and/or query parameters are not well-formed.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/badRequest/v1.0.0`](https://production.api.apiture.com/errors/badRequest/v1.0.0)<br>\n  The request body and/or parameters was not well-formed.\n  Remediation: Correct any syntax or schema errors in the request body or parameters.\n",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 401,
              "description": "Unauthorized. The operation requires authentication but no authentication or insufficient authentication was given.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unauthorized/v1.0.0`](https://production.api.apiture.com/errors/unauthorized/v1.0.0)<br>\n  The request lacks valid authentication credentials for the target resource or operation.\n  Remediation: Authenticate the user and pass the required authorization with the request.\n\n* [`https://production.api.apiture.com/errors/sessionExpired/v1.0.0`](https://production.api.apiture.com/errors/sessionExpired/v1.0.0)<br>\n  The user's session has expired.\n  Remediation: Re-authenticate the user to get a new access token or other authorization.\n\n* [`https://production.api.apiture.com/errors/challengeRequired/v1.0.0`](https://production.api.apiture.com/errors/challengeRequired/v1.0.0)<br>\n  The operation requires a the customer to complete an identity challenge.\n  Remediation: Complete the challenge as per the problem response, and add an additional `Challenge` header to the call.\nThe `attributes` object in the error may have the properties defined by the [`requiredIdentityChallenge` schema](#schema-requiredIdentityChallenge).\n* [`https://production.api.apiture.com/errors/loginIncomplete/v1.0.0`](https://production.api.apiture.com/errors/loginIncomplete/v1.0.0)<br>\n  The user is correctly authenticated but additional actions are required for activating their login session.\n  Remediation: Instruct the user to complete the additional actions to activate their login session.\n\n* [`https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0`](https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0)<br>\n  The user must change their password.\n  Remediation: Instruct the user to change their password or other login credentials.\n\n* [`https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0`](https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0)<br>\n  The CSRF token is invalid.\n  Remediation: The client application is not correctly configured to send CSRF.\n\n* [`https://production.api.apiture.com/errors/challengeBlocked/v1.0.0`](https://production.api.apiture.com/errors/challengeBlocked/v1.0.0)<br>\n  The user has failed challenges too many times and is blocked from attempting more or performing operations which require additional authentication.\n  Remediation: Have the user end their login session and login again.\n\n* [`https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0`](https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0)<br>\n  This operation requires challenge, but the user does not have the necessary registered authentication factors.\n  Remediation: Have the user register one or more challenge security code delivery factors.\n\n* [`https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0`](https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0)<br>\n  The additional on-time `Challenge` header in this request is expired, already used, or otherwise invalid.\n  Remediation: Supply a valid, unexpired, unclaimed `Challenge` header in the request.\n",
              "name": "UnauthorizedError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 403,
              "description": "Forbidden. The authenticated caller is not authorized to perform the requested operation.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/forbidden/v1.0.0`](https://production.api.apiture.com/errors/forbidden/v1.0.0)<br>\n  The user or agent is not allowed to perform this operation; authentication credentials were provided in the request, but the server considers them insufficient to grant access.\n  Remediation: Check the user's permissions and entitlements before attempting the operation.\n\n* [`https://production.api.apiture.com/errors/customerDisabled/v1.0.0`](https://production.api.apiture.com/errors/customerDisabled/v1.0.0)<br>\n  The customer is disabled.\n  Remediation: Have the customer contact the financial institution for support.\n\n* [`https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0`](https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0)<br>\n  The financial institution requires the customer to have anti-malware software installed.\n  Remediation: Direct the user to the software requirements guide to install the correct anti-malware software.\n\n* [`https://production.api.apiture.com/errors/modificationForbidden/v1.0.0`](https://production.api.apiture.com/errors/modificationForbidden/v1.0.0)<br>\n  The customer is properly authenticated but not authorized to create, modify, or delete resources.\n  Remediation: Avoid modification operation for customers with read-only authorization.\n",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity. The request body and/or query parameters were well-formed but otherwise invalid.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unprocessableEntity/v1.0.0`](https://production.api.apiture.com/errors/unprocessableEntity/v1.0.0)<br>\n  The syntax of the request entity is correct but was unable to process the contained instructions.\n  Remediation: Provide a semantically correct request.\n",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/accounts",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "limit": 100,
                  "nextPage_url": "https://production.api.apiture.com/banking/accounts?start=641f62296ecbf1882c84?limit=100?allows=view",
                  "items": [
                    {
                      "id": "bf23bc970b78d27691e8",
                      "label": "Payroll Checking *1008",
                      "nickname": "Payroll Checking",
                      "maskedNumber": "*1008",
                      "product": {
                        "type": "checking",
                        "code": "DDA",
                        "label": "Business Checking",
                        "description": "Basic business checking accounts"
                      },
                      "location": "internal",
                      "allows": {
                        "billPay": false,
                        "mobileCheckDeposit": true,
                        "transferFrom": false,
                        "transferTo": true,
                        "view": true,
                        "viewCards": true,
                        "manageCards": false
                      }
                    },
                    {
                      "id": "b78d27691e8bf23bc970",
                      "label": "College CD *2017",
                      "nickname": "College CD",
                      "maskedNumber": "*2017",
                      "product": {
                        "type": "cd",
                        "code": "CDA",
                        "label": "24 Month CD",
                        "description": "24 Month certificate of deposit"
                      },
                      "location": "internal",
                      "allows": {
                        "billPay": false,
                        "mobileCheckDeposit": false,
                        "transferFrom": false,
                        "transferTo": false,
                        "view": true,
                        "viewCards": true,
                        "manageCards": false
                      }
                    }
                  ],
                  "count": 6
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "limit": 100,
                  "nextPage_url": "https://production.api.apiture.com/banking/accounts?start=641f62296ecbf1882c84?limit=100?allows=view",
                  "items": [
                    {
                      "id": "bf23bc970b78d27691e8",
                      "label": "Payroll Checking *1008",
                      "nickname": "Payroll Checking",
                      "maskedNumber": "*1008",
                      "product": {
                        "type": "checking",
                        "code": "DDA",
                        "label": "Business Checking",
                        "description": "Basic business checking accounts"
                      },
                      "location": "internal",
                      "allows": {
                        "billPay": false,
                        "mobileCheckDeposit": true,
                        "transferFrom": false,
                        "transferTo": true,
                        "view": true,
                        "viewCards": true,
                        "manageCards": false
                      }
                    },
                    {
                      "id": "b78d27691e8bf23bc970",
                      "label": "College CD *2017",
                      "nickname": "College CD",
                      "maskedNumber": "*2017",
                      "product": {
                        "type": "cd",
                        "code": "CDA",
                        "label": "24 Month CD",
                        "description": "24 Month certificate of deposit"
                      },
                      "location": "internal",
                      "allows": {
                        "billPay": false,
                        "mobileCheckDeposit": false,
                        "transferFrom": false,
                        "transferTo": false,
                        "view": true,
                        "viewCards": true,
                        "manageCards": false
                      }
                    }
                  ],
                  "count": 6
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Return details of the customer's internal account.",
          "method": "GET",
          "defaultEnvironment": "https://api.apiture.com/banking",
          "environments": [
            {
              "id": "https://api.apiture.com/banking",
              "baseUrl": "https://api.apiture.com/banking"
            }
          ],
          "id": "getAccount",
          "originalEndpointId": "accounts.getAccount",
          "name": "Get an Account",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/accounts/"
              },
              {
                "type": "pathParameter",
                "value": "accountId"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "account"
              }
            },
            "statusCode": 200,
            "description": "OK. The response is a representation of the customer's account."
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 401,
              "description": "Unauthorized. The operation requires authentication but no authentication or insufficient authentication was given.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unauthorized/v1.0.0`](https://production.api.apiture.com/errors/unauthorized/v1.0.0)<br>\n  The request lacks valid authentication credentials for the target resource or operation.\n  Remediation: Authenticate the user and pass the required authorization with the request.\n\n* [`https://production.api.apiture.com/errors/sessionExpired/v1.0.0`](https://production.api.apiture.com/errors/sessionExpired/v1.0.0)<br>\n  The user's session has expired.\n  Remediation: Re-authenticate the user to get a new access token or other authorization.\n\n* [`https://production.api.apiture.com/errors/challengeRequired/v1.0.0`](https://production.api.apiture.com/errors/challengeRequired/v1.0.0)<br>\n  The operation requires a the customer to complete an identity challenge.\n  Remediation: Complete the challenge as per the problem response, and add an additional `Challenge` header to the call.\nThe `attributes` object in the error may have the properties defined by the [`requiredIdentityChallenge` schema](#schema-requiredIdentityChallenge).\n* [`https://production.api.apiture.com/errors/loginIncomplete/v1.0.0`](https://production.api.apiture.com/errors/loginIncomplete/v1.0.0)<br>\n  The user is correctly authenticated but additional actions are required for activating their login session.\n  Remediation: Instruct the user to complete the additional actions to activate their login session.\n\n* [`https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0`](https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0)<br>\n  The user must change their password.\n  Remediation: Instruct the user to change their password or other login credentials.\n\n* [`https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0`](https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0)<br>\n  The CSRF token is invalid.\n  Remediation: The client application is not correctly configured to send CSRF.\n\n* [`https://production.api.apiture.com/errors/challengeBlocked/v1.0.0`](https://production.api.apiture.com/errors/challengeBlocked/v1.0.0)<br>\n  The user has failed challenges too many times and is blocked from attempting more or performing operations which require additional authentication.\n  Remediation: Have the user end their login session and login again.\n\n* [`https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0`](https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0)<br>\n  This operation requires challenge, but the user does not have the necessary registered authentication factors.\n  Remediation: Have the user register one or more challenge security code delivery factors.\n\n* [`https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0`](https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0)<br>\n  The additional on-time `Challenge` header in this request is expired, already used, or otherwise invalid.\n  Remediation: Supply a valid, unexpired, unclaimed `Challenge` header in the request.\n",
              "name": "UnauthorizedError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 403,
              "description": "Forbidden. The authenticated caller is not authorized to perform the requested operation.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/forbidden/v1.0.0`](https://production.api.apiture.com/errors/forbidden/v1.0.0)<br>\n  The user or agent is not allowed to perform this operation; authentication credentials were provided in the request, but the server considers them insufficient to grant access.\n  Remediation: Check the user's permissions and entitlements before attempting the operation.\n\n* [`https://production.api.apiture.com/errors/customerDisabled/v1.0.0`](https://production.api.apiture.com/errors/customerDisabled/v1.0.0)<br>\n  The customer is disabled.\n  Remediation: Have the customer contact the financial institution for support.\n\n* [`https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0`](https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0)<br>\n  The financial institution requires the customer to have anti-malware software installed.\n  Remediation: Direct the user to the software requirements guide to install the correct anti-malware software.\n\n* [`https://production.api.apiture.com/errors/modificationForbidden/v1.0.0`](https://production.api.apiture.com/errors/modificationForbidden/v1.0.0)<br>\n  The customer is properly authenticated but not authorized to create, modify, or delete resources.\n  Remediation: Avoid modification operation for customers with read-only authorization.\n",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found. There is no such banking account resource at the specified `{accountId}`. The response body contains details about the request error.",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/accounts/",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "bf23bc970b78d27691e8",
                  "label": "Payroll Checking *1008",
                  "nickname": "Payroll Checking",
                  "maskedNumber": "*1008",
                  "product": {
                    "type": "checking",
                    "code": "DDA",
                    "label": "Business Checking",
                    "description": "Business checking account"
                  },
                  "location": "internal",
                  "allows": {
                    "billPay": false,
                    "mobileCheckDeposit": true,
                    "transferFrom": false,
                    "transferTo": true,
                    "view": true,
                    "viewCards": true,
                    "manageCards": false,
                    "manageJointOwners": true,
                    "manageOverdraftAccounts": true
                  },
                  "electronicStatements": true
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "bf23bc970b78d27691e8",
                  "label": "Payroll Checking *1008",
                  "nickname": "Payroll Checking",
                  "maskedNumber": "*1008",
                  "product": {
                    "type": "checking",
                    "code": "DDA",
                    "label": "Business Checking",
                    "description": "Business checking account"
                  },
                  "location": "internal",
                  "allows": {
                    "billPay": false,
                    "mobileCheckDeposit": true,
                    "transferFrom": false,
                    "transferTo": true,
                    "view": true,
                    "viewCards": true,
                    "manageCards": false,
                    "manageJointOwners": true,
                    "manageOverdraftAccounts": true
                  },
                  "electronicStatements": true
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Return a list of the requested internal accounts' balances. The `accounts` query parameter is a list of account IDs which typically comes from the `getAccounts` operation response. The returned list does not include external accounts. The caller must have entitlements to view each account's details, as indicated by a `true` value for `account.allows.view`. Requests to list balances for accounts the user is not allowed to read results in a 403 Forbidden response.\n\nThe response may be incomplete. Given a `Retry-After` response header, the client can retry the operation after a short delay, requesting only the accounts which are incomplete; see the 202 Accepted response for details.",
          "method": "GET",
          "defaultEnvironment": "https://api.apiture.com/banking",
          "environments": [
            {
              "id": "https://api.apiture.com/banking",
              "baseUrl": "https://api.apiture.com/banking"
            }
          ],
          "id": "listAccountBalances",
          "originalEndpointId": "accounts.listAccountBalances",
          "name": "List Account Balances",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/accountBalances"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "The unique account identifiers of one or more internal accounts. (Internal accounts are those with `location` value of `internal`.) If omitted, this operation uses the accounts for which the customer has view permissions but is limited to at most 1000 accounts. Note: The account IDs are unrelated to the account number.",
              "key": "accounts",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "accountIds"
                }
              }
            },
            {
              "description": "When retrying the operation, pass the `retryCount` from the `incompleteAccountBalances` response.",
              "key": "retryCount",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 10
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "accountBalances"
              }
            },
            "statusCode": 200,
            "description": "OK. The response contains the balances for all the accounts in the `?accounts=` query parameter."
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 401,
              "description": "Unauthorized. The operation requires authentication but no authentication or insufficient authentication was given.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unauthorized/v1.0.0`](https://production.api.apiture.com/errors/unauthorized/v1.0.0)<br>\n  The request lacks valid authentication credentials for the target resource or operation.\n  Remediation: Authenticate the user and pass the required authorization with the request.\n\n* [`https://production.api.apiture.com/errors/sessionExpired/v1.0.0`](https://production.api.apiture.com/errors/sessionExpired/v1.0.0)<br>\n  The user's session has expired.\n  Remediation: Re-authenticate the user to get a new access token or other authorization.\n\n* [`https://production.api.apiture.com/errors/challengeRequired/v1.0.0`](https://production.api.apiture.com/errors/challengeRequired/v1.0.0)<br>\n  The operation requires a the customer to complete an identity challenge.\n  Remediation: Complete the challenge as per the problem response, and add an additional `Challenge` header to the call.\nThe `attributes` object in the error may have the properties defined by the [`requiredIdentityChallenge` schema](#schema-requiredIdentityChallenge).\n* [`https://production.api.apiture.com/errors/loginIncomplete/v1.0.0`](https://production.api.apiture.com/errors/loginIncomplete/v1.0.0)<br>\n  The user is correctly authenticated but additional actions are required for activating their login session.\n  Remediation: Instruct the user to complete the additional actions to activate their login session.\n\n* [`https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0`](https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0)<br>\n  The user must change their password.\n  Remediation: Instruct the user to change their password or other login credentials.\n\n* [`https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0`](https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0)<br>\n  The CSRF token is invalid.\n  Remediation: The client application is not correctly configured to send CSRF.\n\n* [`https://production.api.apiture.com/errors/challengeBlocked/v1.0.0`](https://production.api.apiture.com/errors/challengeBlocked/v1.0.0)<br>\n  The user has failed challenges too many times and is blocked from attempting more or performing operations which require additional authentication.\n  Remediation: Have the user end their login session and login again.\n\n* [`https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0`](https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0)<br>\n  This operation requires challenge, but the user does not have the necessary registered authentication factors.\n  Remediation: Have the user register one or more challenge security code delivery factors.\n\n* [`https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0`](https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0)<br>\n  The additional on-time `Challenge` header in this request is expired, already used, or otherwise invalid.\n  Remediation: Supply a valid, unexpired, unclaimed `Challenge` header in the request.\n",
              "name": "UnauthorizedError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 403,
              "description": "Forbidden. The authenticated caller is not authorized to perform the requested operation.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/forbidden/v1.0.0`](https://production.api.apiture.com/errors/forbidden/v1.0.0)<br>\n  The user or agent is not allowed to perform this operation; authentication credentials were provided in the request, but the server considers them insufficient to grant access.\n  Remediation: Check the user's permissions and entitlements before attempting the operation.\n\n* [`https://production.api.apiture.com/errors/customerDisabled/v1.0.0`](https://production.api.apiture.com/errors/customerDisabled/v1.0.0)<br>\n  The customer is disabled.\n  Remediation: Have the customer contact the financial institution for support.\n\n* [`https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0`](https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0)<br>\n  The financial institution requires the customer to have anti-malware software installed.\n  Remediation: Direct the user to the software requirements guide to install the correct anti-malware software.\n\n* [`https://production.api.apiture.com/errors/modificationForbidden/v1.0.0`](https://production.api.apiture.com/errors/modificationForbidden/v1.0.0)<br>\n  The customer is properly authenticated but not authorized to create, modify, or delete resources.\n  Remediation: Avoid modification operation for customers with read-only authorization.\n",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity. The request body and/or query parameters were well-formed but otherwise invalid.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/invalidAccountId/v0.2.0`](https://production.api.apiture.com/errors/invalidAccountId/v0.2.0)<br>\n  The named `accountId` does not exist or the user is not entitled to access the account.\n  Remediation: Pass the `id` of an existing account the caller has access to.\n",
              "name": "UnprocessableEntityError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 429,
              "description": "Too Many Requests. The client has sent too many requests in a given amount of time.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/tooManyRequests/v1.0.0`](https://production.api.apiture.com/errors/tooManyRequests/v1.0.0)<br>\n  The client has sent too many requests in a given amount of time, exceeding rate limiting.\n  Remediation: Slow down the rate of API calls.\n",
              "name": "TooManyRequestsError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 503,
              "description": "Service Unavailable. Could not fetch the account balance from the banking core.",
              "name": "ServiceUnavailableError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/accountBalances",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "items": [
                    {
                      "id": "05d00d7d-d630",
                      "available": "3208.20",
                      "current": "3448.72",
                      "updatedAt": "2022-05-02T06:51:19.375Z",
                      "currentWithPending": "3448.72",
                      "incomplete": false
                    },
                    {
                      "id": "cb5d67ea-a5c3",
                      "available": "1750.80",
                      "current": "1956.19",
                      "updatedAt": "2022-05-02T06:51:19.375Z",
                      "currentWithPending": "1956.19",
                      "incomplete": false
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "items": [
                    {
                      "id": "05d00d7d-d630",
                      "available": "3208.20",
                      "current": "3448.72",
                      "updatedAt": "2022-05-02T06:51:19.375Z",
                      "currentWithPending": "3448.72",
                      "incomplete": false
                    },
                    {
                      "id": "cb5d67ea-a5c3",
                      "available": "1750.80",
                      "current": "1956.19",
                      "updatedAt": "2022-05-02T06:51:19.375Z",
                      "currentWithPending": "1956.19",
                      "incomplete": false
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Return a paginated list of a customer's accounts that are eligible for ACH transfers based on allowed privileges.\n\nOptionally, an agent can access a business customer's ACH accounts when acting on behalf of that business customer via the optional `customerId` query parameter.",
          "method": "GET",
          "defaultEnvironment": "https://api.apiture.com/banking",
          "environments": [
            {
              "id": "https://api.apiture.com/banking",
              "baseUrl": "https://api.apiture.com/banking"
            }
          ],
          "id": "listEligibleAchAccounts",
          "originalEndpointId": "accounts.listEligibleAchAccounts",
          "name": "List Eligible ACH Accounts",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/achEligibleAccounts"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Filter the result to accounts that have corresponding `true` values in `account.allows`. For example `?allows=transferTo,transferFrom,view` returns only accounts where `account.allows.transferTo`, `account.allows.transferFrom`, and `account.allows.view` are all `true` for the caller.",
              "key": "allows",
              "type": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "accountAllowsFilter"
                }
              }
            },
            {
              "description": "Filter the result to accounts that allow ACH transfers of the given Standard Entry Class (SEC) codes.",
              "key": "secCode",
              "type": {
                "type": "id",
                "value": "achSecCode"
              }
            },
            {
              "description": "The optional identifier of a business customer. This is an opaque string. An agent who is operating on behalf of a business can use this to access the resources of that business customer. The agent must have entitlements to act on behalf of the business; if not, the operation returns a 403 Forbidden response. For other situations, omit this value, else this _must_ match the authenticated caller's customer ID (not their access ID).",
              "key": "customerId",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "resourceId"
                }
              }
            },
            {
              "description": "The location of the next item in the collection. This is an opaque cursor supplied by the API service. Omit this to start at the beginning of the collection. The client does not define this value; the API services automatically pass the `?start=` parameter on the `nextPage_url`.",
              "key": "start",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 256,
                    "default": ""
                  }
                }
              }
            },
            {
              "description": "The maximum number of items to return in this paged response.",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1000,
                    "default": 100
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "accounts"
              }
            },
            "statusCode": 200,
            "description": "OK. A page from the full list of the customer's ACH-eligible accounts. This list contains only accounts that the customer is entitled to access. While the `nextPage_url` property is present in the response, the client can fetch the next page of accounts by performing a `GET` on that URL."
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request. The request body, request headers, and/or query parameters are not well-formed.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/badRequest/v1.0.0`](https://production.api.apiture.com/errors/badRequest/v1.0.0)<br>\n  The request body and/or parameters was not well-formed.\n  Remediation: Correct any syntax or schema errors in the request body or parameters.\n",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 401,
              "description": "Unauthorized. The operation requires authentication but no authentication or insufficient authentication was given.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unauthorized/v1.0.0`](https://production.api.apiture.com/errors/unauthorized/v1.0.0)<br>\n  The request lacks valid authentication credentials for the target resource or operation.\n  Remediation: Authenticate the user and pass the required authorization with the request.\n\n* [`https://production.api.apiture.com/errors/sessionExpired/v1.0.0`](https://production.api.apiture.com/errors/sessionExpired/v1.0.0)<br>\n  The user's session has expired.\n  Remediation: Re-authenticate the user to get a new access token or other authorization.\n\n* [`https://production.api.apiture.com/errors/challengeRequired/v1.0.0`](https://production.api.apiture.com/errors/challengeRequired/v1.0.0)<br>\n  The operation requires a the customer to complete an identity challenge.\n  Remediation: Complete the challenge as per the problem response, and add an additional `Challenge` header to the call.\nThe `attributes` object in the error may have the properties defined by the [`requiredIdentityChallenge` schema](#schema-requiredIdentityChallenge).\n* [`https://production.api.apiture.com/errors/loginIncomplete/v1.0.0`](https://production.api.apiture.com/errors/loginIncomplete/v1.0.0)<br>\n  The user is correctly authenticated but additional actions are required for activating their login session.\n  Remediation: Instruct the user to complete the additional actions to activate their login session.\n\n* [`https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0`](https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0)<br>\n  The user must change their password.\n  Remediation: Instruct the user to change their password or other login credentials.\n\n* [`https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0`](https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0)<br>\n  The CSRF token is invalid.\n  Remediation: The client application is not correctly configured to send CSRF.\n\n* [`https://production.api.apiture.com/errors/challengeBlocked/v1.0.0`](https://production.api.apiture.com/errors/challengeBlocked/v1.0.0)<br>\n  The user has failed challenges too many times and is blocked from attempting more or performing operations which require additional authentication.\n  Remediation: Have the user end their login session and login again.\n\n* [`https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0`](https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0)<br>\n  This operation requires challenge, but the user does not have the necessary registered authentication factors.\n  Remediation: Have the user register one or more challenge security code delivery factors.\n\n* [`https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0`](https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0)<br>\n  The additional on-time `Challenge` header in this request is expired, already used, or otherwise invalid.\n  Remediation: Supply a valid, unexpired, unclaimed `Challenge` header in the request.\n",
              "name": "UnauthorizedError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 403,
              "description": "Forbidden. The authenticated caller is not authorized to perform the requested operation.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/forbidden/v1.0.0`](https://production.api.apiture.com/errors/forbidden/v1.0.0)<br>\n  The user or agent is not allowed to perform this operation; authentication credentials were provided in the request, but the server considers them insufficient to grant access.\n  Remediation: Check the user's permissions and entitlements before attempting the operation.\n\n* [`https://production.api.apiture.com/errors/customerDisabled/v1.0.0`](https://production.api.apiture.com/errors/customerDisabled/v1.0.0)<br>\n  The customer is disabled.\n  Remediation: Have the customer contact the financial institution for support.\n\n* [`https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0`](https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0)<br>\n  The financial institution requires the customer to have anti-malware software installed.\n  Remediation: Direct the user to the software requirements guide to install the correct anti-malware software.\n\n* [`https://production.api.apiture.com/errors/modificationForbidden/v1.0.0`](https://production.api.apiture.com/errors/modificationForbidden/v1.0.0)<br>\n  The customer is properly authenticated but not authorized to create, modify, or delete resources.\n  Remediation: Avoid modification operation for customers with read-only authorization.\n",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity. The request body and/or query parameters were well-formed but otherwise invalid.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unprocessableEntity/v1.0.0`](https://production.api.apiture.com/errors/unprocessableEntity/v1.0.0)<br>\n  The syntax of the request entity is correct but was unable to process the contained instructions.\n  Remediation: Provide a semantically correct request.\n",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/achEligibleAccounts",
              "pathParameters": {},
              "queryParameters": {
                "allows": [
                  "billPay"
                ],
                "secCode": "arc"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "limit": 100,
                  "nextPage_url": "https://production.api.apiture.com/banking/accounts?start=641f62296ecbf1882c84?limit=100?allows=view",
                  "items": [
                    {
                      "id": "bf23bc970b78d27691e8",
                      "label": "Payroll Checking *1008",
                      "nickname": "Payroll Checking",
                      "maskedNumber": "*1008",
                      "product": {
                        "type": "checking",
                        "code": "DDA",
                        "label": "Business Checking",
                        "description": "Basic business checking accounts"
                      },
                      "location": "internal",
                      "allows": {
                        "billPay": false,
                        "mobileCheckDeposit": true,
                        "transferFrom": false,
                        "transferTo": true,
                        "view": true,
                        "viewCards": true,
                        "manageCards": false
                      }
                    },
                    {
                      "id": "b78d27691e8bf23bc970",
                      "label": "College CD *2017",
                      "nickname": "College CD",
                      "maskedNumber": "*2017",
                      "product": {
                        "type": "cd",
                        "code": "CDA",
                        "label": "24 Month CD",
                        "description": "24 Month certificate of deposit"
                      },
                      "location": "internal",
                      "allows": {
                        "billPay": false,
                        "mobileCheckDeposit": false,
                        "transferFrom": false,
                        "transferTo": false,
                        "view": true,
                        "viewCards": true,
                        "manageCards": false
                      }
                    }
                  ],
                  "count": 6
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "limit": 100,
                  "nextPage_url": "https://production.api.apiture.com/banking/accounts?start=641f62296ecbf1882c84?limit=100?allows=view",
                  "items": [
                    {
                      "id": "bf23bc970b78d27691e8",
                      "label": "Payroll Checking *1008",
                      "nickname": "Payroll Checking",
                      "maskedNumber": "*1008",
                      "product": {
                        "type": "checking",
                        "code": "DDA",
                        "label": "Business Checking",
                        "description": "Basic business checking accounts"
                      },
                      "location": "internal",
                      "allows": {
                        "billPay": false,
                        "mobileCheckDeposit": true,
                        "transferFrom": false,
                        "transferTo": true,
                        "view": true,
                        "viewCards": true,
                        "manageCards": false
                      }
                    },
                    {
                      "id": "b78d27691e8bf23bc970",
                      "label": "College CD *2017",
                      "nickname": "College CD",
                      "maskedNumber": "*2017",
                      "product": {
                        "type": "cd",
                        "code": "CDA",
                        "label": "24 Month CD",
                        "description": "24 Month certificate of deposit"
                      },
                      "location": "internal",
                      "allows": {
                        "billPay": false,
                        "mobileCheckDeposit": false,
                        "transferFrom": false,
                        "transferTo": false,
                        "view": true,
                        "viewCards": true,
                        "manageCards": false
                      }
                    }
                  ],
                  "count": 6
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_accountJointOwners": {
      "subpackageId": "subpackage_accountJointOwners",
      "name": "accountJointOwners",
      "endpoints": [
        {
          "auth": true,
          "description": "Return a collection of account joint owners. The user must have the `account.manageJointOwners` permission to use this operation.",
          "method": "GET",
          "defaultEnvironment": "https://api.apiture.com/banking",
          "environments": [
            {
              "id": "https://api.apiture.com/banking",
              "baseUrl": "https://api.apiture.com/banking"
            }
          ],
          "id": "listAccountJointOwners",
          "originalEndpointId": "accountJointOwners.listAccountJointOwners",
          "name": "Return a collection of account joint owners",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/accounts/"
              },
              {
                "type": "pathParameter",
                "value": "accountId"
              },
              {
                "type": "literal",
                "value": "/jointOwners"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "accountJointOwners"
              }
            },
            "statusCode": 200,
            "description": "OK."
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request. The request body, request headers, and/or query parameters are not well-formed.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/badRequest/v1.0.0`](https://production.api.apiture.com/errors/badRequest/v1.0.0)<br>\n  The request body and/or parameters was not well-formed.\n  Remediation: Correct any syntax or schema errors in the request body or parameters.\n",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 401,
              "description": "Unauthorized. The operation requires authentication but no authentication or insufficient authentication was given.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unauthorized/v1.0.0`](https://production.api.apiture.com/errors/unauthorized/v1.0.0)<br>\n  The request lacks valid authentication credentials for the target resource or operation.\n  Remediation: Authenticate the user and pass the required authorization with the request.\n\n* [`https://production.api.apiture.com/errors/sessionExpired/v1.0.0`](https://production.api.apiture.com/errors/sessionExpired/v1.0.0)<br>\n  The user's session has expired.\n  Remediation: Re-authenticate the user to get a new access token or other authorization.\n\n* [`https://production.api.apiture.com/errors/challengeRequired/v1.0.0`](https://production.api.apiture.com/errors/challengeRequired/v1.0.0)<br>\n  The operation requires a the customer to complete an identity challenge.\n  Remediation: Complete the challenge as per the problem response, and add an additional `Challenge` header to the call.\nThe `attributes` object in the error may have the properties defined by the [`requiredIdentityChallenge` schema](#schema-requiredIdentityChallenge).\n* [`https://production.api.apiture.com/errors/loginIncomplete/v1.0.0`](https://production.api.apiture.com/errors/loginIncomplete/v1.0.0)<br>\n  The user is correctly authenticated but additional actions are required for activating their login session.\n  Remediation: Instruct the user to complete the additional actions to activate their login session.\n\n* [`https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0`](https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0)<br>\n  The user must change their password.\n  Remediation: Instruct the user to change their password or other login credentials.\n\n* [`https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0`](https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0)<br>\n  The CSRF token is invalid.\n  Remediation: The client application is not correctly configured to send CSRF.\n\n* [`https://production.api.apiture.com/errors/challengeBlocked/v1.0.0`](https://production.api.apiture.com/errors/challengeBlocked/v1.0.0)<br>\n  The user has failed challenges too many times and is blocked from attempting more or performing operations which require additional authentication.\n  Remediation: Have the user end their login session and login again.\n\n* [`https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0`](https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0)<br>\n  This operation requires challenge, but the user does not have the necessary registered authentication factors.\n  Remediation: Have the user register one or more challenge security code delivery factors.\n\n* [`https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0`](https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0)<br>\n  The additional on-time `Challenge` header in this request is expired, already used, or otherwise invalid.\n  Remediation: Supply a valid, unexpired, unclaimed `Challenge` header in the request.\n",
              "name": "UnauthorizedError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 403,
              "description": "Forbidden. The authenticated caller is not authorized to perform the requested operation.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/forbidden/v1.0.0`](https://production.api.apiture.com/errors/forbidden/v1.0.0)<br>\n  The user or agent is not allowed to perform this operation; authentication credentials were provided in the request, but the server considers them insufficient to grant access.\n  Remediation: Check the user's permissions and entitlements before attempting the operation.\n\n* [`https://production.api.apiture.com/errors/customerDisabled/v1.0.0`](https://production.api.apiture.com/errors/customerDisabled/v1.0.0)<br>\n  The customer is disabled.\n  Remediation: Have the customer contact the financial institution for support.\n\n* [`https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0`](https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0)<br>\n  The financial institution requires the customer to have anti-malware software installed.\n  Remediation: Direct the user to the software requirements guide to install the correct anti-malware software.\n\n* [`https://production.api.apiture.com/errors/modificationForbidden/v1.0.0`](https://production.api.apiture.com/errors/modificationForbidden/v1.0.0)<br>\n  The customer is properly authenticated but not authorized to create, modify, or delete resources.\n  Remediation: Avoid modification operation for customers with read-only authorization.\n",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 404,
              "description": "Not found. There is no such resource at the request URL.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/notFound/v1.0.0`](https://production.api.apiture.com/errors/notFound/v1.0.0)<br>\n  The resource at the requested URL does not exist.\n  Remediation: Use the URL of an existing resource.\n",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/accounts/",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "items": [
                    {
                      "id": "db821618461ade2c5e45",
                      "name": "Max Pike"
                    },
                    {
                      "id": "1ef8f2bdfc729ea2b80b",
                      "name": "Sam K. Pike"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "items": [
                    {
                      "id": "db821618461ade2c5e45",
                      "name": "Max Pike"
                    },
                    {
                      "id": "1ef8f2bdfc729ea2b80b",
                      "name": "Sam K. Pike"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_overdraftProtection": {
      "subpackageId": "subpackage_overdraftProtection",
      "name": "overdraftProtection",
      "endpoints": [
        {
          "auth": true,
          "description": "Return a paginated list of a customer's accounts that are eligible to serve as overdraft protection accounts for the given account. An overdraft protection account is a deposit account that the financial institution can transfer funds from to prevent the account balance from going negative and incurring non-sufficient funds fees.\n\nThe user must have the `allows.manageOverdraftAccounts` permission on the account to use this operation.\n\nTo obtain available balances for these accounts, use [`listAccountBalances`](#op-listAccountBalances).",
          "method": "GET",
          "defaultEnvironment": "https://api.apiture.com/banking",
          "environments": [
            {
              "id": "https://api.apiture.com/banking",
              "baseUrl": "https://api.apiture.com/banking"
            }
          ],
          "id": "listEligibleOverdraftAccounts",
          "originalEndpointId": "overdraftProtection.listEligibleOverdraftAccounts",
          "name": "List Eligible Overdraft Accounts",
          "path": {
            "pathParameters": [
              {
                "key": "accountId",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/accounts/"
              },
              {
                "type": "pathParameter",
                "value": "accountId"
              },
              {
                "type": "literal",
                "value": "/eligibleOverdraftAccounts"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "The location of the next item in the collection. This is an opaque cursor supplied by the API service. Omit this to start at the beginning of the collection. The client does not define this value; the API services automatically pass the `?start=` parameter on the `nextPage_url`.",
              "key": "start",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 256,
                    "default": ""
                  }
                }
              }
            },
            {
              "description": "The maximum number of items to return in this paged response.",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1000,
                    "default": 100
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "eligibleOverdraftAccounts"
              }
            },
            "statusCode": 200,
            "description": "OK. A page from the full list of the customer's eligible overdraft accounts. This list contains only accounts that the customer is entitled to access. While the `nextPage_url` property is present in the response, the client can fetch the next page of accounts by performing a `GET` on that URL."
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request. The request body, request headers, and/or query parameters are not well-formed.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/badRequest/v1.0.0`](https://production.api.apiture.com/errors/badRequest/v1.0.0)<br>\n  The request body and/or parameters was not well-formed.\n  Remediation: Correct any syntax or schema errors in the request body or parameters.\n",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 401,
              "description": "Unauthorized. The operation requires authentication but no authentication or insufficient authentication was given.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unauthorized/v1.0.0`](https://production.api.apiture.com/errors/unauthorized/v1.0.0)<br>\n  The request lacks valid authentication credentials for the target resource or operation.\n  Remediation: Authenticate the user and pass the required authorization with the request.\n\n* [`https://production.api.apiture.com/errors/sessionExpired/v1.0.0`](https://production.api.apiture.com/errors/sessionExpired/v1.0.0)<br>\n  The user's session has expired.\n  Remediation: Re-authenticate the user to get a new access token or other authorization.\n\n* [`https://production.api.apiture.com/errors/challengeRequired/v1.0.0`](https://production.api.apiture.com/errors/challengeRequired/v1.0.0)<br>\n  The operation requires a the customer to complete an identity challenge.\n  Remediation: Complete the challenge as per the problem response, and add an additional `Challenge` header to the call.\nThe `attributes` object in the error may have the properties defined by the [`requiredIdentityChallenge` schema](#schema-requiredIdentityChallenge).\n* [`https://production.api.apiture.com/errors/loginIncomplete/v1.0.0`](https://production.api.apiture.com/errors/loginIncomplete/v1.0.0)<br>\n  The user is correctly authenticated but additional actions are required for activating their login session.\n  Remediation: Instruct the user to complete the additional actions to activate their login session.\n\n* [`https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0`](https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0)<br>\n  The user must change their password.\n  Remediation: Instruct the user to change their password or other login credentials.\n\n* [`https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0`](https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0)<br>\n  The CSRF token is invalid.\n  Remediation: The client application is not correctly configured to send CSRF.\n\n* [`https://production.api.apiture.com/errors/challengeBlocked/v1.0.0`](https://production.api.apiture.com/errors/challengeBlocked/v1.0.0)<br>\n  The user has failed challenges too many times and is blocked from attempting more or performing operations which require additional authentication.\n  Remediation: Have the user end their login session and login again.\n\n* [`https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0`](https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0)<br>\n  This operation requires challenge, but the user does not have the necessary registered authentication factors.\n  Remediation: Have the user register one or more challenge security code delivery factors.\n\n* [`https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0`](https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0)<br>\n  The additional on-time `Challenge` header in this request is expired, already used, or otherwise invalid.\n  Remediation: Supply a valid, unexpired, unclaimed `Challenge` header in the request.\n",
              "name": "UnauthorizedError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 403,
              "description": "Forbidden. The authenticated caller is not authorized to perform the requested operation.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/forbidden/v1.0.0`](https://production.api.apiture.com/errors/forbidden/v1.0.0)<br>\n  The user or agent is not allowed to perform this operation; authentication credentials were provided in the request, but the server considers them insufficient to grant access.\n  Remediation: Check the user's permissions and entitlements before attempting the operation.\n\n* [`https://production.api.apiture.com/errors/customerDisabled/v1.0.0`](https://production.api.apiture.com/errors/customerDisabled/v1.0.0)<br>\n  The customer is disabled.\n  Remediation: Have the customer contact the financial institution for support.\n\n* [`https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0`](https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0)<br>\n  The financial institution requires the customer to have anti-malware software installed.\n  Remediation: Direct the user to the software requirements guide to install the correct anti-malware software.\n\n* [`https://production.api.apiture.com/errors/modificationForbidden/v1.0.0`](https://production.api.apiture.com/errors/modificationForbidden/v1.0.0)<br>\n  The customer is properly authenticated but not authorized to create, modify, or delete resources.\n  Remediation: Avoid modification operation for customers with read-only authorization.\n",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found. There is no such banking account resource at the specified `{accountId}`. The response body contains details about the request error.",
              "name": "NotFoundError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity. The request body and/or query parameters were well-formed but otherwise invalid.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unprocessableEntity/v1.0.0`](https://production.api.apiture.com/errors/unprocessableEntity/v1.0.0)<br>\n  The syntax of the request entity is correct but was unable to process the contained instructions.\n  Remediation: Provide a semantically correct request.\n",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/accounts/",
              "pathParameters": {
                "accountId": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "limit": 100,
                  "nextPage_url": "https://production.api.apiture.com/banking/accounts/f204d292df9fb/eligibleOverdraftAccounts?start=641f62296ecbf1882c84?limit=100",
                  "items": null,
                  "maximumOverdraftAccounts": 1
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "limit": 100,
                  "nextPage_url": "https://production.api.apiture.com/banking/accounts/f204d292df9fb/eligibleOverdraftAccounts?start=641f62296ecbf1882c84?limit=100",
                  "items": null,
                  "maximumOverdraftAccounts": 1
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Return the JSON representation of this account's overdraft protection settings.",
          "method": "GET",
          "defaultEnvironment": "https://api.apiture.com/banking",
          "environments": [
            {
              "id": "https://api.apiture.com/banking",
              "baseUrl": "https://api.apiture.com/banking"
            }
          ],
          "id": "getOverdraftProtection",
          "originalEndpointId": "overdraftProtection.getOverdraftProtection",
          "name": "Fetch a representation of the account's overdraft protection settings",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/accounts/"
              },
              {
                "type": "pathParameter",
                "value": "accountId"
              },
              {
                "type": "literal",
                "value": "/overdraftProtection"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "overdraftProtection"
              }
            },
            "statusCode": 200,
            "description": "OK."
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 401,
              "description": "Unauthorized. The operation requires authentication but no authentication or insufficient authentication was given.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unauthorized/v1.0.0`](https://production.api.apiture.com/errors/unauthorized/v1.0.0)<br>\n  The request lacks valid authentication credentials for the target resource or operation.\n  Remediation: Authenticate the user and pass the required authorization with the request.\n\n* [`https://production.api.apiture.com/errors/sessionExpired/v1.0.0`](https://production.api.apiture.com/errors/sessionExpired/v1.0.0)<br>\n  The user's session has expired.\n  Remediation: Re-authenticate the user to get a new access token or other authorization.\n\n* [`https://production.api.apiture.com/errors/challengeRequired/v1.0.0`](https://production.api.apiture.com/errors/challengeRequired/v1.0.0)<br>\n  The operation requires a the customer to complete an identity challenge.\n  Remediation: Complete the challenge as per the problem response, and add an additional `Challenge` header to the call.\nThe `attributes` object in the error may have the properties defined by the [`requiredIdentityChallenge` schema](#schema-requiredIdentityChallenge).\n* [`https://production.api.apiture.com/errors/loginIncomplete/v1.0.0`](https://production.api.apiture.com/errors/loginIncomplete/v1.0.0)<br>\n  The user is correctly authenticated but additional actions are required for activating their login session.\n  Remediation: Instruct the user to complete the additional actions to activate their login session.\n\n* [`https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0`](https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0)<br>\n  The user must change their password.\n  Remediation: Instruct the user to change their password or other login credentials.\n\n* [`https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0`](https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0)<br>\n  The CSRF token is invalid.\n  Remediation: The client application is not correctly configured to send CSRF.\n\n* [`https://production.api.apiture.com/errors/challengeBlocked/v1.0.0`](https://production.api.apiture.com/errors/challengeBlocked/v1.0.0)<br>\n  The user has failed challenges too many times and is blocked from attempting more or performing operations which require additional authentication.\n  Remediation: Have the user end their login session and login again.\n\n* [`https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0`](https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0)<br>\n  This operation requires challenge, but the user does not have the necessary registered authentication factors.\n  Remediation: Have the user register one or more challenge security code delivery factors.\n\n* [`https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0`](https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0)<br>\n  The additional on-time `Challenge` header in this request is expired, already used, or otherwise invalid.\n  Remediation: Supply a valid, unexpired, unclaimed `Challenge` header in the request.\n",
              "name": "UnauthorizedError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 403,
              "description": "Forbidden. The authenticated caller is not authorized to perform the requested operation.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/forbidden/v1.0.0`](https://production.api.apiture.com/errors/forbidden/v1.0.0)<br>\n  The user or agent is not allowed to perform this operation; authentication credentials were provided in the request, but the server considers them insufficient to grant access.\n  Remediation: Check the user's permissions and entitlements before attempting the operation.\n\n* [`https://production.api.apiture.com/errors/customerDisabled/v1.0.0`](https://production.api.apiture.com/errors/customerDisabled/v1.0.0)<br>\n  The customer is disabled.\n  Remediation: Have the customer contact the financial institution for support.\n\n* [`https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0`](https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0)<br>\n  The financial institution requires the customer to have anti-malware software installed.\n  Remediation: Direct the user to the software requirements guide to install the correct anti-malware software.\n\n* [`https://production.api.apiture.com/errors/modificationForbidden/v1.0.0`](https://production.api.apiture.com/errors/modificationForbidden/v1.0.0)<br>\n  The customer is properly authenticated but not authorized to create, modify, or delete resources.\n  Remediation: Avoid modification operation for customers with read-only authorization.\n",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 404,
              "description": "Unprocessable Entity. There is no such banking account resource at the specified account `{id}`, the caller does not have access to that account, or that account is not eligible, or there are duplicate items. The response body contains details about the request error.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/invalidAccountId/v0.2.0`](https://production.api.apiture.com/errors/invalidAccountId/v0.2.0)<br>\n  The named `accountId` does not exist or the user is not entitled to access the account.\n  Remediation: Pass the `id` of an existing account the caller has access to.\n",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/accounts/",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "maximumOverdraftAccounts": 1
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "maximumOverdraftAccounts": 1
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Perform a partial update of the overdraft accounts. Only fields in the request body are updated on the resource; fields which are omitted are not updated. To add, replace, or remove an overdraft account, add, replace, or remove the corresponding account item from the `items` array. Only the account `id` in the items is significant.\n\nThe user must have the `allows.manageOverdraftAccounts` permission on the account to use this operation.",
          "method": "PATCH",
          "defaultEnvironment": "https://api.apiture.com/banking",
          "environments": [
            {
              "id": "https://api.apiture.com/banking",
              "baseUrl": "https://api.apiture.com/banking"
            }
          ],
          "id": "patchOverdraftAccounts",
          "originalEndpointId": "overdraftProtection.patchOverdraftAccounts",
          "name": "Update the overdraft accounts",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/accounts/"
              },
              {
                "type": "pathParameter",
                "value": "accountId"
              },
              {
                "type": "literal",
                "value": "/overdraftProtection"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "overdraftProtectionPatch"
                }
              },
              "description": "The replacement overdraft accounts."
            },
            "description": "The replacement overdraft accounts."
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "overdraftProtection"
              }
            },
            "statusCode": 200,
            "description": "OK."
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request. The request body, request headers, and/or query parameters are not well-formed.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/badRequest/v1.0.0`](https://production.api.apiture.com/errors/badRequest/v1.0.0)<br>\n  The request body and/or parameters was not well-formed.\n  Remediation: Correct any syntax or schema errors in the request body or parameters.\n",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 401,
              "description": "Unauthorized. The operation requires authentication but no authentication or insufficient authentication was given.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unauthorized/v1.0.0`](https://production.api.apiture.com/errors/unauthorized/v1.0.0)<br>\n  The request lacks valid authentication credentials for the target resource or operation.\n  Remediation: Authenticate the user and pass the required authorization with the request.\n\n* [`https://production.api.apiture.com/errors/sessionExpired/v1.0.0`](https://production.api.apiture.com/errors/sessionExpired/v1.0.0)<br>\n  The user's session has expired.\n  Remediation: Re-authenticate the user to get a new access token or other authorization.\n\n* [`https://production.api.apiture.com/errors/challengeRequired/v1.0.0`](https://production.api.apiture.com/errors/challengeRequired/v1.0.0)<br>\n  The operation requires a the customer to complete an identity challenge.\n  Remediation: Complete the challenge as per the problem response, and add an additional `Challenge` header to the call.\nThe `attributes` object in the error may have the properties defined by the [`requiredIdentityChallenge` schema](#schema-requiredIdentityChallenge).\n* [`https://production.api.apiture.com/errors/loginIncomplete/v1.0.0`](https://production.api.apiture.com/errors/loginIncomplete/v1.0.0)<br>\n  The user is correctly authenticated but additional actions are required for activating their login session.\n  Remediation: Instruct the user to complete the additional actions to activate their login session.\n\n* [`https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0`](https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0)<br>\n  The user must change their password.\n  Remediation: Instruct the user to change their password or other login credentials.\n\n* [`https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0`](https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0)<br>\n  The CSRF token is invalid.\n  Remediation: The client application is not correctly configured to send CSRF.\n\n* [`https://production.api.apiture.com/errors/challengeBlocked/v1.0.0`](https://production.api.apiture.com/errors/challengeBlocked/v1.0.0)<br>\n  The user has failed challenges too many times and is blocked from attempting more or performing operations which require additional authentication.\n  Remediation: Have the user end their login session and login again.\n\n* [`https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0`](https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0)<br>\n  This operation requires challenge, but the user does not have the necessary registered authentication factors.\n  Remediation: Have the user register one or more challenge security code delivery factors.\n\n* [`https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0`](https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0)<br>\n  The additional on-time `Challenge` header in this request is expired, already used, or otherwise invalid.\n  Remediation: Supply a valid, unexpired, unclaimed `Challenge` header in the request.\n",
              "name": "UnauthorizedError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 403,
              "description": "Forbidden. The authenticated caller is not authorized to perform the requested operation.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/forbidden/v1.0.0`](https://production.api.apiture.com/errors/forbidden/v1.0.0)<br>\n  The user or agent is not allowed to perform this operation; authentication credentials were provided in the request, but the server considers them insufficient to grant access.\n  Remediation: Check the user's permissions and entitlements before attempting the operation.\n\n* [`https://production.api.apiture.com/errors/customerDisabled/v1.0.0`](https://production.api.apiture.com/errors/customerDisabled/v1.0.0)<br>\n  The customer is disabled.\n  Remediation: Have the customer contact the financial institution for support.\n\n* [`https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0`](https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0)<br>\n  The financial institution requires the customer to have anti-malware software installed.\n  Remediation: Direct the user to the software requirements guide to install the correct anti-malware software.\n\n* [`https://production.api.apiture.com/errors/modificationForbidden/v1.0.0`](https://production.api.apiture.com/errors/modificationForbidden/v1.0.0)<br>\n  The customer is properly authenticated but not authorized to create, modify, or delete resources.\n  Remediation: Avoid modification operation for customers with read-only authorization.\n",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found. There is no such banking account resource at the specified `{accountId}`. The response body contains details about the request error.",
              "name": "NotFoundError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity. There is no such banking account resource at the specified account `{id}`, the caller does not have access to that account, or that account is not eligible, or there are duplicate items. The response body contains details about the request error.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/invalidAccountId/v0.2.0`](https://production.api.apiture.com/errors/invalidAccountId/v0.2.0)<br>\n  The named `accountId` does not exist or the user is not entitled to access the account.\n  Remediation: Pass the `id` of an existing account the caller has access to.\n\n* [`https://production.api.apiture.com/errors/tooManyOverdraftAccounts/v1.0.0`](https://production.api.apiture.com/errors/tooManyOverdraftAccounts/v1.0.0)<br>\n  The `items` in the request contains more than `maximumOverdraftAccounts` items.\n  Remediation: Specify at most `maximumOverdraftAccounts` items in the request.\n\n* [`https://production.api.apiture.com/errors/overdraftAccountNotEligible/v1.0.0`](https://production.api.apiture.com/errors/overdraftAccountNotEligible/v1.0.0)<br>\n  The named account is not eligible as an overdraft protection account.\n  Remediation: Use an account from the `listEligibleOverdraftAccounts` response for the protected account.\n\n* [`https://production.api.apiture.com/errors/duplicateOverdraftAccounts/v1.0.0`](https://production.api.apiture.com/errors/duplicateOverdraftAccounts/v1.0.0)<br>\n  The `items` in the request list the same account `id` more than once.\n  Remediation: Use eligible unique accounts only.\n",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/accounts/",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "maximumOverdraftAccounts": 1
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "maximumOverdraftAccounts": 1
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_jointOwners": {
      "subpackageId": "subpackage_jointOwners",
      "name": "jointOwners",
      "endpoints": [
        {
          "auth": true,
          "description": "Create and send an invitation to another person to become a joint owner of the account. The invitation will be sent to the invitee's email address. The invitation directs the invitee to a web page to verify and accept the invitation, and if necessary, enroll in digital banking.\n\nThe authenticated user must have the `account.allows.manageJointOwners` permission to use this operation.",
          "method": "POST",
          "defaultEnvironment": "https://api.apiture.com/banking",
          "environments": [
            {
              "id": "https://api.apiture.com/banking",
              "baseUrl": "https://api.apiture.com/banking"
            }
          ],
          "id": "createJointOwnerInvitation",
          "originalEndpointId": "jointOwners.createJointOwnerInvitation",
          "name": "Invite a joint owner",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/accounts/"
              },
              {
                "type": "pathParameter",
                "value": "accountId"
              },
              {
                "type": "literal",
                "value": "/jointOwnerInvitations"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "newJointOwnerInvitation"
                }
              },
              "description": "Data necessary to invite a joint owner."
            },
            "description": "Data necessary to invite a joint owner."
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "jointOwnerInvitation"
              }
            },
            "statusCode": 200,
            "description": "OK."
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request. The request body, request headers, and/or query parameters are not well-formed.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/badRequest/v1.0.0`](https://production.api.apiture.com/errors/badRequest/v1.0.0)<br>\n  The request body and/or parameters was not well-formed.\n  Remediation: Correct any syntax or schema errors in the request body or parameters.\n",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 401,
              "description": "Unauthorized. The operation requires authentication but no authentication or insufficient authentication was given.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unauthorized/v1.0.0`](https://production.api.apiture.com/errors/unauthorized/v1.0.0)<br>\n  The request lacks valid authentication credentials for the target resource or operation.\n  Remediation: Authenticate the user and pass the required authorization with the request.\n\n* [`https://production.api.apiture.com/errors/sessionExpired/v1.0.0`](https://production.api.apiture.com/errors/sessionExpired/v1.0.0)<br>\n  The user's session has expired.\n  Remediation: Re-authenticate the user to get a new access token or other authorization.\n\n* [`https://production.api.apiture.com/errors/challengeRequired/v1.0.0`](https://production.api.apiture.com/errors/challengeRequired/v1.0.0)<br>\n  The operation requires a the customer to complete an identity challenge.\n  Remediation: Complete the challenge as per the problem response, and add an additional `Challenge` header to the call.\nThe `attributes` object in the error may have the properties defined by the [`requiredIdentityChallenge` schema](#schema-requiredIdentityChallenge).\n* [`https://production.api.apiture.com/errors/loginIncomplete/v1.0.0`](https://production.api.apiture.com/errors/loginIncomplete/v1.0.0)<br>\n  The user is correctly authenticated but additional actions are required for activating their login session.\n  Remediation: Instruct the user to complete the additional actions to activate their login session.\n\n* [`https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0`](https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0)<br>\n  The user must change their password.\n  Remediation: Instruct the user to change their password or other login credentials.\n\n* [`https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0`](https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0)<br>\n  The CSRF token is invalid.\n  Remediation: The client application is not correctly configured to send CSRF.\n\n* [`https://production.api.apiture.com/errors/challengeBlocked/v1.0.0`](https://production.api.apiture.com/errors/challengeBlocked/v1.0.0)<br>\n  The user has failed challenges too many times and is blocked from attempting more or performing operations which require additional authentication.\n  Remediation: Have the user end their login session and login again.\n\n* [`https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0`](https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0)<br>\n  This operation requires challenge, but the user does not have the necessary registered authentication factors.\n  Remediation: Have the user register one or more challenge security code delivery factors.\n\n* [`https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0`](https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0)<br>\n  The additional on-time `Challenge` header in this request is expired, already used, or otherwise invalid.\n  Remediation: Supply a valid, unexpired, unclaimed `Challenge` header in the request.\n",
              "name": "UnauthorizedError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 403,
              "description": "Forbidden. The authenticated caller is not authorized to perform the requested operation.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/forbidden/v1.0.0`](https://production.api.apiture.com/errors/forbidden/v1.0.0)<br>\n  The user or agent is not allowed to perform this operation; authentication credentials were provided in the request, but the server considers them insufficient to grant access.\n  Remediation: Check the user's permissions and entitlements before attempting the operation.\n\n* [`https://production.api.apiture.com/errors/customerDisabled/v1.0.0`](https://production.api.apiture.com/errors/customerDisabled/v1.0.0)<br>\n  The customer is disabled.\n  Remediation: Have the customer contact the financial institution for support.\n\n* [`https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0`](https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0)<br>\n  The financial institution requires the customer to have anti-malware software installed.\n  Remediation: Direct the user to the software requirements guide to install the correct anti-malware software.\n\n* [`https://production.api.apiture.com/errors/modificationForbidden/v1.0.0`](https://production.api.apiture.com/errors/modificationForbidden/v1.0.0)<br>\n  The customer is properly authenticated but not authorized to create, modify, or delete resources.\n  Remediation: Avoid modification operation for customers with read-only authorization.\n",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found. There is no such banking account resource at the specified `{accountId}`. The response body contains details about the request error.",
              "name": "NotFoundError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity. The request body and/or query parameters were well-formed but otherwise invalid.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unprocessableEntity/v1.0.0`](https://production.api.apiture.com/errors/unprocessableEntity/v1.0.0)<br>\n  The syntax of the request entity is correct but was unable to process the contained instructions.\n  Remediation: Provide a semantically correct request.\n",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/accounts/",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "firstName": "Mary",
                "lastName": "Jones",
                "sharedSecret": "obsolete obese octopus",
                "emailAddress": "Mary.Jones@example.com",
                "disallowDebitCardAccess": false
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "firstName": "Mary",
                  "lastName": "Jones",
                  "sharedSecret": "obsolete obese octopus",
                  "emailAddress": "Mary.Jones@example.com",
                  "disallowDebitCardAccess": false
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "firstName": "Mary",
                  "lastName": "Jones",
                  "sharedSecret": "obsolete obese octopus",
                  "emailAddress": "Mary.Jones@example.com",
                  "disallowDebitCardAccess": false,
                  "id": "db4f580290d3e07bf55d"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "firstName": "Mary",
                  "lastName": "Jones",
                  "sharedSecret": "obsolete obese octopus",
                  "emailAddress": "Mary.Jones@example.com",
                  "disallowDebitCardAccess": false,
                  "id": "db4f580290d3e07bf55d"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_institutions": {
      "subpackageId": "subpackage_institutions",
      "name": "institutions",
      "endpoints": [
        {
          "auth": true,
          "description": "Look up a financial institution by their country code and either [American Bankers Association routing number](https://www.aba.com/about-us/routing-number), by [International Bank Account Number (IBAN)](https://www.ecbs.org/iban.htm), or by [SWIFT Business Identifier Code (BIC) code](https://www.swift.com/standards/data-standards/bic-business-identifier-code). Optionally, include a list of intermediary institutions that may be necessary to complete international wire transfers.",
          "method": "GET",
          "defaultEnvironment": "https://api.apiture.com/banking",
          "environments": [
            {
              "id": "https://api.apiture.com/banking",
              "baseUrl": "https://api.apiture.com/banking"
            }
          ],
          "id": "lookUpInstitutionByLocator",
          "originalEndpointId": "institutions.lookUpInstitutionByLocator",
          "name": "Look up institution by routing number, IBAN, or SWIFT/BIC code",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/institutionByLocator"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "The financial institution lookup key (routing number, IBAN, or SWIFT/BIC), as indicated by the `locatorType` query parameter.",
              "key": "locator",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 36
                }
              }
            },
            {
              "description": "Indicates what type of value the `locator` query parameter is.",
              "key": "locatorType",
              "type": {
                "type": "id",
                "value": "institutionLocatorType"
              }
            },
            {
              "description": "The country code in which to search for institutions. For the US, the `locatorType` must be `abaRoutingNumber`. For non-US countries, the `locatorType` must be `swiftBicCode` or `ibanAccountNumber`.",
              "key": "countryCode",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "minLength": 2,
                  "maxLength": 2
                }
              }
            },
            {
              "description": "If looking up a beneficiary institution for a wire transfer beneficiary institution, request the response also include a list of intermediary institutions.",
              "key": "includeIntermediaryInstitutions",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "institutionLookupResult"
              }
            },
            "statusCode": 200,
            "description": "OK."
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request. The request body, request headers, and/or query parameters are not well-formed.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/badRequest/v1.0.0`](https://production.api.apiture.com/errors/badRequest/v1.0.0)<br>\n  The request body and/or parameters was not well-formed.\n  Remediation: Correct any syntax or schema errors in the request body or parameters.\n",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 401,
              "description": "Unauthorized. The operation requires authentication but no authentication or insufficient authentication was given.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unauthorized/v1.0.0`](https://production.api.apiture.com/errors/unauthorized/v1.0.0)<br>\n  The request lacks valid authentication credentials for the target resource or operation.\n  Remediation: Authenticate the user and pass the required authorization with the request.\n\n* [`https://production.api.apiture.com/errors/sessionExpired/v1.0.0`](https://production.api.apiture.com/errors/sessionExpired/v1.0.0)<br>\n  The user's session has expired.\n  Remediation: Re-authenticate the user to get a new access token or other authorization.\n\n* [`https://production.api.apiture.com/errors/challengeRequired/v1.0.0`](https://production.api.apiture.com/errors/challengeRequired/v1.0.0)<br>\n  The operation requires a the customer to complete an identity challenge.\n  Remediation: Complete the challenge as per the problem response, and add an additional `Challenge` header to the call.\nThe `attributes` object in the error may have the properties defined by the [`requiredIdentityChallenge` schema](#schema-requiredIdentityChallenge).\n* [`https://production.api.apiture.com/errors/loginIncomplete/v1.0.0`](https://production.api.apiture.com/errors/loginIncomplete/v1.0.0)<br>\n  The user is correctly authenticated but additional actions are required for activating their login session.\n  Remediation: Instruct the user to complete the additional actions to activate their login session.\n\n* [`https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0`](https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0)<br>\n  The user must change their password.\n  Remediation: Instruct the user to change their password or other login credentials.\n\n* [`https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0`](https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0)<br>\n  The CSRF token is invalid.\n  Remediation: The client application is not correctly configured to send CSRF.\n\n* [`https://production.api.apiture.com/errors/challengeBlocked/v1.0.0`](https://production.api.apiture.com/errors/challengeBlocked/v1.0.0)<br>\n  The user has failed challenges too many times and is blocked from attempting more or performing operations which require additional authentication.\n  Remediation: Have the user end their login session and login again.\n\n* [`https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0`](https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0)<br>\n  This operation requires challenge, but the user does not have the necessary registered authentication factors.\n  Remediation: Have the user register one or more challenge security code delivery factors.\n\n* [`https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0`](https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0)<br>\n  The additional on-time `Challenge` header in this request is expired, already used, or otherwise invalid.\n  Remediation: Supply a valid, unexpired, unclaimed `Challenge` header in the request.\n",
              "name": "UnauthorizedError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 403,
              "description": "Forbidden. The authenticated caller is not authorized to perform the requested operation.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/forbidden/v1.0.0`](https://production.api.apiture.com/errors/forbidden/v1.0.0)<br>\n  The user or agent is not allowed to perform this operation; authentication credentials were provided in the request, but the server considers them insufficient to grant access.\n  Remediation: Check the user's permissions and entitlements before attempting the operation.\n\n* [`https://production.api.apiture.com/errors/customerDisabled/v1.0.0`](https://production.api.apiture.com/errors/customerDisabled/v1.0.0)<br>\n  The customer is disabled.\n  Remediation: Have the customer contact the financial institution for support.\n\n* [`https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0`](https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0)<br>\n  The financial institution requires the customer to have anti-malware software installed.\n  Remediation: Direct the user to the software requirements guide to install the correct anti-malware software.\n\n* [`https://production.api.apiture.com/errors/modificationForbidden/v1.0.0`](https://production.api.apiture.com/errors/modificationForbidden/v1.0.0)<br>\n  The customer is properly authenticated but not authorized to create, modify, or delete resources.\n  Remediation: Avoid modification operation for customers with read-only authorization.\n",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity. The request body and/or query parameters were well formed but otherwise invalid.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/invalidLocator/v1.0.0`](https://production.api.apiture.com/errors/invalidLocator/v1.0.0)<br>\n  The `locator` value is invalid for the given `locatorType`.\n  Remediation: Pass a valid ABA routing number, IBAN number, or SWIFT/BIC code, as per the given `locatorType`.\n",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/institutionByLocator",
              "pathParameters": {},
              "queryParameters": {
                "locator": "foo",
                "locatorType": "abaRoutingNumber",
                "countryCode": "US"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "found": true,
                  "institution": {
                    "name": "First Bank of Andalasia",
                    "address": {
                      "address1": "239 West Princess Ave.",
                      "locality": "Andalasia",
                      "countryCode": "US",
                      "regionCode": "NC",
                      "postalCode": "28407"
                    },
                    "locator": "503000196",
                    "locatorType": "abaRoutingNumber"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "found": true,
                  "institution": {
                    "name": "First Bank of Andalasia",
                    "address": {
                      "address1": "239 West Princess Ave.",
                      "locality": "Andalasia",
                      "countryCode": "US",
                      "regionCode": "NC",
                      "postalCode": "28407"
                    },
                    "locator": "503000196",
                    "locatorType": "abaRoutingNumber"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Return a transfer schedule list for this institution.",
          "method": "GET",
          "defaultEnvironment": "https://api.apiture.com/banking",
          "environments": [
            {
              "id": "https://api.apiture.com/banking",
              "baseUrl": "https://api.apiture.com/banking"
            }
          ],
          "id": "listTransferSchedule",
          "originalEndpointId": "institutions.listTransferSchedule",
          "name": "Return this institution's list of upcoming transfer schedule dates",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of a financial institution.",
                "key": "institutionId",
                "type": {
                  "type": "id",
                  "value": "institutionId"
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/institutions/"
              },
              {
                "type": "pathParameter",
                "value": "institutionId"
              },
              {
                "type": "literal",
                "value": "/transferSchedule"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "The date to use to begin calculations of the transfer schedule in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) date format.",
              "key": "startsOn",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date"
                }
              }
            },
            {
              "description": "The date to use to conclude calculations of the transfer schedule in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) date format.",
              "key": "endsOn",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date"
                  }
                }
              }
            },
            {
              "description": "The direction of the transfer from the institution to the customer used for adjusting transfer dates due to banking holidays. For `debit`, dates are adjusted to the next business day. For `credit`, dates are adjusted to the previous business day.",
              "key": "direction",
              "type": {
                "type": "id",
                "value": "transferScheduleDirection"
              }
            },
            {
              "description": "The maximum amount of dates to calculate and include in the response. If an end date is provided, the total count may be lower than the requested count.",
              "key": "count",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 12,
                    "default": 6
                  }
                }
              }
            },
            {
              "description": "The interval at which the money movement recurs.",
              "key": "frequency",
              "type": {
                "type": "id",
                "value": "transferFrequency"
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "transferSchedules"
              }
            },
            "statusCode": 200,
            "description": "OK."
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request. The request body, request headers, and/or query parameters are not well-formed.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/badRequest/v1.0.0`](https://production.api.apiture.com/errors/badRequest/v1.0.0)<br>\n  The request body and/or parameters was not well-formed.\n  Remediation: Correct any syntax or schema errors in the request body or parameters.\n",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 401,
              "description": "Unauthorized. The operation requires authentication but no authentication or insufficient authentication was given.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unauthorized/v1.0.0`](https://production.api.apiture.com/errors/unauthorized/v1.0.0)<br>\n  The request lacks valid authentication credentials for the target resource or operation.\n  Remediation: Authenticate the user and pass the required authorization with the request.\n\n* [`https://production.api.apiture.com/errors/sessionExpired/v1.0.0`](https://production.api.apiture.com/errors/sessionExpired/v1.0.0)<br>\n  The user's session has expired.\n  Remediation: Re-authenticate the user to get a new access token or other authorization.\n\n* [`https://production.api.apiture.com/errors/challengeRequired/v1.0.0`](https://production.api.apiture.com/errors/challengeRequired/v1.0.0)<br>\n  The operation requires a the customer to complete an identity challenge.\n  Remediation: Complete the challenge as per the problem response, and add an additional `Challenge` header to the call.\nThe `attributes` object in the error may have the properties defined by the [`requiredIdentityChallenge` schema](#schema-requiredIdentityChallenge).\n* [`https://production.api.apiture.com/errors/loginIncomplete/v1.0.0`](https://production.api.apiture.com/errors/loginIncomplete/v1.0.0)<br>\n  The user is correctly authenticated but additional actions are required for activating their login session.\n  Remediation: Instruct the user to complete the additional actions to activate their login session.\n\n* [`https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0`](https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0)<br>\n  The user must change their password.\n  Remediation: Instruct the user to change their password or other login credentials.\n\n* [`https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0`](https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0)<br>\n  The CSRF token is invalid.\n  Remediation: The client application is not correctly configured to send CSRF.\n\n* [`https://production.api.apiture.com/errors/challengeBlocked/v1.0.0`](https://production.api.apiture.com/errors/challengeBlocked/v1.0.0)<br>\n  The user has failed challenges too many times and is blocked from attempting more or performing operations which require additional authentication.\n  Remediation: Have the user end their login session and login again.\n\n* [`https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0`](https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0)<br>\n  This operation requires challenge, but the user does not have the necessary registered authentication factors.\n  Remediation: Have the user register one or more challenge security code delivery factors.\n\n* [`https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0`](https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0)<br>\n  The additional on-time `Challenge` header in this request is expired, already used, or otherwise invalid.\n  Remediation: Supply a valid, unexpired, unclaimed `Challenge` header in the request.\n",
              "name": "UnauthorizedError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 403,
              "description": "Forbidden. The authenticated caller is not authorized to perform the requested operation.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/forbidden/v1.0.0`](https://production.api.apiture.com/errors/forbidden/v1.0.0)<br>\n  The user or agent is not allowed to perform this operation; authentication credentials were provided in the request, but the server considers them insufficient to grant access.\n  Remediation: Check the user's permissions and entitlements before attempting the operation.\n\n* [`https://production.api.apiture.com/errors/customerDisabled/v1.0.0`](https://production.api.apiture.com/errors/customerDisabled/v1.0.0)<br>\n  The customer is disabled.\n  Remediation: Have the customer contact the financial institution for support.\n\n* [`https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0`](https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0)<br>\n  The financial institution requires the customer to have anti-malware software installed.\n  Remediation: Direct the user to the software requirements guide to install the correct anti-malware software.\n\n* [`https://production.api.apiture.com/errors/modificationForbidden/v1.0.0`](https://production.api.apiture.com/errors/modificationForbidden/v1.0.0)<br>\n  The customer is properly authenticated but not authorized to create, modify, or delete resources.\n  Remediation: Avoid modification operation for customers with read-only authorization.\n",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 404,
              "description": "Not found. There is no such resource at the request URL.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/notFound/v1.0.0`](https://production.api.apiture.com/errors/notFound/v1.0.0)<br>\n  The resource at the requested URL does not exist.\n  Remediation: Use the URL of an existing resource.\n",
              "name": "NotFoundError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity. The request body and/or query parameters were well formed but otherwise invalid.",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/institutions/",
              "pathParameters": {
                "institutionId": "TIBURON"
              },
              "queryParameters": {
                "startsOn": "2022-07-04",
                "direction": "debit",
                "frequency": "once"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "items": [
                    {
                      "scheduledOn": "2022-06-27",
                      "effectiveOn": "2022-06-27"
                    },
                    {
                      "scheduledOn": "2022-07-04",
                      "effectiveOn": "2022-07-05"
                    },
                    {
                      "scheduledOn": "2022-07-11",
                      "effectiveOn": "2022-07-11"
                    },
                    {
                      "scheduledOn": "2022-07-18",
                      "effectiveOn": "2022-07-18"
                    },
                    {
                      "scheduledOn": "2022-07-25",
                      "effectiveOn": "2022-07-25"
                    },
                    {
                      "scheduledOn": "2022-08-01",
                      "effectiveOn": "2022-07-01"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "items": [
                    {
                      "scheduledOn": "2022-06-27",
                      "effectiveOn": "2022-06-27"
                    },
                    {
                      "scheduledOn": "2022-07-04",
                      "effectiveOn": "2022-07-05"
                    },
                    {
                      "scheduledOn": "2022-07-11",
                      "effectiveOn": "2022-07-11"
                    },
                    {
                      "scheduledOn": "2022-07-18",
                      "effectiveOn": "2022-07-18"
                    },
                    {
                      "scheduledOn": "2022-07-25",
                      "effectiveOn": "2022-07-25"
                    },
                    {
                      "scheduledOn": "2022-08-01",
                      "effectiveOn": "2022-07-01"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Return daily cutoff times for different money movement processes at a financial institution. Money movement requests (account to account transfers, ACH, wire transfers, etc.) must be submitted before the cutoff time in order for the financial institution to begin processing the request that day. Some [cutoff time types](#schema-cutoffTimeType) may have multiple cutoff times per day.\n\nCutoff times are very slowly changing data. This is a _conditional operation_ when the `If-None-Match` header is used. If the client has a `getCutoffTimes` response and the `ETag` returned from a previous call to this operation, this operation returns a 304 Not Modified when called again if the cutoff times have not changed.",
          "method": "GET",
          "defaultEnvironment": "https://api.apiture.com/banking",
          "environments": [
            {
              "id": "https://api.apiture.com/banking",
              "baseUrl": "https://api.apiture.com/banking"
            }
          ],
          "id": "getCutoffTimes",
          "originalEndpointId": "institutions.getCutoffTimes",
          "name": "Return the financial institution's cutoff times for products",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of a financial institution.",
                "key": "institutionId",
                "type": {
                  "type": "id",
                  "value": "institutionId"
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/institutions/"
              },
              {
                "type": "pathParameter",
                "value": "institutionId"
              },
              {
                "type": "literal",
                "value": "/cutoffTimes"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Identifies the time zone for formatting time values in the response. If omitted, time values are formatting in the local timezone of the financial institution.",
              "key": "timeZoneId",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "timeZoneId"
                }
              }
            }
          ],
          "headers": [
            {
              "description": "The entity tag that was returned in the `ETag` response header of a previous call. If the resource's current entity tag value matches this header value, the `GET` will return 304 (Not Modified) and no response body, else the current resource representation and updated `ETag` is returned.",
              "key": "If-None-Match",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 512
                  }
                }
              }
            }
          ],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "cutoffTimes"
              }
            },
            "statusCode": 200,
            "description": "OK."
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request. The request body, request headers, and/or query parameters are not well-formed.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/badRequest/v1.0.0`](https://production.api.apiture.com/errors/badRequest/v1.0.0)<br>\n  The request body and/or parameters was not well-formed.\n  Remediation: Correct any syntax or schema errors in the request body or parameters.\n",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 401,
              "description": "Unauthorized. The operation requires authentication but no authentication or insufficient authentication was given.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unauthorized/v1.0.0`](https://production.api.apiture.com/errors/unauthorized/v1.0.0)<br>\n  The request lacks valid authentication credentials for the target resource or operation.\n  Remediation: Authenticate the user and pass the required authorization with the request.\n\n* [`https://production.api.apiture.com/errors/sessionExpired/v1.0.0`](https://production.api.apiture.com/errors/sessionExpired/v1.0.0)<br>\n  The user's session has expired.\n  Remediation: Re-authenticate the user to get a new access token or other authorization.\n\n* [`https://production.api.apiture.com/errors/challengeRequired/v1.0.0`](https://production.api.apiture.com/errors/challengeRequired/v1.0.0)<br>\n  The operation requires a the customer to complete an identity challenge.\n  Remediation: Complete the challenge as per the problem response, and add an additional `Challenge` header to the call.\nThe `attributes` object in the error may have the properties defined by the [`requiredIdentityChallenge` schema](#schema-requiredIdentityChallenge).\n* [`https://production.api.apiture.com/errors/loginIncomplete/v1.0.0`](https://production.api.apiture.com/errors/loginIncomplete/v1.0.0)<br>\n  The user is correctly authenticated but additional actions are required for activating their login session.\n  Remediation: Instruct the user to complete the additional actions to activate their login session.\n\n* [`https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0`](https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0)<br>\n  The user must change their password.\n  Remediation: Instruct the user to change their password or other login credentials.\n\n* [`https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0`](https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0)<br>\n  The CSRF token is invalid.\n  Remediation: The client application is not correctly configured to send CSRF.\n\n* [`https://production.api.apiture.com/errors/challengeBlocked/v1.0.0`](https://production.api.apiture.com/errors/challengeBlocked/v1.0.0)<br>\n  The user has failed challenges too many times and is blocked from attempting more or performing operations which require additional authentication.\n  Remediation: Have the user end their login session and login again.\n\n* [`https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0`](https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0)<br>\n  This operation requires challenge, but the user does not have the necessary registered authentication factors.\n  Remediation: Have the user register one or more challenge security code delivery factors.\n\n* [`https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0`](https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0)<br>\n  The additional on-time `Challenge` header in this request is expired, already used, or otherwise invalid.\n  Remediation: Supply a valid, unexpired, unclaimed `Challenge` header in the request.\n",
              "name": "UnauthorizedError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 403,
              "description": "Forbidden. The authenticated caller is not authorized to perform the requested operation.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/forbidden/v1.0.0`](https://production.api.apiture.com/errors/forbidden/v1.0.0)<br>\n  The user or agent is not allowed to perform this operation; authentication credentials were provided in the request, but the server considers them insufficient to grant access.\n  Remediation: Check the user's permissions and entitlements before attempting the operation.\n\n* [`https://production.api.apiture.com/errors/customerDisabled/v1.0.0`](https://production.api.apiture.com/errors/customerDisabled/v1.0.0)<br>\n  The customer is disabled.\n  Remediation: Have the customer contact the financial institution for support.\n\n* [`https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0`](https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0)<br>\n  The financial institution requires the customer to have anti-malware software installed.\n  Remediation: Direct the user to the software requirements guide to install the correct anti-malware software.\n\n* [`https://production.api.apiture.com/errors/modificationForbidden/v1.0.0`](https://production.api.apiture.com/errors/modificationForbidden/v1.0.0)<br>\n  The customer is properly authenticated but not authorized to create, modify, or delete resources.\n  Remediation: Avoid modification operation for customers with read-only authorization.\n",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 404,
              "description": "Not found. There is no such resource at the request URL.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/notFound/v1.0.0`](https://production.api.apiture.com/errors/notFound/v1.0.0)<br>\n  The resource at the requested URL does not exist.\n  Remediation: Use the URL of an existing resource.\n",
              "name": "NotFoundError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 412,
              "description": "Precondition Failed. One or more conditions given in the request header fields evaluated to false when tested on the server.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/preconditionFailed/v1.0.0`](https://production.api.apiture.com/errors/preconditionFailed/v1.0.0)<br>\n  One or more conditions given in the request header fields evaluated to false when tested on the server.\n  Remediation: Update resources and use it's most recent ETag or modification time stamp.\n",
              "name": "PreconditionFailedError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity. The request body and/or query parameters were well formed but otherwise invalid.",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/institutions/",
              "pathParameters": {
                "institutionId": "TIBURON"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "timeZoneId": "America/New_York",
                  "items": [
                    {
                      "type": "ach",
                      "time": "13:45"
                    },
                    {
                      "type": "ach",
                      "time": "16:45"
                    },
                    {
                      "type": "sameDayAch",
                      "time": "16:45"
                    },
                    {
                      "type": "domesticWireTransfer",
                      "time": "16:45"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "timeZoneId": "America/New_York",
                  "items": [
                    {
                      "type": "ach",
                      "time": "13:45"
                    },
                    {
                      "type": "ach",
                      "time": "16:45"
                    },
                    {
                      "type": "sameDayAch",
                      "time": "16:45"
                    },
                    {
                      "type": "domesticWireTransfer",
                      "time": "16:45"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Return the transfer date restrictions for a date range and transfer parameters. The result is a list of days and dates that the financial institution does not allow scheduling specific types of transfers.\n\nThis information provides hints to clients, allowing bank customers to select transfer dates from a calendar picker. However, these dates are not strictly enforced; a transfer can still be scheduled to occur on restricted dates but the financial institution may shift the date when funds are drafted to account for holidays, closures, or to adjust based on the risk level of the funding account.",
          "method": "GET",
          "defaultEnvironment": "https://api.apiture.com/banking",
          "environments": [
            {
              "id": "https://api.apiture.com/banking",
              "baseUrl": "https://api.apiture.com/banking"
            }
          ],
          "id": "getTransferDateRestrictions",
          "originalEndpointId": "institutions.getTransferDateRestrictions",
          "name": "Return the financial institution's transfer dates restrictions",
          "path": {
            "pathParameters": [
              {
                "description": "The unique identifier of a financial institution.",
                "key": "institutionId",
                "type": {
                  "type": "id",
                  "value": "institutionId"
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/institutions/"
              },
              {
                "type": "pathParameter",
                "value": "institutionId"
              },
              {
                "type": "literal",
                "value": "/transferDateRestrictions"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "The start of the range of dates to include in the response, in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. While start dates far in the future are allowed, bank holiday schedules are only available for a small number of years ahead. The default is the current date.",
              "key": "startsOn",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date"
                  }
                }
              }
            },
            {
              "description": "The end of the range of dates to include in the response. in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. The default is at least one year from the `startOn` date and is limited to a four year interval.",
              "key": "endsOn",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date"
                  }
                }
              }
            },
            {
              "description": "Describes the type of transfer. This determines what business rules and adjustments to make to the date restrictions. Note ACH transfers (including CTX and PPD), that `Credit` and `Debit` here are relative to the account at the _external_ financial institution.",
              "key": "type",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "transferTypeForDateRestrictions"
                }
              }
            },
            {
              "description": "The primary account's risk level. This determines what business rules and adjustments to make to the date restrictions. This parameter only applies to ACH credit transfers (funds credited to an external account) and is ignored for others.",
              "key": "risk",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "achAccountRisk"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "transferDateRestrictions"
              }
            },
            "statusCode": 200,
            "description": "OK."
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request. The request body, request headers, and/or query parameters are not well-formed.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/badRequest/v1.0.0`](https://production.api.apiture.com/errors/badRequest/v1.0.0)<br>\n  The request body and/or parameters was not well-formed.\n  Remediation: Correct any syntax or schema errors in the request body or parameters.\n",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 401,
              "description": "Unauthorized. The operation requires authentication but no authentication or insufficient authentication was given.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unauthorized/v1.0.0`](https://production.api.apiture.com/errors/unauthorized/v1.0.0)<br>\n  The request lacks valid authentication credentials for the target resource or operation.\n  Remediation: Authenticate the user and pass the required authorization with the request.\n\n* [`https://production.api.apiture.com/errors/sessionExpired/v1.0.0`](https://production.api.apiture.com/errors/sessionExpired/v1.0.0)<br>\n  The user's session has expired.\n  Remediation: Re-authenticate the user to get a new access token or other authorization.\n\n* [`https://production.api.apiture.com/errors/challengeRequired/v1.0.0`](https://production.api.apiture.com/errors/challengeRequired/v1.0.0)<br>\n  The operation requires a the customer to complete an identity challenge.\n  Remediation: Complete the challenge as per the problem response, and add an additional `Challenge` header to the call.\nThe `attributes` object in the error may have the properties defined by the [`requiredIdentityChallenge` schema](#schema-requiredIdentityChallenge).\n* [`https://production.api.apiture.com/errors/loginIncomplete/v1.0.0`](https://production.api.apiture.com/errors/loginIncomplete/v1.0.0)<br>\n  The user is correctly authenticated but additional actions are required for activating their login session.\n  Remediation: Instruct the user to complete the additional actions to activate their login session.\n\n* [`https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0`](https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0)<br>\n  The user must change their password.\n  Remediation: Instruct the user to change their password or other login credentials.\n\n* [`https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0`](https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0)<br>\n  The CSRF token is invalid.\n  Remediation: The client application is not correctly configured to send CSRF.\n\n* [`https://production.api.apiture.com/errors/challengeBlocked/v1.0.0`](https://production.api.apiture.com/errors/challengeBlocked/v1.0.0)<br>\n  The user has failed challenges too many times and is blocked from attempting more or performing operations which require additional authentication.\n  Remediation: Have the user end their login session and login again.\n\n* [`https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0`](https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0)<br>\n  This operation requires challenge, but the user does not have the necessary registered authentication factors.\n  Remediation: Have the user register one or more challenge security code delivery factors.\n\n* [`https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0`](https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0)<br>\n  The additional on-time `Challenge` header in this request is expired, already used, or otherwise invalid.\n  Remediation: Supply a valid, unexpired, unclaimed `Challenge` header in the request.\n",
              "name": "UnauthorizedError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 403,
              "description": "Forbidden. The authenticated caller is not authorized to perform the requested operation.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/forbidden/v1.0.0`](https://production.api.apiture.com/errors/forbidden/v1.0.0)<br>\n  The user or agent is not allowed to perform this operation; authentication credentials were provided in the request, but the server considers them insufficient to grant access.\n  Remediation: Check the user's permissions and entitlements before attempting the operation.\n\n* [`https://production.api.apiture.com/errors/customerDisabled/v1.0.0`](https://production.api.apiture.com/errors/customerDisabled/v1.0.0)<br>\n  The customer is disabled.\n  Remediation: Have the customer contact the financial institution for support.\n\n* [`https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0`](https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0)<br>\n  The financial institution requires the customer to have anti-malware software installed.\n  Remediation: Direct the user to the software requirements guide to install the correct anti-malware software.\n\n* [`https://production.api.apiture.com/errors/modificationForbidden/v1.0.0`](https://production.api.apiture.com/errors/modificationForbidden/v1.0.0)<br>\n  The customer is properly authenticated but not authorized to create, modify, or delete resources.\n  Remediation: Avoid modification operation for customers with read-only authorization.\n",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 404,
              "description": "Not found. There is no such resource at the request URL.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/notFound/v1.0.0`](https://production.api.apiture.com/errors/notFound/v1.0.0)<br>\n  The resource at the requested URL does not exist.\n  Remediation: Use the URL of an existing resource.\n",
              "name": "NotFoundError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity. The request body and/or query parameters were well-formed but otherwise invalid.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/invalidRestrictionDateRange/v1.0.0`](https://production.api.apiture.com/errors/invalidRestrictionDateRange/v1.0.0)<br>\n  The `startOn` date should be the current day or later, and the `endOn` date must fall after the `startOn` date.\n  Remediation: Pass valid values for `startOn` and `endOn`.\n\n* [`https://production.api.apiture.com/errors/restrictionDateRangeTooLarge/v1.0.0`](https://production.api.apiture.com/errors/restrictionDateRangeTooLarge/v1.0.0)<br>\n  The `endOn` is limited to four years after the `startOn` date.\n  Remediation: Limit the `endOn` date to no more than four years after the `startOn` date.\n",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/institutions/",
              "pathParameters": {
                "institutionId": "TIBURON"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "restrictedDates": [
                    {
                      "occursOn": "2022-10-01",
                      "reason": "pastDate"
                    },
                    {
                      "occursOn": "2022-10-02",
                      "reason": "pastDate"
                    },
                    {
                      "occursOn": "2022-10-03",
                      "reason": "pastDate"
                    },
                    {
                      "occursOn": "2022-10-04",
                      "reason": "pastDate"
                    },
                    {
                      "occursOn": "2022-10-05",
                      "reason": "pastCutoffTime"
                    },
                    {
                      "occursOn": "2022-10-06",
                      "reason": "riskRestricted"
                    },
                    {
                      "occursOn": "2022-10-07",
                      "reason": "riskRestricted"
                    },
                    {
                      "occursOn": "2022-10-08",
                      "reason": "closure"
                    },
                    {
                      "occursOn": "2022-10-09",
                      "reason": "closure"
                    },
                    {
                      "occursOn": "2022-10-10",
                      "reason": "holiday"
                    },
                    {
                      "occursOn": "2022-10-15",
                      "reason": "closure"
                    },
                    {
                      "occursOn": "2022-10-16",
                      "reason": "closure"
                    },
                    {
                      "occursOn": "2022-10-22",
                      "reason": "closure"
                    },
                    {
                      "occursOn": "2022-10-23",
                      "reason": "closure"
                    },
                    {
                      "occursOn": "2022-10-29",
                      "reason": "closure"
                    },
                    {
                      "occursOn": "2022-10-30",
                      "reason": "closure"
                    }
                  ],
                  "accuracyEndsOn": "2026-12-31T00:00:00.000Z"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "restrictedDates": [
                    {
                      "occursOn": "2022-10-01",
                      "reason": "pastDate"
                    },
                    {
                      "occursOn": "2022-10-02",
                      "reason": "pastDate"
                    },
                    {
                      "occursOn": "2022-10-03",
                      "reason": "pastDate"
                    },
                    {
                      "occursOn": "2022-10-04",
                      "reason": "pastDate"
                    },
                    {
                      "occursOn": "2022-10-05",
                      "reason": "pastCutoffTime"
                    },
                    {
                      "occursOn": "2022-10-06",
                      "reason": "riskRestricted"
                    },
                    {
                      "occursOn": "2022-10-07",
                      "reason": "riskRestricted"
                    },
                    {
                      "occursOn": "2022-10-08",
                      "reason": "closure"
                    },
                    {
                      "occursOn": "2022-10-09",
                      "reason": "closure"
                    },
                    {
                      "occursOn": "2022-10-10",
                      "reason": "holiday"
                    },
                    {
                      "occursOn": "2022-10-15",
                      "reason": "closure"
                    },
                    {
                      "occursOn": "2022-10-16",
                      "reason": "closure"
                    },
                    {
                      "occursOn": "2022-10-22",
                      "reason": "closure"
                    },
                    {
                      "occursOn": "2022-10-23",
                      "reason": "closure"
                    },
                    {
                      "occursOn": "2022-10-29",
                      "reason": "closure"
                    },
                    {
                      "occursOn": "2022-10-30",
                      "reason": "closure"
                    }
                  ],
                  "accuracyEndsOn": "2026-12-31T00:00:00.000Z"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_transactions": {
      "subpackageId": "subpackage_transactions",
      "name": "transactions",
      "endpoints": [
        {
          "auth": true,
          "description": "Return a [paginated](https://dx.apiture.com/docs/api-documentation/concepts/pagination) collection of transaction history for this internal account. The [`nextPage_url`](https://dx.apiture.com/docs/api-documentation/concepts/links) link in the response, if present, is a pagination link to the next page of transactions for the given filters.\n\nThis operation returns a 403 Forbidden error if the customer does not have `view` permissions in the `account.allows` object, or a 422 Unprocessable Entity if called on an external account.\n\nThe default response lists only recent transactions. Normally, this is transactions for the most recent 30 days, although for high-volume accounts, it may be a shorter period.",
          "method": "GET",
          "defaultEnvironment": "https://api.apiture.com/banking",
          "environments": [
            {
              "id": "https://api.apiture.com/banking",
              "baseUrl": "https://api.apiture.com/banking"
            }
          ],
          "id": "listTransactions",
          "originalEndpointId": "transactions.listTransactions",
          "name": "Return a collection of transactions",
          "path": {
            "pathParameters": [
              {
                "key": "accountId",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/accounts/"
              },
              {
                "type": "pathParameter",
                "value": "accountId"
              },
              {
                "type": "literal",
                "value": "/transactions"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "The location of the next item in the collection. This is an opaque cursor supplied by the API service. Omit this to start at the beginning of the collection. The client does not define this value; the API services automatically pass the `?start=` parameter on the `nextPage_url`.",
              "key": "start",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 256,
                    "default": ""
                  }
                }
              }
            },
            {
              "description": "The maximum number of items to return in this paged response.",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 10000,
                    "default": 100
                  }
                }
              }
            },
            {
              "description": "Return only transactions whose `occurredOn` date is in this date range. Dates ranges use dates expressed in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) `date` format. Each account has an implicit default transaction history range of _n_ days. This is normally 30 days but may be shorter for accounts with high activity. This _n_ day period is applied to any unbounded date ranges. The default date range is the most recent _n_ days. Example date ranges: <ul> <li> `2023-05-19` match transactions occurring on May 19, 2023.</li> <li> `[2023-05-01,2023-05-31]` match transactions occurring between May 1 and 31, 2023, inclusive</li> <li> `[2023-05-01,2023-06-01)` match transactions occurring in May, 2023 (on or after May 1, but before June 1)</li> <li> `[2023-05-09,]` match transactions _n_ days on or after May 9, 2023</li> <li> `(2023-05-09,)` match transactions _n_ days after May 9, 2023</li> <li> `[,2023-05-09]` match transactions _n_ days on or before May 9, 2023</li> <li> `(,2023-05-09)` match transactions _n_ days before but excluding May 9, 2023</li> </ul>",
              "key": "occurredOn",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^\\d{4}-\\d{2}-\\d{2}|([[(](\\d{4}-\\d{2}-\\d{2},(\\d{4}-\\d{2}-\\d{2})?|,\\d{4}-\\d{2}-\\d{2})[)\\]])$"
                  }
                }
              }
            },
            {
              "description": "Limit transactions in the response based on the transaction's `posted` value. If `true`, include only posted transactions. If `false`, include only non-posted transactions. If omitted, do not filter based on `posted`. Note that using this filter excludes balance transactions because the `posted` property is not set on balance transactions, so neither `true` or `false` match them.",
              "key": "posted",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "description": "Return only transactions whose `createdOn` date is in this date range. Example date ranges are the same format as the `occurredOn` query parameter.<br>**Warning**: The parameter `createdOn` was deprecated on version `v0.6.0` of the API. Use the `?occurredOn=` query parameter instead. `createdOn` will be removed on version `v0.9.0` of the API.",
              "key": "createdOn",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "dateRange"
                }
              },
              "availability": "Deprecated"
            },
            {
              "description": "Return only transactions whose `postedOn` date is in this date range. Example date ranges are the same format as the `occurredOn` query parameter.<br>**Warning**: The parameter `postedOn` was deprecated on version `v0.6.0` of the API. Use the `?occurredOn=` query parameter instead. `postedOn` will be removed on version `v0.9.0` of the API.",
              "key": "postedOn",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "dateRange"
                }
              },
              "availability": "Deprecated"
            },
            {
              "description": "Filter transactions to only those whose `category` is in this pipe-separated list. Categories are set by a transaction cleansing service or assigned by the account holder. Categories can include names such as `\"Shopping\"`, `\"Deposit\"`, `\"Bill\"`, `\"Transfer\"`, or `\"Other\"`.",
              "key": "category",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "transactionCategoryLabel"
                  }
                }
              }
            },
            {
              "description": "Filter transactions to only those whose `type` is in this pipe-separated list.",
              "key": "type",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "transactionType"
                  }
                }
              }
            },
            {
              "description": "Filter transactions to only those whose `subtype` is in this pipe-separated list.",
              "key": "subtype",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "transactionSubType"
                  }
                }
              }
            },
            {
              "description": "Return only transactions whose `amount` is in this numeric range. This compares only the absolute value of the transaction. That is, the value `[1000.00,1100.00)` matches either a debit of `-1070.25` or a credit of `1021.90`.<br> Some examples of specifying an amount range: <ul> <li>`1200.50` match the dollar amount 1,200.50 exactly</li> <li>`[1000.00,1200.00)` matches items where `1000.00 <= amount < 1200.00`</li> <li>`[1000.00,1199.99]` matches items where `1000.00 <= amount <= 1199.99`</li> <li>`(999.99,1200.00]` matches items where `999.99 < amount <= 1200.00`</li> <li>`[1200.50,]` matches items where `amount >= 1200.50`</li> <li>`(1200.50,)` matches items where `amount > 1200.50`</li> <li>`[,1200.50]` matches items where `amount <= 1200.50`</li> <li>`(,1200.50)` matches items where `amount < 1200.50`</li> </ul>",
              "key": "amount",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "amountRange"
                }
              }
            },
            {
              "description": "Return only transactions whose `check.number` is in this integer range. Examples: <ul> <li>`1200` match the integer 1,200 exactly</li> <li>`[1000,1200)` matches items where `1000 <= number < 1200`</li> <li>`[1000,1199]` matches items where `1000 <= number <= 1199`</li> <li>`(999,1200]` matches items where `999 < number <= 1200`</li> <li>`[1200,]` matches items where `number >= 1200`</li> <li>`(1200,)` matches items where `number > 1200`</li> <li>`[,1200]` matches items where `number <= 1200`</li> <li>`(,1200)` matches items where `number < 1200`</li> </ul>",
              "key": "checkNumber",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "checkNumberRange"
                }
              }
            },
            {
              "description": "When retrying the operation, pass the `retryCount` from the `incompleteTransactions` response.",
              "key": "retryCount",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 10
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "transactions"
              }
            },
            "statusCode": 200,
            "description": "OK."
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request. The request body, request headers, and/or query parameters are not well-formed.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/badRequest/v1.0.0`](https://production.api.apiture.com/errors/badRequest/v1.0.0)<br>\n  The request body and/or parameters was not well-formed.\n  Remediation: Correct any syntax or schema errors in the request body or parameters.\n",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 401,
              "description": "Unauthorized. The operation requires authentication but no authentication or insufficient authentication was given.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unauthorized/v1.0.0`](https://production.api.apiture.com/errors/unauthorized/v1.0.0)<br>\n  The request lacks valid authentication credentials for the target resource or operation.\n  Remediation: Authenticate the user and pass the required authorization with the request.\n\n* [`https://production.api.apiture.com/errors/sessionExpired/v1.0.0`](https://production.api.apiture.com/errors/sessionExpired/v1.0.0)<br>\n  The user's session has expired.\n  Remediation: Re-authenticate the user to get a new access token or other authorization.\n\n* [`https://production.api.apiture.com/errors/challengeRequired/v1.0.0`](https://production.api.apiture.com/errors/challengeRequired/v1.0.0)<br>\n  The operation requires a the customer to complete an identity challenge.\n  Remediation: Complete the challenge as per the problem response, and add an additional `Challenge` header to the call.\nThe `attributes` object in the error may have the properties defined by the [`requiredIdentityChallenge` schema](#schema-requiredIdentityChallenge).\n* [`https://production.api.apiture.com/errors/loginIncomplete/v1.0.0`](https://production.api.apiture.com/errors/loginIncomplete/v1.0.0)<br>\n  The user is correctly authenticated but additional actions are required for activating their login session.\n  Remediation: Instruct the user to complete the additional actions to activate their login session.\n\n* [`https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0`](https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0)<br>\n  The user must change their password.\n  Remediation: Instruct the user to change their password or other login credentials.\n\n* [`https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0`](https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0)<br>\n  The CSRF token is invalid.\n  Remediation: The client application is not correctly configured to send CSRF.\n\n* [`https://production.api.apiture.com/errors/challengeBlocked/v1.0.0`](https://production.api.apiture.com/errors/challengeBlocked/v1.0.0)<br>\n  The user has failed challenges too many times and is blocked from attempting more or performing operations which require additional authentication.\n  Remediation: Have the user end their login session and login again.\n\n* [`https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0`](https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0)<br>\n  This operation requires challenge, but the user does not have the necessary registered authentication factors.\n  Remediation: Have the user register one or more challenge security code delivery factors.\n\n* [`https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0`](https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0)<br>\n  The additional on-time `Challenge` header in this request is expired, already used, or otherwise invalid.\n  Remediation: Supply a valid, unexpired, unclaimed `Challenge` header in the request.\n",
              "name": "UnauthorizedError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 403,
              "description": "Forbidden. The authenticated caller is not authorized to perform the requested operation.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/forbidden/v1.0.0`](https://production.api.apiture.com/errors/forbidden/v1.0.0)<br>\n  The user or agent is not allowed to perform this operation; authentication credentials were provided in the request, but the server considers them insufficient to grant access.\n  Remediation: Check the user's permissions and entitlements before attempting the operation.\n\n* [`https://production.api.apiture.com/errors/customerDisabled/v1.0.0`](https://production.api.apiture.com/errors/customerDisabled/v1.0.0)<br>\n  The customer is disabled.\n  Remediation: Have the customer contact the financial institution for support.\n\n* [`https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0`](https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0)<br>\n  The financial institution requires the customer to have anti-malware software installed.\n  Remediation: Direct the user to the software requirements guide to install the correct anti-malware software.\n\n* [`https://production.api.apiture.com/errors/modificationForbidden/v1.0.0`](https://production.api.apiture.com/errors/modificationForbidden/v1.0.0)<br>\n  The customer is properly authenticated but not authorized to create, modify, or delete resources.\n  Remediation: Avoid modification operation for customers with read-only authorization.\n",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found. There is no such banking account resource at the specified `{accountId}` or the customer does not have entitlement to that account.",
              "name": "NotFoundError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity. The request body and/or query parameters were well formed but otherwise invalid.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/transactionsForInternalAccountOnly/v1.0.0`](https://production.api.apiture.com/errors/transactionsForInternalAccountOnly/v1.0.0)<br>\n  Transactions are not available for external accounts.\n  Remediation: Request transactions only for internal accounts.\n",
              "name": "UnprocessableEntityError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 429,
              "description": "Too Many Requests. The client has sent too many requests in a given amount of time.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/tooManyRequests/v1.0.0`](https://production.api.apiture.com/errors/tooManyRequests/v1.0.0)<br>\n  The client has sent too many requests in a given amount of time, exceeding rate limiting.\n  Remediation: Slow down the rate of API calls.\n",
              "name": "TooManyRequestsError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 504,
              "description": "Gateway Timeout. The server did not receive a timely response from an upstream server it needed to access in order to complete the request.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/gatewayTimeout/v1.0.0`](https://production.api.apiture.com/errors/gatewayTimeout/v1.0.0)<br>\n  The server did not receive a timely response from an upstream server it needed to access in order to complete the request.\n  Remediation: Wait a few minutes and try again, or gracefully fail the client request.\n",
              "name": "GatewayTimeoutError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/accounts/",
              "pathParameters": {
                "accountId": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "limit": 10,
                  "nextPage_url": "https://production.api.apiture.com/banking/accounts/c9fc25b47d52916fc9ad/transactions?start=6117a4dcefb841cab7316cef1ac8b58c&limit=10",
                  "start": "d1b48af913464aa49fcb07065dcc0616",
                  "items": [
                    {
                      "id": "d62c0701-0d74",
                      "type": "balance",
                      "subtype": "check",
                      "occurredOn": "2023-06-18",
                      "amount": "0.00",
                      "posted": true,
                      "balance": "8509.38"
                    },
                    {
                      "id": "88f5bf17-ecc4",
                      "type": "debit",
                      "subtype": "check",
                      "occurredOn": "2023-06-18",
                      "amount": "1276.21",
                      "posted": true,
                      "balance": "8509.38",
                      "memo": "Paid electric bill",
                      "category": {
                        "label": "Utilities",
                        "id": "127"
                      },
                      "merchant": {
                        "name": "B&T's Excellent Electric Co.",
                        "website_url": "https://BillTedsExcellentElectricCompany.example.com/",
                        "logo_url": "https://BillTedsExcellentElectricCompany.example.com/img/logos/medium.png"
                      },
                      "check": {
                        "number": 8412,
                        "imageFront_url": "/accounts/1d16e438-18e0/transactions/88f5bf17-ecc4/images/front/content",
                        "imageBack_url": "/accounts/1d16e438-18e0/transactions/88f5bf17-ecc4/images/back/content"
                      }
                    }
                  ],
                  "count": 2381
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "limit": 10,
                  "nextPage_url": "https://production.api.apiture.com/banking/accounts/c9fc25b47d52916fc9ad/transactions?start=6117a4dcefb841cab7316cef1ac8b58c&limit=10",
                  "start": "d1b48af913464aa49fcb07065dcc0616",
                  "items": [
                    {
                      "id": "d62c0701-0d74",
                      "type": "balance",
                      "subtype": "check",
                      "occurredOn": "2023-06-18",
                      "amount": "0.00",
                      "posted": true,
                      "balance": "8509.38"
                    },
                    {
                      "id": "88f5bf17-ecc4",
                      "type": "debit",
                      "subtype": "check",
                      "occurredOn": "2023-06-18",
                      "amount": "1276.21",
                      "posted": true,
                      "balance": "8509.38",
                      "memo": "Paid electric bill",
                      "category": {
                        "label": "Utilities",
                        "id": "127"
                      },
                      "merchant": {
                        "name": "B&T's Excellent Electric Co.",
                        "website_url": "https://BillTedsExcellentElectricCompany.example.com/",
                        "logo_url": "https://BillTedsExcellentElectricCompany.example.com/img/logos/medium.png"
                      },
                      "check": {
                        "number": 8412,
                        "imageFront_url": "/accounts/1d16e438-18e0/transactions/88f5bf17-ecc4/images/front/content",
                        "imageBack_url": "/accounts/1d16e438-18e0/transactions/88f5bf17-ecc4/images/back/content"
                      }
                    }
                  ],
                  "count": 2381
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_transactionCategories": {
      "subpackageId": "subpackage_transactionCategories",
      "name": "transactionCategories",
      "endpoints": [
        {
          "auth": true,
          "description": "Return a collection of transaction categories. The response is limited to 1,000 categories.\n\nThis is a _conditional operation_ when the `If-None-Match` header is used. If the client has a `transactionCategories` response and the `ETag` returned from a previous call, this operation returns a 304 Not Modified if called again when the categories collection has not changed.",
          "method": "GET",
          "defaultEnvironment": "https://api.apiture.com/banking",
          "environments": [
            {
              "id": "https://api.apiture.com/banking",
              "baseUrl": "https://api.apiture.com/banking"
            }
          ],
          "id": "listTransactionCategories",
          "originalEndpointId": "transactionCategories.listTransactionCategories",
          "name": "Return a collection of transaction categories",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transactionCategories"
              }
            ]
          },
          "queryParameters": [],
          "headers": [
            {
              "description": "The entity tag that was returned in the `ETag` response header of a previous call. If the resource's current entity tag value matches this header value, the `GET` will return 304 (Not Modified) and no response body, else the current resource representation and updated `ETag` is returned.",
              "key": "If-None-Match",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 512
                  }
                }
              }
            }
          ],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "transactionCategories"
              }
            },
            "statusCode": 200,
            "description": "OK."
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request. The request body, request headers, and/or query parameters are not well-formed.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/badRequest/v1.0.0`](https://production.api.apiture.com/errors/badRequest/v1.0.0)<br>\n  The request body and/or parameters was not well-formed.\n  Remediation: Correct any syntax or schema errors in the request body or parameters.\n",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 401,
              "description": "Unauthorized. The operation requires authentication but no authentication or insufficient authentication was given.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unauthorized/v1.0.0`](https://production.api.apiture.com/errors/unauthorized/v1.0.0)<br>\n  The request lacks valid authentication credentials for the target resource or operation.\n  Remediation: Authenticate the user and pass the required authorization with the request.\n\n* [`https://production.api.apiture.com/errors/sessionExpired/v1.0.0`](https://production.api.apiture.com/errors/sessionExpired/v1.0.0)<br>\n  The user's session has expired.\n  Remediation: Re-authenticate the user to get a new access token or other authorization.\n\n* [`https://production.api.apiture.com/errors/challengeRequired/v1.0.0`](https://production.api.apiture.com/errors/challengeRequired/v1.0.0)<br>\n  The operation requires a the customer to complete an identity challenge.\n  Remediation: Complete the challenge as per the problem response, and add an additional `Challenge` header to the call.\nThe `attributes` object in the error may have the properties defined by the [`requiredIdentityChallenge` schema](#schema-requiredIdentityChallenge).\n* [`https://production.api.apiture.com/errors/loginIncomplete/v1.0.0`](https://production.api.apiture.com/errors/loginIncomplete/v1.0.0)<br>\n  The user is correctly authenticated but additional actions are required for activating their login session.\n  Remediation: Instruct the user to complete the additional actions to activate their login session.\n\n* [`https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0`](https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0)<br>\n  The user must change their password.\n  Remediation: Instruct the user to change their password or other login credentials.\n\n* [`https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0`](https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0)<br>\n  The CSRF token is invalid.\n  Remediation: The client application is not correctly configured to send CSRF.\n\n* [`https://production.api.apiture.com/errors/challengeBlocked/v1.0.0`](https://production.api.apiture.com/errors/challengeBlocked/v1.0.0)<br>\n  The user has failed challenges too many times and is blocked from attempting more or performing operations which require additional authentication.\n  Remediation: Have the user end their login session and login again.\n\n* [`https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0`](https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0)<br>\n  This operation requires challenge, but the user does not have the necessary registered authentication factors.\n  Remediation: Have the user register one or more challenge security code delivery factors.\n\n* [`https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0`](https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0)<br>\n  The additional on-time `Challenge` header in this request is expired, already used, or otherwise invalid.\n  Remediation: Supply a valid, unexpired, unclaimed `Challenge` header in the request.\n",
              "name": "UnauthorizedError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 403,
              "description": "Forbidden. The authenticated caller is not authorized to perform the requested operation.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/forbidden/v1.0.0`](https://production.api.apiture.com/errors/forbidden/v1.0.0)<br>\n  The user or agent is not allowed to perform this operation; authentication credentials were provided in the request, but the server considers them insufficient to grant access.\n  Remediation: Check the user's permissions and entitlements before attempting the operation.\n\n* [`https://production.api.apiture.com/errors/customerDisabled/v1.0.0`](https://production.api.apiture.com/errors/customerDisabled/v1.0.0)<br>\n  The customer is disabled.\n  Remediation: Have the customer contact the financial institution for support.\n\n* [`https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0`](https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0)<br>\n  The financial institution requires the customer to have anti-malware software installed.\n  Remediation: Direct the user to the software requirements guide to install the correct anti-malware software.\n\n* [`https://production.api.apiture.com/errors/modificationForbidden/v1.0.0`](https://production.api.apiture.com/errors/modificationForbidden/v1.0.0)<br>\n  The customer is properly authenticated but not authorized to create, modify, or delete resources.\n  Remediation: Avoid modification operation for customers with read-only authorization.\n",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity. The request body and/or query parameters were well formed but otherwise invalid.",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/transactionCategories",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "items": [
                    {
                      "label": "Groceries",
                      "id": "ef7958260dce34abddb7",
                      "type": "debit"
                    },
                    {
                      "label": "Dining",
                      "id": "f24096860ebf1383e202",
                      "type": "debit"
                    },
                    {
                      "label": "Entertainment",
                      "id": "33c3d38ca0a744b8d903",
                      "type": "debit"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "items": [
                    {
                      "label": "Groceries",
                      "id": "ef7958260dce34abddb7",
                      "type": "debit"
                    },
                    {
                      "label": "Dining",
                      "id": "f24096860ebf1383e202",
                      "type": "debit"
                    },
                    {
                      "label": "Entertainment",
                      "id": "33c3d38ca0a744b8d903",
                      "type": "debit"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_transfers": {
      "subpackageId": "subpackage_transfers",
      "name": "transfers",
      "endpoints": [
        {
          "auth": true,
          "description": "Return a [paginated](https://dx.apiture.com/docs/api-documentation/concepts/pagination) collection of transfers. The [nextPage_url](https://dx.apiture.com/docs/api-documentation/concepts/links) in the response is a pagination link.",
          "method": "GET",
          "defaultEnvironment": "https://api.apiture.com/banking",
          "environments": [
            {
              "id": "https://api.apiture.com/banking",
              "baseUrl": "https://api.apiture.com/banking"
            }
          ],
          "id": "listTransfers",
          "originalEndpointId": "transfers.listTransfers",
          "name": "Return a collection of transfers",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transfers"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Return only transactions whose `schedule.scheduledOn` date is in this date range. Excludes any transfers that do not have a `scheduledOn` date. Dates ranges use dates expressed in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) `date` format. Example date ranges: <ul> <li> `2022-05-19` match only transfers scheduled on May 19, 2022.</li> <li> `[2022-05-01,2022-06-01)` in May, 2022: on or after May 1, but _before_ June 1</li> <li> `(2022-05-01,2022-06-01)` in May, 2022 (on or after May 1, but before June 1)</li> <li> `[2022-05-09,]` on or after May 9, 2022</li> <li> `(2022-05-09,)` after May 9, 2022</li> <li> `[,2022-05-09]` on or before May 9, 2022</li> <li> `(,2022-05-09)` before May 9, 2022</li> </ul>",
              "key": "scheduledOn",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "dateRange"
                }
              }
            },
            {
              "description": "Return only transactions whose `schedule.debitsOn` date (when the funds are debited from the source account) is in this date range. Excludes any transfers that do not have a `scheduledOn` date. Dates ranges use dates expressed in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) `date` format. See the `scheduledOn` query parameter for examples.",
              "key": "debitsOn",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "dateRange"
                }
              }
            },
            {
              "description": "Return only transactions whose `schedule.creditsOn` (when the funds are credited to  the target account) is in this date range. Excludes any transfers that do not have a `scheduledOn` date. Dates ranges use dates expressed in `YYYY-MM-DD` [RFC 3339](https://tools.ietf.org/html/rfc3339) `date` format. See the `scheduledOn` query parameter for examples.",
              "key": "creditsOn",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "dateRange"
                }
              }
            },
            {
              "description": "If `true`, list only historical (`state` is `processed`) transfers. If `false`, list only transfers that have not yet finished processing. If omitted, list all transfers.",
              "key": "historical",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "description": "The location of the next item in the collection. This is an opaque cursor supplied by the API service. Omit this to start at the beginning of the collection. The client does not define this value; the API services automatically pass the `?start=` parameter on the `nextPage_url`.",
              "key": "start",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 256,
                    "default": ""
                  }
                }
              }
            },
            {
              "description": "The maximum number of items to return in this paged response.",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 1000,
                    "default": 100
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "transfers"
              }
            },
            "statusCode": 200,
            "description": "OK."
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request. The request body, request headers, and/or query parameters are not well-formed.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/badRequest/v1.0.0`](https://production.api.apiture.com/errors/badRequest/v1.0.0)<br>\n  The request body and/or parameters was not well-formed.\n  Remediation: Correct any syntax or schema errors in the request body or parameters.\n",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 401,
              "description": "Unauthorized. The operation requires authentication but no authentication or insufficient authentication was given.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unauthorized/v1.0.0`](https://production.api.apiture.com/errors/unauthorized/v1.0.0)<br>\n  The request lacks valid authentication credentials for the target resource or operation.\n  Remediation: Authenticate the user and pass the required authorization with the request.\n\n* [`https://production.api.apiture.com/errors/sessionExpired/v1.0.0`](https://production.api.apiture.com/errors/sessionExpired/v1.0.0)<br>\n  The user's session has expired.\n  Remediation: Re-authenticate the user to get a new access token or other authorization.\n\n* [`https://production.api.apiture.com/errors/challengeRequired/v1.0.0`](https://production.api.apiture.com/errors/challengeRequired/v1.0.0)<br>\n  The operation requires a the customer to complete an identity challenge.\n  Remediation: Complete the challenge as per the problem response, and add an additional `Challenge` header to the call.\nThe `attributes` object in the error may have the properties defined by the [`requiredIdentityChallenge` schema](#schema-requiredIdentityChallenge).\n* [`https://production.api.apiture.com/errors/loginIncomplete/v1.0.0`](https://production.api.apiture.com/errors/loginIncomplete/v1.0.0)<br>\n  The user is correctly authenticated but additional actions are required for activating their login session.\n  Remediation: Instruct the user to complete the additional actions to activate their login session.\n\n* [`https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0`](https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0)<br>\n  The user must change their password.\n  Remediation: Instruct the user to change their password or other login credentials.\n\n* [`https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0`](https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0)<br>\n  The CSRF token is invalid.\n  Remediation: The client application is not correctly configured to send CSRF.\n\n* [`https://production.api.apiture.com/errors/challengeBlocked/v1.0.0`](https://production.api.apiture.com/errors/challengeBlocked/v1.0.0)<br>\n  The user has failed challenges too many times and is blocked from attempting more or performing operations which require additional authentication.\n  Remediation: Have the user end their login session and login again.\n\n* [`https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0`](https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0)<br>\n  This operation requires challenge, but the user does not have the necessary registered authentication factors.\n  Remediation: Have the user register one or more challenge security code delivery factors.\n\n* [`https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0`](https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0)<br>\n  The additional on-time `Challenge` header in this request is expired, already used, or otherwise invalid.\n  Remediation: Supply a valid, unexpired, unclaimed `Challenge` header in the request.\n",
              "name": "UnauthorizedError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 403,
              "description": "Forbidden. The authenticated caller is not authorized to perform the requested operation.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/forbidden/v1.0.0`](https://production.api.apiture.com/errors/forbidden/v1.0.0)<br>\n  The user or agent is not allowed to perform this operation; authentication credentials were provided in the request, but the server considers them insufficient to grant access.\n  Remediation: Check the user's permissions and entitlements before attempting the operation.\n\n* [`https://production.api.apiture.com/errors/customerDisabled/v1.0.0`](https://production.api.apiture.com/errors/customerDisabled/v1.0.0)<br>\n  The customer is disabled.\n  Remediation: Have the customer contact the financial institution for support.\n\n* [`https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0`](https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0)<br>\n  The financial institution requires the customer to have anti-malware software installed.\n  Remediation: Direct the user to the software requirements guide to install the correct anti-malware software.\n\n* [`https://production.api.apiture.com/errors/modificationForbidden/v1.0.0`](https://production.api.apiture.com/errors/modificationForbidden/v1.0.0)<br>\n  The customer is properly authenticated but not authorized to create, modify, or delete resources.\n  Remediation: Avoid modification operation for customers with read-only authorization.\n",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity. The request body and/or query parameters were well formed but otherwise invalid.",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/transfers",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "limit": 10,
                  "nextPage_url": "https://production.api.apiture.com/transfers/transfers?start=6117a4dcefb841cab7316cef1ac8b58c&limit=10",
                  "start": "d1b48af913464aa49fcb07065dcc0616",
                  "items": [
                    {
                      "amount": "275.00",
                      "sourceAccount": {
                        "id": "bd9b7af2-6f9b",
                        "label": "Premiere Checking *6789",
                        "type": "checking",
                        "location": "internal"
                      },
                      "targetAccount": {
                        "id": "88b1ca3e-d0f3",
                        "label": "Personal Savings *4567",
                        "type": "savings",
                        "location": "internal"
                      },
                      "memo": "Cover check for car repair",
                      "id": "0399abed-fd3d",
                      "schedule": {
                        "scheduledOn": "2026-06-28",
                        "frequency": "once",
                        "debitsOn": "2026-06-24",
                        "creditsOn": "2026-06-26"
                      },
                      "state": "processed",
                      "processedAt": "2022-06-28T021:00:00.000Z"
                    },
                    {
                      "amount": "100.00",
                      "sourceAccount": {
                        "id": "bd9b7af2-6f9b",
                        "label": "Checking *6789",
                        "type": "checking",
                        "location": "internal"
                      },
                      "targetAccount": {
                        "id": "c8396f59-624b",
                        "label": "Checking *3456",
                        "type": "checking",
                        "location": "internal"
                      },
                      "memo": "school expenses",
                      "id": "d62c0701-0d74",
                      "schedule": {
                        "scheduledOn": "2023-08-01",
                        "frequency": "monthly",
                        "count": 9,
                        "debitsOn": "2026-08-01",
                        "creditsOn": "2023-08-01"
                      },
                      "state": "scheduled"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "limit": 10,
                  "nextPage_url": "https://production.api.apiture.com/transfers/transfers?start=6117a4dcefb841cab7316cef1ac8b58c&limit=10",
                  "start": "d1b48af913464aa49fcb07065dcc0616",
                  "items": [
                    {
                      "amount": "275.00",
                      "sourceAccount": {
                        "id": "bd9b7af2-6f9b",
                        "label": "Premiere Checking *6789",
                        "type": "checking",
                        "location": "internal"
                      },
                      "targetAccount": {
                        "id": "88b1ca3e-d0f3",
                        "label": "Personal Savings *4567",
                        "type": "savings",
                        "location": "internal"
                      },
                      "memo": "Cover check for car repair",
                      "id": "0399abed-fd3d",
                      "schedule": {
                        "scheduledOn": "2026-06-28",
                        "frequency": "once",
                        "debitsOn": "2026-06-24",
                        "creditsOn": "2026-06-26"
                      },
                      "state": "processed",
                      "processedAt": "2022-06-28T021:00:00.000Z"
                    },
                    {
                      "amount": "100.00",
                      "sourceAccount": {
                        "id": "bd9b7af2-6f9b",
                        "label": "Checking *6789",
                        "type": "checking",
                        "location": "internal"
                      },
                      "targetAccount": {
                        "id": "c8396f59-624b",
                        "label": "Checking *3456",
                        "type": "checking",
                        "location": "internal"
                      },
                      "memo": "school expenses",
                      "id": "d62c0701-0d74",
                      "schedule": {
                        "scheduledOn": "2023-08-01",
                        "frequency": "monthly",
                        "count": 9,
                        "debitsOn": "2026-08-01",
                        "creditsOn": "2023-08-01"
                      },
                      "state": "scheduled"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Create a new transfer within the transfers collection. If all the necessary properties are set, the transfer is queued for processing. If the request omits the `schedule.scheduledOn` date, the transfer remains pending/unscheduled until the user sets it via the [`patchTransfer`](#op-patchTransfer) operation.\n\nNote: This operation requires an identity challenge if the financial institution requires the user to proove their identity for some types of transfers. See the \"Challenges API\".",
          "method": "POST",
          "defaultEnvironment": "https://api.apiture.com/banking",
          "environments": [
            {
              "id": "https://api.apiture.com/banking",
              "baseUrl": "https://api.apiture.com/banking"
            }
          ],
          "id": "createTransfer",
          "originalEndpointId": "transfers.createTransfer",
          "name": "Create a new transfer",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transfers"
              }
            ]
          },
          "queryParameters": [],
          "headers": [
            {
              "description": "This operation may require a completed challenge. If the first attempt calling this operation fails with a 401 `challengeRequired` error, the client should complete the challenge flow as described in the Challenges API, then retry the operation with this `Challenge` request header using the `challengeToken` returned at the end of that flow. If this is passed but the value is invalid, the operation fails with a 401 status code and the `invalidChallengeHeader` problem type.",
              "key": "Challenge",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "challengeToken"
                }
              }
            }
          ],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "newTransfer"
                }
              },
              "description": "The data necessary to create a new transfer."
            },
            "description": "The data necessary to create a new transfer."
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "transfer"
              }
            },
            "statusCode": 201,
            "description": "Created."
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request. The request body, request headers, and/or query parameters are not well-formed.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/badRequest/v1.0.0`](https://production.api.apiture.com/errors/badRequest/v1.0.0)<br>\n  The request body and/or parameters was not well-formed.\n  Remediation: Correct any syntax or schema errors in the request body or parameters.\n",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 401,
              "description": "Unauthorized. The operation requires authentication but no authentication or insufficient authentication was given.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unauthorized/v1.0.0`](https://production.api.apiture.com/errors/unauthorized/v1.0.0)<br>\n  The request lacks valid authentication credentials for the target resource or operation.\n  Remediation: Authenticate the user and pass the required authorization with the request.\n\n* [`https://production.api.apiture.com/errors/sessionExpired/v1.0.0`](https://production.api.apiture.com/errors/sessionExpired/v1.0.0)<br>\n  The user's session has expired.\n  Remediation: Re-authenticate the user to get a new access token or other authorization.\n\n* [`https://production.api.apiture.com/errors/challengeRequired/v1.0.0`](https://production.api.apiture.com/errors/challengeRequired/v1.0.0)<br>\n  The operation requires a the customer to complete an identity challenge.\n  Remediation: Complete the challenge as per the problem response, and add an additional `Challenge` header to the call.\nThe `attributes` object in the error may have the properties defined by the [`requiredIdentityChallenge` schema](#schema-requiredIdentityChallenge).\n* [`https://production.api.apiture.com/errors/loginIncomplete/v1.0.0`](https://production.api.apiture.com/errors/loginIncomplete/v1.0.0)<br>\n  The user is correctly authenticated but additional actions are required for activating their login session.\n  Remediation: Instruct the user to complete the additional actions to activate their login session.\n\n* [`https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0`](https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0)<br>\n  The user must change their password.\n  Remediation: Instruct the user to change their password or other login credentials.\n\n* [`https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0`](https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0)<br>\n  The CSRF token is invalid.\n  Remediation: The client application is not correctly configured to send CSRF.\n\n* [`https://production.api.apiture.com/errors/challengeBlocked/v1.0.0`](https://production.api.apiture.com/errors/challengeBlocked/v1.0.0)<br>\n  The user has failed challenges too many times and is blocked from attempting more or performing operations which require additional authentication.\n  Remediation: Have the user end their login session and login again.\n\n* [`https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0`](https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0)<br>\n  This operation requires challenge, but the user does not have the necessary registered authentication factors.\n  Remediation: Have the user register one or more challenge security code delivery factors.\n\n* [`https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0`](https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0)<br>\n  The additional on-time `Challenge` header in this request is expired, already used, or otherwise invalid.\n  Remediation: Supply a valid, unexpired, unclaimed `Challenge` header in the request.\n",
              "name": "UnauthorizedError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 403,
              "description": "Forbidden. The user's permissions do not allow the transfer.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/cannotTransferFrom/v1.0.0`](https://production.api.apiture.com/errors/cannotTransferFrom/v1.0.0)<br>\n  The customer does not have `transferFrom` entitlement on the source account.\n  Remediation: Choose a source account that allows transfers from it.\n\n* [`https://production.api.apiture.com/errors/cannotTransferTo/v1.0.0`](https://production.api.apiture.com/errors/cannotTransferTo/v1.0.0)<br>\n  The customer does not have `transferTo` entitlement on the target account.\n  Remediation: Choose a target account that allows transfers to it.\n",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity. The request body and/or query parameters were well formed but otherwise invalid.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/invalidSourceAccountId/v1.0.0`](https://production.api.apiture.com/errors/invalidSourceAccountId/v1.0.0)<br>\n  The named `sourceAccountId` does not exist or the user is not entitled to access the account.\n  Remediation: Pass the `id` of an existing account the caller has access to.\n\n* [`https://production.api.apiture.com/errors/invalidTargetAccountId/v1.0.0`](https://production.api.apiture.com/errors/invalidTargetAccountId/v1.0.0)<br>\n  The named `targetAccountId` does not exist or the user is not entitled to access the account.\n  Remediation: Pass the `id` of an existing account the caller has access to.\n\n* [`https://production.api.apiture.com/errors/externalToExternalTransferNotAllowed/v1.0.0`](https://production.api.apiture.com/errors/externalToExternalTransferNotAllowed/v1.0.0)<br>\n  Transfers from an external account to another external is not allowed.\n  Remediation: At least one of the source or target accounts must be an internal account held at the financial institution.\n\n* [`https://production.api.apiture.com/errors/sameSourceAndTargetTransferAccounts/v1.0.0`](https://production.api.apiture.com/errors/sameSourceAndTargetTransferAccounts/v1.0.0)<br>\n  The source and target account are the same.\n  Remediation: Choose different source and target accounts.\n\n* [`https://production.api.apiture.com/errors/nonPositiveAmount/v1.0.0`](https://production.api.apiture.com/errors/nonPositiveAmount/v1.0.0)<br>\n  The transfer amount may not be 0.00.\n  Remediation: Set the transfer amount to a positive number.\n\n* [`https://production.api.apiture.com/errors/insufficientFundsForTransfer/v1.0.0`](https://production.api.apiture.com/errors/insufficientFundsForTransfer/v1.0.0)<br>\n  The source account has insufficient funds.\n  Remediation: Reduce the transfer amount to less than the available balance.\n\n* [`https://production.api.apiture.com/errors/invalidTransferSchedule/v1.0.0`](https://production.api.apiture.com/errors/invalidTransferSchedule/v1.0.0)<br>\n  The transfer schedule is invalid.\n  Remediation: Choose a date that is not in the past or past the cutoff time.\n",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/transfers",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "amount": "275.00",
                "sourceAccount": {
                  "id": "bd9b7af2-6f9b",
                  "location": "internal"
                },
                "targetAccount": {
                  "id": "88b1ca3e-d0f3",
                  "location": "internal"
                },
                "memo": "Cover check for car repair",
                "schedule": {
                  "scheduledOn": "2022-06-28",
                  "frequency": "once"
                }
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "amount": "275.00",
                  "sourceAccount": {
                    "id": "bd9b7af2-6f9b",
                    "location": "internal"
                  },
                  "targetAccount": {
                    "id": "88b1ca3e-d0f3",
                    "location": "internal"
                  },
                  "memo": "Cover check for car repair",
                  "schedule": {
                    "scheduledOn": "2022-06-28",
                    "frequency": "once"
                  }
                }
              },
              "responseStatusCode": 201,
              "responseBody": {
                "type": "json",
                "value": {
                  "amount": "275.00",
                  "sourceAccount": {
                    "id": "bd9b7af2-6f9b",
                    "label": "Premiere Checking *6789",
                    "type": "checking",
                    "location": "internal"
                  },
                  "targetAccount": {
                    "id": "88b1ca3e-d0f3",
                    "label": "Personal Savings *4567",
                    "type": "savings",
                    "location": "internal"
                  },
                  "memo": "Cover check for car repair",
                  "id": "0399abed-fd3d",
                  "schedule": {
                    "scheduledOn": "2026-06-28",
                    "frequency": "once",
                    "debitsOn": "2026-06-24",
                    "creditsOn": "2026-06-26"
                  },
                  "state": "unscheduled"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "amount": "275.00",
                  "sourceAccount": {
                    "id": "bd9b7af2-6f9b",
                    "label": "Premiere Checking *6789",
                    "type": "checking",
                    "location": "internal"
                  },
                  "targetAccount": {
                    "id": "88b1ca3e-d0f3",
                    "label": "Personal Savings *4567",
                    "type": "savings",
                    "location": "internal"
                  },
                  "memo": "Cover check for car repair",
                  "id": "0399abed-fd3d",
                  "schedule": {
                    "scheduledOn": "2026-06-28",
                    "frequency": "once",
                    "debitsOn": "2026-06-24",
                    "creditsOn": "2026-06-26"
                  },
                  "state": "unscheduled"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Return the JSON representation of this transfer resource.",
          "method": "GET",
          "defaultEnvironment": "https://api.apiture.com/banking",
          "environments": [
            {
              "id": "https://api.apiture.com/banking",
              "baseUrl": "https://api.apiture.com/banking"
            }
          ],
          "id": "getTransfer",
          "originalEndpointId": "transfers.getTransfer",
          "name": "Fetch a representation of this transfer",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transfers/"
              },
              {
                "type": "pathParameter",
                "value": "transferId"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "transfer"
              }
            },
            "statusCode": 200,
            "description": "OK."
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 401,
              "description": "Unauthorized. The operation requires authentication but no authentication or insufficient authentication was given.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unauthorized/v1.0.0`](https://production.api.apiture.com/errors/unauthorized/v1.0.0)<br>\n  The request lacks valid authentication credentials for the target resource or operation.\n  Remediation: Authenticate the user and pass the required authorization with the request.\n\n* [`https://production.api.apiture.com/errors/sessionExpired/v1.0.0`](https://production.api.apiture.com/errors/sessionExpired/v1.0.0)<br>\n  The user's session has expired.\n  Remediation: Re-authenticate the user to get a new access token or other authorization.\n\n* [`https://production.api.apiture.com/errors/challengeRequired/v1.0.0`](https://production.api.apiture.com/errors/challengeRequired/v1.0.0)<br>\n  The operation requires a the customer to complete an identity challenge.\n  Remediation: Complete the challenge as per the problem response, and add an additional `Challenge` header to the call.\nThe `attributes` object in the error may have the properties defined by the [`requiredIdentityChallenge` schema](#schema-requiredIdentityChallenge).\n* [`https://production.api.apiture.com/errors/loginIncomplete/v1.0.0`](https://production.api.apiture.com/errors/loginIncomplete/v1.0.0)<br>\n  The user is correctly authenticated but additional actions are required for activating their login session.\n  Remediation: Instruct the user to complete the additional actions to activate their login session.\n\n* [`https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0`](https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0)<br>\n  The user must change their password.\n  Remediation: Instruct the user to change their password or other login credentials.\n\n* [`https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0`](https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0)<br>\n  The CSRF token is invalid.\n  Remediation: The client application is not correctly configured to send CSRF.\n\n* [`https://production.api.apiture.com/errors/challengeBlocked/v1.0.0`](https://production.api.apiture.com/errors/challengeBlocked/v1.0.0)<br>\n  The user has failed challenges too many times and is blocked from attempting more or performing operations which require additional authentication.\n  Remediation: Have the user end their login session and login again.\n\n* [`https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0`](https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0)<br>\n  This operation requires challenge, but the user does not have the necessary registered authentication factors.\n  Remediation: Have the user register one or more challenge security code delivery factors.\n\n* [`https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0`](https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0)<br>\n  The additional on-time `Challenge` header in this request is expired, already used, or otherwise invalid.\n  Remediation: Supply a valid, unexpired, unclaimed `Challenge` header in the request.\n",
              "name": "UnauthorizedError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 403,
              "description": "Forbidden. The authenticated caller is not authorized to perform the requested operation.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/forbidden/v1.0.0`](https://production.api.apiture.com/errors/forbidden/v1.0.0)<br>\n  The user or agent is not allowed to perform this operation; authentication credentials were provided in the request, but the server considers them insufficient to grant access.\n  Remediation: Check the user's permissions and entitlements before attempting the operation.\n\n* [`https://production.api.apiture.com/errors/customerDisabled/v1.0.0`](https://production.api.apiture.com/errors/customerDisabled/v1.0.0)<br>\n  The customer is disabled.\n  Remediation: Have the customer contact the financial institution for support.\n\n* [`https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0`](https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0)<br>\n  The financial institution requires the customer to have anti-malware software installed.\n  Remediation: Direct the user to the software requirements guide to install the correct anti-malware software.\n\n* [`https://production.api.apiture.com/errors/modificationForbidden/v1.0.0`](https://production.api.apiture.com/errors/modificationForbidden/v1.0.0)<br>\n  The customer is properly authenticated but not authorized to create, modify, or delete resources.\n  Remediation: Avoid modification operation for customers with read-only authorization.\n",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found. There is no such transfer resource at the specified `{transferId}`.",
              "name": "NotFoundError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/transfers/",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "amount": "275.00",
                  "sourceAccount": {
                    "id": "bd9b7af2-6f9b",
                    "label": "Premiere Checking *6789",
                    "type": "checking",
                    "location": "internal"
                  },
                  "targetAccount": {
                    "id": "88b1ca3e-d0f3",
                    "label": "Personal Savings *4567",
                    "type": "savings",
                    "location": "internal"
                  },
                  "memo": "Cover check for car repair",
                  "id": "0399abed-fd3d",
                  "schedule": {
                    "scheduledOn": "2026-06-28",
                    "frequency": "once",
                    "debitsOn": "2026-06-24",
                    "creditsOn": "2026-06-26"
                  },
                  "state": "unscheduled"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "amount": "275.00",
                  "sourceAccount": {
                    "id": "bd9b7af2-6f9b",
                    "label": "Premiere Checking *6789",
                    "type": "checking",
                    "location": "internal"
                  },
                  "targetAccount": {
                    "id": "88b1ca3e-d0f3",
                    "label": "Personal Savings *4567",
                    "type": "savings",
                    "location": "internal"
                  },
                  "memo": "Cover check for car repair",
                  "id": "0399abed-fd3d",
                  "schedule": {
                    "scheduledOn": "2026-06-28",
                    "frequency": "once",
                    "debitsOn": "2026-06-24",
                    "creditsOn": "2026-06-26"
                  },
                  "state": "unscheduled"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Delete this transfer resource and any resources that are owned by it. Only transfers that have not been processed may be deleted.",
          "method": "DELETE",
          "defaultEnvironment": "https://api.apiture.com/banking",
          "environments": [
            {
              "id": "https://api.apiture.com/banking",
              "baseUrl": "https://api.apiture.com/banking"
            }
          ],
          "id": "deleteTransfer",
          "originalEndpointId": "transfers.deleteTransfer",
          "name": "Delete this transfer resource",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transfers/"
              },
              {
                "type": "pathParameter",
                "value": "transferId"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 401,
              "description": "Unauthorized. The operation requires authentication but no authentication or insufficient authentication was given.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unauthorized/v1.0.0`](https://production.api.apiture.com/errors/unauthorized/v1.0.0)<br>\n  The request lacks valid authentication credentials for the target resource or operation.\n  Remediation: Authenticate the user and pass the required authorization with the request.\n\n* [`https://production.api.apiture.com/errors/sessionExpired/v1.0.0`](https://production.api.apiture.com/errors/sessionExpired/v1.0.0)<br>\n  The user's session has expired.\n  Remediation: Re-authenticate the user to get a new access token or other authorization.\n\n* [`https://production.api.apiture.com/errors/challengeRequired/v1.0.0`](https://production.api.apiture.com/errors/challengeRequired/v1.0.0)<br>\n  The operation requires a the customer to complete an identity challenge.\n  Remediation: Complete the challenge as per the problem response, and add an additional `Challenge` header to the call.\nThe `attributes` object in the error may have the properties defined by the [`requiredIdentityChallenge` schema](#schema-requiredIdentityChallenge).\n* [`https://production.api.apiture.com/errors/loginIncomplete/v1.0.0`](https://production.api.apiture.com/errors/loginIncomplete/v1.0.0)<br>\n  The user is correctly authenticated but additional actions are required for activating their login session.\n  Remediation: Instruct the user to complete the additional actions to activate their login session.\n\n* [`https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0`](https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0)<br>\n  The user must change their password.\n  Remediation: Instruct the user to change their password or other login credentials.\n\n* [`https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0`](https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0)<br>\n  The CSRF token is invalid.\n  Remediation: The client application is not correctly configured to send CSRF.\n\n* [`https://production.api.apiture.com/errors/challengeBlocked/v1.0.0`](https://production.api.apiture.com/errors/challengeBlocked/v1.0.0)<br>\n  The user has failed challenges too many times and is blocked from attempting more or performing operations which require additional authentication.\n  Remediation: Have the user end their login session and login again.\n\n* [`https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0`](https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0)<br>\n  This operation requires challenge, but the user does not have the necessary registered authentication factors.\n  Remediation: Have the user register one or more challenge security code delivery factors.\n\n* [`https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0`](https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0)<br>\n  The additional on-time `Challenge` header in this request is expired, already used, or otherwise invalid.\n  Remediation: Supply a valid, unexpired, unclaimed `Challenge` header in the request.\n",
              "name": "UnauthorizedError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 403,
              "description": "Forbidden. The authenticated caller is not authorized to perform the requested operation.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/forbidden/v1.0.0`](https://production.api.apiture.com/errors/forbidden/v1.0.0)<br>\n  The user or agent is not allowed to perform this operation; authentication credentials were provided in the request, but the server considers them insufficient to grant access.\n  Remediation: Check the user's permissions and entitlements before attempting the operation.\n\n* [`https://production.api.apiture.com/errors/customerDisabled/v1.0.0`](https://production.api.apiture.com/errors/customerDisabled/v1.0.0)<br>\n  The customer is disabled.\n  Remediation: Have the customer contact the financial institution for support.\n\n* [`https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0`](https://production.api.apiture.com/errors/antiMalwareRequired/v1.0.0)<br>\n  The financial institution requires the customer to have anti-malware software installed.\n  Remediation: Direct the user to the software requirements guide to install the correct anti-malware software.\n\n* [`https://production.api.apiture.com/errors/modificationForbidden/v1.0.0`](https://production.api.apiture.com/errors/modificationForbidden/v1.0.0)<br>\n  The customer is properly authenticated but not authorized to create, modify, or delete resources.\n  Remediation: Avoid modification operation for customers with read-only authorization.\n",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found. There is no such transfer resource at the specified `{transferId}`.",
              "name": "NotFoundError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 409,
              "description": "Conflict.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/cannotDeleteProcessedTransfers/v1.0.0`](https://production.api.apiture.com/errors/cannotDeleteProcessedTransfers/v1.0.0)<br>\n  The delete operation is only allowed for transfers which have not begun processing.\n  Remediation: Select a pending or scheduled transfer.\n",
              "name": "ConflictError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/transfers/",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Perform a partial update of this transfer as per [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7396) format and processing rules. Only fields in the request body are updated on the resource; fields which are omitted are not updated.\n\nNote: This operation requires an identity challenge if the financial institution requires the user to prove their identity for some types of transfers. See the \"Challenges API\".",
          "method": "PATCH",
          "defaultEnvironment": "https://api.apiture.com/banking",
          "environments": [
            {
              "id": "https://api.apiture.com/banking",
              "baseUrl": "https://api.apiture.com/banking"
            }
          ],
          "id": "patchTransfer",
          "originalEndpointId": "transfers.patchTransfer",
          "name": "Update this transfer",
          "path": {
            "pathParameters": [
              {
                "key": "transferId",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transfers/"
              },
              {
                "type": "pathParameter",
                "value": "transferId"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [
            {
              "description": "This operation may require a completed challenge. If the first attempt calling this operation fails with a 401 `challengeRequired` error, the client should complete the challenge flow as described in the Challenges API, then retry the operation with this `Challenge` request header using the `challengeToken` returned at the end of that flow. If this is passed but the value is invalid, the operation fails with a 401 status code and the `invalidChallengeHeader` problem type.",
              "key": "Challenge",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "challengeToken"
                }
              }
            }
          ],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/merge-patch+json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "transferPatch"
                }
              },
              "description": "The fields to update within the transfer."
            },
            "description": "The fields to update within the transfer."
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "transfer"
              }
            },
            "statusCode": 200,
            "description": "OK."
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 400,
              "description": "Bad Request. The request body, request headers, and/or query parameters are not well-formed.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/badRequest/v1.0.0`](https://production.api.apiture.com/errors/badRequest/v1.0.0)<br>\n  The request body and/or parameters was not well-formed.\n  Remediation: Correct any syntax or schema errors in the request body or parameters.\n",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 401,
              "description": "Unauthorized. The operation requires authentication but no authentication or insufficient authentication was given.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/unauthorized/v1.0.0`](https://production.api.apiture.com/errors/unauthorized/v1.0.0)<br>\n  The request lacks valid authentication credentials for the target resource or operation.\n  Remediation: Authenticate the user and pass the required authorization with the request.\n\n* [`https://production.api.apiture.com/errors/sessionExpired/v1.0.0`](https://production.api.apiture.com/errors/sessionExpired/v1.0.0)<br>\n  The user's session has expired.\n  Remediation: Re-authenticate the user to get a new access token or other authorization.\n\n* [`https://production.api.apiture.com/errors/challengeRequired/v1.0.0`](https://production.api.apiture.com/errors/challengeRequired/v1.0.0)<br>\n  The operation requires a the customer to complete an identity challenge.\n  Remediation: Complete the challenge as per the problem response, and add an additional `Challenge` header to the call.\nThe `attributes` object in the error may have the properties defined by the [`requiredIdentityChallenge` schema](#schema-requiredIdentityChallenge).\n* [`https://production.api.apiture.com/errors/loginIncomplete/v1.0.0`](https://production.api.apiture.com/errors/loginIncomplete/v1.0.0)<br>\n  The user is correctly authenticated but additional actions are required for activating their login session.\n  Remediation: Instruct the user to complete the additional actions to activate their login session.\n\n* [`https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0`](https://production.api.apiture.com/errors/passwordChangeRequired/v1.0.0)<br>\n  The user must change their password.\n  Remediation: Instruct the user to change their password or other login credentials.\n\n* [`https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0`](https://production.api.apiture.com/errors/invalidCsrfToken/v1.0.0)<br>\n  The CSRF token is invalid.\n  Remediation: The client application is not correctly configured to send CSRF.\n\n* [`https://production.api.apiture.com/errors/challengeBlocked/v1.0.0`](https://production.api.apiture.com/errors/challengeBlocked/v1.0.0)<br>\n  The user has failed challenges too many times and is blocked from attempting more or performing operations which require additional authentication.\n  Remediation: Have the user end their login session and login again.\n\n* [`https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0`](https://production.api.apiture.com/errors/noIdentityChallengeFactors/v1.0.0)<br>\n  This operation requires challenge, but the user does not have the necessary registered authentication factors.\n  Remediation: Have the user register one or more challenge security code delivery factors.\n\n* [`https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0`](https://production.api.apiture.com/errors/invalidIdentityChallengeHeader/v1.0.0)<br>\n  The additional on-time `Challenge` header in this request is expired, already used, or otherwise invalid.\n  Remediation: Supply a valid, unexpired, unclaimed `Challenge` header in the request.\n",
              "name": "UnauthorizedError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 403,
              "description": "Forbidden. The user's permissions do not allow the transfer.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/cannotTransferFrom/v1.0.0`](https://production.api.apiture.com/errors/cannotTransferFrom/v1.0.0)<br>\n  The customer does not have `transferFrom` entitlement on the source account.\n  Remediation: Choose a source account that allows transfers from it.\n\n* [`https://production.api.apiture.com/errors/cannotTransferTo/v1.0.0`](https://production.api.apiture.com/errors/cannotTransferTo/v1.0.0)<br>\n  The customer does not have `transferTo` entitlement on the target account.\n  Remediation: Choose a target account that allows transfers to it.\n",
              "name": "ForbiddenError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 404,
              "description": "Not Found. There is no such transfer resource at the specified `{transferId}`.",
              "name": "NotFoundError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "problemResponse"
                }
              },
              "statusCode": 422,
              "description": "Unprocessable Entity. The request body and/or query parameters were well formed but otherwise invalid.\n\nThis error response may have one of the following `type` values:\n* [`https://production.api.apiture.com/errors/invalidSourceAccountId/v1.0.0`](https://production.api.apiture.com/errors/invalidSourceAccountId/v1.0.0)<br>\n  The named `sourceAccountId` does not exist or the user is not entitled to access the account.\n  Remediation: Pass the `id` of an existing account the caller has access to.\n\n* [`https://production.api.apiture.com/errors/invalidTargetAccountId/v1.0.0`](https://production.api.apiture.com/errors/invalidTargetAccountId/v1.0.0)<br>\n  The named `targetAccountId` does not exist or the user is not entitled to access the account.\n  Remediation: Pass the `id` of an existing account the caller has access to.\n\n* [`https://production.api.apiture.com/errors/externalToExternalTransferNotAllowed/v1.0.0`](https://production.api.apiture.com/errors/externalToExternalTransferNotAllowed/v1.0.0)<br>\n  Transfers from an external account to another external is not allowed.\n  Remediation: At least one of the source or target accounts must be an internal account held at the financial institution.\n\n* [`https://production.api.apiture.com/errors/sameSourceAndTargetTransferAccounts/v1.0.0`](https://production.api.apiture.com/errors/sameSourceAndTargetTransferAccounts/v1.0.0)<br>\n  The source and target account are the same.\n  Remediation: Choose different source and target accounts.\n\n* [`https://production.api.apiture.com/errors/nonPositiveAmount/v1.0.0`](https://production.api.apiture.com/errors/nonPositiveAmount/v1.0.0)<br>\n  The transfer amount may not be 0.00.\n  Remediation: Set the transfer amount to a positive number.\n\n* [`https://production.api.apiture.com/errors/insufficientFundsForTransfer/v1.0.0`](https://production.api.apiture.com/errors/insufficientFundsForTransfer/v1.0.0)<br>\n  The source account has insufficient funds.\n  Remediation: Reduce the transfer amount to less than the available balance.\n\n* [`https://production.api.apiture.com/errors/invalidTransferSchedule/v1.0.0`](https://production.api.apiture.com/errors/invalidTransferSchedule/v1.0.0)<br>\n  The transfer schedule is invalid.\n  Remediation: Choose a date that is not in the past or past the cutoff time.\n",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/transfers/",
              "pathParameters": {
                "transferId": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "amount": "275.00",
                "targetAccount": {
                  "id": "88b1ca3e-d0f3"
                },
                "schedule": {
                  "scheduledOn": "2022-06-28",
                  "frequency": "once"
                }
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "amount": "275.00",
                  "targetAccount": {
                    "id": "88b1ca3e-d0f3"
                  },
                  "schedule": {
                    "scheduledOn": "2022-06-28",
                    "frequency": "once"
                  }
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "amount": "275.00",
                  "sourceAccount": {
                    "id": "bd9b7af2-6f9b",
                    "label": "Premiere Checking *6789",
                    "type": "checking",
                    "location": "internal"
                  },
                  "targetAccount": {
                    "id": "88b1ca3e-d0f3",
                    "label": "Personal Savings *4567",
                    "type": "savings",
                    "location": "internal"
                  },
                  "memo": "Cover check for car repair",
                  "id": "0399abed-fd3d",
                  "schedule": {
                    "scheduledOn": "2026-06-28",
                    "frequency": "once",
                    "debitsOn": "2026-06-24",
                    "creditsOn": "2026-06-26"
                  },
                  "state": "unscheduled"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "amount": "275.00",
                  "sourceAccount": {
                    "id": "bd9b7af2-6f9b",
                    "label": "Premiere Checking *6789",
                    "type": "checking",
                    "location": "internal"
                  },
                  "targetAccount": {
                    "id": "88b1ca3e-d0f3",
                    "label": "Personal Savings *4567",
                    "type": "savings",
                    "location": "internal"
                  },
                  "memo": "Cover check for car repair",
                  "id": "0399abed-fd3d",
                  "schedule": {
                    "scheduledOn": "2026-06-28",
                    "frequency": "once",
                    "debitsOn": "2026-06-24",
                    "creditsOn": "2026-06-26"
                  },
                  "state": "unscheduled"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    }
  },
  "rootPackage": {
    "endpoints": [],
    "webhooks": [],
    "websockets": [],
    "types": [
      "accountIds",
      "accountAllowsFilter",
      "accountPermissions",
      "fullAccountPermissions",
      "account",
      "overdraftAccountFields",
      "eligibleOverdraftAccountItem",
      "eligibleOverdraftAccounts",
      "overdraftAccountItem",
      "overdraftProtectionFields",
      "overdraftProtection",
      "overdraftProtectionPatch",
      "accounts",
      "accountLocation",
      "accountFields",
      "accountItem",
      "externalAccountVerificationMethod",
      "accountRoutingNumber",
      "accountNickname",
      "maskedAccountNumber",
      "fullAccountNumber",
      "accountBalances",
      "incompleteAccountBalances",
      "accountBalance",
      "accountJointOwner",
      "accountJointOwners",
      "jointOwnerInvitationFields",
      "newJointOwnerInvitation",
      "jointOwnerInvitation",
      "institutionLocatorType",
      "simpleInstitution",
      "wireTransferInstitution",
      "institutionLookupResult",
      "cutoffTimes",
      "timeZoneId",
      "cutoffTime",
      "cutoffTimeType",
      "transferScheduleDirection",
      "transferSchedules",
      "transferScheduleItem",
      "transferDateRestrictionType",
      "transferTypeForDateRestrictions",
      "transferDateRestrictions",
      "transferDateRestriction",
      "checkNumberRange",
      "transactionFields",
      "transactionMerchant",
      "transactionCheck",
      "transactionCategorization",
      "transactionCategoryLabel",
      "transactionType",
      "transactionSubType",
      "transactionItem",
      "transactions",
      "incompleteTransactions",
      "transactionCategoryType",
      "transactionCategory",
      "transactionCategories",
      "transferSchedule",
      "transferItemSchedule",
      "transferAccountReference",
      "transferFields",
      "newTransfer",
      "transferPatch",
      "transferState",
      "transferItem",
      "transfer",
      "transfers",
      "productType",
      "problemResponse",
      "transferFrequency",
      "achAccountRisk",
      "dateRange",
      "amountRange",
      "resourceId",
      "abstractBody",
      "abstractPagedBody",
      "readOnlyResourceId",
      "productReference",
      "creditOrDebitValue",
      "readOnlyTimestamp",
      "address",
      "positiveIntegerRange",
      "transferRecurrenceType",
      "monetaryValue",
      "timestampFields",
      "apiProblem",
      "achSecCode",
      "institutionId",
      "challengeToken",
      "requiredIdentityChallenge",
      "abstractPagedBodyFields",
      "addressFields",
      "challengeFactor",
      "challengeFactorType",
      "challengeSecurityQuestions",
      "challengeSecurityQuestion",
      "challengePromptId"
    ],
    "subpackages": [
      "subpackage_accounts",
      "subpackage_accountJointOwners",
      "subpackage_overdraftProtection",
      "subpackage_jointOwners",
      "subpackage_institutions",
      "subpackage_transactions",
      "subpackage_transactionCategories",
      "subpackage_transfers"
    ]
  },
  "auth": {
    "type": "header",
    "headerWireValue": "API-Key",
    "nameOverride": "API-Key"
  },
  "snippetsConfiguration": {},
  "globalHeaders": []
}