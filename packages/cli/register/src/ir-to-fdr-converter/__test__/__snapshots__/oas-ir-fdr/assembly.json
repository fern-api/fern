{
  "types": {
    "RedactedAudioResponse": {
      "name": "RedactedAudioResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The status of the redacted audio",
            "key": "status",
            "valueType": {
              "type": "id",
              "value": "RedactedAudioStatus"
            }
          },
          {
            "description": "The URL of the redacted audio file",
            "key": "redacted_audio_url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "RedactedAudioStatus": {
      "description": "The status of the redacted audio",
      "name": "RedactedAudioStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "redacted_audio_ready"
          }
        ]
      }
    },
    "SubtitleFormat": {
      "description": "Format of the subtitles",
      "name": "SubtitleFormat",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "srt"
          },
          {
            "value": "vtt"
          }
        ]
      }
    },
    "WordSearchResponse": {
      "name": "WordSearchResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the transcript",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The total count of all matched instances. For e.g., word 1 matched 2 times, and word 2 matched 3 times, `total_count` will equal 5.",
            "key": "total_count",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "The matches of the search",
            "key": "matches",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "WordSearchMatch"
              }
            }
          }
        ]
      }
    },
    "WordSearchMatch": {
      "name": "WordSearchMatch",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The matched word",
            "key": "text",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The total amount of times the word is in the transcript",
            "key": "count",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "An array of timestamps",
            "key": "timestamps",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "WordSearchTimestamp"
              }
            }
          },
          {
            "description": "An array of all index locations for that word within the `words` array of the completed transcript",
            "key": "indexes",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "WordSearchTimestamp": {
      "description": "An array of timestamps structured as [`start_time`, `end_time`] in milliseconds",
      "name": "WordSearchTimestamp",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "primitive",
            "value": {
              "type": "integer"
            }
          }
        }
      }
    },
    "Timestamp": {
      "description": "Timestamp containing a start and end property in milliseconds.",
      "name": "Timestamp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The start time in milliseconds",
            "key": "start",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "The end time in milliseconds",
            "key": "end",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "CreateTranscriptOptionalParameters": {
      "description": "The parameters for creating a transcript",
      "name": "CreateTranscriptOptionalParameters",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The language of your audio file. Possible values are found in [Supported Languages](https://www.assemblyai.com/docs/Concepts/supported_languages).\nThe default value is 'en_us'.\n",
            "key": "language_code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TranscriptLanguageCode"
              }
            }
          },
          {
            "description": "Enable Automatic Punctuation, can be true or false.",
            "key": "punctuate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Enable Text Formatting, can be true or false.",
            "key": "format_text",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Enable [Dual Channel](https://assemblyai.com/docs/Models/speech_recognition#dual-channel-transcription) transcription, can be true or false.",
            "key": "dual_channel",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "The URL to which we send webhooks upon trancription completion, if provided in the transcription request.",
            "key": "webhook_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The header name which should be sent back with webhook calls, if provided in the transcription request.",
            "key": "webhook_auth_header_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Defaults to null. Optionally allows a user to specify a header name and value to send back with a webhook call for added security.",
            "key": "webhook_auth_header_value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Whether Key Phrases was enabled in the transcription request, either true or false",
            "key": "auto_highlights",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "The point in time, in milliseconds, to begin transcription from in your media file",
            "key": "audio_start_from",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The point in time, in milliseconds, to stop transcribing in your media file",
            "key": "audio_end_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The list of custom vocabulary to boost transcription probability for, if provided in the transcription request.",
            "key": "word_boost",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "The word boost parameter value, if provided in the transcription request.",
            "key": "boost_param",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TranscriptBoostParam"
              }
            }
          },
          {
            "description": "Filter profanity from the transcribed text, can be true or false.",
            "key": "filter_profanity",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Redact PII from the transcribed text using the Redact PII model, can be true or false",
            "key": "redact_pii",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Generate a copy of the original media file with spoken PII \"beeped\" out, can be true or false. See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
            "key": "redact_pii_audio",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Controls the filetype of the audio created by redact_pii_audio. Currently supports mp3 (default) and wav. See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
            "key": "redact_pii_audio_quality",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "mp3"
                }
              }
            }
          },
          {
            "description": "The list of PII Redaction policies to enable. See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
            "key": "redact_pii_policies",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "PiiPolicy"
                }
              }
            }
          },
          {
            "description": "The replacement logic for detected PII, can be \"entity_type\" or \"hash\". See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
            "key": "redact_pii_sub",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SubstitutionPolicy"
              }
            }
          },
          {
            "description": "Enable [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization), can be true or false",
            "key": "speaker_labels",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Tells the speaker label model how many speakers it should attempt to identify, up to 10. See [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization) for more details.",
            "key": "speakers_expected",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "description": "Enable [Content Moderation](https://www.assemblyai.com/docs/Models/content_moderation), can be true or false",
            "key": "content_safety",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Enable [Topic Detection](https://www.assemblyai.com/docs/Models/iab_classification), can be true or false",
            "key": "iab_categories",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Whether [Automatic language detection](https://www.assemblyai.com/docs/Models/speech_recognition#automatic-language-detection) was enabled in the transcription request, either true or false.",
            "key": "language_detection",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Customize how words are spelled and formatted using to and from values",
            "key": "custom_spelling",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "TranscriptCustomSpelling"
                }
              }
            }
          },
          {
            "description": "Transcribe Filler Words, like \"umm\", in your media file; can be true or false.",
            "key": "disfluencies",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Enable [Sentiment Analysis](https://www.assemblyai.com/docs/Models/sentiment_analysis), can be true or false",
            "key": "sentiment_analysis",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Enable [Auto Chapters](https://www.assemblyai.com/docs/Models/auto_chapters), can be true or false",
            "key": "auto_chapters",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Enable [Entity Detection](https://www.assemblyai.com/docs/Models/entity_detection), can be true or false",
            "key": "entity_detection",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Reject audio files that contain less than this fraction of speech.\nValid values are in the range [0, 1] inclusive.\n",
            "key": "speech_threshold",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            }
          },
          {
            "description": "Enable [Summarization](https://www.assemblyai.com/docs/Models/summarization), can be true or false",
            "key": "summarization",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "The model to summarize the transcript",
            "key": "summary_model",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SummaryModel"
              }
            }
          },
          {
            "description": "The type of summary",
            "key": "summary_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SummaryType"
              }
            }
          },
          {
            "description": "Whether custom topics was enabled in the transcription request, either true or false",
            "key": "custom_topics",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "The list of custom topics provided if custom topics was enabled in the transcription request",
            "key": "topics",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "CreateTranscriptParameters": {
      "description": "The parameters for creating a transcript",
      "name": "CreateTranscriptParameters",
      "shape": {
        "type": "object",
        "extends": [
          "CreateTranscriptOptionalParameters"
        ],
        "properties": [
          {
            "description": "The URL of the audio or video file to transcribe.",
            "key": "audio_url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "SummaryModel": {
      "description": "The model to summarize the transcript",
      "name": "SummaryModel",
      "shape": {
        "type": "enum",
        "default": "informative",
        "values": [
          {
            "value": "informative"
          },
          {
            "value": "conversational"
          },
          {
            "value": "catchy"
          }
        ]
      }
    },
    "SummaryType": {
      "description": "The type of summary",
      "name": "SummaryType",
      "shape": {
        "type": "enum",
        "default": "bullets",
        "values": [
          {
            "value": "bullets"
          },
          {
            "value": "bullets_verbose"
          },
          {
            "value": "gist"
          },
          {
            "value": "headline"
          },
          {
            "value": "paragraph"
          }
        ]
      }
    },
    "TranscriptBoostParam": {
      "description": "The word boost parameter value, if provided in the transcription request.",
      "name": "TranscriptBoostParam",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "low"
          },
          {
            "value": "default"
          },
          {
            "value": "high"
          }
        ]
      }
    },
    "TranscriptCustomSpelling": {
      "description": "Object containing words or phrases to replace, and the word or phrase to replace with",
      "name": "TranscriptCustomSpelling",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Words or phrases to replace",
            "key": "from",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Word or phrase to replace with",
            "key": "to",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "TranscriptUtterance": {
      "name": "TranscriptUtterance",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "confidence",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double",
                "minimum": 0,
                "maximum": 1
              }
            }
          },
          {
            "key": "start",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "end",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "text",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "words",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "TranscriptWord"
              }
            }
          }
        ]
      }
    },
    "SubstitutionPolicy": {
      "description": "The replacement logic for detected PII, can be \"entity_type\" or \"hash\". See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
      "name": "SubstitutionPolicy",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "entity_type"
          },
          {
            "value": "hash"
          }
        ]
      }
    },
    "PiiPolicy": {
      "name": "PiiPolicy",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "medical_process"
          },
          {
            "value": "medical_condition"
          },
          {
            "value": "blood_type"
          },
          {
            "value": "drug"
          },
          {
            "value": "injury"
          },
          {
            "value": "number_sequence"
          },
          {
            "value": "email_address"
          },
          {
            "value": "date_of_birth"
          },
          {
            "value": "phone_number"
          },
          {
            "value": "us_social_security_number"
          },
          {
            "value": "credit_card_number"
          },
          {
            "value": "credit_card_expiration"
          },
          {
            "value": "credit_card_cvv"
          },
          {
            "value": "date"
          },
          {
            "value": "nationality"
          },
          {
            "value": "event"
          },
          {
            "value": "language"
          },
          {
            "value": "location"
          },
          {
            "value": "money_amount"
          },
          {
            "value": "person_name"
          },
          {
            "value": "person_age"
          },
          {
            "value": "organization"
          },
          {
            "value": "political_affiliation"
          },
          {
            "value": "occupation"
          },
          {
            "value": "religion"
          },
          {
            "value": "drivers_license"
          },
          {
            "value": "banking_information"
          }
        ]
      }
    },
    "TranscriptLanguageCode": {
      "description": "The language of your audio file. Possible values are found in [Supported Languages](https://www.assemblyai.com/docs/Concepts/supported_languages).\nThe default value is 'en_us'.\n",
      "name": "TranscriptLanguageCode",
      "shape": {
        "type": "enum",
        "default": "en_us",
        "values": [
          {
            "value": "en"
          },
          {
            "value": "en_au"
          },
          {
            "value": "en_uk"
          },
          {
            "value": "en_us"
          },
          {
            "value": "es"
          },
          {
            "value": "fr"
          },
          {
            "value": "de"
          },
          {
            "value": "it"
          },
          {
            "value": "pt"
          },
          {
            "value": "nl"
          },
          {
            "value": "hi"
          },
          {
            "value": "ja"
          },
          {
            "value": "zh"
          },
          {
            "value": "fi"
          },
          {
            "value": "ko"
          },
          {
            "value": "pl"
          },
          {
            "value": "ru"
          },
          {
            "value": "tr"
          },
          {
            "value": "uk"
          },
          {
            "value": "vi"
          }
        ]
      }
    },
    "TranscriptStatus": {
      "description": "The status of your transcription. Possible values are queued, processing, completed, or error.",
      "name": "TranscriptStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "description": "The audio file is in the queue to be processed by the API.",
            "value": "queued"
          },
          {
            "description": "The audio file is being processed by the API.",
            "value": "processing"
          },
          {
            "description": "The transcription job has been completed successfully.",
            "value": "completed"
          },
          {
            "description": "An error occurred while processing the audio file.",
            "value": "error"
          }
        ]
      }
    },
    "TranscriptContentSafetyLabels": {
      "description": "An array of results for the Content Moderation model, if it was enabled during the transcription request.\nSee [Content moderation](https://www.assemblyai.com/docs/Models/content_moderation) for more information.\n",
      "name": "TranscriptContentSafetyLabels",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Will be either success, or unavailable in the rare case that the Content Safety Labels model failed.",
            "key": "status",
            "valueType": {
              "type": "id",
              "value": "AudioIntelligenceModelStatus"
            }
          },
          {
            "key": "results",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "ContentSafetyLabelResult"
              }
            }
          }
        ]
      }
    },
    "TranscriptIabCategoriesResult": {
      "description": "An array of results for the Topic Detection model, if it was enabled during the transcription request.\nSee [Topic Detection](https://www.assemblyai.com/docs/Models/iab_classification) for more information.\n",
      "name": "TranscriptIabCategoriesResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Will be either success, or unavailable in the rare case that the Content Moderation model failed.",
            "key": "status",
            "valueType": {
              "type": "id",
              "value": "AudioIntelligenceModelStatus"
            }
          },
          {
            "description": "An array of results for the Topic Detection model.",
            "key": "results",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "TopicDetectionResult"
              }
            }
          },
          {
            "description": "The overall relevance of topic to the entire audio file",
            "key": "summary",
            "valueType": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "minimum": 0,
                  "maximum": 1
                }
              }
            }
          }
        ]
      }
    },
    "Transcript": {
      "description": "A transcript object",
      "name": "Transcript",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique identifier of your transcription",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The language model that was used for the transcription",
            "key": "language_model",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "availability": "Deprecated"
          },
          {
            "description": "The acoustic model that was used for the transcription",
            "key": "acoustic_model",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "availability": "Deprecated"
          },
          {
            "description": "The status of your transcription. Possible values are queued, processing, completed, or error.",
            "key": "status",
            "valueType": {
              "type": "id",
              "value": "TranscriptStatus"
            }
          },
          {
            "description": "The language of your audio file.\nPossible values are found in [Supported Languages](https://www.assemblyai.com/docs/Concepts/supported_languages).\nThe default value is 'en_us'.\n",
            "key": "language_code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TranscriptLanguageCode"
              }
            }
          },
          {
            "description": "The URL of the media that was transcribed",
            "key": "audio_url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The textual transcript of your media file",
            "key": "text",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "An array of temporally-sequential word objects, one for each word in the transcript.\nSee [Speech recognition](https://www.assemblyai.com/docs/Models/speech_recognition) for more information.\n",
            "key": "words",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "TranscriptWord"
                  }
                }
              }
            }
          },
          {
            "description": "When dual_channel or speaker_labels is enabled, a list of turn-by-turn utterance objects.\nSee [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization) for more information.\n",
            "key": "utterances",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "TranscriptUtterance"
                  }
                }
              }
            }
          },
          {
            "description": "The confidence score for the transcript, between 0.0 (low confidence) and 1.0 (high confidence)",
            "key": "confidence",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "double",
                    "minimum": 0,
                    "maximum": 1
                  }
                }
              }
            }
          },
          {
            "description": "The duration of this transcript object's media file, in seconds",
            "key": "audio_duration",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            }
          },
          {
            "description": "Whether Automatic Punctuation was enabled in the transcription request, either true or false.",
            "key": "punctuate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          {
            "description": "Whether Text Formatting was enabled in the transcription request, either true or false",
            "key": "format_text",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          {
            "description": "Whether [Dual channel transcription](https://www.assemblyai.com/docs/Models/speech_recognition#dual-channel-transcription) was enabled in the transcription request, either true or false",
            "key": "dual_channel",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          {
            "description": "The URL to which we send webhooks upon trancription completion, if provided in the transcription request",
            "key": "webhook_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "The status code we received from your server when delivering your webhook, if a webhook URL was provided in the transcription request",
            "key": "webhook_status_code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "description": "Whether webhook authentication details were provided in the transcription request",
            "key": "webhook_auth",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "The header name which should be sent back with webhook calls, if provided in the transcription request",
            "key": "webhook_auth_header_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Whether speed boost was enabled in the transcription request",
            "key": "speed_boost",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            "availability": "Deprecated"
          },
          {
            "description": "Whether Key Phrases was enabled in the transcription request, either true or false",
            "key": "auto_highlights",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "An array of results for the Key Phrases model, if it was enabled during the transcription request.\nSee [Key phrases](https://www.assemblyai.com/docs/Models/key_phrases) for more information.\n",
            "key": "auto_highlights_result",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AutoHighlightsResult"
              }
            }
          },
          {
            "description": "The point in time, in milliseconds, in the file at which the transcription was started, if provided in the transcription request",
            "key": "audio_start_from",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "description": "The point in time, in milliseconds, in the file at which the transcription was terminated, if provided in the transcription request",
            "key": "audio_end_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "description": "The list of custom vocabulary to boost transcription probability for, if provided in the transcription request",
            "key": "word_boost",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "The word boost parameter value, if provided in the transcription request",
            "key": "boost_param",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Whether [Profanity Filtering](https://www.assemblyai.com/docs/Models/speech_recognition#profanity-filtering) was enabled in the transcription request, either true or false",
            "key": "filter_profanity",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          {
            "description": "Whether [PII Redaction](https://www.assemblyai.com/docs/Models/pii_redaction) was enabled in the transcription request, either true or false",
            "key": "redact_pii",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "Whether a redacted version of the audio file was generated (enabled or disabled in the transcription request),\neither true or false. See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more information.\n",
            "key": "redact_pii_audio",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          {
            "description": "The audio quality of the PII-redacted audio file, if enabled in the transcription request.\nSee [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more information.\n",
            "key": "redact_pii_audio_quality",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "The list of PII Redaction policies that were enabled, if PII Redaction is enabled.\nSee [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more information.\n",
            "key": "redact_pii_policies",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "PiiPolicy"
                  }
                }
              }
            }
          },
          {
            "description": "The replacement logic for detected PII, can be \"entity_type\" or \"hash\". See [PII redaction](https://www.assemblyai.com/docs/Models/pii_redaction) for more details.",
            "key": "redact_pii_sub",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SubstitutionPolicy"
              }
            }
          },
          {
            "description": "Enable [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization), can be true or false",
            "key": "speaker_labels",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          {
            "description": "Defaults to null. Tells the speaker label model how many speakers it should attempt to identify, up to 10. See [Speaker diarization](https://www.assemblyai.com/docs/Models/speaker_diarization) for more details.",
            "key": "speakers_expected",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "description": "Enable [Content Moderation](https://www.assemblyai.com/docs/Models/content_moderation), can be true or false",
            "key": "content_safety",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          {
            "description": "An array of results for the Content Moderation model, if it was enabled during the transcription request.\nSee [Content moderation](https://www.assemblyai.com/docs/Models/content_moderation) for more information.\n",
            "key": "content_safety_labels",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "TranscriptContentSafetyLabels"
                }
              }
            }
          },
          {
            "description": "Enable [Topic Detection](https://www.assemblyai.com/docs/Models/iab_classification), can be true or false",
            "key": "iab_categories",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          {
            "description": "An array of results for the Topic Detection model, if it was enabled during the transcription request.\nSee [Topic Detection](https://www.assemblyai.com/docs/Models/iab_classification) for more information.\n",
            "key": "iab_categories_result",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "TranscriptIabCategoriesResult"
                }
              }
            }
          },
          {
            "description": "Whether [Automatic language detection](https://www.assemblyai.com/docs/Models/speech_recognition#automatic-language-detection) was enabled in the transcription request, either true or false",
            "key": "language_detection",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          {
            "description": "Customize how words are spelled and formatted using to and from values",
            "key": "custom_spelling",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "TranscriptCustomSpelling"
                  }
                }
              }
            }
          },
          {
            "description": "Enable [Auto Chapters](https://www.assemblyai.com/docs/Models/auto_chapters), can be true or false",
            "key": "auto_chapters",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          {
            "description": "An array of temporally sequential chapters for the audio file",
            "key": "chapters",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "Chapter"
                  }
                }
              }
            }
          },
          {
            "description": "Whether [Summarization](https://www.assemblyai.com/docs/Models/summarization) was enabled in the transcription request, either true or false",
            "key": "summarization",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "The type of summary generated, if [Summarization](https://www.assemblyai.com/docs/Models/summarization) was enabled in the transcription request",
            "key": "summary_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "The Summarization model used to generate the summary,\nif [Summarization](https://www.assemblyai.com/docs/Models/summarization) was enabled in the transcription request\n",
            "key": "summary_model",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "The generated summary of the media file, if [Summarization](https://www.assemblyai.com/docs/Models/summarization) was enabled in the transcription request",
            "key": "summary",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Whether custom topics was enabled in the transcription request, either true or false",
            "key": "custom_topics",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          {
            "description": "The list of custom topics provided if custom topics was enabled in the transcription request",
            "key": "topics",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Transcribe Filler Words, like \"umm\", in your media file; can be true or false",
            "key": "disfluencies",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          {
            "description": "Enable [Sentiment Analysis](https://www.assemblyai.com/docs/Models/sentiment_analysis), can be true or false",
            "key": "sentiment_analysis",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          {
            "description": "An array of results for the Sentiment Analysis model, if it was enabled during the transcription request.\nSee [Sentiment analysis](https://www.assemblyai.com/docs/Models/sentiment_analysis) for more information.\n",
            "key": "sentiment_analysis_results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "SentimentAnalysisResult"
                  }
                }
              }
            }
          },
          {
            "description": "Enable [Entity Detection](https://www.assemblyai.com/docs/Models/entity_detection), can be true or false",
            "key": "entity_detection",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          {
            "description": "An array of results for the Entity Detection model, if it was enabled during the transcription request.\nSee [Entity detection](https://www.assemblyai.com/docs/Models/entity_detection) for more information.\n",
            "key": "entities",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "Entity"
                  }
                }
              }
            }
          },
          {
            "description": "Defaults to null. Reject audio files that contain less than this fraction of speech.\nValid values are in the range [0, 1] inclusive.\n",
            "key": "speech_threshold",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            }
          },
          {
            "description": "True while a request is throttled and false when a request is no longer throttled",
            "key": "throttled",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          {
            "description": "Error message of why the transcript failed",
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "Chapter": {
      "description": "Chapter of the audio file",
      "name": "Chapter",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "An ultra-short summary (just a few words) of the content spoken in the chapter",
            "key": "gist",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "A single sentence summary of the content spoken during the chapter",
            "key": "headline",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "A one paragraph summary of the content spoken during the chapter",
            "key": "summary",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The starting time, in milliseconds, for the chapter",
            "key": "start",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "The starting time, in milliseconds, for the chapter",
            "key": "end",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "Entity": {
      "description": "A detected entity",
      "name": "Entity",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The type of entity for the detected entity",
            "key": "entity_type",
            "valueType": {
              "type": "id",
              "value": "EntityType"
            }
          },
          {
            "description": "The text for the detected entity",
            "key": "text",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The starting time, in milliseconds, at which the detected entity appears in the audio file",
            "key": "start",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "The ending time, in milliseconds, for the detected entity in the audio file",
            "key": "end",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "EntityType": {
      "description": "The type of entity for the detected entity",
      "name": "EntityType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "description": "Banking information, including account and routing numbers",
            "value": "banking_information"
          },
          {
            "description": "Blood type (e.g., O-, AB positive)",
            "value": "blood_type"
          },
          {
            "description": "Credit card verification code (e.g., CVV: 080)\n",
            "value": "credit_card_cvv"
          },
          {
            "description": "Expiration date of a credit card",
            "value": "credit_card_expiration"
          },
          {
            "description": "Credit card number",
            "value": "credit_card_number"
          },
          {
            "description": "Specific calendar date (e.g., December 18)",
            "value": "date"
          },
          {
            "description": "Date of Birth (e.g., Date of Birth: March 7, 1961)\n",
            "value": "date_of_birth"
          },
          {
            "description": "Driver's license number (e.g., DL #356933-540)\n",
            "value": "drivers_license"
          },
          {
            "description": "Medications, vitamins, or supplements (e.g., Advil, Acetaminophen, Panadol)",
            "value": "drug"
          },
          {
            "description": "Email address (e.g., support@assemblyai.com)",
            "value": "email_address"
          },
          {
            "description": "Name of an event or holiday (e.g., Olympics, Yom Kippur)",
            "value": "event"
          },
          {
            "description": "Bodily injury (e.g., I broke my arm, I have a sprained wrist)",
            "value": "injury"
          },
          {
            "description": "Name of a natural language (e.g., Spanish, French)",
            "value": "language"
          },
          {
            "description": "Any location reference including mailing address, postal code, city, state, province, or country",
            "value": "location"
          },
          {
            "description": "Name of a medical condition, disease, syndrome, deficit, or disorder (e.g., chronic fatigue syndrome, arrhythmia, depression)",
            "value": "medical_condition"
          },
          {
            "description": "Medical process, including treatments, procedures, and tests (e.g., heart surgery, CT scan)",
            "value": "medical_process"
          },
          {
            "description": "Name and/or amount of currency (e.g., 15 pesos, $94.50)",
            "value": "money_amount"
          },
          {
            "description": "Terms indicating nationality, ethnicity, or race (e.g., American, Asian, Caucasian)",
            "value": "nationality"
          },
          {
            "description": "Job title or profession (e.g., professor, actors, engineer, CPA)",
            "value": "occupation"
          },
          {
            "description": "Name of an organization (e.g., CNN, McDonalds, University of Alaska)",
            "value": "organization"
          },
          {
            "description": "Account passwords, PINs, access keys, or verification answers (e.g., 27%alfalfa, temp1234, My mother's maiden name is Smith)",
            "value": "password"
          },
          {
            "description": "Number associated with an age (e.g., 27, 75)",
            "value": "person_age"
          },
          {
            "description": "Name of a person (e.g., Bob, Doug Jones)",
            "value": "person_name"
          },
          {
            "description": "Telephone or fax number",
            "value": "phone_number"
          },
          {
            "description": "Terms referring to a political party, movement, or ideology (e.g., Republican, Liberal)",
            "value": "political_affiliation"
          },
          {
            "description": "Terms indicating religious affiliation (e.g., Hindu, Catholic)",
            "value": "religion"
          },
          {
            "description": "Expressions indicating clock times (e.g., 19:37:28, 10pm EST)",
            "value": "time"
          },
          {
            "description": "Internet addresses (e.g., www.assemblyai.com)",
            "value": "url"
          },
          {
            "description": "Social Security Number or equivalent",
            "value": "us_social_security_number"
          }
        ]
      }
    },
    "SentimentAnalysisResult": {
      "description": "The result of the sentiment analysis model.",
      "name": "SentimentAnalysisResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The transcript of the sentence",
            "key": "text",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The starting time, in milliseconds, of the sentence",
            "key": "start",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "The ending time, in milliseconds, of the sentence",
            "key": "end",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "The detected sentiment for the sentence, one of POSITIVE, NEUTRAL, NEGATIVE",
            "key": "sentiment",
            "valueType": {
              "type": "id",
              "value": "Sentiment"
            }
          },
          {
            "description": "The confidence score for the detected sentiment of the sentence, from 0 to 1",
            "key": "confidence",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double",
                "minimum": 0,
                "maximum": 1
              }
            }
          },
          {
            "description": "The speaker of the sentence if Speaker Diarization is enabled, else null",
            "key": "speaker",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "Sentiment": {
      "name": "Sentiment",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "POSITIVE"
          },
          {
            "value": "NEUTRAL"
          },
          {
            "value": "NEGATIVE"
          }
        ]
      }
    },
    "TopicDetectionResultLabelsItems": {
      "name": "TopicDetectionResultLabelsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "How relevant the detected topic is of a detected topic",
            "key": "relevance",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double",
                "minimum": 0,
                "maximum": 1
              }
            }
          },
          {
            "description": "The IAB taxonomical label for the label of the detected topic, where > denotes supertopic/subtopic relationship",
            "key": "label",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "TopicDetectionResult": {
      "description": "THe result of the topic detection model.",
      "name": "TopicDetectionResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The text in the transcript in which a detected topic occurs",
            "key": "text",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "labels",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "TopicDetectionResultLabelsItems"
                }
              }
            }
          },
          {
            "key": "timestamp",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "Timestamp"
              }
            }
          }
        ]
      }
    },
    "ContentSafetyLabel": {
      "name": "ContentSafetyLabel",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The label of the sensitive topic",
            "key": "label",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The confidence score for the topic being discussed, from 0 to 1",
            "key": "confidence",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double",
                "minimum": 0,
                "maximum": 1
              }
            }
          },
          {
            "description": "How severely the topic is discussed in the section, from 0 to 1",
            "key": "severity",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double",
                "minimum": 0,
                "maximum": 1
              }
            }
          }
        ]
      }
    },
    "ContentSafetyLabelResult": {
      "name": "ContentSafetyLabelResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The transcript of the section flagged by the Content Moderation model",
            "key": "text",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "An array of objects, one per sensitive topic that was detected in the section",
            "key": "labels",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "ContentSafetyLabel"
              }
            }
          },
          {
            "description": "The sentence index at which the section begins",
            "key": "sentences_idx_start",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "The sentence index at which the section ends",
            "key": "sentences_idx_end",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Timestamp information for the section",
            "key": "timestamp",
            "valueType": {
              "type": "id",
              "value": "Timestamp"
            }
          },
          {
            "description": "A summary of the Content Moderation confidence results for the entire audio file",
            "key": "summary",
            "valueType": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "minimum": 0,
                  "maximum": 1
                }
              }
            }
          },
          {
            "description": "A summary of the Content Moderation severity results for the entire audio file",
            "key": "severity_score_summary",
            "valueType": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "id",
                "value": "SeverityScoreSummary"
              }
            }
          }
        ]
      }
    },
    "SeverityScoreSummary": {
      "name": "SeverityScoreSummary",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "low",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double",
                "minimum": 0,
                "maximum": 1
              }
            }
          },
          {
            "key": "medium",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double",
                "minimum": 0,
                "maximum": 1
              }
            }
          },
          {
            "key": "high",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double",
                "minimum": 0,
                "maximum": 1
              }
            }
          }
        ]
      }
    },
    "AutoHighlightsResult": {
      "description": "An array of results for the Key Phrases model, if it was enabled during the transcription request.\nSee [Key phrases](https://www.assemblyai.com/docs/Models/key_phrases) for more information.\n",
      "name": "AutoHighlightsResult",
      "shape": {
        "type": "alias",
        "value": {
          "type": "optional",
          "itemType": {
            "type": "id",
            "value": "AutoHighlightsResult"
          }
        }
      }
    },
    "AutoHighlightResult": {
      "name": "AutoHighlightResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The total number of times the key phrase appears in the audio file",
            "key": "count",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "The total relevancy to the overall audio file of this key phrase - a greater number means more relevant",
            "key": "rank",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "description": "The text itself of the key phrase",
            "key": "text",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The timestamp of the of the key phrase",
            "key": "timestamps",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Timestamp"
              }
            }
          }
        ]
      }
    },
    "TranscriptWord": {
      "name": "TranscriptWord",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "confidence",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double",
                "minimum": 0,
                "maximum": 1
              }
            }
          },
          {
            "key": "start",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "end",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "text",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "speaker",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "TranscriptSentence": {
      "name": "TranscriptSentence",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "text",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "start",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "end",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "confidence",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double",
                "minimum": 0,
                "maximum": 1
              }
            }
          },
          {
            "key": "words",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "TranscriptWord"
              }
            }
          }
        ]
      }
    },
    "SentencesResponse": {
      "name": "SentencesResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "confidence",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double",
                "minimum": 0,
                "maximum": 1
              }
            }
          },
          {
            "key": "audio_duration",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "sentences",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "TranscriptSentence"
              }
            }
          }
        ]
      }
    },
    "TranscriptParagraph": {
      "name": "TranscriptParagraph",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "text",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "start",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "end",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "confidence",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double",
                "minimum": 0,
                "maximum": 1
              }
            }
          },
          {
            "key": "words",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "TranscriptWord"
              }
            }
          }
        ]
      }
    },
    "ParagraphsResponse": {
      "name": "ParagraphsResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "confidence",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double",
                "minimum": 0,
                "maximum": 1
              }
            }
          },
          {
            "key": "audio_duration",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "paragraphs",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "TranscriptParagraph"
              }
            }
          }
        ]
      }
    },
    "PageDetails": {
      "name": "PageDetails",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "limit",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "result_count",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "current_url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "prev_url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "next_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "TranscriptListParameters": {
      "name": "TranscriptListParameters",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Maximum amount of transcripts to retrieve",
            "key": "limit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "long",
                  "default": 10
                }
              }
            }
          },
          {
            "description": "Filter by transcript status",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TranscriptStatus"
              }
            }
          },
          {
            "description": "Only get transcripts created on this date",
            "key": "created_on",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date"
                }
              }
            }
          },
          {
            "description": "Get transcripts that were created before this transcript ID",
            "key": "before_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Get transcripts that were created after this transcript ID",
            "key": "after_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Only get throttled transcripts, overrides the status filter",
            "key": "throttled_only",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "TranscriptListItem": {
      "name": "TranscriptListItem",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "resource_url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "status",
            "valueType": {
              "type": "id",
              "value": "TranscriptStatus"
            }
          },
          {
            "key": "created",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          },
          {
            "key": "completed",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            }
          },
          {
            "key": "audio_url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "TranscriptList": {
      "name": "TranscriptList",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "page_details",
            "valueType": {
              "type": "id",
              "value": "PageDetails"
            }
          },
          {
            "key": "transcripts",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "TranscriptListItem"
              }
            }
          }
        ]
      }
    },
    "UploadedFile": {
      "name": "UploadedFile",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A URL that points to your audio file, accessible only by AssemblyAI's servers",
            "key": "upload_url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "CreateRealtimeTemporaryTokenParameters": {
      "name": "CreateRealtimeTemporaryTokenParameters",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The amount of time until the token expires in seconds.",
            "key": "expires_in",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 60
              }
            }
          }
        ]
      }
    },
    "RealtimeTemporaryTokenResponse": {
      "name": "RealtimeTemporaryTokenResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The temporary authentication token for real-time transcription",
            "key": "token",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "AudioIntelligenceModelStatus": {
      "description": "Will be either success, or unavailable in the rare case that the model failed.",
      "name": "AudioIntelligenceModelStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "success"
          },
          {
            "value": "unavailable"
          }
        ]
      }
    },
    "PurgeLemurRequestDataResponse": {
      "name": "PurgeLemurRequestDataResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the LeMUR request",
            "key": "request_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The ID of the deletion request of the LeMUR request",
            "key": "request_id_to_purge",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Whether the request data was deleted.",
            "key": "deleted",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    },
    "LemurBaseResponse": {
      "name": "LemurBaseResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the LeMUR request",
            "key": "request_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "LemurSummaryResponse": {
      "name": "LemurSummaryResponse",
      "shape": {
        "type": "object",
        "extends": [
          "LemurBaseResponse"
        ],
        "properties": [
          {
            "description": "The response generated by LeMUR.",
            "key": "response",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "LemurQuestionAnswerResponse": {
      "name": "LemurQuestionAnswerResponse",
      "shape": {
        "type": "object",
        "extends": [
          "LemurBaseResponse"
        ],
        "properties": [
          {
            "description": "The answers generated by LeMUR and their questions.",
            "key": "response",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "LemurQuestionAnswer"
              }
            }
          }
        ]
      }
    },
    "LemurQuestionAnswer": {
      "description": "An answer generated by LeMUR and its question.",
      "name": "LemurQuestionAnswer",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The question for LeMUR to answer.",
            "key": "question",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The answer generated by LeMUR.",
            "key": "answer",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "LemurActionItemsResponse": {
      "name": "LemurActionItemsResponse",
      "shape": {
        "type": "object",
        "extends": [
          "LemurBaseResponse"
        ],
        "properties": [
          {
            "description": "The response generated by LeMUR.",
            "key": "response",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "LemurTaskResponse": {
      "name": "LemurTaskResponse",
      "shape": {
        "type": "object",
        "extends": [
          "LemurBaseResponse"
        ],
        "properties": [
          {
            "description": "The response generated by LeMUR.",
            "key": "response",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "LemurBaseParametersContext0": {
      "name": "LemurBaseParametersContext0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "LemurBaseParametersContext1": {
      "name": "LemurBaseParametersContext1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [],
        "extraProperties": {
          "type": "unknown"
        }
      }
    },
    "LemurBaseParametersContext": {
      "description": "Context to provide the model. This can be a string or a free-form JSON value.",
      "name": "LemurBaseParametersContext",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "LemurBaseParametersContext0",
            "type": {
              "type": "id",
              "value": "LemurBaseParametersContext0"
            }
          },
          {
            "typeName": "LemurBaseParametersContext1",
            "type": {
              "type": "id",
              "value": "LemurBaseParametersContext1"
            }
          }
        ]
      }
    },
    "LemurBaseParameters": {
      "name": "LemurBaseParameters",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A list of completed transcripts with text. Up to 100 files max, or 100 hours max. Whichever is lower.",
            "key": "transcript_ids",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Context to provide the model. This can be a string or a free-form JSON value.",
            "key": "context",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "LemurBaseParametersContext"
              }
            }
          },
          {
            "key": "final_model",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "LemurModel"
              }
            }
          },
          {
            "description": "Max output size in tokens. Up to 4000 allowed.",
            "key": "max_output_size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The temperature to use for the model.\nHigher values result in answers that are more creative, lower values are more conservative.\nCan be any value between 0.0 and 1.0 inclusive.\n",
            "key": "temperature",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          }
        ]
      }
    },
    "LemurSummaryParameters": {
      "name": "LemurSummaryParameters",
      "shape": {
        "type": "object",
        "extends": [
          "LemurBaseParameters"
        ],
        "properties": [
          {
            "description": "How you want the summary to be returned. This can be any text. Examples: \"TLDR\", \"bullet points\"\n",
            "key": "answer_format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "LemurQuestionAnswerParameters": {
      "name": "LemurQuestionAnswerParameters",
      "shape": {
        "type": "object",
        "extends": [
          "LemurBaseParameters"
        ],
        "properties": [
          {
            "description": "A list of questions to ask.",
            "key": "questions",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "LemurQuestion"
              }
            }
          }
        ]
      }
    },
    "LemurQuestionContext0": {
      "name": "LemurQuestionContext0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "LemurQuestionContext1": {
      "name": "LemurQuestionContext1",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [],
        "extraProperties": {
          "type": "unknown"
        }
      }
    },
    "LemurQuestionContext": {
      "description": "Any context about the transcripts you wish to provide. This can be a string, or free-form JSON.",
      "name": "LemurQuestionContext",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "LemurQuestionContext0",
            "type": {
              "type": "id",
              "value": "LemurQuestionContext0"
            }
          },
          {
            "typeName": "LemurQuestionContext1",
            "type": {
              "type": "id",
              "value": "LemurQuestionContext1"
            }
          }
        ]
      }
    },
    "LemurQuestion": {
      "name": "LemurQuestion",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The question you wish to ask. For more complex questions use default model.",
            "key": "question",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Any context about the transcripts you wish to provide. This can be a string, or free-form JSON.",
            "key": "context",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "LemurQuestionContext"
              }
            }
          },
          {
            "description": "How you want the answer to be returned. This can be any text. Can't be used with answer_options. Examples: \"short sentence\", \"bullet points\"\n",
            "key": "answer_format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "What discrete options to return. Useful for precise responses. Can't be used with answer_format. Example: [\"Yes\", \"No\"]\n",
            "key": "answer_options",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "LemurActionItemsParameters": {
      "name": "LemurActionItemsParameters",
      "shape": {
        "type": "object",
        "extends": [
          "LemurBaseParameters"
        ],
        "properties": []
      }
    },
    "LemurTaskParameters": {
      "name": "LemurTaskParameters",
      "shape": {
        "type": "object",
        "extends": [
          "LemurBaseParameters"
        ],
        "properties": [
          {
            "description": "Your text to prompt the model to produce a desired output, including any context you want to pass into the model.",
            "key": "prompt",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "LemurModel": {
      "description": "The model that is used for the final prompt after compression is performed (options: \"basic\" and \"default\").\n",
      "name": "LemurModel",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "default"
          },
          {
            "value": "basic"
          }
        ]
      }
    },
    "Error": {
      "name": "Error",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Error message",
            "key": "error",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "error"
                }
              }
            }
          }
        ]
      }
    },
    "SendAudio": {
      "name": "SendAudio",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Raw audio data, base64 encoded. This can be the raw data recorded directly from a microphone or read from an audio file.",
            "key": "audio_data",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "TerminateSession": {
      "name": "TerminateSession",
      "shape": {
        "type": "object",
        "extends": [
          "RealtimeBaseMessage"
        ],
        "properties": [
          {
            "description": "A boolean value to communicate that you wish to end your real-time session forever.",
            "key": "terminate_session",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    },
    "SessionBegins": {
      "name": "SessionBegins",
      "shape": {
        "type": "object",
        "extends": [
          "RealtimeBaseMessage"
        ],
        "properties": [
          {
            "description": "Describes the type of the message.",
            "key": "message_type",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "SessionBegins"
              }
            }
          },
          {
            "description": "Unique identifier for the established session.",
            "key": "session_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Timestamp when this session will expire.",
            "key": "expires_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          }
        ]
      }
    },
    "SessionTerminated": {
      "name": "SessionTerminated",
      "shape": {
        "type": "object",
        "extends": [
          "RealtimeBaseMessage"
        ],
        "properties": [
          {
            "description": "Describes the type of the message.",
            "key": "message_type",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "SessionTerminated"
              }
            }
          }
        ]
      }
    },
    "RealtimeError": {
      "name": "RealtimeError",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "error",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "PartialTranscript": {
      "name": "PartialTranscript",
      "shape": {
        "type": "object",
        "extends": [
          "RealtimeBaseTranscript"
        ],
        "properties": [
          {
            "description": "Describes the type of message.",
            "key": "message_type",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "PartialTranscript"
              }
            }
          }
        ]
      }
    },
    "FinalTranscript": {
      "name": "FinalTranscript",
      "shape": {
        "type": "object",
        "extends": [
          "RealtimeBaseTranscript"
        ],
        "properties": [
          {
            "description": "Describes the type of message.",
            "key": "message_type",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "FinalTranscript"
              }
            }
          },
          {
            "description": "Whether the text has been punctuated and cased.",
            "key": "punctuated",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "Whether the text has been formatted (e.g. Dollar -> $)",
            "key": "text_formatted",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    },
    "RealtimeBaseMessage": {
      "name": "RealtimeBaseMessage",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Describes the type of the message.",
            "key": "message_type",
            "valueType": {
              "type": "id",
              "value": "MessageType"
            }
          }
        ]
      }
    },
    "RealtimeMessage": {
      "name": "RealtimeMessage",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "SessionBegins",
            "type": {
              "type": "id",
              "value": "SessionBegins"
            }
          },
          {
            "typeName": "PartialTranscript",
            "type": {
              "type": "id",
              "value": "PartialTranscript"
            }
          },
          {
            "typeName": "FinalTranscript",
            "type": {
              "type": "id",
              "value": "FinalTranscript"
            }
          },
          {
            "typeName": "SessionTerminated",
            "type": {
              "type": "id",
              "value": "SessionTerminated"
            }
          },
          {
            "typeName": "RealtimeError",
            "type": {
              "type": "id",
              "value": "RealtimeError"
            }
          }
        ]
      }
    },
    "MessageType": {
      "name": "MessageType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "SessionBegins"
          },
          {
            "value": "PartialTranscript"
          },
          {
            "value": "FinalTranscript"
          },
          {
            "value": "SessionTerminated"
          }
        ]
      }
    },
    "RealtimeTranscriptType": {
      "name": "RealtimeTranscriptType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "PartialTranscript"
          },
          {
            "value": "FinalTranscript"
          }
        ]
      }
    },
    "RealtimeTranscript": {
      "name": "RealtimeTranscript",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "PartialTranscript",
            "type": {
              "type": "id",
              "value": "PartialTranscript"
            }
          },
          {
            "typeName": "FinalTranscript",
            "type": {
              "type": "id",
              "value": "FinalTranscript"
            }
          }
        ]
      }
    },
    "RealtimeBaseTranscript": {
      "name": "RealtimeBaseTranscript",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Start time of audio sample relative to session start, in milliseconds.",
            "key": "audio_start",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "End time of audio sample relative to session start, in milliseconds.",
            "key": "audio_end",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "The confidence score of the entire transcription, between 0 and 1.",
            "key": "confidence",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double",
                "minimum": 0,
                "maximum": 1
              }
            }
          },
          {
            "description": "The partial transcript for your audio.",
            "key": "text",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "An array of objects, with the information for each word in the transcription text. Includes the start/end time (in milliseconds) of the word, the confidence score of the word, and the text (i.e. the word itself).",
            "key": "words",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Word"
              }
            }
          },
          {
            "description": "The timestamp for the partial transcript.",
            "key": "created",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "datetime"
              }
            }
          }
        ]
      }
    },
    "Word": {
      "name": "Word",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Start time of the word in milliseconds",
            "key": "start",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "End time of the word in milliseconds",
            "key": "end",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Confidence score of the word",
            "key": "confidence",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double",
                "minimum": 0,
                "maximum": 1
              }
            }
          },
          {
            "description": "The word itself",
            "key": "text",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "AudioData": {
      "name": "AudioData",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Raw audio data, base64 encoded. This can be the raw data recorded directly from a microphone or read from an audio file.",
            "key": "audio_data",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "UserIdSubscribe": {
      "name": "UserIdSubscribe",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "SessionBegins",
            "type": {
              "type": "id",
              "value": "SessionBegins"
            }
          },
          {
            "typeName": "PartialTranscript",
            "type": {
              "type": "id",
              "value": "PartialTranscript"
            }
          },
          {
            "typeName": "FinalTranscript",
            "type": {
              "type": "id",
              "value": "FinalTranscript"
            }
          },
          {
            "typeName": "SessionTerminated",
            "type": {
              "type": "id",
              "value": "SessionTerminated"
            }
          },
          {
            "typeName": "RealtimeError",
            "type": {
              "type": "id",
              "value": "RealtimeError"
            }
          }
        ]
      }
    },
    "UserIdPublish": {
      "name": "UserIdPublish",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "SendAudio",
            "type": {
              "type": "id",
              "value": "SendAudio"
            }
          },
          {
            "typeName": "TerminateSession",
            "type": {
              "type": "id",
              "value": "TerminateSession"
            }
          }
        ]
      }
    }
  },
  "subpackages": {
    "subpackage_files": {
      "subpackageId": "subpackage_files",
      "name": "files",
      "endpoints": [
        {
          "auth": true,
          "description": "Upload your audio or video file directly to the AssemblyAI API if it isn't accessible via a URL already.",
          "method": "POST",
          "defaultEnvironment": "AssemblyAI API",
          "environments": [
            {
              "id": "AssemblyAI API",
              "baseUrl": "https://api.assemblyai.com"
            }
          ],
          "id": "upload",
          "originalEndpointId": "files.upload",
          "name": "Upload an audio or video file which can be transcribed.",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/upload"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "UploadedFile"
              }
            },
            "statusCode": 200,
            "description": "File uploaded successfully"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/upload",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "upload_url": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "upload_url": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_transcript": {
      "subpackageId": "subpackage_transcript",
      "name": "transcript",
      "endpoints": [
        {
          "auth": true,
          "description": "Retrieve a list of transcripts you have created.",
          "method": "GET",
          "defaultEnvironment": "AssemblyAI API",
          "environments": [
            {
              "id": "AssemblyAI API",
              "baseUrl": "https://api.assemblyai.com"
            }
          ],
          "id": "list",
          "originalEndpointId": "transcript.list",
          "name": "List transcripts",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/transcript"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Maximum amount of transcripts to retrieve",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "TranscriptListParameters/properties/limit"
                }
              }
            },
            {
              "description": "Filter by transcript status",
              "key": "status",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "TranscriptListParameters/properties/status"
                }
              }
            },
            {
              "description": "Only get transcripts created on this date",
              "key": "created_on",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "TranscriptListParameters/properties/created_on"
                }
              }
            },
            {
              "description": "Get transcripts that were created before this transcript ID",
              "key": "before_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "TranscriptListParameters/properties/before_id"
                }
              }
            },
            {
              "description": "Get transcripts that were created after this transcript ID",
              "key": "after_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "TranscriptListParameters/properties/after_id"
                }
              }
            },
            {
              "description": "Only get throttled transcripts, overrides the status filter",
              "key": "throttled_only",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "TranscriptListParameters/properties/throttled_only"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TranscriptList"
              }
            },
            "statusCode": 200,
            "description": "A list of transcripts filtered by `limit` and `status`"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/transcript",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "page_details": {
                    "limit": 42,
                    "result_count": 42,
                    "current_url": "foo",
                    "prev_url": "foo",
                    "next_url": "foo"
                  },
                  "transcripts": [
                    {
                      "id": "foo",
                      "resource_url": "foo",
                      "status": "queued",
                      "created": "foo",
                      "completed": "foo",
                      "audio_url": "foo"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "page_details": {
                    "limit": 42,
                    "result_count": 42,
                    "current_url": "foo",
                    "prev_url": "foo",
                    "next_url": "foo"
                  },
                  "transcripts": [
                    {
                      "id": "foo",
                      "resource_url": "foo",
                      "status": "queued",
                      "created": "foo",
                      "completed": "foo",
                      "audio_url": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Create a transcript from an audio or video file that is accessible via a URL.",
          "method": "POST",
          "defaultEnvironment": "AssemblyAI API",
          "environments": [
            {
              "id": "AssemblyAI API",
              "baseUrl": "https://api.assemblyai.com"
            }
          ],
          "id": "create",
          "originalEndpointId": "transcript.create",
          "name": "Create a transcript from an audio file",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/transcript"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "CreateTranscriptParameters"
                }
              },
              "description": "Parameters to create a transcript."
            },
            "description": "Parameters to create a transcript."
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Transcript"
              }
            },
            "statusCode": 201,
            "description": "Transcript created and queued for processing."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/transcript",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "audio_url": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "audio_url": "foo"
                }
              },
              "responseStatusCode": 201,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "language_model": "foo",
                  "acoustic_model": "foo",
                  "status": "queued",
                  "language_code": "en_us",
                  "audio_url": "foo",
                  "text": "foo",
                  "words": [
                    {
                      "confidence": 42,
                      "start": 42,
                      "end": 42,
                      "text": "foo",
                      "speaker": "foo"
                    }
                  ],
                  "utterances": [
                    {
                      "channel": "foo",
                      "confidence": 42,
                      "start": 42,
                      "end": 42,
                      "text": "foo",
                      "words": [
                        {
                          "confidence": 42,
                          "start": 42,
                          "end": 42,
                          "text": "foo",
                          "speaker": "foo"
                        }
                      ]
                    }
                  ],
                  "confidence": 42,
                  "audio_duration": 42,
                  "punctuate": true,
                  "format_text": true,
                  "dual_channel": true,
                  "webhook_url": "foo",
                  "webhook_status_code": 42,
                  "webhook_auth": true,
                  "webhook_auth_header_name": "foo",
                  "speed_boost": true,
                  "auto_highlights": true,
                  "auto_highlights_result": {
                    "results": [
                      {
                        "count": 42,
                        "rank": 42,
                        "text": "foo",
                        "timestamps": [
                          {
                            "start": 42,
                            "end": 42
                          }
                        ]
                      }
                    ]
                  },
                  "audio_start_from": 42,
                  "audio_end_at": 42,
                  "word_boost": [
                    "foo"
                  ],
                  "boost_param": "foo",
                  "filter_profanity": true,
                  "redact_pii": true,
                  "redact_pii_audio": true,
                  "redact_pii_audio_quality": "foo",
                  "redact_pii_policies": [
                    "medical_process"
                  ],
                  "redact_pii_sub": "entity_type",
                  "speaker_labels": true,
                  "speakers_expected": 42,
                  "content_safety": true,
                  "content_safety_labels": {
                    "status": "success",
                    "results": [
                      {
                        "text": "foo",
                        "labels": [
                          {
                            "label": "foo",
                            "confidence": 42,
                            "severity": 42
                          }
                        ],
                        "sentences_idx_start": 42,
                        "sentences_idx_end": 42,
                        "timestamp": {
                          "start": 42,
                          "end": 42
                        },
                        "summary": {},
                        "severity_score_summary": {}
                      }
                    ]
                  },
                  "iab_categories": true,
                  "iab_categories_result": {
                    "status": "success",
                    "results": [
                      {
                        "text": "foo",
                        "labels": [
                          {
                            "relevance": 42,
                            "label": "foo"
                          }
                        ],
                        "timestamp": {
                          "start": 42,
                          "end": 42
                        }
                      }
                    ],
                    "summary": {}
                  },
                  "language_detection": true,
                  "custom_spelling": [
                    {
                      "from": [
                        "foo"
                      ],
                      "to": "foo"
                    }
                  ],
                  "auto_chapters": true,
                  "chapters": [
                    {
                      "gist": "foo",
                      "headline": "foo",
                      "summary": "foo",
                      "start": 42,
                      "end": 42
                    }
                  ],
                  "summarization": true,
                  "summary_type": "foo",
                  "summary_model": "foo",
                  "summary": "foo",
                  "custom_topics": true,
                  "topics": [
                    "foo"
                  ],
                  "disfluencies": true,
                  "sentiment_analysis": true,
                  "sentiment_analysis_results": [
                    {
                      "text": "foo",
                      "start": 42,
                      "end": 42,
                      "sentiment": "POSITIVE",
                      "confidence": 42,
                      "speaker": "foo"
                    }
                  ],
                  "entity_detection": true,
                  "entities": [
                    {
                      "entity_type": "banking_information",
                      "text": "foo",
                      "start": 42,
                      "end": 42
                    }
                  ],
                  "speech_threshold": 42,
                  "throttled": true,
                  "error": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "language_model": "foo",
                  "acoustic_model": "foo",
                  "status": "queued",
                  "language_code": "en_us",
                  "audio_url": "foo",
                  "text": "foo",
                  "words": [
                    {
                      "confidence": 42,
                      "start": 42,
                      "end": 42,
                      "text": "foo",
                      "speaker": "foo"
                    }
                  ],
                  "utterances": [
                    {
                      "channel": "foo",
                      "confidence": 42,
                      "start": 42,
                      "end": 42,
                      "text": "foo",
                      "words": [
                        {
                          "confidence": 42,
                          "start": 42,
                          "end": 42,
                          "text": "foo",
                          "speaker": "foo"
                        }
                      ]
                    }
                  ],
                  "confidence": 42,
                  "audio_duration": 42,
                  "punctuate": true,
                  "format_text": true,
                  "dual_channel": true,
                  "webhook_url": "foo",
                  "webhook_status_code": 42,
                  "webhook_auth": true,
                  "webhook_auth_header_name": "foo",
                  "speed_boost": true,
                  "auto_highlights": true,
                  "auto_highlights_result": {
                    "results": [
                      {
                        "count": 42,
                        "rank": 42,
                        "text": "foo",
                        "timestamps": [
                          {
                            "start": 42,
                            "end": 42
                          }
                        ]
                      }
                    ]
                  },
                  "audio_start_from": 42,
                  "audio_end_at": 42,
                  "word_boost": [
                    "foo"
                  ],
                  "boost_param": "foo",
                  "filter_profanity": true,
                  "redact_pii": true,
                  "redact_pii_audio": true,
                  "redact_pii_audio_quality": "foo",
                  "redact_pii_policies": [
                    "medical_process"
                  ],
                  "redact_pii_sub": "entity_type",
                  "speaker_labels": true,
                  "speakers_expected": 42,
                  "content_safety": true,
                  "content_safety_labels": {
                    "status": "success",
                    "results": [
                      {
                        "text": "foo",
                        "labels": [
                          {
                            "label": "foo",
                            "confidence": 42,
                            "severity": 42
                          }
                        ],
                        "sentences_idx_start": 42,
                        "sentences_idx_end": 42,
                        "timestamp": {
                          "start": 42,
                          "end": 42
                        },
                        "summary": {},
                        "severity_score_summary": {}
                      }
                    ]
                  },
                  "iab_categories": true,
                  "iab_categories_result": {
                    "status": "success",
                    "results": [
                      {
                        "text": "foo",
                        "labels": [
                          {
                            "relevance": 42,
                            "label": "foo"
                          }
                        ],
                        "timestamp": {
                          "start": 42,
                          "end": 42
                        }
                      }
                    ],
                    "summary": {}
                  },
                  "language_detection": true,
                  "custom_spelling": [
                    {
                      "from": [
                        "foo"
                      ],
                      "to": "foo"
                    }
                  ],
                  "auto_chapters": true,
                  "chapters": [
                    {
                      "gist": "foo",
                      "headline": "foo",
                      "summary": "foo",
                      "start": 42,
                      "end": 42
                    }
                  ],
                  "summarization": true,
                  "summary_type": "foo",
                  "summary_model": "foo",
                  "summary": "foo",
                  "custom_topics": true,
                  "topics": [
                    "foo"
                  ],
                  "disfluencies": true,
                  "sentiment_analysis": true,
                  "sentiment_analysis_results": [
                    {
                      "text": "foo",
                      "start": 42,
                      "end": 42,
                      "sentiment": "POSITIVE",
                      "confidence": 42,
                      "speaker": "foo"
                    }
                  ],
                  "entity_detection": true,
                  "entities": [
                    {
                      "entity_type": "banking_information",
                      "text": "foo",
                      "start": 42,
                      "end": 42
                    }
                  ],
                  "speech_threshold": 42,
                  "throttled": true,
                  "error": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Get the transcript resource. The transcript is ready when the \"status\" is \"completed\".",
          "method": "GET",
          "defaultEnvironment": "AssemblyAI API",
          "environments": [
            {
              "id": "AssemblyAI API",
              "baseUrl": "https://api.assemblyai.com"
            }
          ],
          "id": "get",
          "originalEndpointId": "transcript.get",
          "name": "Get the transcript",
          "path": {
            "pathParameters": [
              {
                "description": "ID of the transcript",
                "key": "transcript_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/transcript/"
              },
              {
                "type": "pathParameter",
                "value": "transcript_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Transcript"
              }
            },
            "statusCode": 200,
            "description": "The transcript resource"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/transcript/",
              "pathParameters": {
                "transcript_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "language_model": "foo",
                  "acoustic_model": "foo",
                  "status": "queued",
                  "language_code": "en_us",
                  "audio_url": "foo",
                  "text": "foo",
                  "words": [
                    {
                      "confidence": 42,
                      "start": 42,
                      "end": 42,
                      "text": "foo",
                      "speaker": "foo"
                    }
                  ],
                  "utterances": [
                    {
                      "channel": "foo",
                      "confidence": 42,
                      "start": 42,
                      "end": 42,
                      "text": "foo",
                      "words": [
                        {
                          "confidence": 42,
                          "start": 42,
                          "end": 42,
                          "text": "foo",
                          "speaker": "foo"
                        }
                      ]
                    }
                  ],
                  "confidence": 42,
                  "audio_duration": 42,
                  "punctuate": true,
                  "format_text": true,
                  "dual_channel": true,
                  "webhook_url": "foo",
                  "webhook_status_code": 42,
                  "webhook_auth": true,
                  "webhook_auth_header_name": "foo",
                  "speed_boost": true,
                  "auto_highlights": true,
                  "auto_highlights_result": {
                    "results": [
                      {
                        "count": 42,
                        "rank": 42,
                        "text": "foo",
                        "timestamps": [
                          {
                            "start": 42,
                            "end": 42
                          }
                        ]
                      }
                    ]
                  },
                  "audio_start_from": 42,
                  "audio_end_at": 42,
                  "word_boost": [
                    "foo"
                  ],
                  "boost_param": "foo",
                  "filter_profanity": true,
                  "redact_pii": true,
                  "redact_pii_audio": true,
                  "redact_pii_audio_quality": "foo",
                  "redact_pii_policies": [
                    "medical_process"
                  ],
                  "redact_pii_sub": "entity_type",
                  "speaker_labels": true,
                  "speakers_expected": 42,
                  "content_safety": true,
                  "content_safety_labels": {
                    "status": "success",
                    "results": [
                      {
                        "text": "foo",
                        "labels": [
                          {
                            "label": "foo",
                            "confidence": 42,
                            "severity": 42
                          }
                        ],
                        "sentences_idx_start": 42,
                        "sentences_idx_end": 42,
                        "timestamp": {
                          "start": 42,
                          "end": 42
                        },
                        "summary": {},
                        "severity_score_summary": {}
                      }
                    ]
                  },
                  "iab_categories": true,
                  "iab_categories_result": {
                    "status": "success",
                    "results": [
                      {
                        "text": "foo",
                        "labels": [
                          {
                            "relevance": 42,
                            "label": "foo"
                          }
                        ],
                        "timestamp": {
                          "start": 42,
                          "end": 42
                        }
                      }
                    ],
                    "summary": {}
                  },
                  "language_detection": true,
                  "custom_spelling": [
                    {
                      "from": [
                        "foo"
                      ],
                      "to": "foo"
                    }
                  ],
                  "auto_chapters": true,
                  "chapters": [
                    {
                      "gist": "foo",
                      "headline": "foo",
                      "summary": "foo",
                      "start": 42,
                      "end": 42
                    }
                  ],
                  "summarization": true,
                  "summary_type": "foo",
                  "summary_model": "foo",
                  "summary": "foo",
                  "custom_topics": true,
                  "topics": [
                    "foo"
                  ],
                  "disfluencies": true,
                  "sentiment_analysis": true,
                  "sentiment_analysis_results": [
                    {
                      "text": "foo",
                      "start": 42,
                      "end": 42,
                      "sentiment": "POSITIVE",
                      "confidence": 42,
                      "speaker": "foo"
                    }
                  ],
                  "entity_detection": true,
                  "entities": [
                    {
                      "entity_type": "banking_information",
                      "text": "foo",
                      "start": 42,
                      "end": 42
                    }
                  ],
                  "speech_threshold": 42,
                  "throttled": true,
                  "error": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "language_model": "foo",
                  "acoustic_model": "foo",
                  "status": "queued",
                  "language_code": "en_us",
                  "audio_url": "foo",
                  "text": "foo",
                  "words": [
                    {
                      "confidence": 42,
                      "start": 42,
                      "end": 42,
                      "text": "foo",
                      "speaker": "foo"
                    }
                  ],
                  "utterances": [
                    {
                      "channel": "foo",
                      "confidence": 42,
                      "start": 42,
                      "end": 42,
                      "text": "foo",
                      "words": [
                        {
                          "confidence": 42,
                          "start": 42,
                          "end": 42,
                          "text": "foo",
                          "speaker": "foo"
                        }
                      ]
                    }
                  ],
                  "confidence": 42,
                  "audio_duration": 42,
                  "punctuate": true,
                  "format_text": true,
                  "dual_channel": true,
                  "webhook_url": "foo",
                  "webhook_status_code": 42,
                  "webhook_auth": true,
                  "webhook_auth_header_name": "foo",
                  "speed_boost": true,
                  "auto_highlights": true,
                  "auto_highlights_result": {
                    "results": [
                      {
                        "count": 42,
                        "rank": 42,
                        "text": "foo",
                        "timestamps": [
                          {
                            "start": 42,
                            "end": 42
                          }
                        ]
                      }
                    ]
                  },
                  "audio_start_from": 42,
                  "audio_end_at": 42,
                  "word_boost": [
                    "foo"
                  ],
                  "boost_param": "foo",
                  "filter_profanity": true,
                  "redact_pii": true,
                  "redact_pii_audio": true,
                  "redact_pii_audio_quality": "foo",
                  "redact_pii_policies": [
                    "medical_process"
                  ],
                  "redact_pii_sub": "entity_type",
                  "speaker_labels": true,
                  "speakers_expected": 42,
                  "content_safety": true,
                  "content_safety_labels": {
                    "status": "success",
                    "results": [
                      {
                        "text": "foo",
                        "labels": [
                          {
                            "label": "foo",
                            "confidence": 42,
                            "severity": 42
                          }
                        ],
                        "sentences_idx_start": 42,
                        "sentences_idx_end": 42,
                        "timestamp": {
                          "start": 42,
                          "end": 42
                        },
                        "summary": {},
                        "severity_score_summary": {}
                      }
                    ]
                  },
                  "iab_categories": true,
                  "iab_categories_result": {
                    "status": "success",
                    "results": [
                      {
                        "text": "foo",
                        "labels": [
                          {
                            "relevance": 42,
                            "label": "foo"
                          }
                        ],
                        "timestamp": {
                          "start": 42,
                          "end": 42
                        }
                      }
                    ],
                    "summary": {}
                  },
                  "language_detection": true,
                  "custom_spelling": [
                    {
                      "from": [
                        "foo"
                      ],
                      "to": "foo"
                    }
                  ],
                  "auto_chapters": true,
                  "chapters": [
                    {
                      "gist": "foo",
                      "headline": "foo",
                      "summary": "foo",
                      "start": 42,
                      "end": 42
                    }
                  ],
                  "summarization": true,
                  "summary_type": "foo",
                  "summary_model": "foo",
                  "summary": "foo",
                  "custom_topics": true,
                  "topics": [
                    "foo"
                  ],
                  "disfluencies": true,
                  "sentiment_analysis": true,
                  "sentiment_analysis_results": [
                    {
                      "text": "foo",
                      "start": 42,
                      "end": 42,
                      "sentiment": "POSITIVE",
                      "confidence": 42,
                      "speaker": "foo"
                    }
                  ],
                  "entity_detection": true,
                  "entities": [
                    {
                      "entity_type": "banking_information",
                      "text": "foo",
                      "start": 42,
                      "end": 42
                    }
                  ],
                  "speech_threshold": 42,
                  "throttled": true,
                  "error": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Delete the transcript",
          "method": "DELETE",
          "defaultEnvironment": "AssemblyAI API",
          "environments": [
            {
              "id": "AssemblyAI API",
              "baseUrl": "https://api.assemblyai.com"
            }
          ],
          "id": "delete",
          "originalEndpointId": "transcript.delete",
          "name": "Delete the transcript",
          "path": {
            "pathParameters": [
              {
                "description": "ID of the transcript",
                "key": "transcript_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/transcript/"
              },
              {
                "type": "pathParameter",
                "value": "transcript_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Transcript"
              }
            },
            "statusCode": 200,
            "description": "The deleted transcript response."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/transcript/",
              "pathParameters": {
                "transcript_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "language_model": "foo",
                  "acoustic_model": "foo",
                  "status": "queued",
                  "language_code": "en_us",
                  "audio_url": "foo",
                  "text": "foo",
                  "words": [
                    {
                      "confidence": 42,
                      "start": 42,
                      "end": 42,
                      "text": "foo",
                      "speaker": "foo"
                    }
                  ],
                  "utterances": [
                    {
                      "channel": "foo",
                      "confidence": 42,
                      "start": 42,
                      "end": 42,
                      "text": "foo",
                      "words": [
                        {
                          "confidence": 42,
                          "start": 42,
                          "end": 42,
                          "text": "foo",
                          "speaker": "foo"
                        }
                      ]
                    }
                  ],
                  "confidence": 42,
                  "audio_duration": 42,
                  "punctuate": true,
                  "format_text": true,
                  "dual_channel": true,
                  "webhook_url": "foo",
                  "webhook_status_code": 42,
                  "webhook_auth": true,
                  "webhook_auth_header_name": "foo",
                  "speed_boost": true,
                  "auto_highlights": true,
                  "auto_highlights_result": {
                    "results": [
                      {
                        "count": 42,
                        "rank": 42,
                        "text": "foo",
                        "timestamps": [
                          {
                            "start": 42,
                            "end": 42
                          }
                        ]
                      }
                    ]
                  },
                  "audio_start_from": 42,
                  "audio_end_at": 42,
                  "word_boost": [
                    "foo"
                  ],
                  "boost_param": "foo",
                  "filter_profanity": true,
                  "redact_pii": true,
                  "redact_pii_audio": true,
                  "redact_pii_audio_quality": "foo",
                  "redact_pii_policies": [
                    "medical_process"
                  ],
                  "redact_pii_sub": "entity_type",
                  "speaker_labels": true,
                  "speakers_expected": 42,
                  "content_safety": true,
                  "content_safety_labels": {
                    "status": "success",
                    "results": [
                      {
                        "text": "foo",
                        "labels": [
                          {
                            "label": "foo",
                            "confidence": 42,
                            "severity": 42
                          }
                        ],
                        "sentences_idx_start": 42,
                        "sentences_idx_end": 42,
                        "timestamp": {
                          "start": 42,
                          "end": 42
                        },
                        "summary": {},
                        "severity_score_summary": {}
                      }
                    ]
                  },
                  "iab_categories": true,
                  "iab_categories_result": {
                    "status": "success",
                    "results": [
                      {
                        "text": "foo",
                        "labels": [
                          {
                            "relevance": 42,
                            "label": "foo"
                          }
                        ],
                        "timestamp": {
                          "start": 42,
                          "end": 42
                        }
                      }
                    ],
                    "summary": {}
                  },
                  "language_detection": true,
                  "custom_spelling": [
                    {
                      "from": [
                        "foo"
                      ],
                      "to": "foo"
                    }
                  ],
                  "auto_chapters": true,
                  "chapters": [
                    {
                      "gist": "foo",
                      "headline": "foo",
                      "summary": "foo",
                      "start": 42,
                      "end": 42
                    }
                  ],
                  "summarization": true,
                  "summary_type": "foo",
                  "summary_model": "foo",
                  "summary": "foo",
                  "custom_topics": true,
                  "topics": [
                    "foo"
                  ],
                  "disfluencies": true,
                  "sentiment_analysis": true,
                  "sentiment_analysis_results": [
                    {
                      "text": "foo",
                      "start": 42,
                      "end": 42,
                      "sentiment": "POSITIVE",
                      "confidence": 42,
                      "speaker": "foo"
                    }
                  ],
                  "entity_detection": true,
                  "entities": [
                    {
                      "entity_type": "banking_information",
                      "text": "foo",
                      "start": 42,
                      "end": 42
                    }
                  ],
                  "speech_threshold": 42,
                  "throttled": true,
                  "error": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "language_model": "foo",
                  "acoustic_model": "foo",
                  "status": "queued",
                  "language_code": "en_us",
                  "audio_url": "foo",
                  "text": "foo",
                  "words": [
                    {
                      "confidence": 42,
                      "start": 42,
                      "end": 42,
                      "text": "foo",
                      "speaker": "foo"
                    }
                  ],
                  "utterances": [
                    {
                      "channel": "foo",
                      "confidence": 42,
                      "start": 42,
                      "end": 42,
                      "text": "foo",
                      "words": [
                        {
                          "confidence": 42,
                          "start": 42,
                          "end": 42,
                          "text": "foo",
                          "speaker": "foo"
                        }
                      ]
                    }
                  ],
                  "confidence": 42,
                  "audio_duration": 42,
                  "punctuate": true,
                  "format_text": true,
                  "dual_channel": true,
                  "webhook_url": "foo",
                  "webhook_status_code": 42,
                  "webhook_auth": true,
                  "webhook_auth_header_name": "foo",
                  "speed_boost": true,
                  "auto_highlights": true,
                  "auto_highlights_result": {
                    "results": [
                      {
                        "count": 42,
                        "rank": 42,
                        "text": "foo",
                        "timestamps": [
                          {
                            "start": 42,
                            "end": 42
                          }
                        ]
                      }
                    ]
                  },
                  "audio_start_from": 42,
                  "audio_end_at": 42,
                  "word_boost": [
                    "foo"
                  ],
                  "boost_param": "foo",
                  "filter_profanity": true,
                  "redact_pii": true,
                  "redact_pii_audio": true,
                  "redact_pii_audio_quality": "foo",
                  "redact_pii_policies": [
                    "medical_process"
                  ],
                  "redact_pii_sub": "entity_type",
                  "speaker_labels": true,
                  "speakers_expected": 42,
                  "content_safety": true,
                  "content_safety_labels": {
                    "status": "success",
                    "results": [
                      {
                        "text": "foo",
                        "labels": [
                          {
                            "label": "foo",
                            "confidence": 42,
                            "severity": 42
                          }
                        ],
                        "sentences_idx_start": 42,
                        "sentences_idx_end": 42,
                        "timestamp": {
                          "start": 42,
                          "end": 42
                        },
                        "summary": {},
                        "severity_score_summary": {}
                      }
                    ]
                  },
                  "iab_categories": true,
                  "iab_categories_result": {
                    "status": "success",
                    "results": [
                      {
                        "text": "foo",
                        "labels": [
                          {
                            "relevance": 42,
                            "label": "foo"
                          }
                        ],
                        "timestamp": {
                          "start": 42,
                          "end": 42
                        }
                      }
                    ],
                    "summary": {}
                  },
                  "language_detection": true,
                  "custom_spelling": [
                    {
                      "from": [
                        "foo"
                      ],
                      "to": "foo"
                    }
                  ],
                  "auto_chapters": true,
                  "chapters": [
                    {
                      "gist": "foo",
                      "headline": "foo",
                      "summary": "foo",
                      "start": 42,
                      "end": 42
                    }
                  ],
                  "summarization": true,
                  "summary_type": "foo",
                  "summary_model": "foo",
                  "summary": "foo",
                  "custom_topics": true,
                  "topics": [
                    "foo"
                  ],
                  "disfluencies": true,
                  "sentiment_analysis": true,
                  "sentiment_analysis_results": [
                    {
                      "text": "foo",
                      "start": 42,
                      "end": 42,
                      "sentiment": "POSITIVE",
                      "confidence": 42,
                      "speaker": "foo"
                    }
                  ],
                  "entity_detection": true,
                  "entities": [
                    {
                      "entity_type": "banking_information",
                      "text": "foo",
                      "start": 42,
                      "end": 42
                    }
                  ],
                  "speech_threshold": 42,
                  "throttled": true,
                  "error": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Export your transcript in SRT or VTT format, to be plugged into a video player for subtitles and closed captions.",
          "method": "GET",
          "defaultEnvironment": "AssemblyAI API",
          "environments": [
            {
              "id": "AssemblyAI API",
              "baseUrl": "https://api.assemblyai.com"
            }
          ],
          "id": "getSubtitles",
          "originalEndpointId": "transcript.getSubtitles",
          "name": "Export transcript as SRT or VTT captions.",
          "path": {
            "pathParameters": [
              {
                "description": "ID of the transcript",
                "key": "transcript_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "The format of the captions.",
                "key": "subtitle_format",
                "type": {
                  "type": "id",
                  "value": "SubtitleFormat"
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/transcript/"
              },
              {
                "type": "pathParameter",
                "value": "transcript_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "subtitle_format"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [
            {
              "description": "The maximum number of characters per caption",
              "key": "chars_per_caption",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ],
          "headers": [],
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/transcript/",
              "pathParameters": {
                "transcript_id": "foo",
                "subtitle_format": "srt"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Get the transcript split by sentences. The API will attempt to semantically segment the transcript into sentences to create more reader-friendly transcripts.",
          "method": "GET",
          "defaultEnvironment": "AssemblyAI API",
          "environments": [
            {
              "id": "AssemblyAI API",
              "baseUrl": "https://api.assemblyai.com"
            }
          ],
          "id": "getSentences",
          "originalEndpointId": "transcript.getSentences",
          "name": "Get the transcript split by sentences",
          "path": {
            "pathParameters": [
              {
                "description": "ID of the transcript",
                "key": "transcript_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/transcript/"
              },
              {
                "type": "pathParameter",
                "value": "transcript_id"
              },
              {
                "type": "literal",
                "value": "/sentences"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "SentencesResponse"
              }
            },
            "statusCode": 200,
            "description": "Exported sentences"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/transcript/",
              "pathParameters": {
                "transcript_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "confidence": 42,
                  "audio_duration": 42,
                  "sentences": [
                    {
                      "text": "foo",
                      "start": 42,
                      "end": 42,
                      "confidence": 42,
                      "words": [
                        {
                          "confidence": 42,
                          "start": 42,
                          "end": 42,
                          "text": "foo",
                          "speaker": "foo"
                        }
                      ]
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "confidence": 42,
                  "audio_duration": 42,
                  "sentences": [
                    {
                      "text": "foo",
                      "start": 42,
                      "end": 42,
                      "confidence": 42,
                      "words": [
                        {
                          "confidence": 42,
                          "start": 42,
                          "end": 42,
                          "text": "foo",
                          "speaker": "foo"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Get the transcript split by paragraphs. The API will attempt to semantically segment your transcript into paragraphs to create more reader-friendly transcripts.",
          "method": "GET",
          "defaultEnvironment": "AssemblyAI API",
          "environments": [
            {
              "id": "AssemblyAI API",
              "baseUrl": "https://api.assemblyai.com"
            }
          ],
          "id": "getParagraphs",
          "originalEndpointId": "transcript.getParagraphs",
          "name": "Get the transcript split by paragraphs",
          "path": {
            "pathParameters": [
              {
                "description": "ID of the transcript",
                "key": "transcript_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/transcript/"
              },
              {
                "type": "pathParameter",
                "value": "transcript_id"
              },
              {
                "type": "literal",
                "value": "/paragraphs"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ParagraphsResponse"
              }
            },
            "statusCode": 200,
            "description": "Exported paragraphs"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/transcript/",
              "pathParameters": {
                "transcript_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "confidence": 42,
                  "audio_duration": 42,
                  "paragraphs": [
                    {
                      "text": "foo",
                      "start": 42,
                      "end": 42,
                      "confidence": 42,
                      "words": [
                        {
                          "confidence": 42,
                          "start": 42,
                          "end": 42,
                          "text": "foo",
                          "speaker": "foo"
                        }
                      ]
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "confidence": 42,
                  "audio_duration": 42,
                  "paragraphs": [
                    {
                      "text": "foo",
                      "start": 42,
                      "end": 42,
                      "confidence": 42,
                      "words": [
                        {
                          "confidence": 42,
                          "start": 42,
                          "end": 42,
                          "text": "foo",
                          "speaker": "foo"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Search through the transcript for a specific set of keywords. You can search for individual words, numbers, or phrases containing up to five words or numbers.",
          "method": "GET",
          "defaultEnvironment": "AssemblyAI API",
          "environments": [
            {
              "id": "AssemblyAI API",
              "baseUrl": "https://api.assemblyai.com"
            }
          ],
          "id": "wordSearch",
          "originalEndpointId": "transcript.wordSearch",
          "name": "Search the given transcript for words, numbers, or phrases",
          "path": {
            "pathParameters": [
              {
                "description": "ID of the transcript",
                "key": "transcript_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/transcript/"
              },
              {
                "type": "pathParameter",
                "value": "transcript_id"
              },
              {
                "type": "literal",
                "value": "/word-search"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Keywords to search for",
              "key": "words",
              "type": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "WordSearchResponse"
              }
            },
            "statusCode": 200,
            "description": "Word search response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/transcript/",
              "pathParameters": {
                "transcript_id": "foo"
              },
              "queryParameters": {
                "words": [
                  "foo"
                ]
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "total_count": 42,
                  "matches": [
                    {
                      "text": "foo",
                      "count": 42,
                      "timestamps": [
                        [
                          42
                        ]
                      ],
                      "indexes": [
                        42
                      ]
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "total_count": 42,
                  "matches": [
                    {
                      "text": "foo",
                      "count": 42,
                      "timestamps": [
                        [
                          42
                        ]
                      ],
                      "indexes": [
                        42
                      ]
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Retrieves the redacted audio object containing the status and URL to the redacted audio.",
          "method": "GET",
          "defaultEnvironment": "AssemblyAI API",
          "environments": [
            {
              "id": "AssemblyAI API",
              "baseUrl": "https://api.assemblyai.com"
            }
          ],
          "id": "getRedactedAudio",
          "originalEndpointId": "transcript.getRedactedAudio",
          "name": "Retrieves the redacted audio object containing the status and URL to the redacted audio.",
          "path": {
            "pathParameters": [
              {
                "description": "ID of the transcript",
                "key": "transcript_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/transcript/"
              },
              {
                "type": "pathParameter",
                "value": "transcript_id"
              },
              {
                "type": "literal",
                "value": "/redacted-audio"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RedactedAudioResponse"
              }
            },
            "statusCode": 200,
            "description": "The redacted audio object containing the status and URL to the redacted audio."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/transcript/",
              "pathParameters": {
                "transcript_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "status": "redacted_audio_ready",
                  "redacted_audio_url": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "status": "redacted_audio_ready",
                  "redacted_audio_url": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_realtime": {
      "subpackageId": "subpackage_realtime",
      "name": "realtime",
      "endpoints": [
        {
          "auth": true,
          "description": "Create a temporary authentication token for real-time transcription",
          "method": "POST",
          "defaultEnvironment": "AssemblyAI API",
          "environments": [
            {
              "id": "AssemblyAI API",
              "baseUrl": "https://api.assemblyai.com"
            }
          ],
          "id": "createTemporaryToken",
          "originalEndpointId": "realtime.createTemporaryToken",
          "name": "Create a temporary authentication token for real-time transcription",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/realtime/token"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "CreateRealtimeTemporaryTokenParameters"
                }
              },
              "description": "Parameters to create a temporary authentication token."
            },
            "description": "Parameters to create a temporary authentication token."
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RealtimeTemporaryTokenResponse"
              }
            },
            "statusCode": 200,
            "description": "Temporary authentication token generated."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/realtime/token",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "expires_in": 42
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "expires_in": 42
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "token": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "token": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_lemur": {
      "subpackageId": "subpackage_lemur",
      "name": "lemur",
      "endpoints": [
        {
          "auth": true,
          "description": "Custom Summary allows you to distill a piece of audio into a few impactful sentences. You can give the model context to obtain more targeted results while outputting the results in a variety of formats described in human language.",
          "method": "POST",
          "defaultEnvironment": "AssemblyAI API",
          "environments": [
            {
              "id": "AssemblyAI API",
              "baseUrl": "https://api.assemblyai.com"
            }
          ],
          "id": "summary",
          "originalEndpointId": "lemur.summary",
          "name": "Generate a custom summary from one or more transcripts.",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/lemur/v3/generate/summary"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "LemurSummaryParameters"
                }
              },
              "description": "Parameters to generate the summary."
            },
            "description": "Parameters to generate the summary."
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "LemurSummaryResponse"
              }
            },
            "statusCode": 200,
            "description": "LeMUR summary response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/lemur/v3/generate/summary",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "transcript_ids": [
                  "foo"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "transcript_ids": [
                    "foo"
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "request_id": "foo",
                  "response": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "request_id": "foo",
                  "response": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Question & Answer allows you to ask free-form questions about a single transcript or a group of transcripts. The questions can be any whose answers you find useful, such as judging whether a caller is likely to become a customer or whether all items on a meeting's agenda were covered.",
          "method": "POST",
          "defaultEnvironment": "AssemblyAI API",
          "environments": [
            {
              "id": "AssemblyAI API",
              "baseUrl": "https://api.assemblyai.com"
            }
          ],
          "id": "questionAnswer",
          "originalEndpointId": "lemur.questionAnswer",
          "name": "Create answers to one or more questions about one or more transcripts.",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/lemur/v3/generate/question-answer"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "LemurQuestionAnswerParameters"
                }
              },
              "description": "Parameters to ask questions about the transcripts."
            },
            "description": "Parameters to ask questions about the transcripts."
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "LemurQuestionAnswerResponse"
              }
            },
            "statusCode": 200,
            "description": "LeMUR question & answer response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/lemur/v3/generate/question-answer",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "transcript_ids": [
                  "foo"
                ],
                "questions": [
                  {
                    "question": "foo"
                  }
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "transcript_ids": [
                    "foo"
                  ],
                  "questions": [
                    {
                      "question": "foo"
                    }
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "request_id": "foo",
                  "response": [
                    {
                      "question": "foo",
                      "answer": "foo"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "request_id": "foo",
                  "response": [
                    {
                      "question": "foo",
                      "answer": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Use LeMUR to generate a list of Action Items from a transcript",
          "method": "POST",
          "defaultEnvironment": "AssemblyAI API",
          "environments": [
            {
              "id": "AssemblyAI API",
              "baseUrl": "https://api.assemblyai.com"
            }
          ],
          "id": "actionItems",
          "originalEndpointId": "lemur.actionItems",
          "name": "Extract action items from one or more meeting transcripts.",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/lemur/v3/generate/action-items"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "LemurActionItemsParameters"
                }
              },
              "description": "Parameters to generate action items from transcripts."
            },
            "description": "Parameters to generate action items from transcripts."
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "LemurActionItemsResponse"
              }
            },
            "statusCode": 200,
            "description": "LeMUR action items response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/lemur/v3/generate/action-items",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "transcript_ids": [
                  "foo"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "transcript_ids": [
                    "foo"
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "request_id": "foo",
                  "response": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "request_id": "foo",
                  "response": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Use LeMUR to ask anything with Custom Task",
          "method": "POST",
          "defaultEnvironment": "AssemblyAI API",
          "environments": [
            {
              "id": "AssemblyAI API",
              "baseUrl": "https://api.assemblyai.com"
            }
          ],
          "id": "task",
          "originalEndpointId": "lemur.task",
          "name": "Ask LeMUR to use one or more transcripts with a Custom Task to handle your specialized task.",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/lemur/v3/generate/task"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "LemurTaskParameters"
                }
              },
              "description": "Parameters to run the custom task."
            },
            "description": "Parameters to run the custom task."
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "LemurTaskResponse"
              }
            },
            "statusCode": 200,
            "description": "LeMUR task response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/lemur/v3/generate/task",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "transcript_ids": [
                  "foo"
                ],
                "prompt": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "transcript_ids": [
                    "foo"
                  ],
                  "prompt": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "request_id": "foo",
                  "response": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "request_id": "foo",
                  "response": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Delete the data for a previously submitted LeMUR request.\nThe LLM response data, as well as any context provided in the original request will be removed.\n",
          "method": "DELETE",
          "defaultEnvironment": "AssemblyAI API",
          "environments": [
            {
              "id": "AssemblyAI API",
              "baseUrl": "https://api.assemblyai.com"
            }
          ],
          "id": "purgeRequestData",
          "originalEndpointId": "lemur.purgeRequestData",
          "name": "Delete the data for a previously submitted LeMUR request.",
          "path": {
            "pathParameters": [
              {
                "description": "The ID of the LeMUR request whose data you want to delete. This would be found in the response of the original request.",
                "key": "request_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/lemur/v3/"
              },
              {
                "type": "pathParameter",
                "value": "request_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "PurgeLemurRequestDataResponse"
              }
            },
            "statusCode": 200,
            "description": "LeMUR request data deleted."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/lemur/v3/",
              "pathParameters": {
                "request_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "request_id": "foo",
                  "request_id_to_purge": "foo",
                  "deleted": true
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "request_id": "foo",
                  "request_id_to_purge": "foo",
                  "deleted": true
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_userId": {
      "subpackageId": "subpackage_userId",
      "name": "userId",
      "endpoints": [],
      "webhooks": [],
      "websockets": [
        {
          "auth": false,
          "defaultEnvironment": "AssemblyAI API",
          "environments": [
            {
              "id": "AssemblyAI API",
              "baseUrl": "wss://api.assemblyai.com/v2/realtime/ws"
            }
          ],
          "id": "userId",
          "name": "/{userId}",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": "/{userId}"
              }
            ]
          },
          "headers": [
            {
              "key": "Authentication",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "Authenticate using your AssemblyAI API key."
            }
          ],
          "queryParameters": [
            {
              "description": "The ID of the user.",
              "key": "userId",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "description": "The sample rate of the streamed audio.",
              "key": "sample_rate",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            {
              "description": "Add up to 2500 characters of custom vocabulary.\nThe parameter should map to a JSON encoded list of strings.\n",
              "key": "word_boost",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "description": "Authenticate using a [generated temporary token](https://www.assemblyai.com/docs/Guides/real-time_streaming_transcription#creating-temporary-authentication-tokens)",
              "key": "token",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          ],
          "messages": [
            {
              "type": "subscribe",
              "displayName": "subscribe",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "UserIdSubscribe"
                }
              },
              "description": "Receive messages from the WebSocket"
            },
            {
              "type": "publish",
              "displayName": "publish",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "UserIdPublish"
                }
              },
              "description": "Send messages to the WebSocket"
            }
          ],
          "examples": [
            {
              "path": "/{userId}",
              "pathParameters": {},
              "queryParameters": {
                "userId": "userId",
                "sample_rate": 1,
                "word_boost": "word_boost",
                "token": "token"
              },
              "headers": {
                "Authentication": "Authentication"
              },
              "messages": [
                {
                  "type": "publish",
                  "body": {
                    "audio_data": "audio_data"
                  }
                },
                {
                  "type": "subscribe",
                  "body": {
                    "message_type": "SessionBegins",
                    "session_id": "session_id",
                    "expires_at": "2024-01-15T09:30:00Z"
                  }
                }
              ]
            }
          ]
        }
      ],
      "types": [],
      "subpackages": []
    }
  },
  "rootPackage": {
    "endpoints": [],
    "webhooks": [],
    "websockets": [],
    "types": [
      "RedactedAudioResponse",
      "RedactedAudioStatus",
      "SubtitleFormat",
      "WordSearchResponse",
      "WordSearchMatch",
      "WordSearchTimestamp",
      "Timestamp",
      "CreateTranscriptOptionalParameters",
      "CreateTranscriptParameters",
      "SummaryModel",
      "SummaryType",
      "TranscriptBoostParam",
      "TranscriptCustomSpelling",
      "TranscriptUtterance",
      "SubstitutionPolicy",
      "PiiPolicy",
      "TranscriptLanguageCode",
      "TranscriptStatus",
      "Transcript",
      "Chapter",
      "Entity",
      "EntityType",
      "SentimentAnalysisResult",
      "Sentiment",
      "TopicDetectionResult",
      "ContentSafetyLabel",
      "ContentSafetyLabelResult",
      "SeverityScoreSummary",
      "AutoHighlightsResult",
      "AutoHighlightResult",
      "TranscriptWord",
      "TranscriptSentence",
      "SentencesResponse",
      "TranscriptParagraph",
      "ParagraphsResponse",
      "PageDetails",
      "TranscriptListParameters",
      "TranscriptListItem",
      "TranscriptList",
      "UploadedFile",
      "CreateRealtimeTemporaryTokenParameters",
      "RealtimeTemporaryTokenResponse",
      "AudioIntelligenceModelStatus",
      "PurgeLemurRequestDataResponse",
      "LemurBaseResponse",
      "LemurSummaryResponse",
      "LemurQuestionAnswerResponse",
      "LemurQuestionAnswer",
      "LemurActionItemsResponse",
      "LemurTaskResponse",
      "LemurBaseParameters",
      "LemurSummaryParameters",
      "LemurQuestionAnswerParameters",
      "LemurQuestion",
      "LemurActionItemsParameters",
      "LemurTaskParameters",
      "LemurModel",
      "Error",
      "SendAudio",
      "TerminateSession",
      "SessionBegins",
      "SessionTerminated",
      "RealtimeError",
      "PartialTranscript",
      "FinalTranscript",
      "RealtimeBaseMessage",
      "RealtimeMessage",
      "RealtimeError",
      "MessageType",
      "RealtimeTranscriptType",
      "RealtimeTranscript",
      "SessionBegins",
      "SessionTerminated",
      "RealtimeBaseTranscript",
      "PartialTranscript",
      "FinalTranscript",
      "Word",
      "AudioData",
      "TerminateSession"
    ],
    "subpackages": [
      "subpackage_files",
      "subpackage_transcript",
      "subpackage_realtime",
      "subpackage_lemur",
      "subpackage_userId"
    ]
  },
  "auth": {
    "type": "header",
    "headerWireValue": "Authorization",
    "nameOverride": "Authorization"
  },
  "snippetsConfiguration": {},
  "globalHeaders": []
}