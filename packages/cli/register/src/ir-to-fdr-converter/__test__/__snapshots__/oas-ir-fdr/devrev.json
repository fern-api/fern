{
  "types": {
    "artifact-summary": {
      "name": "artifact-summary",
      "shape": {
        "type": "object",
        "extends": [
          "atom-base-summary"
        ],
        "properties": []
      }
    },
    "artifacts-locate-response": {
      "description": "The response to getting an artifact's download URL.",
      "name": "artifacts-locate-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The expiration timestamp of the URL.",
            "key": "expires_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "description": "The artifact's download URL.",
            "key": "url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "artifacts-prepare-request": {
      "description": "The request to prepare a URL to upload a file.",
      "name": "artifacts-prepare-request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the file that's being uploaded.",
            "key": "file_name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "artifacts-prepare-response": {
      "description": "The response to preparing a URL to upload a file.",
      "name": "artifacts-prepare-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The POST policy form data.",
            "key": "form_data",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "artifacts-prepare-response-form-data"
              }
            }
          },
          {
            "description": "The generated artifact's ID.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The URL that the file's data should be uploaded to.",
            "key": "url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "artifacts-prepare-response-form-data": {
      "name": "artifacts-prepare-response-form-data",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Key of the form field.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Value corresponding to the key.",
            "key": "value",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "atom-base": {
      "name": "atom-base",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "created_by",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "user-summary"
              }
            }
          },
          {
            "description": "Timestamp when the object was created.",
            "key": "created_date",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "description": "Human-readable object ID unique to the Dev organization.",
            "key": "display_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Globally unique object ID.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "modified_by",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "user-summary"
              }
            }
          },
          {
            "description": "Timestamp when the object was last modified.",
            "key": "modified_date",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        ]
      }
    },
    "atom-base-summary": {
      "name": "atom-base-summary",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Human-readable object ID unique to the Dev organization.",
            "key": "display_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Globally unique object ID.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "auth-connection": {
      "description": "Connection object that specifies the configuration for an\nauthentication connection that is set up for a Dev organization.\n",
      "name": "auth-connection",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "google_apps",
            "additionalProperties": {
              "extends": [
                "auth-connection-options-google-apps"
              ],
              "properties": [
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Display name of the authentication connection. This name will be\nvisible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n"
                },
                {
                  "key": "enabled",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  },
                  "description": "Whether the authentication connection is enabled or disabled. If\nset to false, the authentication connection will not show up on the\nlogin screen as a login option.\n"
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "ID of the authentication connection."
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "auth-connection-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "oidc",
            "additionalProperties": {
              "extends": [
                "auth-connection-options-oidc"
              ],
              "properties": [
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Display name of the authentication connection. This name will be\nvisible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n"
                },
                {
                  "key": "enabled",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  },
                  "description": "Whether the authentication connection is enabled or disabled. If\nset to false, the authentication connection will not show up on the\nlogin screen as a login option.\n"
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "ID of the authentication connection."
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "auth-connection-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "samlp",
            "additionalProperties": {
              "extends": [
                "auth-connection-options-saml"
              ],
              "properties": [
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Display name of the authentication connection. This name will be\nvisible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n"
                },
                {
                  "key": "enabled",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  },
                  "description": "Whether the authentication connection is enabled or disabled. If\nset to false, the authentication connection will not show up on the\nlogin screen as a login option.\n"
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "ID of the authentication connection."
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "auth-connection-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "social",
            "additionalProperties": {
              "extends": [
                "auth-connection-options-social"
              ],
              "properties": [
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Display name of the authentication connection. This name will be\nvisible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n"
                },
                {
                  "key": "enabled",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  },
                  "description": "Whether the authentication connection is enabled or disabled. If\nset to false, the authentication connection will not show up on the\nlogin screen as a login option.\n"
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "ID of the authentication connection."
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "auth-connection-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "waad",
            "additionalProperties": {
              "extends": [
                "auth-connection-options-azure-ad"
              ],
              "properties": [
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Display name of the authentication connection. This name will be\nvisible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n"
                },
                {
                  "key": "enabled",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  },
                  "description": "Whether the authentication connection is enabled or disabled. If\nset to false, the authentication connection will not show up on the\nlogin screen as a login option.\n"
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "ID of the authentication connection."
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "auth-connection-type"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "auth-connection-options-azure-ad": {
      "description": "Object encapsulating the configuration parameters for an Azure AD\nauthentication connection.\n",
      "name": "auth-connection-options-azure-ad",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Client ID for the Azure authentication connection.",
            "key": "client_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Client secret for the Azure authentication connection.",
            "key": "client_secret",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Domain URL of the Azure authentication connection.",
            "key": "domain",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "auth-connection-options-google-apps": {
      "description": "Object encapsulating the configuration parameters for a Google Apps\nauthentication connection.\n",
      "name": "auth-connection-options-google-apps",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Client ID for the Google Apps authentication connection.",
            "key": "client_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Client secret for the Google Apps authentication connection.\n",
            "key": "client_secret",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Tenant domain URL of the Google Apps authentication connection.\n",
            "key": "tenant_domain",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "auth-connection-options-oidc": {
      "description": "Object encapsulating the configuration parameters for an OIDC\nauthentication connection.\n",
      "name": "auth-connection-options-oidc",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Client ID for the OIDC authentication connection.",
            "key": "client_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Client secret for the OIDC authentication connection.",
            "key": "client_secret",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Issuer URL of the OIDC authentication connection.",
            "key": "issuer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "auth-connection-options-saml": {
      "description": "Object encapsulating the configuration parameters for a SAML\nauthentication connection.\n",
      "name": "auth-connection-options-saml",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Sign In endpoint for the SAML authentication connection.",
            "key": "sign_in_endpoint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Signing certificate for the SAML authentication connection.\n",
            "key": "signing_cert",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "auth-connection-options-social": {
      "name": "auth-connection-options-social",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "auth-connection-toggle": {
      "name": "auth-connection-toggle",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "disable"
          },
          {
            "value": "enable"
          }
        ]
      }
    },
    "auth-connection-type": {
      "description": "Defines the type for the authentication connection. The configuration\nfor each authentication connection will depend on the type value.\n",
      "name": "auth-connection-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "google_apps"
          },
          {
            "value": "oidc"
          },
          {
            "value": "samlp"
          },
          {
            "value": "social"
          },
          {
            "value": "waad"
          }
        ]
      }
    },
    "auth-token": {
      "name": "auth-token",
      "shape": {
        "type": "object",
        "extends": [
          "atom-base"
        ],
        "properties": [
          {
            "description": "An identifier that represents the application that requested the\ntoken. Only applicable for application access tokens.\n",
            "key": "client_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The time at which the token expires.",
            "key": "expires_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "description": "The time at which the token was issued.",
            "key": "issued_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "requested_token_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "auth-token-requested-token-type"
              }
            }
          },
          {
            "description": "The scopes associated with the issued token.",
            "key": "scopes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "auth-token-status"
              }
            }
          },
          {
            "description": "The subject of the token.",
            "key": "subject",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A hint that identifies the token.",
            "key": "token_hint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "auth-token-grant-type": {
      "description": "Specifies the process of obtaining a token.",
      "name": "auth-token-grant-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "urn:devrev:params:oauth:grant-type:token-issue"
          },
          {
            "value": "urn:ietf:params:oauth:grant-type:token-exchange"
          }
        ]
      }
    },
    "auth-token-requested-token-type": {
      "description": "The type of the requested token.",
      "name": "auth-token-requested-token-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "urn:devrev:params:oauth:token-type:aat"
          },
          {
            "value": "urn:devrev:params:oauth:token-type:aat:public"
          },
          {
            "value": "urn:devrev:params:oauth:token-type:dev"
          },
          {
            "value": "urn:devrev:params:oauth:token-type:pat"
          },
          {
            "value": "urn:devrev:params:oauth:token-type:rev"
          },
          {
            "value": "urn:devrev:params:oauth:token-type:session"
          },
          {
            "value": "urn:devrev:params:oauth:token-type:session:dev0"
          },
          {
            "value": "urn:devrev:params:oauth:token-type:sys"
          },
          {
            "value": "urn:ietf:params:oauth:token-type:jwt"
          }
        ]
      }
    },
    "auth-token-status": {
      "description": "The status of the token.",
      "name": "auth-token-status",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "active"
          },
          {
            "value": "expired"
          },
          {
            "value": "revoked"
          }
        ]
      }
    },
    "auth-token-subject-token-type": {
      "description": "The type of the subject token.",
      "name": "auth-token-subject-token-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "urn:devrev:params:oauth:token-type:jwt:auth0"
          },
          {
            "value": "urn:devrev:params:oauth:token-type:jwt:dev"
          },
          {
            "value": "urn:devrev:params:oauth:token-type:revinfo"
          },
          {
            "value": "urn:devrev:params:oauth:token-type:sysu"
          },
          {
            "value": "urn:devrev:params:oauth:token-type:userinfo"
          },
          {
            "value": "urn:devrev:params:oauth:token-type:userinfo:profile"
          },
          {
            "value": "urn:ietf:params:oauth:token-type:jwt"
          }
        ]
      }
    },
    "auth-token-token-type": {
      "description": "The type of the issued token. Bearer is the only supported token type.\n",
      "name": "auth-token-token-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "bearer"
          }
        ]
      }
    },
    "auth-tokens-create-request": {
      "description": "A request to create a new token corresponding to the requested token\ntype.\n",
      "name": "auth-tokens-create-request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The expected audience values with respect to the token.",
            "key": "aud",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "An identifier that represents the application which is requesting\nthe token. If no client_id is present in the request to generate an\napplication access token (AAT), DevRev will generate a client_id.\nThis client_id is only associated with an AAT.\n",
            "key": "client_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The expected validity lifetime of the token in number of days.\n",
            "key": "expires_in",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "long"
                }
              }
            }
          },
          {
            "key": "grant_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "auth-token-grant-type"
              }
            }
          },
          {
            "key": "requested_token_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "auth-token-requested-token-type"
              }
            }
          },
          {
            "key": "rev_info",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "auth-tokens-rev-info"
              }
            }
          },
          {
            "description": "The requested set of scopes associated with the issued token. A\nspace-delimited list of values in which the order of values does\nnot matter.\n",
            "key": "scope",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Represents the entity that requests the token. Not required when\nrequesting an application access token (AAT).\n",
            "key": "subject_token",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "subject_token_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "auth-token-subject-token-type"
              }
            }
          },
          {
            "description": "A hint that identifies the token.",
            "key": "token_hint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "auth-tokens-create-response": {
      "description": "Response for the request to create a new token corresponding to the\nrequested token type.\n",
      "name": "auth-tokens-create-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The issued JSON Web Token (JWT) corresponding to the requested\ntoken type.\n",
            "key": "access_token",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "An identifier that represents the application which is requesting\nthe token. Only present in a response corresponding to an\napplication access token (AAT).\n",
            "key": "client_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The validity lifetime of the token specified in seconds since Unix\nepoch.\n",
            "key": "expires_in",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "long"
              }
            }
          },
          {
            "description": "A token to refresh the issued token.",
            "key": "refresh_token",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The scopes associated with the issued token. A space-delimited list\nof values in which the order of values does not matter.\n",
            "key": "scope",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "token_type",
            "valueType": {
              "type": "id",
              "value": "auth-token-token-type"
            }
          }
        ]
      }
    },
    "auth-tokens-delete-request": {
      "description": "The request to revoke the token.",
      "name": "auth-tokens-delete-request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique identifier for the token under a given Dev organization.\nIf no token ID is provided, then the token ID will be set from the\nJTI claim of the token in the authorization header.\n",
            "key": "token_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "auth-tokens-get-response": {
      "description": "The response to get the token metadata.",
      "name": "auth-tokens-get-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "token",
            "valueType": {
              "type": "id",
              "value": "auth-token"
            }
          }
        ]
      }
    },
    "auth-tokens-list-response": {
      "description": "The response to list the token metadata.",
      "name": "auth-tokens-list-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The list of token metadata.",
            "key": "tokens",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "auth-token"
              }
            }
          }
        ]
      }
    },
    "auth-tokens-org-traits": {
      "description": "Carries Rev org info.",
      "name": "auth-tokens-org-traits",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The display name of the Rev org.",
            "key": "display_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The domain of the Rev org.",
            "key": "domain",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "auth-tokens-rev-info": {
      "description": "Carries info corresponding to the Rev user to be provisioned and/or\nissue a Rev session token.\n",
      "name": "auth-tokens-rev-info",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "An identifier which uniquely identifies a Rev org.",
            "key": "org_ref",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "org_traits",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "auth-tokens-org-traits"
              }
            }
          },
          {
            "description": "The unique ID of the Rev user.",
            "key": "rev_user_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "An identifier which uniquely identifies a Rev user.",
            "key": "user_ref",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "user_traits",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "auth-tokens-user-traits"
              }
            }
          }
        ]
      }
    },
    "auth-tokens-self-delete-request": {
      "description": "The request to delete all the tokens created by the authenticated user,\nthat match with the provided token type.\n",
      "name": "auth-tokens-self-delete-request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "requested_token_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "auth-token-requested-token-type"
              }
            }
          }
        ]
      }
    },
    "auth-tokens-update-request": {
      "description": "A request to update the token metadata.",
      "name": "auth-tokens-update-request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A hint that identifies the token.",
            "key": "token_hint",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The unique identifier of the token under a given Dev organization.\n",
            "key": "token_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "auth-tokens-update-response": {
      "description": "Response for the request to update the token metadata.",
      "name": "auth-tokens-update-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "token",
            "valueType": {
              "type": "id",
              "value": "auth-token"
            }
          }
        ]
      }
    },
    "auth-tokens-user-traits": {
      "description": "Carries Rev user info.",
      "name": "auth-tokens-user-traits",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The display name of the Rev user.",
            "key": "display_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The email address of the Rev user.",
            "key": "email",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The full name of the Rev user.",
            "key": "full_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "capability": {
      "name": "capability",
      "shape": {
        "type": "object",
        "extends": [
          "part-base"
        ],
        "properties": []
      }
    },
    "capability-summary": {
      "name": "capability-summary",
      "shape": {
        "type": "object",
        "extends": [
          "part-base-summary"
        ],
        "properties": []
      }
    },
    "dev-org-auth-connections-create-request": {
      "description": "Request to create a new enterprise authentication connection.\n",
      "name": "dev-org-auth-connections-create-request",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "google_apps",
            "additionalProperties": {
              "extends": [
                "auth-connection-options-google-apps"
              ],
              "properties": [
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Display name of the authentication connection. This name will be\nvisible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n"
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "dev-org-auth-connections-create-request-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "oidc",
            "additionalProperties": {
              "extends": [
                "auth-connection-options-oidc"
              ],
              "properties": [
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Display name of the authentication connection. This name will be\nvisible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n"
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "dev-org-auth-connections-create-request-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "samlp",
            "additionalProperties": {
              "extends": [
                "auth-connection-options-saml"
              ],
              "properties": [
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Display name of the authentication connection. This name will be\nvisible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n"
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "dev-org-auth-connections-create-request-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "waad",
            "additionalProperties": {
              "extends": [
                "auth-connection-options-azure-ad"
              ],
              "properties": [
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Display name of the authentication connection. This name will be\nvisible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n"
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "dev-org-auth-connections-create-request-type"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "dev-org-auth-connections-create-request-type": {
      "description": "Defines the type for the authentication connection. Different types of\nauthentication connections have different configuration parameters.\n",
      "name": "dev-org-auth-connections-create-request-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "google_apps"
          },
          {
            "value": "oidc"
          },
          {
            "value": "samlp"
          },
          {
            "value": "waad"
          }
        ]
      }
    },
    "dev-org-auth-connections-create-response": {
      "description": "Response for the request to create a new enterprise authentication\nconnection.\n",
      "name": "dev-org-auth-connections-create-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "auth_connection",
            "valueType": {
              "type": "id",
              "value": "auth-connection"
            }
          }
        ]
      }
    },
    "dev-org-auth-connections-delete-request": {
      "description": "Request to delete an enterprise authentication connection for a Dev\norganization. A default connection and a connection which is currently\nenabled cannot be deleted.\n",
      "name": "dev-org-auth-connections-delete-request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "ID of the authentication connection to be deleted.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "dev-org-auth-connections-get-response": {
      "description": "Response object encapsulating the configuration details of an\nauthentication connection.\n",
      "name": "dev-org-auth-connections-get-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "auth_connection",
            "valueType": {
              "type": "id",
              "value": "auth-connection"
            }
          }
        ]
      }
    },
    "dev-org-auth-connections-list-response": {
      "description": "Response object for the request to list all the social and enterprise\nauthentication connections configured for a Dev organization.\n",
      "name": "dev-org-auth-connections-list-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of all the authentication connections currently configured for\na Dev organization.\n",
            "key": "auth_connections",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "auth-connection"
              }
            }
          }
        ]
      }
    },
    "dev-org-auth-connections-toggle-request": {
      "description": "Request to enable or disable an authentication connection for a Dev\norganization.\n",
      "name": "dev-org-auth-connections-toggle-request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "ID of the authentication connection to be toggled.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "toggle",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "auth-connection-toggle"
              }
            }
          }
        ]
      }
    },
    "dev-org-auth-connections-update-request": {
      "description": "Request to update an enterprise authentication connection for a Dev\norganization.\n",
      "name": "dev-org-auth-connections-update-request",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "google_apps",
            "additionalProperties": {
              "extends": [
                "auth-connection-options-google-apps"
              ],
              "properties": [
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "New display name of the authentication connection. This name will\nbe visible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n"
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "ID of the authentication connection which is to be updated.\n"
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "dev-org-auth-connections-update-request-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "none",
            "additionalProperties": {
              "extends": [
                "empty"
              ],
              "properties": [
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "New display name of the authentication connection. This name will\nbe visible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n"
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "ID of the authentication connection which is to be updated.\n"
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "dev-org-auth-connections-update-request-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "oidc",
            "additionalProperties": {
              "extends": [
                "auth-connection-options-oidc"
              ],
              "properties": [
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "New display name of the authentication connection. This name will\nbe visible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n"
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "ID of the authentication connection which is to be updated.\n"
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "dev-org-auth-connections-update-request-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "samlp",
            "additionalProperties": {
              "extends": [
                "auth-connection-options-saml"
              ],
              "properties": [
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "New display name of the authentication connection. This name will\nbe visible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n"
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "ID of the authentication connection which is to be updated.\n"
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "dev-org-auth-connections-update-request-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "waad",
            "additionalProperties": {
              "extends": [
                "auth-connection-options-azure-ad"
              ],
              "properties": [
                {
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "New display name of the authentication connection. This name will\nbe visible to all the users when they sign in to this Dev\norganization. For example, if the display_name is 'abclogin', then\nit would appear on the login button as 'Log in to abclogin'.\n"
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "ID of the authentication connection which is to be updated.\n"
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "dev-org-auth-connections-update-request-type"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "dev-org-auth-connections-update-request-type": {
      "description": "Specifies the type for the authentication connection. Different types\nof authentication connections have different configuration parameters\nthat can be updated.\n",
      "name": "dev-org-auth-connections-update-request-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "google_apps"
          },
          {
            "value": "none"
          },
          {
            "value": "oidc"
          },
          {
            "value": "samlp"
          },
          {
            "value": "waad"
          }
        ]
      }
    },
    "dev-org-auth-connections-update-response": {
      "description": "Response for the request to update an enterprise authentication\nconnection.\n",
      "name": "dev-org-auth-connections-update-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "auth_connection",
            "valueType": {
              "type": "id",
              "value": "auth-connection"
            }
          }
        ]
      }
    },
    "dev-user": {
      "name": "dev-user",
      "shape": {
        "type": "object",
        "extends": [
          "user-base"
        ],
        "properties": [
          {
            "description": "IDs of the Dev User outside the DevRev SOR.",
            "key": "external_identities",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "external-identity"
                }
              }
            }
          }
        ]
      }
    },
    "dev-user-summary": {
      "name": "dev-user-summary",
      "shape": {
        "type": "object",
        "extends": [
          "user-base-summary"
        ],
        "properties": []
      }
    },
    "dev-users-list-response": {
      "description": "The response to listing the Dev users.",
      "name": "dev-users-list-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The list of Dev users.",
            "key": "dev_users",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "dev-user"
              }
            }
          },
          {
            "description": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n",
            "key": "next_cursor",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n",
            "key": "prev_cursor",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "dev-users-self-response": {
      "description": "The response to getting the information for the authenticated user.\n",
      "name": "dev-users-self-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "dev_user",
            "valueType": {
              "type": "id",
              "value": "dev-user"
            }
          }
        ]
      }
    },
    "empty": {
      "name": "empty",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "enhancement": {
      "name": "enhancement",
      "shape": {
        "type": "object",
        "extends": [
          "part-base"
        ],
        "properties": [
          {
            "description": "Timestamp when the enhancement is expected to be closed.",
            "key": "target_close_date",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        ]
      }
    },
    "enhancement-summary": {
      "name": "enhancement-summary",
      "shape": {
        "type": "object",
        "extends": [
          "part-base-summary"
        ],
        "properties": []
      }
    },
    "error-bad-request": {
      "name": "error-bad-request",
      "shape": {
        "type": "object",
        "extends": [
          "error-base"
        ],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "error-bad-request-type"
            }
          }
        ]
      }
    },
    "error-bad-request-bad-request": {
      "name": "error-bad-request-bad-request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "error-bad-request-invalid-enum-value": {
      "name": "error-bad-request-invalid-enum-value",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The allowed values for the field.",
            "key": "allowed_values",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The field whose enum value is invalid.",
            "key": "field_name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The value that was received.",
            "key": "value",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "error-bad-request-missing-required-field": {
      "name": "error-bad-request-missing-required-field",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The missing field's name.",
            "key": "field_name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "error-bad-request-parse-error": {
      "name": "error-bad-request-parse-error",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "error-bad-request-type": {
      "name": "error-bad-request-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "bad_request"
          },
          {
            "value": "invalid_enum_value"
          },
          {
            "value": "missing_required_field"
          },
          {
            "value": "parse_error"
          },
          {
            "value": "value_not_permitted"
          }
        ]
      }
    },
    "error-bad-request-value-not-permitted": {
      "name": "error-bad-request-value-not-permitted",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The field whose value is not permitted.",
            "key": "field_name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The reason the value isn't permitted.",
            "key": "reason",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "error-base": {
      "name": "error-base",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The message associated with the error.",
            "key": "message",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "error-forbidden": {
      "name": "error-forbidden",
      "shape": {
        "type": "object",
        "extends": [
          "error-base"
        ],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "error-forbidden-type"
            }
          }
        ]
      }
    },
    "error-forbidden-forbidden": {
      "name": "error-forbidden-forbidden",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "error-forbidden-type": {
      "name": "error-forbidden-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "forbidden"
          }
        ]
      }
    },
    "error-internal-server-error": {
      "name": "error-internal-server-error",
      "shape": {
        "type": "object",
        "extends": [
          "error-base"
        ],
        "properties": [
          {
            "description": "A unique ID that's generated for the error that can be used for\ninquiry.\n",
            "key": "reference_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "error-internal-server-error-type"
            }
          }
        ]
      }
    },
    "error-internal-server-error-internal-error": {
      "name": "error-internal-server-error-internal-error",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "error-internal-server-error-type": {
      "name": "error-internal-server-error-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "internal_error"
          }
        ]
      }
    },
    "error-not-found": {
      "name": "error-not-found",
      "shape": {
        "type": "object",
        "extends": [
          "error-base"
        ],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "error-not-found-type"
            }
          }
        ]
      }
    },
    "error-not-found-not-found": {
      "name": "error-not-found-not-found",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "error-not-found-type": {
      "name": "error-not-found-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "not_found"
          }
        ]
      }
    },
    "error-service-unavailable": {
      "name": "error-service-unavailable",
      "shape": {
        "type": "object",
        "extends": [
          "error-base"
        ],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "error-service-unavailable-type"
            }
          }
        ]
      }
    },
    "error-service-unavailable-service-unavailable": {
      "name": "error-service-unavailable-service-unavailable",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "error-service-unavailable-type": {
      "name": "error-service-unavailable-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "service_unavailable"
          }
        ]
      }
    },
    "error-too-many-requests": {
      "name": "error-too-many-requests",
      "shape": {
        "type": "object",
        "extends": [
          "error-base"
        ],
        "properties": [
          {
            "description": "The number of seconds after which the client should retry.\n",
            "key": "retry_after",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "long"
                }
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "error-too-many-requests-type"
            }
          }
        ]
      }
    },
    "error-too-many-requests-too-many-requests": {
      "name": "error-too-many-requests-too-many-requests",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "error-too-many-requests-type": {
      "name": "error-too-many-requests-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "too_many_requests"
          }
        ]
      }
    },
    "error-unauthorized": {
      "name": "error-unauthorized",
      "shape": {
        "type": "object",
        "extends": [
          "error-base"
        ],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "error-unauthorized-type"
            }
          }
        ]
      }
    },
    "error-unauthorized-type": {
      "name": "error-unauthorized-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "unauthenticated"
          }
        ]
      }
    },
    "error-unauthorized-unauthenticated": {
      "name": "error-unauthorized-unauthenticated",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "event-part-created": {
      "name": "event-part-created",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "part",
            "valueType": {
              "type": "id",
              "value": "part"
            }
          }
        ]
      }
    },
    "event-part-deleted": {
      "name": "event-part-deleted",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the part that was deleted.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "event-part-updated": {
      "name": "event-part-updated",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "part",
            "valueType": {
              "type": "id",
              "value": "part"
            }
          }
        ]
      }
    },
    "event-rev-org-created": {
      "name": "event-rev-org-created",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "rev_org",
            "valueType": {
              "type": "id",
              "value": "rev-org"
            }
          }
        ]
      }
    },
    "event-rev-org-deleted": {
      "name": "event-rev-org-deleted",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the Rev organization that was deleted.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "event-rev-org-updated": {
      "name": "event-rev-org-updated",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "rev_org",
            "valueType": {
              "type": "id",
              "value": "rev-org"
            }
          }
        ]
      }
    },
    "event-tag-created": {
      "name": "event-tag-created",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "tag",
            "valueType": {
              "type": "id",
              "value": "tag"
            }
          }
        ]
      }
    },
    "event-tag-deleted": {
      "name": "event-tag-deleted",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the tag that was deleted.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "event-tag-updated": {
      "name": "event-tag-updated",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "tag",
            "valueType": {
              "type": "id",
              "value": "tag"
            }
          }
        ]
      }
    },
    "event-timeline-entry-created": {
      "name": "event-timeline-entry-created",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "entry",
            "valueType": {
              "type": "id",
              "value": "timeline-entry"
            }
          }
        ]
      }
    },
    "event-timeline-entry-deleted": {
      "name": "event-timeline-entry-deleted",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the timeline entry that was deleted.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "event-timeline-entry-updated": {
      "name": "event-timeline-entry-updated",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "entry",
            "valueType": {
              "type": "id",
              "value": "timeline-entry"
            }
          }
        ]
      }
    },
    "event-webhook-created": {
      "name": "event-webhook-created",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "webhook",
            "valueType": {
              "type": "id",
              "value": "webhook"
            }
          }
        ]
      }
    },
    "event-webhook-deleted": {
      "name": "event-webhook-deleted",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the webhook that was deleted.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "event-webhook-updated": {
      "name": "event-webhook-updated",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "webhook",
            "valueType": {
              "type": "id",
              "value": "webhook"
            }
          }
        ]
      }
    },
    "event-work-created": {
      "name": "event-work-created",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "work",
            "valueType": {
              "type": "id",
              "value": "work"
            }
          }
        ]
      }
    },
    "event-work-deleted": {
      "name": "event-work-deleted",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the work that was deleted.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "event-work-updated": {
      "name": "event-work-updated",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "work",
            "valueType": {
              "type": "id",
              "value": "work"
            }
          }
        ]
      }
    },
    "external-identity": {
      "description": "External identity of a user.",
      "name": "external-identity",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "feature": {
      "name": "feature",
      "shape": {
        "type": "object",
        "extends": [
          "part-base"
        ],
        "properties": []
      }
    },
    "feature-summary": {
      "name": "feature-summary",
      "shape": {
        "type": "object",
        "extends": [
          "part-base-summary"
        ],
        "properties": []
      }
    },
    "group-summary": {
      "name": "group-summary",
      "shape": {
        "type": "object",
        "extends": [
          "atom-base-summary"
        ],
        "properties": []
      }
    },
    "issue": {
      "name": "issue",
      "shape": {
        "type": "object",
        "extends": [
          "work-base"
        ],
        "properties": [
          {
            "key": "priority",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "issue-priority"
              }
            }
          }
        ]
      }
    },
    "issue-priority": {
      "description": "Priority of the work based upon impact and criticality.",
      "name": "issue-priority",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "p0"
          },
          {
            "value": "p1"
          },
          {
            "value": "p2"
          },
          {
            "value": "p3"
          }
        ]
      }
    },
    "list-mode": {
      "description": "The iteration mode to use. If \"after\", then entries after the provided\ncursor will be returned, or if no cursor is provided, then from the\nbeginning. If \"before\", then entries before the provided cursor will be\nreturned, or if no cursor is provided, then from the end. Entries will\nalways be returned in the specified sort-by order.\n",
      "name": "list-mode",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "after"
          },
          {
            "value": "before"
          }
        ]
      }
    },
    "org-base": {
      "name": "org-base",
      "shape": {
        "type": "object",
        "extends": [
          "atom-base"
        ],
        "properties": [
          {
            "description": "Name of the Organization.",
            "key": "display_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "org-base-summary": {
      "name": "org-base-summary",
      "shape": {
        "type": "object",
        "extends": [
          "atom-base-summary"
        ],
        "properties": [
          {
            "description": "Name of the Organization.",
            "key": "display_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "org-environment": {
      "description": "The environment of the Org. Defaults to 'production' if not specified.\n",
      "name": "org-environment",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "production"
          },
          {
            "value": "staging"
          },
          {
            "value": "test"
          }
        ]
      }
    },
    "org-summary": {
      "name": "org-summary",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "rev_org",
            "additionalProperties": {
              "extends": [
                "rev-org-summary"
              ],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "org-type"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "org-type": {
      "name": "org-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "rev_org"
          }
        ]
      }
    },
    "part": {
      "name": "part",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "capability",
            "additionalProperties": {
              "extends": [
                "capability"
              ],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "part-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "enhancement",
            "additionalProperties": {
              "extends": [
                "enhancement"
              ],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "part-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "feature",
            "additionalProperties": {
              "extends": [
                "feature"
              ],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "part-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "product",
            "additionalProperties": {
              "extends": [
                "product"
              ],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "part-type"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "part-base": {
      "name": "part-base",
      "shape": {
        "type": "object",
        "extends": [
          "atom-base"
        ],
        "properties": [
          {
            "description": "The attached artifacts.",
            "key": "artifacts",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "artifact-summary"
                }
              }
            }
          },
          {
            "description": "Description of the part.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Name of the part.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The users that own the part.",
            "key": "owned_by",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "user-summary"
              }
            }
          },
          {
            "description": "Tags associated with the object.",
            "key": "tags",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "tag-with-value"
                }
              }
            }
          }
        ]
      }
    },
    "part-base-summary": {
      "name": "part-base-summary",
      "shape": {
        "type": "object",
        "extends": [
          "atom-base-summary"
        ],
        "properties": [
          {
            "description": "Name of the part.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "part-summary": {
      "name": "part-summary",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "capability",
            "additionalProperties": {
              "extends": [
                "capability-summary"
              ],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "part-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "enhancement",
            "additionalProperties": {
              "extends": [
                "enhancement-summary"
              ],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "part-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "feature",
            "additionalProperties": {
              "extends": [
                "feature-summary"
              ],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "part-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "product",
            "additionalProperties": {
              "extends": [
                "product-summary"
              ],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "part-type"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "part-type": {
      "name": "part-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "capability"
          },
          {
            "value": "enhancement"
          },
          {
            "value": "feature"
          },
          {
            "value": "product"
          }
        ]
      }
    },
    "parts-create-request": {
      "name": "parts-create-request",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "capability",
            "additionalProperties": {
              "extends": [
                "parts-create-request-capability"
              ],
              "properties": [
                {
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Description of the part."
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "Name of the part."
                },
                {
                  "key": "owned_by",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The users that own the part."
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "part-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "enhancement",
            "additionalProperties": {
              "extends": [
                "parts-create-request-enhancement"
              ],
              "properties": [
                {
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Description of the part."
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "Name of the part."
                },
                {
                  "key": "owned_by",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The users that own the part."
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "part-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "feature",
            "additionalProperties": {
              "extends": [
                "parts-create-request-feature"
              ],
              "properties": [
                {
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Description of the part."
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "Name of the part."
                },
                {
                  "key": "owned_by",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The users that own the part."
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "part-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "product",
            "additionalProperties": {
              "extends": [
                "parts-create-request-product"
              ],
              "properties": [
                {
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Description of the part."
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "Name of the part."
                },
                {
                  "key": "owned_by",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The users that own the part."
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "part-type"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "parts-create-request-capability": {
      "name": "parts-create-request-capability",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "ID of the parent product for the capability.",
            "key": "parent_part",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "parts-create-request-enhancement": {
      "name": "parts-create-request-enhancement",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "ID of the parent part on which the enhancement is to be created.\n",
            "key": "parent_part",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Target close date by which enhancement is expected to be closed.\n",
            "key": "target_close_date",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        ]
      }
    },
    "parts-create-request-feature": {
      "name": "parts-create-request-feature",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "ID of the parent capability/feature for the feature.",
            "key": "parent_part",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "parts-create-request-product": {
      "name": "parts-create-request-product",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "parts-create-response": {
      "name": "parts-create-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "part",
            "valueType": {
              "type": "id",
              "value": "part"
            }
          }
        ]
      }
    },
    "parts-delete-request": {
      "name": "parts-delete-request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the part to delete.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "parts-delete-response": {
      "name": "parts-delete-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "parts-get-response": {
      "name": "parts-get-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "part",
            "valueType": {
              "type": "id",
              "value": "part"
            }
          }
        ]
      }
    },
    "parts-list-response": {
      "name": "parts-list-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n",
            "key": "next_cursor",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The list of parts.",
            "key": "parts",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "part"
              }
            }
          },
          {
            "description": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n",
            "key": "prev_cursor",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "parts-update-request": {
      "name": "parts-update-request",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "capability",
            "additionalProperties": {
              "extends": [
                "parts-update-request-capability"
              ],
              "properties": [
                {
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The updated description of the part."
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "The ID of the part to update."
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The updated name of the part."
                },
                {
                  "key": "owned_by",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "parts-update-request-owned-by"
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "part-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "enhancement",
            "additionalProperties": {
              "extends": [
                "parts-update-request-enhancement"
              ],
              "properties": [
                {
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The updated description of the part."
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "The ID of the part to update."
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The updated name of the part."
                },
                {
                  "key": "owned_by",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "parts-update-request-owned-by"
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "part-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "feature",
            "additionalProperties": {
              "extends": [
                "parts-update-request-feature"
              ],
              "properties": [
                {
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The updated description of the part."
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "The ID of the part to update."
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The updated name of the part."
                },
                {
                  "key": "owned_by",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "parts-update-request-owned-by"
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "part-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "none",
            "additionalProperties": {
              "extends": [
                "empty"
              ],
              "properties": [
                {
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The updated description of the part."
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "The ID of the part to update."
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The updated name of the part."
                },
                {
                  "key": "owned_by",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "parts-update-request-owned-by"
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "part-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "product",
            "additionalProperties": {
              "extends": [
                "parts-update-request-product"
              ],
              "properties": [
                {
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The updated description of the part."
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "The ID of the part to update."
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The updated name of the part."
                },
                {
                  "key": "owned_by",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "parts-update-request-owned-by"
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "part-type"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "parts-update-request-capability": {
      "name": "parts-update-request-capability",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "parts-update-request-enhancement": {
      "name": "parts-update-request-enhancement",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Updates the target close date of the enhancement.",
            "key": "target_close_date",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        ]
      }
    },
    "parts-update-request-feature": {
      "name": "parts-update-request-feature",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "parts-update-request-owned-by": {
      "name": "parts-update-request-owned-by",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Sets the owner IDs to the provided user IDs. This must not be\nempty.\n",
            "key": "set",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "parts-update-request-product": {
      "name": "parts-update-request-product",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "parts-update-response": {
      "name": "parts-update-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "part",
            "valueType": {
              "type": "id",
              "value": "part"
            }
          }
        ]
      }
    },
    "product": {
      "name": "product",
      "shape": {
        "type": "object",
        "extends": [
          "part-base"
        ],
        "properties": []
      }
    },
    "product-summary": {
      "name": "product-summary",
      "shape": {
        "type": "object",
        "extends": [
          "part-base-summary"
        ],
        "properties": []
      }
    },
    "rev-org": {
      "name": "rev-org",
      "shape": {
        "type": "object",
        "extends": [
          "org-base"
        ],
        "properties": [
          {
            "description": "Description of the Rev organization.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Company's domain name. Example - 'devrev.ai'.",
            "key": "domain",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "External ref is a unique identifier for the Rev (customer)\norganization from your primary customer system of records. If none\nis specified, a system-generated identifier will be assigned to the\norganization.\n",
            "key": "external_ref",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "rev-org-summary": {
      "name": "rev-org-summary",
      "shape": {
        "type": "object",
        "extends": [
          "org-base-summary"
        ],
        "properties": []
      }
    },
    "rev-orgs-create-request": {
      "description": "Request object to create a new Rev organization in the Dev\norganization.\n",
      "name": "rev-orgs-create-request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Description of the Rev organization.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Name of the Rev organization.",
            "key": "display_name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Company's domain name. Example - 'devrev.ai'.",
            "key": "domain",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "environment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "org-environment"
              }
            }
          },
          {
            "description": "External ref is a custom unique identifier which is a reference to\nan unique id for this organization's data in some system of\nrecords.\n",
            "key": "external_ref",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The tier of the RevOrg.",
            "key": "tier",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "rev-orgs-create-response": {
      "description": "Response object for request to create a new Rev organization.\n",
      "name": "rev-orgs-create-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "rev_org",
            "valueType": {
              "type": "id",
              "value": "rev-org"
            }
          }
        ]
      }
    },
    "rev-orgs-delete-request": {
      "description": "Request object to delete a Rev organization.",
      "name": "rev-orgs-delete-request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of Rev organization to delete.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "rev-orgs-delete-response": {
      "description": "The response to deleting a Rev organization.",
      "name": "rev-orgs-delete-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "rev-orgs-get-response": {
      "description": "The response to getting a Rev organization's information.",
      "name": "rev-orgs-get-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "rev_org",
            "valueType": {
              "type": "id",
              "value": "rev-org"
            }
          }
        ]
      }
    },
    "rev-orgs-list-response": {
      "description": "The response to getting a list of Rev organizations' information.\n",
      "name": "rev-orgs-list-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n",
            "key": "next_cursor",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n",
            "key": "prev_cursor",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List with all of the Rev organizations' information.",
            "key": "rev_orgs",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "rev-org"
              }
            }
          }
        ]
      }
    },
    "rev-orgs-update-request": {
      "description": "Request object to update information of the Rev organization.\n",
      "name": "rev-orgs-update-request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Description of the Rev organization.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Customer chosen name for the Rev organization.",
            "key": "display_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Company's domain name. Example - 'devrev.ai'.",
            "key": "domain",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "environment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "org-environment"
              }
            }
          },
          {
            "description": "External ref is a custom unique identifier which is a reference to\nan unique id for this organization's data in some system of\nrecords.\n",
            "key": "external_ref",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The ID of Rev organization to update.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The tier of the RevOrg.",
            "key": "tier",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "rev-orgs-update-response": {
      "description": "Response object to updating Rev organization's information.",
      "name": "rev-orgs-update-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "rev_org",
            "valueType": {
              "type": "id",
              "value": "rev-org"
            }
          }
        ]
      }
    },
    "rev-user-summary": {
      "name": "rev-user-summary",
      "shape": {
        "type": "object",
        "extends": [
          "user-base-summary"
        ],
        "properties": [
          {
            "description": "External ref is a mutable unique identifier for a user within the\nRev organization from your primary customer record. If none is\navailable, a good alternative is the email address/phone number\nwhich could uniquely identify the user. If none is specified, a\nsystem-generated identifier will be assigned to the user.\n",
            "key": "external_ref",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "rev_org",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "org-summary"
              }
            }
          }
        ]
      }
    },
    "set-tag-with-value": {
      "name": "set-tag-with-value",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the tag.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The value for the object's association with the tag. If specified,\nthe value must be one that's specified in the tag's allowed values.\n",
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "stage": {
      "description": "Describes the current stage of a work item.",
      "name": "stage",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Current stage name of the work item.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "stage-init": {
      "description": "Sets an object's initial stage.",
      "name": "stage-init",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the stage.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "stage-update": {
      "description": "Updates an object's stage.",
      "name": "stage-update",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The updated name of the stage, otherwise unchanged if not set.\n",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "sys-user-summary": {
      "name": "sys-user-summary",
      "shape": {
        "type": "object",
        "extends": [
          "user-base-summary"
        ],
        "properties": []
      }
    },
    "tag": {
      "name": "tag",
      "shape": {
        "type": "object",
        "extends": [
          "atom-base"
        ],
        "properties": [
          {
            "description": "The allowed values for the tag, where a value is provided when a\ntag is associated with an object. If empty, then no value should be\nprovided when the association is made.\n",
            "key": "allowed_values",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "An informative description for the tag that should provide context\non the tag's purpose and usage.\n",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The name of the tag, which denotes the logical concept by which all\ntagged objects will be associated. The name is guaranteed to be\nunique.\n",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "tag-summary": {
      "name": "tag-summary",
      "shape": {
        "type": "object",
        "extends": [
          "atom-base-summary"
        ],
        "properties": [
          {
            "description": "The name of the tag, which denotes the logical concept by which all\ntagged objects will be associated. The name is guaranteed to be\nunique.\n",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "tag-with-value": {
      "name": "tag-with-value",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "tag",
            "valueType": {
              "type": "id",
              "value": "tag-summary"
            }
          },
          {
            "description": "The value for the object's association with the tag.",
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "tags-create-request": {
      "description": "The request to create a new tag.",
      "name": "tags-create-request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The allowed values for the tag, or empty if no values are\npermitted.\n",
            "key": "allowed_values",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "The description for the tag.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The name for the tag, which must be unique across all tags.\n",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "tags-create-response": {
      "description": "The response to creating a new tag.",
      "name": "tags-create-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "tag",
            "valueType": {
              "type": "id",
              "value": "tag"
            }
          }
        ]
      }
    },
    "tags-delete-request": {
      "description": "The request to delete a tag.",
      "name": "tags-delete-request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the tag to delete.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "tags-delete-response": {
      "description": "The response for deleting a tag.",
      "name": "tags-delete-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "tags-get-response": {
      "description": "The response to getting a tag's information.",
      "name": "tags-get-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "tag",
            "valueType": {
              "type": "id",
              "value": "tag"
            }
          }
        ]
      }
    },
    "tags-list-response": {
      "description": "The response to listing the tags.",
      "name": "tags-list-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n",
            "key": "next_cursor",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n",
            "key": "prev_cursor",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The list of tags.",
            "key": "tags",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "tag"
              }
            }
          }
        ]
      }
    },
    "tags-update-allowed-values": {
      "description": "Specifies an update to a tag's allowed values.",
      "name": "tags-update-allowed-values",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Sets the allowed values for the tag.",
            "key": "set",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "tags-update-request": {
      "description": "The request to update a tag.",
      "name": "tags-update-request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "allowed_values",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "tags-update-allowed-values"
              }
            }
          },
          {
            "description": "The updated description of the tag.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The ID of the tag to update.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The updated name of the tag. The name must be unique across all\ntags.\n",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "tags-update-response": {
      "description": "The response for updating a tag.",
      "name": "tags-update-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "tag",
            "valueType": {
              "type": "id",
              "value": "tag"
            }
          }
        ]
      }
    },
    "ticket": {
      "name": "ticket",
      "shape": {
        "type": "object",
        "extends": [
          "work-base"
        ],
        "properties": [
          {
            "key": "group",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "group-summary"
              }
            }
          },
          {
            "key": "rev_org",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "org-summary"
              }
            }
          },
          {
            "key": "severity",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ticket-severity"
              }
            }
          }
        ]
      }
    },
    "ticket-severity": {
      "description": "Severity of the ticket.",
      "name": "ticket-severity",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "blocker"
          },
          {
            "value": "high"
          },
          {
            "value": "low"
          },
          {
            "value": "medium"
          }
        ]
      }
    },
    "TimelineCommentSnapKitBody": {
      "description": "The SnapKit Body of the comment.",
      "name": "TimelineCommentSnapKitBody",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "timeline-comment": {
      "name": "timeline-comment",
      "shape": {
        "type": "object",
        "extends": [
          "timeline-entry-base"
        ],
        "properties": [
          {
            "description": "The artifacts for the comment.",
            "key": "artifacts",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "artifact-summary"
                }
              }
            }
          },
          {
            "description": "The comment's body. If the comment has been deleted, then no body\nwill appear in the response.\n",
            "key": "body",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "body_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "timeline-comment-body-type"
              }
            }
          },
          {
            "description": "The SnapKit Body of the comment.",
            "key": "snap_kit_body",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TimelineCommentSnapKitBody"
              }
            }
          }
        ]
      }
    },
    "timeline-comment-body-type": {
      "description": "The type of the body to use for the comment.",
      "name": "timeline-comment-body-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "snap_kit"
          },
          {
            "value": "text"
          }
        ]
      }
    },
    "timeline-entries-create-request": {
      "description": "The request to create a timeline entry for an object.",
      "name": "timeline-entries-create-request",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "timeline_comment",
            "additionalProperties": {
              "extends": [
                "timeline-entries-create-request-timeline-comment"
              ],
              "properties": [
                {
                  "key": "object",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "The ID of the object to create the timeline entry for."
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "timeline-entries-create-request-type"
                  }
                },
                {
                  "key": "visibility",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "timeline-entry-visibility"
                    }
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "TimelineEntriesCreateRequestTimelineCommentSnapKitBody": {
      "description": "The SnapKit body of the comment.",
      "name": "TimelineEntriesCreateRequestTimelineCommentSnapKitBody",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "timeline-entries-create-request-timeline-comment": {
      "name": "timeline-entries-create-request-timeline-comment",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The IDs of the artifacts attached to the comment.",
            "key": "artifacts",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "The comment's body.",
            "key": "body",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "body_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "timeline-comment-body-type"
              }
            }
          },
          {
            "description": "The SnapKit body of the comment.",
            "key": "snap_kit_body",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TimelineEntriesCreateRequestTimelineCommentSnapKitBody"
              }
            }
          }
        ]
      }
    },
    "timeline-entries-create-request-type": {
      "name": "timeline-entries-create-request-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "timeline_comment"
          }
        ]
      }
    },
    "timeline-entries-create-response": {
      "description": "The response to creating a timeline entry for an object.",
      "name": "timeline-entries-create-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "timeline_entry",
            "valueType": {
              "type": "id",
              "value": "timeline-entry"
            }
          }
        ]
      }
    },
    "timeline-entries-get-response": {
      "description": "The request to getting a timeline entry.",
      "name": "timeline-entries-get-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "timeline_entry",
            "valueType": {
              "type": "id",
              "value": "timeline-entry"
            }
          }
        ]
      }
    },
    "timeline-entries-list-response": {
      "description": "The response to listing timeline entries for an object.",
      "name": "timeline-entries-list-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n",
            "key": "next_cursor",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n",
            "key": "prev_cursor",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timeline entries for the object.",
            "key": "timeline_entries",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "timeline-entry"
              }
            }
          }
        ]
      }
    },
    "timeline-entries-update-request": {
      "description": "The request to update a timeline entry.",
      "name": "timeline-entries-update-request",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "timeline_comment",
            "additionalProperties": {
              "extends": [
                "timeline-entries-update-request-timeline-comment"
              ],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "The ID of the timeline entry to update."
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "timeline-entries-update-request-type"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "TimelineEntriesUpdateRequestTimelineCommentSnapKitBody": {
      "description": "The SnapKit body of the comment.",
      "name": "TimelineEntriesUpdateRequestTimelineCommentSnapKitBody",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "timeline-entries-update-request-timeline-comment": {
      "name": "timeline-entries-update-request-timeline-comment",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "artifacts",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "timeline-entries-update-request-timeline-comment-artifacts"
              }
            }
          },
          {
            "description": "The updated comment's body.",
            "key": "body",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "body_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "timeline-comment-body-type"
              }
            }
          },
          {
            "description": "The SnapKit body of the comment.",
            "key": "snap_kit_body",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TimelineEntriesUpdateRequestTimelineCommentSnapKitBody"
              }
            }
          }
        ]
      }
    },
    "timeline-entries-update-request-timeline-comment-artifacts": {
      "name": "timeline-entries-update-request-timeline-comment-artifacts",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Adds the provided artifacts to the comment. An artifact cannot be\nadded more than once, i.e. nothing is done if the artifact is\nalready attached. Mutually exclusive with `set`.\n",
            "key": "add",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Removes the provided artifacts from the comment. If an artifact is\nnot present, then it's ignored. Mututally exclusive with `set`.\n",
            "key": "remove",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Sets the field to the provided artifacts.",
            "key": "set",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "timeline-entries-update-request-type": {
      "name": "timeline-entries-update-request-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "timeline_comment"
          }
        ]
      }
    },
    "timeline-entries-update-response": {
      "description": "The response to updating a timeline entry.",
      "name": "timeline-entries-update-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "timeline_entry",
            "valueType": {
              "type": "id",
              "value": "timeline-entry"
            }
          }
        ]
      }
    },
    "timeline-entry": {
      "name": "timeline-entry",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "timeline_comment",
            "additionalProperties": {
              "extends": [
                "timeline-comment"
              ],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "timeline-entry-type"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "timeline-entry-base": {
      "name": "timeline-entry-base",
      "shape": {
        "type": "object",
        "extends": [
          "atom-base"
        ],
        "properties": []
      }
    },
    "timeline-entry-type": {
      "name": "timeline-entry-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "timeline_comment"
          }
        ]
      }
    },
    "timeline-entry-visibility": {
      "description": "The visibility of the entry. If 'private', then the entry is only\nvisible to the creator, otherwise if not set, then the entry has\ndefault visibility.\n",
      "name": "timeline-entry-visibility",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "private"
          }
        ]
      }
    },
    "user-base": {
      "name": "user-base",
      "shape": {
        "type": "object",
        "extends": [
          "atom-base"
        ],
        "properties": [
          {
            "description": "The user's display name. The name is non-unique and mutable.\n",
            "key": "display_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "display_picture",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "artifact-summary"
              }
            }
          },
          {
            "description": "Email address of the user.",
            "key": "email",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Full name of the user.",
            "key": "full_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Phone numbers of the user.",
            "key": "phone_numbers",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "user-state"
              }
            }
          }
        ]
      }
    },
    "user-base-summary": {
      "name": "user-base-summary",
      "shape": {
        "type": "object",
        "extends": [
          "atom-base-summary"
        ],
        "properties": [
          {
            "description": "The user's display name. The name is non-unique and mutable.\n",
            "key": "display_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "display_picture",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "artifact-summary"
              }
            }
          },
          {
            "description": "Email address of the user.",
            "key": "email",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Full name of the user.",
            "key": "full_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "user-state"
              }
            }
          }
        ]
      }
    },
    "user-state": {
      "description": "State of the user.",
      "name": "user-state",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "active"
          },
          {
            "value": "deactivated"
          },
          {
            "value": "locked"
          },
          {
            "value": "shadow"
          },
          {
            "value": "unassigned"
          }
        ]
      }
    },
    "user-summary": {
      "name": "user-summary",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "dev_user",
            "additionalProperties": {
              "extends": [
                "dev-user-summary"
              ],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "user-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "rev_user",
            "additionalProperties": {
              "extends": [
                "rev-user-summary"
              ],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "user-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "sys_user",
            "additionalProperties": {
              "extends": [
                "sys-user-summary"
              ],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "user-type"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "user-type": {
      "name": "user-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "dev_user"
          },
          {
            "value": "rev_user"
          },
          {
            "value": "sys_user"
          }
        ]
      }
    },
    "webhook": {
      "name": "webhook",
      "shape": {
        "type": "object",
        "extends": [
          "atom-base"
        ],
        "properties": [
          {
            "description": "The event types that the webhook will receive.",
            "key": "event_types",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "webhook-event-type"
                }
              }
            }
          },
          {
            "description": "The secret to use for verifying webhook events.",
            "key": "secret",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "byte"
              }
            }
          },
          {
            "key": "status",
            "valueType": {
              "type": "id",
              "value": "webhook-status"
            }
          },
          {
            "description": "The URL of the webhook endpoint.",
            "key": "url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "webhook-event-request": {
      "name": "webhook-event-request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The event's ID.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "part_created",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "event-part-created"
              }
            }
          },
          {
            "key": "part_deleted",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "event-part-deleted"
              }
            }
          },
          {
            "key": "part_updated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "event-part-updated"
              }
            }
          },
          {
            "key": "rev_org_created",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "event-rev-org-created"
              }
            }
          },
          {
            "key": "rev_org_deleted",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "event-rev-org-deleted"
              }
            }
          },
          {
            "key": "rev_org_updated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "event-rev-org-updated"
              }
            }
          },
          {
            "key": "tag_created",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "event-tag-created"
              }
            }
          },
          {
            "key": "tag_deleted",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "event-tag-deleted"
              }
            }
          },
          {
            "key": "tag_updated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "event-tag-updated"
              }
            }
          },
          {
            "key": "timeline_entry_created",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "event-timeline-entry-created"
              }
            }
          },
          {
            "key": "timeline_entry_deleted",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "event-timeline-entry-deleted"
              }
            }
          },
          {
            "key": "timeline_entry_updated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "event-timeline-entry-updated"
              }
            }
          },
          {
            "description": "Timestamp of the webhook's invocation for the event. Note this\nshould be used to protect against replay attacks, where the event\nshould only be processed if the timestamp isn't stale by several\nseconds.\n",
            "key": "timestamp",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "webhook-event-type"
              }
            }
          },
          {
            "key": "verify",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "webhook-event-verify"
              }
            }
          },
          {
            "key": "webhook_created",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "event-webhook-created"
              }
            }
          },
          {
            "key": "webhook_deleted",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "event-webhook-deleted"
              }
            }
          },
          {
            "description": "ID of the webhook for the event.",
            "key": "webhook_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "webhook_updated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "event-webhook-updated"
              }
            }
          },
          {
            "key": "work_created",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "event-work-created"
              }
            }
          },
          {
            "key": "work_deleted",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "event-work-deleted"
              }
            }
          },
          {
            "key": "work_updated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "event-work-updated"
              }
            }
          }
        ]
      }
    },
    "webhook-event-response": {
      "name": "webhook-event-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The challenge from the \"verify\" request, otherwise this should not\nbe set for other request types.\n",
            "key": "challenge",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          }
        ]
      }
    },
    "webhook-event-type": {
      "description": "The event types that the webhook will receive.",
      "name": "webhook-event-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "part_created"
          },
          {
            "value": "part_deleted"
          },
          {
            "value": "part_updated"
          },
          {
            "value": "rev_org_created"
          },
          {
            "value": "rev_org_deleted"
          },
          {
            "value": "rev_org_updated"
          },
          {
            "value": "tag_created"
          },
          {
            "value": "tag_deleted"
          },
          {
            "value": "tag_updated"
          },
          {
            "value": "timeline_entry_created"
          },
          {
            "value": "timeline_entry_deleted"
          },
          {
            "value": "timeline_entry_updated"
          },
          {
            "value": "verify"
          },
          {
            "value": "webhook_created"
          },
          {
            "value": "webhook_deleted"
          },
          {
            "value": "webhook_updated"
          },
          {
            "value": "work_created"
          },
          {
            "value": "work_deleted"
          },
          {
            "value": "work_updated"
          }
        ]
      }
    },
    "webhook-event-verify": {
      "name": "webhook-event-verify",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The challenge that must be echoed in the response.",
            "key": "challenge",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "byte"
              }
            }
          }
        ]
      }
    },
    "webhook-status": {
      "description": "The status of the webhook.",
      "name": "webhook-status",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "active"
          },
          {
            "value": "inactive"
          },
          {
            "value": "unverified"
          }
        ]
      }
    },
    "webhooks-create-request": {
      "description": "The request to create a new webhook.",
      "name": "webhooks-create-request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The event types that the webhook endpoint will receive.",
            "key": "event_types",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "webhook-event-type"
                }
              }
            }
          },
          {
            "description": "The secret to use when verifying webhook events. If provided, the\nsecret must be between 8 and 32 bytes (inclusive). If not set, a\nsecret will be automatically generated and provided in the\nresponse.\n",
            "key": "secret",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          {
            "description": "The URL of the webhook endpoint.",
            "key": "url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "webhooks-create-response": {
      "description": "The response to creating a new webhook.",
      "name": "webhooks-create-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "webhook",
            "valueType": {
              "type": "id",
              "value": "webhook"
            }
          }
        ]
      }
    },
    "webhooks-delete-request": {
      "description": "The request to delete a webhook.",
      "name": "webhooks-delete-request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "ID for the webhook.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "webhooks-delete-response": {
      "description": "The response to deleting the webhook.",
      "name": "webhooks-delete-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "webhooks-get-response": {
      "description": "The response to getting the information for the webhook.",
      "name": "webhooks-get-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "webhook",
            "valueType": {
              "type": "id",
              "value": "webhook"
            }
          }
        ]
      }
    },
    "webhooks-list-response": {
      "description": "The response to listing the webhooks.",
      "name": "webhooks-list-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The list of webhooks.",
            "key": "webhooks",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "webhook"
              }
            }
          }
        ]
      }
    },
    "webhooks-update-action": {
      "description": "The action to update the webhook's status.",
      "name": "webhooks-update-action",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "activate"
          },
          {
            "value": "deactivate"
          }
        ]
      }
    },
    "webhooks-update-request": {
      "description": "The request to update a webhook.",
      "name": "webhooks-update-request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "action",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "webhooks-update-action"
              }
            }
          },
          {
            "key": "event_types",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "webhooks-update-request-event-types"
              }
            }
          },
          {
            "description": "ID for the webhook.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "If provided, updates the secret that's used when verifying webhook\nevents, which must be between 8 and 32 bytes (inclusive). Otherwise\nif empty, then a new secret is generated. If the webhook is active,\nthen its status will transition to the 'unverified' state and it\nwon't receive any object events until successfully verified.\n",
            "key": "secret",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          {
            "description": "The webhook's updated URL. If the webhook is active, then the\nwebhook's status will transition to the 'unverified' state and it\nwon't receive any object events until successfully verified.\n",
            "key": "url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "webhooks-update-request-event-types": {
      "name": "webhooks-update-request-event-types",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The event types to add. If a provided event type is already set for\nthe webhook, then nothing is done. Note this is mutually exclusive\nwith 'set'.\n",
            "key": "add",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "webhook-event-type"
                }
              }
            }
          },
          {
            "description": "The event types to remove. If a provided event type isn't set for\nthe webhook, then nothing is done. Note this is mutually exclusive\nwith 'set'.\n",
            "key": "remove",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "webhook-event-type"
                }
              }
            }
          },
          {
            "description": "The updated event types, which will replace the webhook's current\nevent types. Note this is mutually exclusive with 'add' and\n'remove'.\n",
            "key": "set",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "webhook-event-type"
                }
              }
            }
          }
        ]
      }
    },
    "webhooks-update-response": {
      "description": "The response to updating the webhook.",
      "name": "webhooks-update-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "webhook",
            "valueType": {
              "type": "id",
              "value": "webhook"
            }
          }
        ]
      }
    },
    "work": {
      "name": "work",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "issue",
            "additionalProperties": {
              "extends": [
                "issue"
              ],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "work-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "ticket",
            "additionalProperties": {
              "extends": [
                "ticket"
              ],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "work-type"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "work-base": {
      "name": "work-base",
      "shape": {
        "type": "object",
        "extends": [
          "atom-base"
        ],
        "properties": [
          {
            "key": "applies_to_part",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "part-summary"
              }
            }
          },
          {
            "description": "The artifacts attached to the work item.",
            "key": "artifacts",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "artifact-summary"
                }
              }
            }
          },
          {
            "description": "Body of the work object.",
            "key": "body",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The users that own the work.",
            "key": "owned_by",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "user-summary"
              }
            }
          },
          {
            "description": "Users that reported the work.",
            "key": "reported_by",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "user-summary"
                }
              }
            }
          },
          {
            "key": "stage",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "stage"
              }
            }
          },
          {
            "description": "Tags associated with the object.",
            "key": "tags",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "tag-with-value"
                }
              }
            }
          },
          {
            "description": "Timestamp when the work is expected to be complete.",
            "key": "target_close_date",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "description": "Title of the work object.",
            "key": "title",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "work-type": {
      "name": "work-type",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "issue"
          },
          {
            "value": "ticket"
          }
        ]
      }
    },
    "works-create-request": {
      "name": "works-create-request",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "issue",
            "additionalProperties": {
              "extends": [
                "works-create-request-issue"
              ],
              "properties": [
                {
                  "key": "applies_to_part",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "The [part](https://devrev.ai/docs/product/parts) that the work\napplies to. Specifying a part is required when creating tickets and\nissues.\n"
                },
                {
                  "key": "artifacts",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "description": "The IDs of the artifacts to associate with the work item.\n"
                },
                {
                  "key": "body",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Body of the work object."
                },
                {
                  "key": "owned_by",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The users that own the work."
                },
                {
                  "key": "reported_by",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "description": "The users that reported the work."
                },
                {
                  "key": "stage",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "stage-init"
                    }
                  }
                },
                {
                  "key": "tags",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "set-tag-with-value"
                      }
                    }
                  },
                  "description": "Tags associated with the work item."
                },
                {
                  "key": "target_close_date",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  },
                  "description": "Timestamp for when the work is expected to be complete."
                },
                {
                  "key": "title",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "Title of the work object."
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "work-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "ticket",
            "additionalProperties": {
              "extends": [
                "works-create-request-ticket"
              ],
              "properties": [
                {
                  "key": "applies_to_part",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "The [part](https://devrev.ai/docs/product/parts) that the work\napplies to. Specifying a part is required when creating tickets and\nissues.\n"
                },
                {
                  "key": "artifacts",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "description": "The IDs of the artifacts to associate with the work item.\n"
                },
                {
                  "key": "body",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Body of the work object."
                },
                {
                  "key": "owned_by",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "The users that own the work."
                },
                {
                  "key": "reported_by",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "description": "The users that reported the work."
                },
                {
                  "key": "stage",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "stage-init"
                    }
                  }
                },
                {
                  "key": "tags",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "set-tag-with-value"
                      }
                    }
                  },
                  "description": "Tags associated with the work item."
                },
                {
                  "key": "target_close_date",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  },
                  "description": "Timestamp for when the work is expected to be complete."
                },
                {
                  "key": "title",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "Title of the work object."
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "work-type"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "works-create-request-issue": {
      "name": "works-create-request-issue",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "priority",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "issue-priority"
              }
            }
          },
          {
            "description": "The sprint that the issue belongs to.",
            "key": "sprint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "works-create-request-ticket": {
      "name": "works-create-request-ticket",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The group that the ticket is associated with.",
            "key": "group",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The Rev organization that the ticket is associated with.",
            "key": "rev_org",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "severity",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ticket-severity"
              }
            }
          }
        ]
      }
    },
    "works-create-response": {
      "name": "works-create-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "work",
            "valueType": {
              "type": "id",
              "value": "work"
            }
          }
        ]
      }
    },
    "works-delete-request": {
      "name": "works-delete-request",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The work's ID.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "works-delete-response": {
      "name": "works-delete-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "works-export-response": {
      "name": "works-export-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The resulting collection of work items.",
            "key": "works",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "work"
              }
            }
          }
        ]
      }
    },
    "works-get-response": {
      "name": "works-get-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "work",
            "valueType": {
              "type": "id",
              "value": "work"
            }
          }
        ]
      }
    },
    "works-list-response": {
      "name": "works-list-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The cursor used to iterate subsequent results in accordance to the\nsort order. If not set, then no later elements exist.\n",
            "key": "next_cursor",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The cursor used to iterate preceding results in accordance to the\nsort order. If not set, then no prior elements exist.\n",
            "key": "prev_cursor",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The list of works.",
            "key": "works",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "work"
              }
            }
          }
        ]
      }
    },
    "works-update-request": {
      "name": "works-update-request",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "issue",
            "additionalProperties": {
              "extends": [
                "works-update-request-issue"
              ],
              "properties": [
                {
                  "key": "applies_to_part",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Updates the part that the work applies to."
                },
                {
                  "key": "artifacts",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "works-update-request-artifact-ids"
                    }
                  }
                },
                {
                  "key": "body",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Updated body of the work object, or unchanged if not provided.\n"
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "The work's ID."
                },
                {
                  "key": "owned_by",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "works-update-request-owned-by"
                    }
                  }
                },
                {
                  "key": "reported_by",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "works-update-request-reported-by"
                    }
                  }
                },
                {
                  "key": "stage",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "stage-update"
                    }
                  }
                },
                {
                  "key": "tags",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "works-update-request-tags"
                    }
                  }
                },
                {
                  "key": "target_close_date",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  },
                  "description": "Updates the timestamp for when the work is expected to be complete.\n"
                },
                {
                  "key": "title",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Updated title of the work object, or unchanged if not provided.\n"
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "work-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "none",
            "additionalProperties": {
              "extends": [
                "empty"
              ],
              "properties": [
                {
                  "key": "applies_to_part",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Updates the part that the work applies to."
                },
                {
                  "key": "artifacts",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "works-update-request-artifact-ids"
                    }
                  }
                },
                {
                  "key": "body",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Updated body of the work object, or unchanged if not provided.\n"
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "The work's ID."
                },
                {
                  "key": "owned_by",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "works-update-request-owned-by"
                    }
                  }
                },
                {
                  "key": "reported_by",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "works-update-request-reported-by"
                    }
                  }
                },
                {
                  "key": "stage",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "stage-update"
                    }
                  }
                },
                {
                  "key": "tags",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "works-update-request-tags"
                    }
                  }
                },
                {
                  "key": "target_close_date",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  },
                  "description": "Updates the timestamp for when the work is expected to be complete.\n"
                },
                {
                  "key": "title",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Updated title of the work object, or unchanged if not provided.\n"
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "work-type"
                  }
                }
              ]
            }
          },
          {
            "discriminantValue": "ticket",
            "additionalProperties": {
              "extends": [
                "works-update-request-ticket"
              ],
              "properties": [
                {
                  "key": "applies_to_part",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Updates the part that the work applies to."
                },
                {
                  "key": "artifacts",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "works-update-request-artifact-ids"
                    }
                  }
                },
                {
                  "key": "body",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Updated body of the work object, or unchanged if not provided.\n"
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "description": "The work's ID."
                },
                {
                  "key": "owned_by",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "works-update-request-owned-by"
                    }
                  }
                },
                {
                  "key": "reported_by",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "works-update-request-reported-by"
                    }
                  }
                },
                {
                  "key": "stage",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "stage-update"
                    }
                  }
                },
                {
                  "key": "tags",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "works-update-request-tags"
                    }
                  }
                },
                {
                  "key": "target_close_date",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  },
                  "description": "Updates the timestamp for when the work is expected to be complete.\n"
                },
                {
                  "key": "title",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "description": "Updated title of the work object, or unchanged if not provided.\n"
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "work-type"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "works-update-request-artifact-ids": {
      "name": "works-update-request-artifact-ids",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Sets the IDs to the provided artifact IDs.",
            "key": "set",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "works-update-request-issue": {
      "name": "works-update-request-issue",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "priority",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "issue-priority"
              }
            }
          },
          {
            "description": "Updates the sprint that the issue belongs to.",
            "key": "sprint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "works-update-request-owned-by": {
      "name": "works-update-request-owned-by",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Sets the owner IDs to the provided user IDs. This must not be\nempty.\n",
            "key": "set",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "works-update-request-reported-by": {
      "name": "works-update-request-reported-by",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Sets the users that reported the work to the provided user IDs.\n",
            "key": "set",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "works-update-request-tags": {
      "name": "works-update-request-tags",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Sets the provided tags on the work item.",
            "key": "set",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "set-tag-with-value"
                }
              }
            }
          }
        ]
      }
    },
    "works-update-request-ticket": {
      "name": "works-update-request-ticket",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The group that the ticket is associated with.",
            "key": "group",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Updates the Rev organization that the ticket is associated with.\n",
            "key": "rev_org",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "severity",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ticket-severity"
              }
            }
          }
        ]
      }
    },
    "works-update-response": {
      "name": "works-update-response",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "work",
            "valueType": {
              "type": "id",
              "value": "work"
            }
          }
        ]
      }
    }
  },
  "subpackages": {
    "artifacts": {
      "subpackageId": "artifacts",
      "name": "artifacts",
      "endpoints": [
        {
          "auth": true,
          "description": "Gets the download URL for the artifact.",
          "method": "GET",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "locate",
          "originalEndpointId": "artifacts.locate",
          "name": "Locate",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/artifacts.locate"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "The ID of the artifact to get the URL for.",
              "key": "id",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "artifacts-locate-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/artifacts.locate",
              "pathParameters": {},
              "queryParameters": {
                "id": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "url": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "url": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Creates an artifact and generates an upload URL for its data.\n",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "prepare",
          "originalEndpointId": "artifacts.prepare",
          "name": "Prepare",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/artifacts.prepare"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "artifacts-prepare-request"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "artifacts-prepare-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/artifacts.prepare",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "file_name": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "file_name": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "form_data": [
                    {
                      "key": "foo",
                      "value": "foo"
                    }
                  ],
                  "id": "foo",
                  "url": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "form_data": [
                    {
                      "key": "foo",
                      "value": "foo"
                    }
                  ],
                  "id": "foo",
                  "url": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "auth-tokens": {
      "subpackageId": "auth-tokens",
      "name": "auth-tokens",
      "endpoints": [
        {
          "auth": true,
          "description": "Creates a JWT corresponding to the requested token type for the\nauthenticated user.\n",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "create",
          "originalEndpointId": "auth-tokens.create",
          "name": "Create",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/auth-tokens.create"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "auth-tokens-create-request"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "auth-tokens-create-response"
              }
            },
            "statusCode": 201,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/auth-tokens.create",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 201,
              "responseBody": {
                "type": "json",
                "value": {
                  "access_token": "foo",
                  "expires_in": 42,
                  "token_type": "bearer"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "access_token": "foo",
                  "expires_in": 42,
                  "token_type": "bearer"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Revokes the token that matches the given token ID issued under the\ngiven Dev organization.\n",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "delete",
          "originalEndpointId": "auth-tokens.delete",
          "name": "Delete",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/auth-tokens.delete"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "auth-tokens-delete-request"
                }
              }
            }
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/auth-tokens.delete",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets the token metadata corresponding to the given token ID under the\ngiven Dev organization.\n",
          "method": "GET",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "get",
          "originalEndpointId": "auth-tokens.get",
          "name": "Get",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/auth-tokens.get"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "The unique identifier of the token under a given Dev organization.\n",
              "key": "token_id",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "auth-tokens-get-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/auth-tokens.get",
              "pathParameters": {},
              "queryParameters": {
                "token_id": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "token": {
                    "id": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "token": {
                    "id": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets the token metadata for all the tokens corresponding to the given\ntoken type issued for a given subject.\n",
          "method": "GET",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "list",
          "originalEndpointId": "auth-tokens.list",
          "name": "List",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/auth-tokens.list"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "An identifier that represents the application, which requested the\ntoken. Only relevant for application access tokens.\n",
              "key": "client_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "The type of the requested token. If no value is specified, the\nresponse will include tokens of all the types.\n",
              "key": "requested_token_type",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "auth-token-requested-token-type"
                }
              }
            },
            {
              "description": "The subject associated with the token. In the absence of this\nparameter, the ID of the authenticated entity is treated as the\nsubject.\n",
              "key": "subject",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "auth-tokens-list-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/auth-tokens.list",
              "pathParameters": {},
              "queryParameters": {
                "client_id": "foo",
                "requested_token_type": "urn:devrev:params:oauth:token-type:aat",
                "subject": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "tokens": [
                    {
                      "id": "foo"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "tokens": [
                    {
                      "id": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Revokes all the tokens that matches the given token type created by the\nauthenticated user.\n",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "selfDelete",
          "originalEndpointId": "auth-tokens.selfDelete",
          "name": "Self Delete",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/auth-tokens.self.delete"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "auth-tokens-self-delete-request"
                }
              }
            }
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/auth-tokens.self.delete",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Updates token metadata of a token issued under a given Dev\norganization.\n",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "update",
          "originalEndpointId": "auth-tokens.update",
          "name": "Update",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/auth-tokens.update"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "auth-tokens-update-request"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "auth-tokens-update-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/auth-tokens.update",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "token_hint": "foo",
                "token_id": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "token_hint": "foo",
                  "token_id": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "token": {
                    "id": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "token": {
                    "id": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "auth-connection": {
      "subpackageId": "auth-connection",
      "name": "auth-connection",
      "endpoints": [
        {
          "auth": true,
          "description": "Creates a new enterprise authentication connection for a Dev\norganization. This authentication connection will not be enabled by\ndefault for the organization and the user will need to explicitly\nenable this. Keep in mind that at a time, only one authentication\nconnection can be enabled for a Dev organization. At present, only 5\nenterprise connections can be created by an organization.\n",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "dev-org-auth-connections-create",
          "originalEndpointId": "auth-connection.dev-org-auth-connections-create",
          "name": "Dev Org Auth Connections Create",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/dev-orgs.auth-connections.create"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "dev-org-auth-connections-create-request"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "dev-org-auth-connections-create-response"
              }
            },
            "statusCode": 201,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/dev-orgs.auth-connections.create",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "type": "google_apps"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "type": "google_apps"
                }
              },
              "responseStatusCode": 201,
              "responseBody": {
                "type": "json",
                "value": {
                  "auth_connection": {
                    "id": "foo",
                    "type": "google_apps"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auth_connection": {
                    "id": "foo",
                    "type": "google_apps"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes an authentication connection. Only enterprise connections which\nare explicitly set up for a Dev organization can be deleted. Default\nconnections can not be deleted using this method.\n",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "dev-org-auth-connections-delete",
          "originalEndpointId": "auth-connection.dev-org-auth-connections-delete",
          "name": "Dev Org Auth Connections Delete",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/dev-orgs.auth-connections.delete"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "dev-org-auth-connections-delete-request"
                }
              }
            }
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/dev-orgs.auth-connections.delete",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "id": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo"
                }
              },
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Retrieves the details for an authentication connection.",
          "method": "GET",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "dev-org-auth-connections-get",
          "originalEndpointId": "auth-connection.dev-org-auth-connections-get",
          "name": "Dev Org Auth Connections Get",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/dev-orgs.auth-connections.get"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "ID of the authentication connection.",
              "key": "id",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "dev-org-auth-connections-get-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/dev-orgs.auth-connections.get",
              "pathParameters": {},
              "queryParameters": {
                "id": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auth_connection": {
                    "id": "foo",
                    "type": "google_apps"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auth_connection": {
                    "id": "foo",
                    "type": "google_apps"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Lists all the authentication connections available for a Dev\norganization. This list will include both social and enterprise\nconnections which are either available by default or are explicitly\ncreated by the user.\n",
          "method": "GET",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "dev-org-auth-connections-list",
          "originalEndpointId": "auth-connection.dev-org-auth-connections-list",
          "name": "Dev Org Auth Connections List",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/dev-orgs.auth-connections.list"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "dev-org-auth-connections-list-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/dev-orgs.auth-connections.list",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auth_connections": [
                    {
                      "id": "foo",
                      "type": "google_apps"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auth_connections": [
                    {
                      "id": "foo",
                      "type": "google_apps"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Enable or disable an authentication connection for a Dev organization.\nCurrently, only 1 authentication connection can be enabled at a time.\nWhen a new authentication connection is enabled, the connection which\nis currently enabled for the Dev organization is automatically\ndisabled.\n",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "dev-org-auth-connections-toggle",
          "originalEndpointId": "auth-connection.dev-org-auth-connections-toggle",
          "name": "Dev Org Auth Connections Toggle",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/dev-orgs.auth-connections.toggle"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "dev-org-auth-connections-toggle-request"
                }
              }
            }
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/dev-orgs.auth-connections.toggle",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "id": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo"
                }
              },
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Updates an authentication connection.",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "dev-org-auth-connections-update",
          "originalEndpointId": "auth-connection.dev-org-auth-connections-update",
          "name": "Dev Org Auth Connections Update",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/dev-orgs.auth-connections.update"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "dev-org-auth-connections-update-request"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "dev-org-auth-connections-update-response"
              }
            },
            "statusCode": 201,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/dev-orgs.auth-connections.update",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "id": "foo",
                "type": "google_apps"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "type": "google_apps"
                }
              },
              "responseStatusCode": 201,
              "responseBody": {
                "type": "json",
                "value": {
                  "auth_connection": {
                    "id": "foo",
                    "type": "google_apps"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auth_connection": {
                    "id": "foo",
                    "type": "google_apps"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "dev-users": {
      "subpackageId": "dev-users",
      "name": "dev-users",
      "endpoints": [
        {
          "auth": true,
          "description": "Lists users within your organization.",
          "method": "GET",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "list",
          "originalEndpointId": "dev-users.list",
          "name": "List",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/dev-users.list"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
              "key": "cursor",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Filters Dev users based on email addresses.",
              "key": "email",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "The maximum number of Dev users to return. The default is '50'.\n",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
              "key": "mode",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "list-mode"
                }
              }
            },
            {
              "description": "Fields to sort the Dev users by and the direction to sort them.\n",
              "key": "sort_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "Filters Dev users based on state.",
              "key": "state",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "user-state"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "dev-users-list-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/dev-users.list",
              "pathParameters": {},
              "queryParameters": {
                "cursor": "foo",
                "email": [
                  "foo"
                ],
                "limit": 42,
                "mode": "after",
                "sort_by": [
                  "foo"
                ],
                "state": [
                  "active"
                ]
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "dev_users": [
                    {
                      "id": "foo"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "dev_users": [
                    {
                      "id": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets the authenticated user's information.",
          "method": "GET",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "self",
          "originalEndpointId": "dev-users.self",
          "name": "Self",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/dev-users.self"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "dev-users-self-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/dev-users.self",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "dev_user": {
                    "id": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "dev_user": {
                    "id": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "parts": {
      "subpackageId": "parts",
      "name": "parts",
      "endpoints": [
        {
          "auth": true,
          "description": "Creates new [part](https://devrev.ai/docs/product/parts).",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "create",
          "originalEndpointId": "parts.create",
          "name": "Create",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/parts.create"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "parts-create-request"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "parts-create-response"
              }
            },
            "statusCode": 201,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/parts.create",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "name": "foo",
                "owned_by": [
                  "foo"
                ],
                "type": "capability"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "foo",
                  "owned_by": [
                    "foo"
                  ],
                  "type": "capability"
                }
              },
              "responseStatusCode": 201,
              "responseBody": {
                "type": "json",
                "value": {
                  "part": {
                    "type": "capability"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "part": {
                    "type": "capability"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes a [part](https://devrev.ai/docs/product/parts).",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "delete",
          "originalEndpointId": "parts.delete",
          "name": "Delete",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/parts.delete"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "parts-delete-request"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "parts-delete-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/parts.delete",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "id": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets a [part's](https://devrev.ai/docs/product/parts) information.\n",
          "method": "GET",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "get",
          "originalEndpointId": "parts.get",
          "name": "Get",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/parts.get"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "The ID of the part to retrieve.",
              "key": "id",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "parts-get-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/parts.get",
              "pathParameters": {},
              "queryParameters": {
                "id": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "part": {
                    "type": "capability"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "part": {
                    "type": "capability"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Lists a collection of [parts](https://devrev.ai/docs/product/parts).\n",
          "method": "GET",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "list",
          "originalEndpointId": "parts.list",
          "name": "List",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/parts.list"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Filters for parts created by any of these users.",
              "key": "created_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
              "key": "cursor",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "The maximum number of parts to return. The default is '50'.\n",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
              "key": "mode",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "list-mode"
                }
              }
            },
            {
              "description": "Filters for parts of the provided name(s).",
              "key": "name",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "Filters for parts owned by any of these users.",
              "key": "owned_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "Filters for parts of the provided type(s).",
              "key": "type",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "part-type"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "parts-list-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/parts.list",
              "pathParameters": {},
              "queryParameters": {
                "created_by": [
                  "foo"
                ],
                "cursor": "foo",
                "limit": 42,
                "mode": "after",
                "name": [
                  "foo"
                ],
                "owned_by": [
                  "foo"
                ],
                "type": [
                  "capability"
                ]
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "parts": [
                    {
                      "type": "capability"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "parts": [
                    {
                      "type": "capability"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Updates a [part's](https://devrev.ai/docs/product/parts) information.\n",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "update",
          "originalEndpointId": "parts.update",
          "name": "Update",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/parts.update"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "parts-update-request"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "parts-update-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/parts.update",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "id": "foo",
                "type": "capability"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "type": "capability"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "part": {
                    "type": "capability"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "part": {
                    "type": "capability"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "rev-orgs": {
      "subpackageId": "rev-orgs",
      "name": "rev-orgs",
      "endpoints": [
        {
          "auth": true,
          "description": "Creates a Rev organization in the authenticated user's Dev\norganization.\n",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "create",
          "originalEndpointId": "rev-orgs.create",
          "name": "Create",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/rev-orgs.create"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "rev-orgs-create-request"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "rev-orgs-create-response"
              }
            },
            "statusCode": 201,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/rev-orgs.create",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "display_name": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "display_name": "foo"
                }
              },
              "responseStatusCode": 201,
              "responseBody": {
                "type": "json",
                "value": {
                  "rev_org": {
                    "id": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "rev_org": {
                    "id": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes the Rev organization.",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "delete",
          "originalEndpointId": "rev-orgs.delete",
          "name": "Delete",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/rev-orgs.delete"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "rev-orgs-delete-request"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "rev-orgs-delete-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/rev-orgs.delete",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "id": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Retrieves the Rev organization's information.",
          "method": "GET",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "get",
          "originalEndpointId": "rev-orgs.get",
          "name": "Get",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/rev-orgs.get"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "The ID of the required Rev organization.",
              "key": "id",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "rev-orgs-get-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/rev-orgs.get",
              "pathParameters": {},
              "queryParameters": {
                "id": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "rev_org": {
                    "id": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "rev_org": {
                    "id": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets the list of Rev organizations' information belonging to the\nauthenticated user's Dev Organization which the user is also authorized\nto access.\n",
          "method": "GET",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "list",
          "originalEndpointId": "rev-orgs.list",
          "name": "List",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/rev-orgs.list"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Filters by creator.",
              "key": "created_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "Filters for objects created after the provided timestamp (inclusive).\n",
              "key": "created_date.after",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "Filters for objects created before the provided timestamp\n(inclusive).\n",
              "key": "created_date.before",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
              "key": "cursor",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "List of external refs to filter Rev organizations for.",
              "key": "external_ref",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "The maximum number of Rev organizations to be retrieved per page.\n",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
              "key": "mode",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "list-mode"
                }
              }
            },
            {
              "description": "Filters for objects created after the provided timestamp (inclusive).\n",
              "key": "modified_date.after",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "Filters for objects created before the provided timestamp\n(inclusive).\n",
              "key": "modified_date.before",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "Fields to sort the Rev organizations by and the direction to sort\nthem.\n",
              "key": "sort_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "rev-orgs-list-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/rev-orgs.list",
              "pathParameters": {},
              "queryParameters": {
                "created_by": [
                  "foo"
                ],
                "created_date.after": "foo",
                "created_date.before": "foo",
                "cursor": "foo",
                "external_ref": [
                  "foo"
                ],
                "limit": 42,
                "mode": "after",
                "modified_date.after": "foo",
                "modified_date.before": "foo",
                "sort_by": [
                  "foo"
                ]
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "rev_orgs": [
                    {
                      "id": "foo"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "rev_orgs": [
                    {
                      "id": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Updates the Rev organization's information.",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "update",
          "originalEndpointId": "rev-orgs.update",
          "name": "Update",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/rev-orgs.update"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "rev-orgs-update-request"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "rev-orgs-update-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/rev-orgs.update",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "id": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "rev_org": {
                    "id": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "rev_org": {
                    "id": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "tags": {
      "subpackageId": "tags",
      "name": "tags",
      "endpoints": [
        {
          "auth": true,
          "description": "Creates a new tag, which is used to create associations between objects\nand a logical concept denoted by the tag's name.\n",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "create",
          "originalEndpointId": "tags.create",
          "name": "Create",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/tags.create"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "tags-create-request"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "tags-create-response"
              }
            },
            "statusCode": 201,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/tags.create",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "name": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "foo"
                }
              },
              "responseStatusCode": 201,
              "responseBody": {
                "type": "json",
                "value": {
                  "tag": {
                    "id": "foo",
                    "name": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "tag": {
                    "id": "foo",
                    "name": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes a tag.",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "delete",
          "originalEndpointId": "tags.delete",
          "name": "Delete",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/tags.delete"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "tags-delete-request"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "tags-delete-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/tags.delete",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "id": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets a tag's information.",
          "method": "GET",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "get",
          "originalEndpointId": "tags.get",
          "name": "Get",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/tags.get"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "The requested tag's ID.",
              "key": "id",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "tags-get-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/tags.get",
              "pathParameters": {},
              "queryParameters": {
                "id": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "tag": {
                    "id": "foo",
                    "name": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "tag": {
                    "id": "foo",
                    "name": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Lists the available tags.",
          "method": "GET",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "list",
          "originalEndpointId": "tags.list",
          "name": "List",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/tags.list"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
              "key": "cursor",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "The maximum number of tags to return. The default is '50'.",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
              "key": "mode",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "list-mode"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "tags-list-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/tags.list",
              "pathParameters": {},
              "queryParameters": {
                "cursor": "foo",
                "limit": 42,
                "mode": "after"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "tags": [
                    {
                      "id": "foo",
                      "name": "foo"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "tags": [
                    {
                      "id": "foo",
                      "name": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Updates a tag's information.",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "update",
          "originalEndpointId": "tags.update",
          "name": "Update",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/tags.update"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "tags-update-request"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "tags-update-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/tags.update",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "id": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "tag": {
                    "id": "foo",
                    "name": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "tag": {
                    "id": "foo",
                    "name": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "timeline-entries": {
      "subpackageId": "timeline-entries",
      "name": "timeline-entries",
      "endpoints": [
        {
          "auth": true,
          "description": "Creates a new entry on an object's timeline.",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "create",
          "originalEndpointId": "timeline-entries.create",
          "name": "Create",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/timeline-entries.create"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "timeline-entries-create-request"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "timeline-entries-create-response"
              }
            },
            "statusCode": 201,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/timeline-entries.create",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "object": "foo",
                "type": "timeline_comment"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "object": "foo",
                  "type": "timeline_comment"
                }
              },
              "responseStatusCode": 201,
              "responseBody": {
                "type": "json",
                "value": {
                  "timeline_entry": {
                    "type": "timeline_comment"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "timeline_entry": {
                    "type": "timeline_comment"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets an entry on an object's timeline.",
          "method": "GET",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "get",
          "originalEndpointId": "timeline-entries.get",
          "name": "Get",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/timeline-entries.get"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "The ID of the timeline entry to get.",
              "key": "id",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "timeline-entries-get-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/timeline-entries.get",
              "pathParameters": {},
              "queryParameters": {
                "id": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "timeline_entry": {
                    "type": "timeline_comment"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "timeline_entry": {
                    "type": "timeline_comment"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Lists the timeline entries for an object.",
          "method": "GET",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "list",
          "originalEndpointId": "timeline-entries.list",
          "name": "List",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/timeline-entries.list"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "The ID of the object to list timeline entries for.",
              "key": "object",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "description": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
              "key": "cursor",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "The maximum number of entries to return. If not set, then this\ndefaults to `50`.\n",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
              "key": "mode",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "list-mode"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "timeline-entries-list-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/timeline-entries.list",
              "pathParameters": {},
              "queryParameters": {
                "object": "foo",
                "cursor": "foo",
                "limit": 42,
                "mode": "after"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "timeline_entries": [
                    {
                      "type": "timeline_comment"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "timeline_entries": [
                    {
                      "type": "timeline_comment"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Updates an entry on an object's timeline.",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "update",
          "originalEndpointId": "timeline-entries.update",
          "name": "Update",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/timeline-entries.update"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "timeline-entries-update-request"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "timeline-entries-update-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/timeline-entries.update",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "id": "foo",
                "type": "timeline_comment"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "type": "timeline_comment"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "timeline_entry": {
                    "type": "timeline_comment"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "timeline_entry": {
                    "type": "timeline_comment"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "webhooks": {
      "subpackageId": "webhooks",
      "name": "webhooks",
      "endpoints": [
        {
          "auth": true,
          "description": "Creates a new webhook target.",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "create",
          "originalEndpointId": "webhooks.create",
          "name": "Create",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/webhooks.create"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "webhooks-create-request"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "webhooks-create-response"
              }
            },
            "statusCode": 201,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/webhooks.create",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "url": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "url": "foo"
                }
              },
              "responseStatusCode": 201,
              "responseBody": {
                "type": "json",
                "value": {
                  "webhook": {
                    "id": "foo",
                    "secret": "foo",
                    "status": "active",
                    "url": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "webhook": {
                    "id": "foo",
                    "secret": "foo",
                    "status": "active",
                    "url": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes the requested webhook.",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "delete",
          "originalEndpointId": "webhooks.delete",
          "name": "Delete",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/webhooks.delete"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "webhooks-delete-request"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "webhooks-delete-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/webhooks.delete",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "id": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets the requested webhook's information.",
          "method": "GET",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "get",
          "originalEndpointId": "webhooks.get",
          "name": "Get",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/webhooks.get"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "ID for the webhook.",
              "key": "id",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "webhooks-get-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/webhooks.get",
              "pathParameters": {},
              "queryParameters": {
                "id": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "webhook": {
                    "id": "foo",
                    "secret": "foo",
                    "status": "active",
                    "url": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "webhook": {
                    "id": "foo",
                    "secret": "foo",
                    "status": "active",
                    "url": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Lists the webhooks.",
          "method": "GET",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "list",
          "originalEndpointId": "webhooks.list",
          "name": "List",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/webhooks.list"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "webhooks-list-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/webhooks.list",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "webhooks": [
                    {
                      "id": "foo",
                      "secret": "foo",
                      "status": "active",
                      "url": "foo"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "webhooks": [
                    {
                      "id": "foo",
                      "secret": "foo",
                      "status": "active",
                      "url": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Updates the requested webhook.",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "update",
          "originalEndpointId": "webhooks.update",
          "name": "Update",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/webhooks.update"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "webhooks-update-request"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "webhooks-update-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/webhooks.update",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "id": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "webhook": {
                    "id": "foo",
                    "secret": "foo",
                    "status": "active",
                    "url": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "webhook": {
                    "id": "foo",
                    "secret": "foo",
                    "status": "active",
                    "url": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "works": {
      "subpackageId": "works",
      "name": "works",
      "endpoints": [
        {
          "auth": true,
          "description": "Creates new work ([issue](https://devrev.ai/docs/product/build),\n[ticket](https://devrev.ai/docs/product/support)) item.\n",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "create",
          "originalEndpointId": "works.create",
          "name": "Create",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/works.create"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "works-create-request"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "works-create-response"
              }
            },
            "statusCode": 201,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/works.create",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "applies_to_part": "foo",
                "owned_by": [
                  "foo"
                ],
                "title": "foo",
                "type": "issue"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "applies_to_part": "foo",
                  "owned_by": [
                    "foo"
                  ],
                  "title": "foo",
                  "type": "issue"
                }
              },
              "responseStatusCode": 201,
              "responseBody": {
                "type": "json",
                "value": {
                  "work": {
                    "type": "issue"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "work": {
                    "type": "issue"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes a work item.",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "delete",
          "originalEndpointId": "works.delete",
          "name": "Delete",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/works.delete"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "works-delete-request"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "works-delete-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/works.delete",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "id": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Exports a collection of work items.",
          "method": "GET",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "export",
          "originalEndpointId": "works.export",
          "name": "Export",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/works.export"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Filters for work belonging to any of the provided parts.",
              "key": "applies_to_part",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "Filters for work created by any of these users.",
              "key": "created_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "The number of work items to return. The default is '50', the maximum\nis '5000'.\n",
              "key": "first",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "Filters for issues with any of the provided priorities.",
              "key": "issue.priority",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "issue-priority"
                  }
                }
              }
            },
            {
              "description": "Filters for issues with any of the provided Rev organizations.\n",
              "key": "issue.rev_orgs",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "Filters for work owned by any of these users.",
              "key": "owned_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "Filters for records in the provided stage(s).",
              "key": "stage.name",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "Filters for tickets that are associated with any of the provided Rev\norganizations.\n",
              "key": "ticket.rev_org",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "Filters for tickets with any of the provided severities.",
              "key": "ticket.severity",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "ticket-severity"
                  }
                }
              }
            },
            {
              "description": "Filters for work of the provided types.",
              "key": "type",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "work-type"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "works-export-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/works.export",
              "pathParameters": {},
              "queryParameters": {
                "applies_to_part": [
                  "foo"
                ],
                "created_by": [
                  "foo"
                ],
                "first": 42,
                "issue.priority": [
                  "p0"
                ],
                "issue.rev_orgs": [
                  "foo"
                ],
                "owned_by": [
                  "foo"
                ],
                "stage.name": [
                  "foo"
                ],
                "ticket.rev_org": [
                  "foo"
                ],
                "ticket.severity": [
                  "blocker"
                ],
                "type": [
                  "issue"
                ]
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "works": [
                    {
                      "type": "issue"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "works": [
                    {
                      "type": "issue"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets a work item's information.",
          "method": "GET",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "get",
          "originalEndpointId": "works.get",
          "name": "Get",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/works.get"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "The work's ID.",
              "key": "id",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "works-get-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/works.get",
              "pathParameters": {},
              "queryParameters": {
                "id": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "work": {
                    "type": "issue"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "work": {
                    "type": "issue"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Lists a collection of work items.",
          "method": "GET",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "list",
          "originalEndpointId": "works.list",
          "name": "List",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/works.list"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Filters for work belonging to any of the provided parts.",
              "key": "applies_to_part",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "Filters for work created by any of these users.",
              "key": "created_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "The cursor to resume iteration from. If not provided, then iteration\nstarts from the beginning.\n",
              "key": "cursor",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Filters for issues with any of the provided priorities.",
              "key": "issue.priority",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "issue-priority"
                  }
                }
              }
            },
            {
              "description": "Filters for issues with any of the provided Rev organizations.\n",
              "key": "issue.rev_orgs",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "The maximum number of works to return. The default is '50'.\n",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "The iteration mode to use, otherwise if not set, then \"after\" is\nused.\n",
              "key": "mode",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "list-mode"
                }
              }
            },
            {
              "description": "Filters for work owned by any of these users.",
              "key": "owned_by",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "Filters for records in the provided stage(s).",
              "key": "stage.name",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "Filters for tickets that are associated with any of the provided Rev\norganizations.\n",
              "key": "ticket.rev_org",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "Filters for tickets with any of the provided severities.",
              "key": "ticket.severity",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "ticket-severity"
                  }
                }
              }
            },
            {
              "description": "Filters for work of the provided types.",
              "key": "type",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "work-type"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "works-list-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/works.list",
              "pathParameters": {},
              "queryParameters": {
                "applies_to_part": [
                  "foo"
                ],
                "created_by": [
                  "foo"
                ],
                "cursor": "foo",
                "issue.priority": [
                  "p0"
                ],
                "issue.rev_orgs": [
                  "foo"
                ],
                "limit": 42,
                "mode": "after",
                "owned_by": [
                  "foo"
                ],
                "stage.name": [
                  "foo"
                ],
                "ticket.rev_org": [
                  "foo"
                ],
                "ticket.severity": [
                  "blocker"
                ],
                "type": [
                  "issue"
                ]
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "works": [
                    {
                      "type": "issue"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "works": [
                    {
                      "type": "issue"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Updates a work item's information.",
          "method": "POST",
          "defaultEnvironment": "DevRev API endpoint.",
          "environments": [
            {
              "id": "DevRev API endpoint.",
              "baseUrl": "https://api.devrev.ai"
            }
          ],
          "id": "update",
          "originalEndpointId": "works.update",
          "name": "Update",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/works.update"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "works-update-request"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "works-update-response"
              }
            },
            "statusCode": 200,
            "description": "Success."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/works.update",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "id": "foo",
                "type": "issue"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "type": "issue"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "work": {
                    "type": "issue"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "work": {
                    "type": "issue"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    }
  },
  "rootPackage": {
    "endpoints": [],
    "webhooks": [],
    "websockets": [],
    "types": [
      "artifact-summary",
      "artifacts-locate-response",
      "artifacts-prepare-request",
      "artifacts-prepare-response",
      "artifacts-prepare-response-form-data",
      "atom-base",
      "atom-base-summary",
      "auth-connection",
      "auth-connection-options-azure-ad",
      "auth-connection-options-google-apps",
      "auth-connection-options-oidc",
      "auth-connection-options-saml",
      "auth-connection-options-social",
      "auth-connection-toggle",
      "auth-connection-type",
      "auth-token",
      "auth-token-grant-type",
      "auth-token-requested-token-type",
      "auth-token-status",
      "auth-token-subject-token-type",
      "auth-token-token-type",
      "auth-tokens-create-request",
      "auth-tokens-create-response",
      "auth-tokens-delete-request",
      "auth-tokens-get-response",
      "auth-tokens-list-response",
      "auth-tokens-org-traits",
      "auth-tokens-rev-info",
      "auth-tokens-self-delete-request",
      "auth-tokens-update-request",
      "auth-tokens-update-response",
      "auth-tokens-user-traits",
      "capability",
      "capability-summary",
      "dev-org-auth-connections-create-request",
      "dev-org-auth-connections-create-request-type",
      "dev-org-auth-connections-create-response",
      "dev-org-auth-connections-delete-request",
      "dev-org-auth-connections-get-response",
      "dev-org-auth-connections-list-response",
      "dev-org-auth-connections-toggle-request",
      "dev-org-auth-connections-update-request",
      "dev-org-auth-connections-update-request-type",
      "dev-org-auth-connections-update-response",
      "dev-user",
      "dev-user-summary",
      "dev-users-list-response",
      "dev-users-self-response",
      "empty",
      "enhancement",
      "enhancement-summary",
      "error-bad-request",
      "error-bad-request-bad-request",
      "error-bad-request-invalid-enum-value",
      "error-bad-request-missing-required-field",
      "error-bad-request-parse-error",
      "error-bad-request-type",
      "error-bad-request-value-not-permitted",
      "error-base",
      "error-forbidden",
      "error-forbidden-forbidden",
      "error-forbidden-type",
      "error-internal-server-error",
      "error-internal-server-error-internal-error",
      "error-internal-server-error-type",
      "error-not-found",
      "error-not-found-not-found",
      "error-not-found-type",
      "error-service-unavailable",
      "error-service-unavailable-service-unavailable",
      "error-service-unavailable-type",
      "error-too-many-requests",
      "error-too-many-requests-too-many-requests",
      "error-too-many-requests-type",
      "error-unauthorized",
      "error-unauthorized-type",
      "error-unauthorized-unauthenticated",
      "event-part-created",
      "event-part-deleted",
      "event-part-updated",
      "event-rev-org-created",
      "event-rev-org-deleted",
      "event-rev-org-updated",
      "event-tag-created",
      "event-tag-deleted",
      "event-tag-updated",
      "event-timeline-entry-created",
      "event-timeline-entry-deleted",
      "event-timeline-entry-updated",
      "event-webhook-created",
      "event-webhook-deleted",
      "event-webhook-updated",
      "event-work-created",
      "event-work-deleted",
      "event-work-updated",
      "external-identity",
      "feature",
      "feature-summary",
      "group-summary",
      "issue",
      "issue-priority",
      "list-mode",
      "org-base",
      "org-base-summary",
      "org-environment",
      "org-summary",
      "org-type",
      "part",
      "part-base",
      "part-base-summary",
      "part-summary",
      "part-type",
      "parts-create-request",
      "parts-create-request-capability",
      "parts-create-request-enhancement",
      "parts-create-request-feature",
      "parts-create-request-product",
      "parts-create-response",
      "parts-delete-request",
      "parts-delete-response",
      "parts-get-response",
      "parts-list-response",
      "parts-update-request",
      "parts-update-request-capability",
      "parts-update-request-enhancement",
      "parts-update-request-feature",
      "parts-update-request-owned-by",
      "parts-update-request-product",
      "parts-update-response",
      "product",
      "product-summary",
      "rev-org",
      "rev-org-summary",
      "rev-orgs-create-request",
      "rev-orgs-create-response",
      "rev-orgs-delete-request",
      "rev-orgs-delete-response",
      "rev-orgs-get-response",
      "rev-orgs-list-response",
      "rev-orgs-update-request",
      "rev-orgs-update-response",
      "rev-user-summary",
      "set-tag-with-value",
      "stage",
      "stage-init",
      "stage-update",
      "sys-user-summary",
      "tag",
      "tag-summary",
      "tag-with-value",
      "tags-create-request",
      "tags-create-response",
      "tags-delete-request",
      "tags-delete-response",
      "tags-get-response",
      "tags-list-response",
      "tags-update-allowed-values",
      "tags-update-request",
      "tags-update-response",
      "ticket",
      "ticket-severity",
      "timeline-comment",
      "timeline-comment-body-type",
      "timeline-entries-create-request",
      "timeline-entries-create-request-timeline-comment",
      "timeline-entries-create-request-type",
      "timeline-entries-create-response",
      "timeline-entries-get-response",
      "timeline-entries-list-response",
      "timeline-entries-update-request",
      "timeline-entries-update-request-timeline-comment",
      "timeline-entries-update-request-timeline-comment-artifacts",
      "timeline-entries-update-request-type",
      "timeline-entries-update-response",
      "timeline-entry",
      "timeline-entry-base",
      "timeline-entry-type",
      "timeline-entry-visibility",
      "user-base",
      "user-base-summary",
      "user-state",
      "user-summary",
      "user-type",
      "webhook",
      "webhook-event-request",
      "webhook-event-response",
      "webhook-event-type",
      "webhook-event-verify",
      "webhook-status",
      "webhooks-create-request",
      "webhooks-create-response",
      "webhooks-delete-request",
      "webhooks-delete-response",
      "webhooks-get-response",
      "webhooks-list-response",
      "webhooks-update-action",
      "webhooks-update-request",
      "webhooks-update-request-event-types",
      "webhooks-update-response",
      "work",
      "work-base",
      "work-type",
      "works-create-request",
      "works-create-request-issue",
      "works-create-request-ticket",
      "works-create-response",
      "works-delete-request",
      "works-delete-response",
      "works-export-response",
      "works-get-response",
      "works-list-response",
      "works-update-request",
      "works-update-request-artifact-ids",
      "works-update-request-issue",
      "works-update-request-owned-by",
      "works-update-request-reported-by",
      "works-update-request-tags",
      "works-update-request-ticket",
      "works-update-response"
    ],
    "subpackages": [
      "artifacts",
      "auth-tokens",
      "auth-connection",
      "dev-users",
      "parts",
      "rev-orgs",
      "tags",
      "timeline-entries",
      "webhooks",
      "works"
    ]
  },
  "auth": {
    "type": "header",
    "headerWireValue": "Authorization",
    "nameOverride": "Authorization"
  },
  "snippetsConfiguration": {},
  "globalHeaders": []
}