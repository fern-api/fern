{
  "types": {
    "Account": {
      "name": "Account",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "number",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "opening_balance",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "closing_balance",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "iso_currency_code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "AccountHolder": {
      "name": "AccountHolder",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AccountType"
              }
            }
          },
          {
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "Address"
              }
            }
          }
        ]
      }
    },
    "AccountHolderCreateType": {
      "description": "The type of the account holder. ",
      "name": "AccountHolderCreateType",
      "shape": {
        "type": "object",
        "extends": [
          "AccountHolderType"
        ],
        "properties": []
      }
    },
    "AccountHolderCreate": {
      "name": "AccountHolderCreate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique ID of the account holder of the transaction",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1
              }
            }
          },
          {
            "description": "The type of the account holder. ",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "AccountHolderCreateType"
            }
          },
          {
            "description": "The name of the account holder",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "AccountHolderExternalType": {
      "description": "The type of the account holder. ",
      "name": "AccountHolderExternalType",
      "shape": {
        "type": "object",
        "extends": [
          "AccountHolderType"
        ],
        "properties": []
      }
    },
    "AccountHolderExternal": {
      "name": "AccountHolderExternal",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique ID of the account holder of the transaction",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1
              }
            }
          },
          {
            "description": "The type of the account holder. ",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "AccountHolderExternalType"
            }
          },
          {
            "description": "The name of the account holder",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The timestamp of when the account holder was created.",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "AccountHolderType": {
      "description": "An enumeration.",
      "name": "AccountHolderType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "consumer"
          },
          {
            "value": "business"
          }
        ]
      }
    },
    "AccountType": {
      "description": "An enumeration.",
      "name": "AccountType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "consumer"
          },
          {
            "value": "business"
          }
        ]
      }
    },
    "AccountingCategory": {
      "description": "An enumeration.",
      "name": "AccountingCategory",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "operational expenses"
          },
          {
            "value": "cost of goods sold"
          },
          {
            "value": "revenue"
          },
          {
            "value": "financing"
          },
          {
            "value": "taxes"
          }
        ]
      }
    },
    "Address": {
      "name": "Address",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "street",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "postcode",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "city",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "country",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "AsyncEnrichmentInput": {
      "name": "AsyncEnrichmentInput",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "transactions",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "TransactionInput"
              }
            }
          }
        ]
      }
    },
    "BankStatementStatus": {
      "description": "An enumeration.",
      "name": "BankStatementStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "processing"
          },
          {
            "value": "completed"
          },
          {
            "value": "error"
          }
        ]
      }
    },
    "BankStatementFile": {
      "name": "BankStatementFile",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The number of pages in the bank statement file.",
            "key": "no_pages",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "The size of the bank statement file in bytes, if available.",
            "key": "size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "BankStatement": {
      "description": "Represents a bank statement with details about the file and its status.",
      "name": "BankStatement",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A unique identifier for the bank statement job.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The name of the bank statement file, if available.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The current status of the document.",
            "key": "status",
            "valueType": {
              "type": "id",
              "value": "BankStatementStatus"
            }
          },
          {
            "description": "The date and time when the job was created.",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Information about the bank statement file being processed.",
            "key": "file",
            "valueType": {
              "type": "id",
              "value": "BankStatementFile"
            }
          },
          {
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "BankStatementError"
              }
            }
          }
        ]
      }
    },
    "BankStatementAccount": {
      "name": "BankStatementAccount",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The account number, if available.",
            "key": "number",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The opening balance of the account for the statement period.",
            "key": "opening_balance",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The closing balance of the account for the statement period.",
            "key": "closing_balance",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The start date of the statement period.",
            "key": "start_date",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date"
                }
              }
            }
          },
          {
            "description": "The end date of the statement period.",
            "key": "end_date",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date"
                }
              }
            }
          },
          {
            "description": "Indicates whether the balance has been reconciled.",
            "key": "is_balance_reconciled",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "The sum of amounts of all incoming transactions.",
            "key": "total_incoming",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The sum of amounts of all outgoing transactions.",
            "key": "total_outgoing",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "List of transactions for this account.",
            "key": "transactions",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "BankStatementTransaction"
              }
            }
          }
        ]
      }
    },
    "BankStatementError": {
      "name": "BankStatementError",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "code",
            "valueType": {
              "type": "id",
              "value": "BankStatementErrorCode"
            }
          },
          {
            "key": "message",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "BankStatementErrorCode": {
      "description": "An enumeration.",
      "name": "BankStatementErrorCode",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "invalid_bank_statement"
          },
          {
            "value": "internal_error"
          }
        ]
      }
    },
    "BankStatementResults": {
      "name": "BankStatementResults",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of accounts in the bank statement.",
            "key": "accounts",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "BankStatementAccount"
              }
            }
          }
        ]
      }
    },
    "BankStatementTransactionEntryType": {
      "description": "The direction of the flow of the money from the perspective of the account holder. `outgoing` to represent money leaving the account, such as purchases or fees, while `incoming` represents money entering the account, such as income or refunds.",
      "name": "BankStatementTransactionEntryType",
      "shape": {
        "type": "object",
        "extends": [
          "EntryType"
        ],
        "properties": []
      }
    },
    "BankStatementTransactionCurrency": {
      "description": "The currency of the transaction in ISO 4217 format",
      "name": "BankStatementTransactionCurrency",
      "shape": {
        "type": "object",
        "extends": [
          "Currency"
        ],
        "properties": []
      }
    },
    "BankStatementTransaction": {
      "name": "BankStatementTransaction",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A unique identifier of the transaction",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1
              }
            }
          },
          {
            "description": "The description string of the transaction",
            "key": "description",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 0,
                "maxLength": 1024
              }
            }
          },
          {
            "description": "The date that the transaction was posted. Uses ISO 8601 format (YYYY-MM-DD)",
            "key": "date",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date"
              }
            }
          },
          {
            "description": "The amount of the transaction in the `currency`. Must be a positive value. For example, if the `currency` is USD, then it's the amount in dollars.",
            "key": "amount",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "description": "The direction of the flow of the money from the perspective of the account holder. `outgoing` to represent money leaving the account, such as purchases or fees, while `incoming` represents money entering the account, such as income or refunds.",
            "key": "entry_type",
            "valueType": {
              "type": "id",
              "value": "BankStatementTransactionEntryType"
            }
          },
          {
            "description": "The currency of the transaction in ISO 4217 format",
            "key": "currency",
            "valueType": {
              "type": "id",
              "value": "BankStatementTransactionCurrency"
            }
          },
          {
            "description": "The account's balance when this transaction was performed",
            "key": "running_balance",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "BatchStatus": {
      "description": "An enumeration.",
      "name": "BatchStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "processing"
          },
          {
            "value": "completed"
          },
          {
            "value": "error"
          }
        ]
      }
    },
    "Batch": {
      "description": "The `Batch` object represents the status and progress of an asynchronous batch enrichment job.",
      "name": "Batch",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A unique identifier for the batch.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The current status of the batch. A batch will error if at least one of the transactions contains an error.",
            "key": "status",
            "valueType": {
              "type": "id",
              "value": "BatchStatus"
            }
          },
          {
            "description": "The timestamp of when the batch was created.",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "The timestamp of when the batch was last updated.",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "The number of transactions processed so far.",
            "key": "progress",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "The total number of transactions in the batch.",
            "key": "total",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "BatchResultStatus": {
      "description": "The current status of the batch job.",
      "name": "BatchResultStatus",
      "shape": {
        "type": "object",
        "extends": [
          "BatchStatus"
        ],
        "properties": []
      }
    },
    "BatchResult": {
      "description": "The `BatchResult` object represents the result of a batch enrichment job, including its status and\nenriched transactions.",
      "name": "BatchResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A unique identifier for the batch.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The total number of transactions in the batch result.",
            "key": "total",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "The current status of the batch job.",
            "key": "status",
            "valueType": {
              "type": "id",
              "value": "BatchResultStatus"
            }
          },
          {
            "key": "results",
            "valueType": {
              "type": "id",
              "value": "EnrichmentResult"
            }
          }
        ]
      }
    },
    "Body_post_bank_statement_v3_bank_statements_post": {
      "name": "Body_post_bank_statement_v3_bank_statements_post",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "file",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        ]
      }
    },
    "Body_set_transaction_ah_v3_transactions__id__assign_post": {
      "name": "Body_set_transaction_ah_v3_transactions__id__assign_post",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "account_holder_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "CategoriesAccounting": {
      "description": "The corresponding accounting category. Only available for `business` transactions.",
      "name": "CategoriesAccounting",
      "shape": {
        "type": "object",
        "extends": [
          "AccountingCategory"
        ],
        "properties": []
      }
    },
    "Categories": {
      "name": "Categories",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The category of the transaction. View the valid set of categories for your key [here](./docs/v3/enrichment/entities).",
            "key": "general",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The corresponding accounting category. Only available for `business` transactions.",
            "key": "accounting",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "CategoriesAccounting"
              }
            }
          }
        ]
      }
    },
    "CategoryConfidence": {
      "description": "An enumeration.",
      "name": "CategoryConfidence",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "high"
          },
          {
            "value": "medium"
          },
          {
            "value": "low"
          },
          {
            "value": "unknown"
          }
        ]
      }
    },
    "CategorySet": {
      "name": "CategorySet",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "incoming",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "outgoing",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "Counterparty": {
      "name": "Counterparty",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique UUID identifier of the entity",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The name of the entity",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The website URL of the entity",
            "key": "website",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Logo's URL",
            "key": "logo",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A list of [Merchant Category Codes](https://en.wikipedia.org/wiki/Merchant_category_code)",
            "key": "mccs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "CounterpartyType"
            }
          }
        ]
      }
    },
    "CounterpartyType": {
      "description": "An enumeration.",
      "name": "CounterpartyType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "person"
          },
          {
            "value": "organization"
          }
        ]
      }
    },
    "Country": {
      "description": "An enumeration.",
      "name": "Country",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "AD"
          },
          {
            "value": "AE"
          },
          {
            "value": "AF"
          },
          {
            "value": "AG"
          },
          {
            "value": "AI"
          },
          {
            "value": "AL"
          },
          {
            "value": "AM"
          },
          {
            "value": "AO"
          },
          {
            "value": "AR"
          },
          {
            "value": "AS"
          },
          {
            "value": "AT"
          },
          {
            "value": "AU"
          },
          {
            "value": "AW"
          },
          {
            "value": "AZ"
          },
          {
            "value": "BA"
          },
          {
            "value": "BB"
          },
          {
            "value": "BD"
          },
          {
            "value": "BE"
          },
          {
            "value": "BF"
          },
          {
            "value": "BG"
          },
          {
            "value": "BH"
          },
          {
            "value": "BI"
          },
          {
            "value": "BJ"
          },
          {
            "value": "BL"
          },
          {
            "value": "BM"
          },
          {
            "value": "BN"
          },
          {
            "value": "BO"
          },
          {
            "value": "BQ"
          },
          {
            "value": "BR"
          },
          {
            "value": "BS"
          },
          {
            "value": "BT"
          },
          {
            "value": "BV"
          },
          {
            "value": "BW"
          },
          {
            "value": "BY"
          },
          {
            "value": "BZ"
          },
          {
            "value": "CA"
          },
          {
            "value": "CC"
          },
          {
            "value": "CD"
          },
          {
            "value": "CF"
          },
          {
            "value": "CG"
          },
          {
            "value": "CH"
          },
          {
            "value": "CI"
          },
          {
            "value": "CK"
          },
          {
            "value": "CL"
          },
          {
            "value": "CM"
          },
          {
            "value": "CN"
          },
          {
            "value": "CO"
          },
          {
            "value": "CR"
          },
          {
            "value": "CU"
          },
          {
            "value": "CV"
          },
          {
            "value": "CW"
          },
          {
            "value": "CX"
          },
          {
            "value": "CY"
          },
          {
            "value": "CZ"
          },
          {
            "value": "DE"
          },
          {
            "value": "DJ"
          },
          {
            "value": "DK"
          },
          {
            "value": "DM"
          },
          {
            "value": "DO"
          },
          {
            "value": "DZ"
          },
          {
            "value": "EC"
          },
          {
            "value": "EE"
          },
          {
            "value": "EG"
          },
          {
            "value": "EH"
          },
          {
            "value": "ER"
          },
          {
            "value": "ES"
          },
          {
            "value": "ET"
          },
          {
            "value": "FI"
          },
          {
            "value": "FJ"
          },
          {
            "value": "FK"
          },
          {
            "value": "FM"
          },
          {
            "value": "FR"
          },
          {
            "value": "GA"
          },
          {
            "value": "GB"
          },
          {
            "value": "GD"
          },
          {
            "value": "GE"
          },
          {
            "value": "GF"
          },
          {
            "value": "GG"
          },
          {
            "value": "GH"
          },
          {
            "value": "GI"
          },
          {
            "value": "GL"
          },
          {
            "value": "GM"
          },
          {
            "value": "GN"
          },
          {
            "value": "GP"
          },
          {
            "value": "GQ"
          },
          {
            "value": "GR"
          },
          {
            "value": "GS"
          },
          {
            "value": "GT"
          },
          {
            "value": "GU"
          },
          {
            "value": "GW"
          },
          {
            "value": "GY"
          },
          {
            "value": "HK"
          },
          {
            "value": "HM"
          },
          {
            "value": "HN"
          },
          {
            "value": "HR"
          },
          {
            "value": "HT"
          },
          {
            "value": "HU"
          },
          {
            "value": "ID"
          },
          {
            "value": "IE"
          },
          {
            "value": "IL"
          },
          {
            "value": "IM"
          },
          {
            "value": "IN"
          },
          {
            "value": "IO"
          },
          {
            "value": "IQ"
          },
          {
            "value": "IR"
          },
          {
            "value": "IS"
          },
          {
            "value": "IT"
          },
          {
            "value": "JE"
          },
          {
            "value": "JM"
          },
          {
            "value": "JO"
          },
          {
            "value": "JP"
          },
          {
            "value": "KE"
          },
          {
            "value": "KG"
          },
          {
            "value": "KH"
          },
          {
            "value": "KI"
          },
          {
            "value": "KM"
          },
          {
            "value": "KN"
          },
          {
            "value": "KP"
          },
          {
            "value": "KR"
          },
          {
            "value": "KW"
          },
          {
            "value": "KY"
          },
          {
            "value": "KZ"
          },
          {
            "value": "LA"
          },
          {
            "value": "LB"
          },
          {
            "value": "LC"
          },
          {
            "value": "LI"
          },
          {
            "value": "LK"
          },
          {
            "value": "LR"
          },
          {
            "value": "LS"
          },
          {
            "value": "LT"
          },
          {
            "value": "LU"
          },
          {
            "value": "LV"
          },
          {
            "value": "LY"
          },
          {
            "value": "MA"
          },
          {
            "value": "MC"
          },
          {
            "value": "MD"
          },
          {
            "value": "ME"
          },
          {
            "value": "MF"
          },
          {
            "value": "MG"
          },
          {
            "value": "MH"
          },
          {
            "value": "MK"
          },
          {
            "value": "ML"
          },
          {
            "value": "MM"
          },
          {
            "value": "MN"
          },
          {
            "value": "MO"
          },
          {
            "value": "MP"
          },
          {
            "value": "MQ"
          },
          {
            "value": "MR"
          },
          {
            "value": "MS"
          },
          {
            "value": "MT"
          },
          {
            "value": "MU"
          },
          {
            "value": "MV"
          },
          {
            "value": "MW"
          },
          {
            "value": "MX"
          },
          {
            "value": "MY"
          },
          {
            "value": "MZ"
          },
          {
            "value": "NA"
          },
          {
            "value": "NC"
          },
          {
            "value": "NE"
          },
          {
            "value": "NF"
          },
          {
            "value": "NG"
          },
          {
            "value": "NI"
          },
          {
            "value": "NL"
          },
          {
            "value": "NO"
          },
          {
            "value": "NP"
          },
          {
            "value": "NR"
          },
          {
            "value": "NU"
          },
          {
            "value": "NZ"
          },
          {
            "value": "OM"
          },
          {
            "value": "PA"
          },
          {
            "value": "PE"
          },
          {
            "value": "PF"
          },
          {
            "value": "PG"
          },
          {
            "value": "PH"
          },
          {
            "value": "PK"
          },
          {
            "value": "PL"
          },
          {
            "value": "PM"
          },
          {
            "value": "PN"
          },
          {
            "value": "PR"
          },
          {
            "value": "PS"
          },
          {
            "value": "PT"
          },
          {
            "value": "PW"
          },
          {
            "value": "PY"
          },
          {
            "value": "QA"
          },
          {
            "value": "RE"
          },
          {
            "value": "RO"
          },
          {
            "value": "RS"
          },
          {
            "value": "RU"
          },
          {
            "value": "RW"
          },
          {
            "value": "SA"
          },
          {
            "value": "SB"
          },
          {
            "value": "SC"
          },
          {
            "value": "SD"
          },
          {
            "value": "SE"
          },
          {
            "value": "SG"
          },
          {
            "value": "SH"
          },
          {
            "value": "SI"
          },
          {
            "value": "SJ"
          },
          {
            "value": "SK"
          },
          {
            "value": "SL"
          },
          {
            "value": "SM"
          },
          {
            "value": "SN"
          },
          {
            "value": "SO"
          },
          {
            "value": "SR"
          },
          {
            "value": "SS"
          },
          {
            "value": "ST"
          },
          {
            "value": "SV"
          },
          {
            "value": "SX"
          },
          {
            "value": "SY"
          },
          {
            "value": "SZ"
          },
          {
            "value": "TC"
          },
          {
            "value": "TD"
          },
          {
            "value": "TG"
          },
          {
            "value": "TH"
          },
          {
            "value": "TJ"
          },
          {
            "value": "TK"
          },
          {
            "value": "TL"
          },
          {
            "value": "TM"
          },
          {
            "value": "TN"
          },
          {
            "value": "TO"
          },
          {
            "value": "TR"
          },
          {
            "value": "TT"
          },
          {
            "value": "TV"
          },
          {
            "value": "TW"
          },
          {
            "value": "TZ"
          },
          {
            "value": "UA"
          },
          {
            "value": "UG"
          },
          {
            "value": "UM"
          },
          {
            "value": "US"
          },
          {
            "value": "UY"
          },
          {
            "value": "UZ"
          },
          {
            "value": "VC"
          },
          {
            "value": "VE"
          },
          {
            "value": "VG"
          },
          {
            "value": "VI"
          },
          {
            "value": "VN"
          },
          {
            "value": "VU"
          },
          {
            "value": "WF"
          },
          {
            "value": "WS"
          },
          {
            "value": "YE"
          },
          {
            "value": "YT"
          },
          {
            "value": "ZA"
          },
          {
            "value": "ZM"
          },
          {
            "value": "ZW"
          }
        ]
      }
    },
    "Currency": {
      "description": "An enumeration.",
      "name": "Currency",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "EUR"
          },
          {
            "value": "AED"
          },
          {
            "value": "AFN"
          },
          {
            "value": "XCD"
          },
          {
            "value": "ALL"
          },
          {
            "value": "AMD"
          },
          {
            "value": "AOA"
          },
          {
            "value": "ARS"
          },
          {
            "value": "USD"
          },
          {
            "value": "AUD"
          },
          {
            "value": "AWG"
          },
          {
            "value": "AZN"
          },
          {
            "value": "BAM"
          },
          {
            "value": "BBD"
          },
          {
            "value": "BDT"
          },
          {
            "value": "XOF"
          },
          {
            "value": "BGN"
          },
          {
            "value": "BHD"
          },
          {
            "value": "BIF"
          },
          {
            "value": "BMD"
          },
          {
            "value": "BND"
          },
          {
            "value": "BOB"
          },
          {
            "value": "BRL"
          },
          {
            "value": "BSD"
          },
          {
            "value": "INR"
          },
          {
            "value": "NOK"
          },
          {
            "value": "BWP"
          },
          {
            "value": "BYR"
          },
          {
            "value": "BZD"
          },
          {
            "value": "CAD"
          },
          {
            "value": "CDF"
          },
          {
            "value": "XAF"
          },
          {
            "value": "CHF"
          },
          {
            "value": "NZD"
          },
          {
            "value": "CLP"
          },
          {
            "value": "CNY"
          },
          {
            "value": "COP"
          },
          {
            "value": "CRC"
          },
          {
            "value": "CUP"
          },
          {
            "value": "CVE"
          },
          {
            "value": "ANG"
          },
          {
            "value": "CZK"
          },
          {
            "value": "DJF"
          },
          {
            "value": "DKK"
          },
          {
            "value": "DOP"
          },
          {
            "value": "DZD"
          },
          {
            "value": "EGP"
          },
          {
            "value": "MAD"
          },
          {
            "value": "ERN"
          },
          {
            "value": "ETB"
          },
          {
            "value": "FJD"
          },
          {
            "value": "FKP"
          },
          {
            "value": "GBP"
          },
          {
            "value": "GEL"
          },
          {
            "value": "GHS"
          },
          {
            "value": "GIP"
          },
          {
            "value": "GMD"
          },
          {
            "value": "GNF"
          },
          {
            "value": "GTQ"
          },
          {
            "value": "GYD"
          },
          {
            "value": "HKD"
          },
          {
            "value": "HNL"
          },
          {
            "value": "HUF"
          },
          {
            "value": "IDR"
          },
          {
            "value": "ILS"
          },
          {
            "value": "IQD"
          },
          {
            "value": "IRR"
          },
          {
            "value": "ISK"
          },
          {
            "value": "JMD"
          },
          {
            "value": "JOD"
          },
          {
            "value": "JPY"
          },
          {
            "value": "KES"
          },
          {
            "value": "KGS"
          },
          {
            "value": "KHR"
          },
          {
            "value": "KMF"
          },
          {
            "value": "KPW"
          },
          {
            "value": "KRW"
          },
          {
            "value": "KWD"
          },
          {
            "value": "KYD"
          },
          {
            "value": "KZT"
          },
          {
            "value": "LAK"
          },
          {
            "value": "LBP"
          },
          {
            "value": "LKR"
          },
          {
            "value": "LRD"
          },
          {
            "value": "ZAR"
          },
          {
            "value": "LYD"
          },
          {
            "value": "MDL"
          },
          {
            "value": "MGA"
          },
          {
            "value": "MKD"
          },
          {
            "value": "MMK"
          },
          {
            "value": "MNT"
          },
          {
            "value": "MOP"
          },
          {
            "value": "MRO"
          },
          {
            "value": "MUR"
          },
          {
            "value": "MVR"
          },
          {
            "value": "MWK"
          },
          {
            "value": "MXN"
          },
          {
            "value": "MYR"
          },
          {
            "value": "MZN"
          },
          {
            "value": "XPF"
          },
          {
            "value": "NGN"
          },
          {
            "value": "NIO"
          },
          {
            "value": "NPR"
          },
          {
            "value": "OMR"
          },
          {
            "value": "PEN"
          },
          {
            "value": "PGK"
          },
          {
            "value": "PHP"
          },
          {
            "value": "PKR"
          },
          {
            "value": "PLN"
          },
          {
            "value": "PYG"
          },
          {
            "value": "QAR"
          },
          {
            "value": "RON"
          },
          {
            "value": "RSD"
          },
          {
            "value": "RUB"
          },
          {
            "value": "RWF"
          },
          {
            "value": "SAR"
          },
          {
            "value": "SBD"
          },
          {
            "value": "SCR"
          },
          {
            "value": "SDG"
          },
          {
            "value": "SEK"
          },
          {
            "value": "SGD"
          },
          {
            "value": "SHP"
          },
          {
            "value": "SLL"
          },
          {
            "value": "SOS"
          },
          {
            "value": "SRD"
          },
          {
            "value": "SSP"
          },
          {
            "value": "STD"
          },
          {
            "value": "SYP"
          },
          {
            "value": "SZL"
          },
          {
            "value": "THB"
          },
          {
            "value": "TJS"
          },
          {
            "value": "TMT"
          },
          {
            "value": "TND"
          },
          {
            "value": "TOP"
          },
          {
            "value": "TRY"
          },
          {
            "value": "TTD"
          },
          {
            "value": "TWD"
          },
          {
            "value": "TZS"
          },
          {
            "value": "UAH"
          },
          {
            "value": "UGX"
          },
          {
            "value": "UYU"
          },
          {
            "value": "UZS"
          },
          {
            "value": "VEF"
          },
          {
            "value": "VND"
          },
          {
            "value": "VUV"
          },
          {
            "value": "WST"
          },
          {
            "value": "YER"
          },
          {
            "value": "ZMW"
          },
          {
            "value": "ZWL"
          },
          {
            "value": "HRK"
          }
        ]
      }
    },
    "CustomCategorySet": {
      "name": "CustomCategorySet",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "incoming",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "outgoing",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "DocumentStatus": {
      "description": "An enumeration.",
      "name": "DocumentStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "queued"
          },
          {
            "value": "processing"
          },
          {
            "value": "processed"
          },
          {
            "value": "failed"
          }
        ]
      }
    },
    "EnrichedTransaction": {
      "name": "EnrichedTransaction",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "entities",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "Entities"
              }
            }
          },
          {
            "key": "categories",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "Categories"
              }
            }
          },
          {
            "key": "location",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "Location"
              }
            }
          },
          {
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TransactionError"
              }
            }
          },
          {
            "description": "The timestamp of when the account holder was created.",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "A unique identifier for the transaction. If two transactions are submitted with the same `id` the most recent one will replace the previous one.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1
              }
            }
          }
        ]
      }
    },
    "EnrichmentResult": {
      "name": "EnrichmentResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A list of enriched transactions resulting from the enrichment of this batch.",
            "key": "transactions",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "EnrichedTransaction"
              }
            }
          }
        ]
      }
    },
    "Entities": {
      "description": "Entities found by identity identification",
      "name": "Entities",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "counterparty",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "Counterparty"
              }
            }
          },
          {
            "key": "intermediaries",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "Intermediary"
                }
              }
            }
          }
        ]
      }
    },
    "Entity": {
      "name": "Entity",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique UUID identifier of the entity",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The name of the entity",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The website URL of the entity",
            "key": "website",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Logo's URL",
            "key": "logo",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A list of [Merchant Category Codes](https://en.wikipedia.org/wiki/Merchant_category_code)",
            "key": "mccs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "EntryType": {
      "description": "An enumeration.",
      "name": "EntryType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "incoming"
          },
          {
            "value": "outgoing"
          }
        ]
      }
    },
    "HTTPValidationError": {
      "name": "HTTPValidationError",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "detail",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ValidationError"
                }
              }
            }
          }
        ]
      }
    },
    "Intermediary": {
      "name": "Intermediary",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique UUID identifier of the entity",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The name of the entity",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The website URL of the entity",
            "key": "website",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Logo's URL",
            "key": "logo",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A list of [Merchant Category Codes](https://en.wikipedia.org/wiki/Merchant_category_code)",
            "key": "mccs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "IntermediaryType"
            }
          }
        ]
      }
    },
    "IntermediaryType": {
      "description": "An enumeration.",
      "name": "IntermediaryType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "delivery_service"
          },
          {
            "value": "payment_processor"
          }
        ]
      }
    },
    "LocationStructured": {
      "name": "LocationStructured",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The street name and number of the location",
            "key": "street",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The city where the location is situated",
            "key": "city",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The state or region of the location",
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The postal code or ZIP code of the location",
            "key": "postcode",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The country code of the location in ISO 3166-2 format",
            "key": "country_code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The full name of the country",
            "key": "country",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The latitude coordinate of the location",
            "key": "latitude",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "The longitude coordinate of the location",
            "key": "longitude",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "A URL link to view the location on Google Maps",
            "key": "google_maps_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A URL link to view the location on Apple Maps",
            "key": "apple_maps_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A unique identifier for a specific store or branch, if applicable",
            "key": "store_number",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "Location": {
      "name": "Location",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "An unstructured string containing the address",
            "key": "raw_address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "When raw is set, a structured representation of it.",
            "key": "structured",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "LocationStructured"
              }
            }
          }
        ]
      }
    },
    "LocationInputCountry": {
      "description": "The country where the transaction was made in ISO 3166-2 format",
      "name": "LocationInputCountry",
      "shape": {
        "type": "object",
        "extends": [
          "Country"
        ],
        "properties": []
      }
    },
    "LocationInput": {
      "description": "Location of where the transaction has taken place. This can greatly improve entity identification, especially\nunder ambiguity.",
      "name": "LocationInput",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "An unstructured string containing the address",
            "key": "raw_address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The country where the transaction was made in ISO 3166-2 format",
            "key": "country",
            "valueType": {
              "type": "id",
              "value": "LocationInputCountry"
            }
          }
        ]
      }
    },
    "PagedResponse_AccountHolderExternal": {
      "name": "PagedResponse_AccountHolderExternal",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "next_cursor",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "AccountHolderExternal"
              }
            }
          }
        ]
      }
    },
    "PagedResponse_BankStatement": {
      "name": "PagedResponse_BankStatement",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "next_cursor",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "BankStatement"
              }
            }
          }
        ]
      }
    },
    "PagedResponse_Batch": {
      "name": "PagedResponse_Batch",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "next_cursor",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Batch"
              }
            }
          }
        ]
      }
    },
    "PagedResponse_Report_": {
      "name": "PagedResponse_Report_",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "next_cursor",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Report"
              }
            }
          }
        ]
      }
    },
    "PagedResponse_Transaction": {
      "name": "PagedResponse_Transaction",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "next_cursor",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Transaction"
              }
            }
          }
        ]
      }
    },
    "PagedResponse_Webhook": {
      "name": "PagedResponse_Webhook",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "next_cursor",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Webhook"
              }
            }
          }
        ]
      }
    },
    "RecurrenceType": {
      "description": "An enumeration.",
      "name": "RecurrenceType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "recurring"
          },
          {
            "value": "subscription"
          },
          {
            "value": "one off"
          }
        ]
      }
    },
    "Recurrence": {
      "description": "The `Recurrence` object represents the recurrence pattern of a transaction. It provides information about\nwhether a transaction is a one-time event or a part of a recurring series.",
      "name": "Recurrence",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Whether the transaction is a one-time transfer `one-off`, regularly with varying pricing `recurring` or with fixed pricing `subscription`",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "RecurrenceType"
            }
          }
        ]
      }
    },
    "RecurrenceGroupPeriodicity": {
      "description": "A human-readable description of the transaction frequency",
      "name": "RecurrenceGroupPeriodicity",
      "shape": {
        "type": "object",
        "extends": [
          "RecurrencePeriodicity"
        ],
        "properties": []
      }
    },
    "RecurrenceGroupCounterparty": {
      "description": "Counterparty of the transactions",
      "name": "RecurrenceGroupCounterparty",
      "shape": {
        "type": "object",
        "extends": [
          "Counterparty"
        ],
        "properties": []
      }
    },
    "RecurrenceGroupCategories": {
      "description": "Categories of the transactions in the recurrence group",
      "name": "RecurrenceGroupCategories",
      "shape": {
        "type": "object",
        "extends": [
          "Categories"
        ],
        "properties": []
      }
    },
    "RecurrenceGroup": {
      "name": "RecurrenceGroup",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A unique UUID identifier for the group",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The date of the oldest transaction in the group",
            "key": "start_date",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date"
              }
            }
          },
          {
            "description": "The date of the most recent transaction in the group",
            "key": "end_date",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date"
              }
            }
          },
          {
            "description": "The sum of all transaction amounts in this group",
            "key": "total_amount",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "The average amount per transaction in this group",
            "key": "average_amount",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "The estimated number of days between transactions in this group",
            "key": "periodicity_in_days",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "A human-readable description of the transaction frequency",
            "key": "periodicity",
            "valueType": {
              "type": "id",
              "value": "RecurrenceGroupPeriodicity"
            }
          },
          {
            "description": "Counterparty of the transactions",
            "key": "counterparty",
            "valueType": {
              "type": "id",
              "value": "RecurrenceGroupCounterparty"
            }
          },
          {
            "description": "Categories of the transactions in the recurrence group",
            "key": "categories",
            "valueType": {
              "type": "id",
              "value": "RecurrenceGroupCategories"
            }
          },
          {
            "description": "Transactions in this recurrence group",
            "key": "transaction_ids",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "RecurrencePeriodicity": {
      "description": "An enumeration.",
      "name": "RecurrencePeriodicity",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "daily"
          },
          {
            "value": "weekly"
          },
          {
            "value": "bi_weekly"
          },
          {
            "value": "monthly"
          },
          {
            "value": "bi_monthly"
          },
          {
            "value": "quarterly"
          },
          {
            "value": "semi_yearly"
          },
          {
            "value": "yearly"
          },
          {
            "value": "other"
          }
        ]
      }
    },
    "ReportStatus": {
      "description": "An enumeration.",
      "name": "ReportStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "open"
          },
          {
            "value": "pending"
          },
          {
            "value": "resolved"
          },
          {
            "value": "rejected"
          }
        ]
      }
    },
    "Report": {
      "name": "Report",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique identifier of the transaction",
            "key": "transaction_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1
              }
            }
          },
          {
            "description": "A description of what is wrong in the transaction",
            "key": "description",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "A list of the fields that are incorrect",
            "key": "fields",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A generated unique identifier for the report.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The date and time when the report was created.",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "The status of the report.\n\n* `open`: a newly created report\n* `pending`: the report is being investigated\n* `rejected`: the original enrichment output was deemed correct or we couldn't resolve it, check `rejection_reason`\n* `resolved`: the issue has been resolved",
            "key": "status",
            "valueType": {
              "type": "id",
              "value": "ReportStatus"
            }
          },
          {
            "description": "An explanation of why the report was rejected",
            "key": "rejection_reason",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ReportBase": {
      "name": "ReportBase",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique identifier of the transaction",
            "key": "transaction_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1
              }
            }
          },
          {
            "description": "A description of what is wrong in the transaction",
            "key": "description",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "A list of the fields that are incorrect",
            "key": "fields",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "StatementInfo": {
      "name": "StatementInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "institution",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "start_date",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date"
                }
              }
            }
          },
          {
            "key": "end_date",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date"
                }
              }
            }
          },
          {
            "key": "account_holder",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AccountHolder"
              }
            }
          },
          {
            "key": "accounts",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "Account"
                }
              }
            }
          }
        ]
      }
    },
    "SyncEnrichmentInput": {
      "name": "SyncEnrichmentInput",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "transactions",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "TransactionInput"
              }
            }
          }
        ]
      }
    },
    "SyncEnrichmentOutput": {
      "name": "SyncEnrichmentOutput",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A list of enriched transactions resulting from the enrichment of this batch.",
            "key": "transactions",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "EnrichedTransaction"
              }
            }
          }
        ]
      }
    },
    "TransactionEntryType": {
      "description": "The direction of the flow of the money from the perspective of the account holder. `outgoing` to represent money leaving the account, such as purchases or fees, while `incoming` represents money entering the account, such as income or refunds.",
      "name": "TransactionEntryType",
      "shape": {
        "type": "object",
        "extends": [
          "EntryType"
        ],
        "properties": []
      }
    },
    "TransactionCurrency": {
      "description": "The currency of the transaction in ISO 4217 format",
      "name": "TransactionCurrency",
      "shape": {
        "type": "object",
        "extends": [
          "Currency"
        ],
        "properties": []
      }
    },
    "Transaction": {
      "name": "Transaction",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A unique identifier of the transaction",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1
              }
            }
          },
          {
            "description": "The description string of the transaction",
            "key": "description",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 0,
                "maxLength": 1024
              }
            }
          },
          {
            "description": "The date that the transaction was posted. Uses ISO 8601 format (YYYY-MM-DD)",
            "key": "date",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date"
              }
            }
          },
          {
            "description": "The amount of the transaction in the `currency`. Must be a positive value. For example, if the `currency` is USD, then it's the amount in dollars.",
            "key": "amount",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "description": "The direction of the flow of the money from the perspective of the account holder. `outgoing` to represent money leaving the account, such as purchases or fees, while `incoming` represents money entering the account, such as income or refunds.",
            "key": "entry_type",
            "valueType": {
              "type": "id",
              "value": "TransactionEntryType"
            }
          },
          {
            "description": "The currency of the transaction in ISO 4217 format",
            "key": "currency",
            "valueType": {
              "type": "id",
              "value": "TransactionCurrency"
            }
          },
          {
            "key": "entities",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "Entities"
              }
            }
          },
          {
            "key": "categories",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "Categories"
              }
            }
          },
          {
            "key": "location",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "Location"
              }
            }
          },
          {
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TransactionError"
              }
            }
          },
          {
            "description": "The timestamp of when the account holder was created.",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "The unique ID of the account holder of the transaction",
            "key": "account_holder_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "minLength": 1
                }
              }
            }
          },
          {
            "key": "recurrence",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "Recurrence"
              }
            }
          }
        ]
      }
    },
    "TransactionError": {
      "name": "TransactionError",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "code",
            "valueType": {
              "type": "id",
              "value": "TransactionErrorCode"
            }
          },
          {
            "key": "message",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "TransactionErrorCode": {
      "description": "An enumeration.",
      "name": "TransactionErrorCode",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "account_holder_not_found"
          },
          {
            "value": "internal_error"
          }
        ]
      }
    },
    "TransactionInputEntryType": {
      "description": "The direction of the flow of the money from the perspective of the account holder. `outgoing` to represent money leaving the account, such as purchases or fees, while `incoming` represents money entering the account, such as income or refunds.",
      "name": "TransactionInputEntryType",
      "shape": {
        "type": "object",
        "extends": [
          "EntryType"
        ],
        "properties": []
      }
    },
    "TransactionInputCurrency": {
      "description": "The currency of the transaction in ISO 4217 format",
      "name": "TransactionInputCurrency",
      "shape": {
        "type": "object",
        "extends": [
          "Currency"
        ],
        "properties": []
      }
    },
    "TransactionInput": {
      "name": "TransactionInput",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A unique identifier of the transaction",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1
              }
            }
          },
          {
            "description": "The description string of the transaction",
            "key": "description",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 0,
                "maxLength": 1024
              }
            }
          },
          {
            "description": "The date that the transaction was posted. Uses ISO 8601 format (YYYY-MM-DD)",
            "key": "date",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date"
              }
            }
          },
          {
            "description": "The amount of the transaction in the `currency`. Must be a positive value. For example, if the `currency` is USD, then it's the amount in dollars.",
            "key": "amount",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "description": "The direction of the flow of the money from the perspective of the account holder. `outgoing` to represent money leaving the account, such as purchases or fees, while `incoming` represents money entering the account, such as income or refunds.",
            "key": "entry_type",
            "valueType": {
              "type": "id",
              "value": "TransactionInputEntryType"
            }
          },
          {
            "description": "The currency of the transaction in ISO 4217 format",
            "key": "currency",
            "valueType": {
              "type": "id",
              "value": "TransactionInputCurrency"
            }
          },
          {
            "description": "The unique ID of the account holder. Unsetting it will disable [categorization](./docs/v3/enrichment/entities).",
            "key": "account_holder_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "location",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "LocationInput"
              }
            }
          }
        ]
      }
    },
    "ValidationErrorLocItemsOneOfZero": {
      "name": "ValidationErrorLocItemsOneOfZero",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "ValidationErrorLocItemsOneOfOne": {
      "name": "ValidationErrorLocItemsOneOfOne",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "integer"
          }
        }
      }
    },
    "ValidationErrorLocItems": {
      "name": "ValidationErrorLocItems",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "ValidationErrorLocItemsOneOfZero",
            "type": {
              "type": "id",
              "value": "ValidationErrorLocItemsOneOfZero"
            }
          },
          {
            "typeName": "ValidationErrorLocItemsOneOfOne",
            "type": {
              "type": "id",
              "value": "ValidationErrorLocItemsOneOfOne"
            }
          }
        ]
      }
    },
    "ValidationError": {
      "name": "ValidationError",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "loc",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "ValidationErrorLocItems"
              }
            }
          },
          {
            "key": "msg",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "WebhookEventsItems": {
      "name": "WebhookEventsItems",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "reports.resolved"
          },
          {
            "value": "reports.rejected"
          },
          {
            "value": "reports.pending"
          },
          {
            "value": "bank_statements.completed"
          },
          {
            "value": "bank_statements.error"
          },
          {
            "value": "batches.completed"
          },
          {
            "value": "batches.error"
          }
        ]
      }
    },
    "Webhook": {
      "name": "Webhook",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The URL of the webhook",
            "key": "url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uri",
                "minLength": 1,
                "maxLength": 1024
              }
            }
          },
          {
            "description": "A list of events that this webhook subscribes to",
            "key": "events",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "WebhookEventsItems"
              }
            }
          },
          {
            "description": "A secret string used to authenticate the webhook. This value will be included in the `X-Ntropy-Token` header when sending requests to the webhook",
            "key": "token",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 128
                }
              }
            }
          },
          {
            "description": "A generated unique identifier for the webhook",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The date and time when the webhook was created.",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Whether the webhook is enabled or not.",
            "key": "enabled",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    },
    "WebhookBaseEventsItems": {
      "name": "WebhookBaseEventsItems",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "reports.resolved"
          },
          {
            "value": "reports.rejected"
          },
          {
            "value": "reports.pending"
          },
          {
            "value": "bank_statements.completed"
          },
          {
            "value": "bank_statements.error"
          },
          {
            "value": "batches.completed"
          },
          {
            "value": "batches.error"
          }
        ]
      }
    },
    "WebhookBase": {
      "name": "WebhookBase",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The URL of the webhook",
            "key": "url",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uri",
                "minLength": 1,
                "maxLength": 1024
              }
            }
          },
          {
            "description": "A list of events that this webhook subscribes to",
            "key": "events",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "WebhookBaseEventsItems"
              }
            }
          },
          {
            "description": "A secret string used to authenticate the webhook. This value will be included in the `X-Ntropy-Token` header when sending requests to the webhook",
            "key": "token",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 128
                }
              }
            }
          }
        ]
      }
    },
    "WebhookPatchEventsItems": {
      "name": "WebhookPatchEventsItems",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "reports.resolved"
          },
          {
            "value": "reports.rejected"
          },
          {
            "value": "reports.pending"
          },
          {
            "value": "bank_statements.completed"
          },
          {
            "value": "bank_statements.error"
          },
          {
            "value": "batches.completed"
          },
          {
            "value": "batches.error"
          }
        ]
      }
    },
    "WebhookPatch": {
      "name": "WebhookPatch",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The URL of the webhook",
            "key": "url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uri",
                  "minLength": 1,
                  "maxLength": 1024
                }
              }
            }
          },
          {
            "description": "A list of events that this webhook subscribes to",
            "key": "events",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "WebhookPatchEventsItems"
                }
              }
            }
          },
          {
            "description": "A secret string used to authenticate the webhook. This value will be included in the `X-Ntropy-Token` header when sending requests to the webhook",
            "key": "token",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 128
                }
              }
            }
          },
          {
            "description": "Whether the webhook is enabled or not.",
            "key": "enabled",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "ExprOneOfZero": {
      "name": "ExprOneOfZero",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "boolean"
          }
        }
      }
    },
    "ExprOneOfOne": {
      "name": "ExprOneOfOne",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "ExprOneOfTwo": {
      "name": "ExprOneOfTwo",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "double"
          }
        }
      }
    },
    "Expr": {
      "name": "Expr",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "ExprOneOfZero",
            "type": {
              "type": "id",
              "value": "ExprOneOfZero"
            }
          },
          {
            "typeName": "ExprOneOfOne",
            "type": {
              "type": "id",
              "value": "ExprOneOfOne"
            }
          },
          {
            "typeName": "ExprOneOfTwo",
            "type": {
              "type": "id",
              "value": "ExprOneOfTwo"
            }
          },
          {
            "typeName": "FnCall",
            "type": {
              "type": "id",
              "value": "FnCall"
            }
          }
        ]
      }
    },
    "TxProp": {
      "name": "TxProp",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "logo"
          },
          {
            "value": "website"
          },
          {
            "value": "merchant"
          },
          {
            "value": "description"
          },
          {
            "value": "merchant_id"
          },
          {
            "value": "location"
          },
          {
            "value": "person"
          },
          {
            "value": "transaction_type"
          },
          {
            "value": "amount"
          },
          {
            "value": "entry_type"
          },
          {
            "value": "account_holder_type"
          },
          {
            "value": "account_holder_id"
          },
          {
            "value": "account_holder_name"
          }
        ]
      }
    },
    "FnCallOneOfZero": {
      "name": "FnCallOneOfZero",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "&&",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Expr"
              }
            }
          }
        ]
      }
    },
    "FnCallOneOfOne": {
      "name": "FnCallOneOfOne",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "||",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Expr"
              }
            }
          }
        ]
      }
    },
    "FnCallOneOfTwo": {
      "name": "FnCallOneOfTwo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "==",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Expr"
              }
            }
          }
        ]
      }
    },
    "FnCallOneOfThree": {
      "name": "FnCallOneOfThree",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "+",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Expr"
              }
            }
          }
        ]
      }
    },
    "FnCallOneOfFour": {
      "name": "FnCallOneOfFour",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "-",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Expr"
              }
            }
          }
        ]
      }
    },
    "FnCallOneOfFive": {
      "name": "FnCallOneOfFive",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "*",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Expr"
              }
            }
          }
        ]
      }
    },
    "FnCallOneOfSix": {
      "name": "FnCallOneOfSix",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "/",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Expr"
              }
            }
          }
        ]
      }
    },
    "FnCallOneOfSeven": {
      "name": "FnCallOneOfSeven",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "//",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Expr"
              }
            }
          }
        ]
      }
    },
    "FnCallOneOfEight": {
      "name": "FnCallOneOfEight",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "<",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Expr"
              }
            }
          }
        ]
      }
    },
    "FnCallOneOfNine": {
      "name": "FnCallOneOfNine",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "<=",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Expr"
              }
            }
          }
        ]
      }
    },
    "FnCallOneOfTen": {
      "name": "FnCallOneOfTen",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": ">",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Expr"
              }
            }
          }
        ]
      }
    },
    "FnCallOneOfEleven": {
      "name": "FnCallOneOfEleven",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": ">=",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Expr"
              }
            }
          }
        ]
      }
    },
    "FnCallOneOfTwelve": {
      "name": "FnCallOneOfTwelve",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "!",
            "valueType": {
              "type": "id",
              "value": "Expr"
            }
          }
        ]
      }
    },
    "FnCallOneOfThirteen": {
      "name": "FnCallOneOfThirteen",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "is_substring",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Expr"
              }
            }
          }
        ]
      }
    },
    "FnCallOneOfFourteen": {
      "name": "FnCallOneOfFourteen",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "starts_with",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Expr"
              }
            }
          }
        ]
      }
    },
    "FnCallOneOfFifteen": {
      "name": "FnCallOneOfFifteen",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "ends_with",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Expr"
              }
            }
          }
        ]
      }
    },
    "FnCallOneOfSixteen": {
      "name": "FnCallOneOfSixteen",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "to_lower",
            "valueType": {
              "type": "id",
              "value": "Expr"
            }
          }
        ]
      }
    },
    "FnCallOneOfSeventeen": {
      "name": "FnCallOneOfSeventeen",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "to_upper",
            "valueType": {
              "type": "id",
              "value": "Expr"
            }
          }
        ]
      }
    },
    "FnCallOneOfEighteen": {
      "name": "FnCallOneOfEighteen",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "has_label",
            "valueType": {
              "type": "id",
              "value": "Expr"
            }
          }
        ]
      }
    },
    "FnCallOneOfNineteen": {
      "name": "FnCallOneOfNineteen",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "has_mcc",
            "valueType": {
              "type": "id",
              "value": "Expr"
            }
          }
        ]
      }
    },
    "FnCallOneOfTwenty": {
      "name": "FnCallOneOfTwenty",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "get",
            "valueType": {
              "type": "id",
              "value": "TxProp"
            }
          }
        ]
      }
    },
    "FnCall": {
      "name": "FnCall",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "FnCallOneOfZero",
            "type": {
              "type": "id",
              "value": "FnCallOneOfZero"
            }
          },
          {
            "typeName": "FnCallOneOfOne",
            "type": {
              "type": "id",
              "value": "FnCallOneOfOne"
            }
          },
          {
            "typeName": "FnCallOneOfTwo",
            "type": {
              "type": "id",
              "value": "FnCallOneOfTwo"
            }
          },
          {
            "typeName": "FnCallOneOfThree",
            "type": {
              "type": "id",
              "value": "FnCallOneOfThree"
            }
          },
          {
            "typeName": "FnCallOneOfFour",
            "type": {
              "type": "id",
              "value": "FnCallOneOfFour"
            }
          },
          {
            "typeName": "FnCallOneOfFive",
            "type": {
              "type": "id",
              "value": "FnCallOneOfFive"
            }
          },
          {
            "typeName": "FnCallOneOfSix",
            "type": {
              "type": "id",
              "value": "FnCallOneOfSix"
            }
          },
          {
            "typeName": "FnCallOneOfSeven",
            "type": {
              "type": "id",
              "value": "FnCallOneOfSeven"
            }
          },
          {
            "typeName": "FnCallOneOfEight",
            "type": {
              "type": "id",
              "value": "FnCallOneOfEight"
            }
          },
          {
            "typeName": "FnCallOneOfNine",
            "type": {
              "type": "id",
              "value": "FnCallOneOfNine"
            }
          },
          {
            "typeName": "FnCallOneOfTen",
            "type": {
              "type": "id",
              "value": "FnCallOneOfTen"
            }
          },
          {
            "typeName": "FnCallOneOfEleven",
            "type": {
              "type": "id",
              "value": "FnCallOneOfEleven"
            }
          },
          {
            "typeName": "FnCallOneOfTwelve",
            "type": {
              "type": "id",
              "value": "FnCallOneOfTwelve"
            }
          },
          {
            "typeName": "FnCallOneOfThirteen",
            "type": {
              "type": "id",
              "value": "FnCallOneOfThirteen"
            }
          },
          {
            "typeName": "FnCallOneOfFourteen",
            "type": {
              "type": "id",
              "value": "FnCallOneOfFourteen"
            }
          },
          {
            "typeName": "FnCallOneOfFifteen",
            "type": {
              "type": "id",
              "value": "FnCallOneOfFifteen"
            }
          },
          {
            "typeName": "FnCallOneOfSixteen",
            "type": {
              "type": "id",
              "value": "FnCallOneOfSixteen"
            }
          },
          {
            "typeName": "FnCallOneOfSeventeen",
            "type": {
              "type": "id",
              "value": "FnCallOneOfSeventeen"
            }
          },
          {
            "typeName": "FnCallOneOfEighteen",
            "type": {
              "type": "id",
              "value": "FnCallOneOfEighteen"
            }
          },
          {
            "typeName": "FnCallOneOfNineteen",
            "type": {
              "type": "id",
              "value": "FnCallOneOfNineteen"
            }
          },
          {
            "typeName": "FnCallOneOfTwenty",
            "type": {
              "type": "id",
              "value": "FnCallOneOfTwenty"
            }
          }
        ]
      }
    },
    "Action": {
      "name": "Action",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "If",
            "type": {
              "type": "id",
              "value": "If"
            }
          },
          {
            "typeName": "ModifyLabels",
            "type": {
              "type": "id",
              "value": "ModifyLabels"
            }
          },
          {
            "typeName": "Setter",
            "type": {
              "type": "id",
              "value": "Setter"
            }
          }
        ]
      }
    },
    "If": {
      "name": "If",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "if",
            "valueType": {
              "type": "id",
              "value": "Expr"
            }
          },
          {
            "key": "then",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "Action"
                }
              }
            }
          },
          {
            "key": "else",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "Action"
                }
              }
            }
          }
        ]
      }
    },
    "ModifyLabelsOneOfZero": {
      "name": "ModifyLabelsOneOfZero",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "add_label",
            "valueType": {
              "type": "id",
              "value": "Expr"
            }
          }
        ]
      }
    },
    "ModifyLabelsOneOfOne": {
      "name": "ModifyLabelsOneOfOne",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "remove_label",
            "valueType": {
              "type": "id",
              "value": "Expr"
            }
          }
        ]
      }
    },
    "ModifyLabelsOneOfTwo": {
      "name": "ModifyLabelsOneOfTwo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "set_labels",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Expr"
              }
            }
          }
        ]
      }
    },
    "ModifyLabelsOneOfThree": {
      "name": "ModifyLabelsOneOfThree",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "add_mcc",
            "valueType": {
              "type": "id",
              "value": "Expr"
            }
          }
        ]
      }
    },
    "ModifyLabelsOneOfFour": {
      "name": "ModifyLabelsOneOfFour",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "remove_mcc",
            "valueType": {
              "type": "id",
              "value": "Expr"
            }
          }
        ]
      }
    },
    "ModifyLabelsOneOfFive": {
      "name": "ModifyLabelsOneOfFive",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "set_mcc",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Expr"
              }
            }
          }
        ]
      }
    },
    "ModifyLabels": {
      "name": "ModifyLabels",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "ModifyLabelsOneOfZero",
            "type": {
              "type": "id",
              "value": "ModifyLabelsOneOfZero"
            }
          },
          {
            "typeName": "ModifyLabelsOneOfOne",
            "type": {
              "type": "id",
              "value": "ModifyLabelsOneOfOne"
            }
          },
          {
            "typeName": "ModifyLabelsOneOfTwo",
            "type": {
              "type": "id",
              "value": "ModifyLabelsOneOfTwo"
            }
          },
          {
            "typeName": "ModifyLabelsOneOfThree",
            "type": {
              "type": "id",
              "value": "ModifyLabelsOneOfThree"
            }
          },
          {
            "typeName": "ModifyLabelsOneOfFour",
            "type": {
              "type": "id",
              "value": "ModifyLabelsOneOfFour"
            }
          },
          {
            "typeName": "ModifyLabelsOneOfFive",
            "type": {
              "type": "id",
              "value": "ModifyLabelsOneOfFive"
            }
          }
        ]
      }
    },
    "EditableTxProp": {
      "name": "EditableTxProp",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "logo"
          },
          {
            "value": "website"
          },
          {
            "value": "merchant"
          },
          {
            "value": "merchant_id"
          },
          {
            "value": "location"
          },
          {
            "value": "person"
          },
          {
            "value": "transaction_type"
          }
        ]
      }
    },
    "Setter": {
      "name": "Setter",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "set",
            "valueType": {
              "type": "id",
              "value": "EditableTxProp"
            }
          },
          {
            "key": "to",
            "valueType": {
              "type": "id",
              "value": "Expr"
            }
          }
        ]
      }
    },
    "personalization": {
      "name": "personalization",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "Action"
          }
        }
      }
    },
    "V3BatchesGetParametersSchema": {
      "description": "If specified, only return batches with this status",
      "name": "V3BatchesGetParametersSchema",
      "shape": {
        "type": "object",
        "extends": [
          "BatchStatus"
        ],
        "properties": []
      }
    },
    "V3BankStatementsGetParametersSchema": {
      "description": "If specified, only return bank statements with this status",
      "name": "V3BankStatementsGetParametersSchema",
      "shape": {
        "type": "object",
        "extends": [
          "DocumentStatus"
        ],
        "properties": []
      }
    },
    "V3ReportsGetParametersSchema": {
      "description": "If specified, only return reports with this status",
      "name": "V3ReportsGetParametersSchema",
      "shape": {
        "type": "object",
        "extends": [
          "ReportStatus"
        ],
        "properties": []
      }
    }
  },
  "subpackages": {
    "Transactions": {
      "subpackageId": "Transactions",
      "name": "Transactions",
      "endpoints": [
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "get_transaction_v3_transactions__id__get",
          "originalEndpointId": "Transactions.get_transaction_v3_transactions__id__get",
          "name": "Retrieve a transaction",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/transactions/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Transaction"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/transactions/",
              "pathParameters": {
                "id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "xbx8YP14g565Xk",
                  "description": "SQ* STARBUCKS NW 43RD",
                  "date": "2024-03-30",
                  "amount": 10,
                  "entry_type": "outgoing",
                  "currency": "USD",
                  "entities": {
                    "counterparty": {
                      "id": "d4bc3c80-ec1a-3da2-836e-2a4ca4758be5",
                      "name": "Starbucks",
                      "website": "starbucks.com",
                      "logo": "https://logos.ntropy.com/starbucks.com",
                      "mccs": [
                        5814
                      ],
                      "type": "organization"
                    },
                    "intermediaries": [
                      {
                        "id": "916bc837-55ef-3106-88f6-5a8269ca9f2a",
                        "name": "Square",
                        "website": "squareup.com",
                        "logo": "https://logos.ntropy.com/squareup.com",
                        "mccs": [],
                        "type": "payment_processor"
                      }
                    ]
                  },
                  "categories": {
                    "general": "outgoing - coffee shops"
                  },
                  "location": {
                    "raw_address": "Nw 43rd Street 5480, Gainesville, Florida 32653, US",
                    "structured": {
                      "street": "Nw 43rd Street 5480",
                      "city": "Gainesville",
                      "state": "Florida",
                      "postcode": "32653",
                      "country_code": "US",
                      "country": "United States",
                      "latitude": 29.704558,
                      "longitude": -82.389277,
                      "google_maps_url": "https://www.google.com/maps/search/?api=1&query=29.704558,-82.389277",
                      "apple_maps_url": "https://maps.apple.com/?q=29.704558,-82.389277"
                    }
                  },
                  "created_at": "2024-03-30T00:00:00",
                  "account_holder_id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                  "recurrence": {
                    "type": "recurring"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "xbx8YP14g565Xk",
                  "description": "SQ* STARBUCKS NW 43RD",
                  "date": "2024-03-30",
                  "amount": 10,
                  "entry_type": "outgoing",
                  "currency": "USD",
                  "entities": {
                    "counterparty": {
                      "id": "d4bc3c80-ec1a-3da2-836e-2a4ca4758be5",
                      "name": "Starbucks",
                      "website": "starbucks.com",
                      "logo": "https://logos.ntropy.com/starbucks.com",
                      "mccs": [
                        5814
                      ],
                      "type": "organization"
                    },
                    "intermediaries": [
                      {
                        "id": "916bc837-55ef-3106-88f6-5a8269ca9f2a",
                        "name": "Square",
                        "website": "squareup.com",
                        "logo": "https://logos.ntropy.com/squareup.com",
                        "mccs": [],
                        "type": "payment_processor"
                      }
                    ]
                  },
                  "categories": {
                    "general": "outgoing - coffee shops"
                  },
                  "location": {
                    "raw_address": "Nw 43rd Street 5480, Gainesville, Florida 32653, US",
                    "structured": {
                      "street": "Nw 43rd Street 5480",
                      "city": "Gainesville",
                      "state": "Florida",
                      "postcode": "32653",
                      "country_code": "US",
                      "country": "United States",
                      "latitude": 29.704558,
                      "longitude": -82.389277,
                      "google_maps_url": "https://www.google.com/maps/search/?api=1&query=29.704558,-82.389277",
                      "apple_maps_url": "https://maps.apple.com/?q=29.704558,-82.389277"
                    }
                  },
                  "created_at": "2024-03-30T00:00:00",
                  "account_holder_id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                  "recurrence": {
                    "type": "recurring"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deleting a transaction will also delete it from our systems. This operation is permanent.",
          "method": "DELETE",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "delete_transaction_v3_transactions__id__delete",
          "originalEndpointId": "Transactions.delete_transaction_v3_transactions__id__delete",
          "name": "Deletes a transaction",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/transactions/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/transactions/",
              "pathParameters": {
                "id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Return a list of enriched transactions starting with the most recent one.",
          "method": "GET",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "list_transactions_v3_transactions_get",
          "originalEndpointId": "Transactions.list_transactions_v3_transactions_get",
          "name": "List all transactions",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/transactions"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Only return transactions older or equal than this date",
              "key": "created_after",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "Only return transactions newer than this date",
              "key": "created_before",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "Starting point for the set of transactions",
              "key": "cursor",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "The limit of transactions to be returned",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 500,
                    "default": 25
                  }
                }
              }
            },
            {
              "description": "If specified, only return the transactions of this account holder",
              "key": "account_holder_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "PagedResponse_Transaction"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/transactions",
              "pathParameters": {},
              "queryParameters": {
                "created_after": "foo",
                "created_before": "foo",
                "cursor": "foo",
                "limit": 42,
                "account_holder_id": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "next_cursor": "XjdHaksD",
                  "data": [
                    {
                      "id": "xbx8YP14g565Xk",
                      "description": "SQ* STARBUCKS NW 43RD",
                      "date": "2024-03-30",
                      "amount": 10,
                      "entry_type": "outgoing",
                      "currency": "USD",
                      "entities": {
                        "counterparty": {
                          "id": "d4bc3c80-ec1a-3da2-836e-2a4ca4758be5",
                          "name": "Starbucks",
                          "website": "starbucks.com",
                          "logo": "https://logos.ntropy.com/starbucks.com",
                          "mccs": [
                            5814
                          ],
                          "type": "organization"
                        },
                        "intermediaries": [
                          {
                            "id": "916bc837-55ef-3106-88f6-5a8269ca9f2a",
                            "name": "Square",
                            "website": "squareup.com",
                            "logo": "https://logos.ntropy.com/squareup.com",
                            "mccs": [],
                            "type": "payment_processor"
                          }
                        ]
                      },
                      "categories": {
                        "general": "outgoing - coffee shops"
                      },
                      "location": {
                        "raw_address": "Nw 43rd Street 5480, Gainesville, Florida 32653, US",
                        "structured": {
                          "street": "Nw 43rd Street 5480",
                          "city": "Gainesville",
                          "state": "Florida",
                          "postcode": "32653",
                          "country_code": "US",
                          "country": "United States",
                          "latitude": 29.704558,
                          "longitude": -82.389277,
                          "google_maps_url": "https://www.google.com/maps/search/?api=1&query=29.704558,-82.389277",
                          "apple_maps_url": "https://maps.apple.com/?q=29.704558,-82.389277"
                        }
                      },
                      "created_at": "2024-03-30T00:00:00",
                      "account_holder_id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                      "recurrence": {
                        "type": "recurring"
                      }
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "next_cursor": "XjdHaksD",
                  "data": [
                    {
                      "id": "xbx8YP14g565Xk",
                      "description": "SQ* STARBUCKS NW 43RD",
                      "date": "2024-03-30",
                      "amount": 10,
                      "entry_type": "outgoing",
                      "currency": "USD",
                      "entities": {
                        "counterparty": {
                          "id": "d4bc3c80-ec1a-3da2-836e-2a4ca4758be5",
                          "name": "Starbucks",
                          "website": "starbucks.com",
                          "logo": "https://logos.ntropy.com/starbucks.com",
                          "mccs": [
                            5814
                          ],
                          "type": "organization"
                        },
                        "intermediaries": [
                          {
                            "id": "916bc837-55ef-3106-88f6-5a8269ca9f2a",
                            "name": "Square",
                            "website": "squareup.com",
                            "logo": "https://logos.ntropy.com/squareup.com",
                            "mccs": [],
                            "type": "payment_processor"
                          }
                        ]
                      },
                      "categories": {
                        "general": "outgoing - coffee shops"
                      },
                      "location": {
                        "raw_address": "Nw 43rd Street 5480, Gainesville, Florida 32653, US",
                        "structured": {
                          "street": "Nw 43rd Street 5480",
                          "city": "Gainesville",
                          "state": "Florida",
                          "postcode": "32653",
                          "country_code": "US",
                          "country": "United States",
                          "latitude": 29.704558,
                          "longitude": -82.389277,
                          "google_maps_url": "https://www.google.com/maps/search/?api=1&query=29.704558,-82.389277",
                          "apple_maps_url": "https://maps.apple.com/?q=29.704558,-82.389277"
                        }
                      },
                      "created_at": "2024-03-30T00:00:00",
                      "account_holder_id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                      "recurrence": {
                        "type": "recurring"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Enriches a list of transactions in synchronous fashion. The enriched transactions returned in\nthe order that they were submitted. Webhook events are not triggered for this operation. \n\nThis endpoint supports up to 1000 transactions. \n\nIf you want more throughput and live updates refer to the \n[async enrichment endpoint](../batches/post-batch).",
          "method": "POST",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "post_transactions_v3_transactions_post",
          "originalEndpointId": "Transactions.post_transactions_v3_transactions_post",
          "name": "Synchronously enrich transactions",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/transactions"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "SyncEnrichmentInput"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "SyncEnrichmentOutput"
              }
            },
            "statusCode": 200,
            "description": "Enriched transactions."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/transactions",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "transactions": [
                  {
                    "id": "foo",
                    "description": "foo",
                    "date": "foo",
                    "amount": 42,
                    "entry_type": "incoming",
                    "currency": "EUR",
                    "account_holder_id": "foo"
                  }
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "transactions": [
                    {
                      "id": "foo",
                      "description": "foo",
                      "date": "foo",
                      "amount": 42,
                      "entry_type": "incoming",
                      "currency": "EUR",
                      "account_holder_id": "foo"
                    }
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "transactions": [
                    {
                      "created_at": "foo",
                      "id": "foo"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "transactions": [
                    {
                      "created_at": "foo",
                      "id": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Changes the account holder associated with the transaction. The old and new account holder must share the same categories",
          "method": "POST",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "set_transaction_ah_v3_transactions__id__assign_post",
          "originalEndpointId": "Transactions.set_transaction_ah_v3_transactions__id__assign_post",
          "name": "Assign a transaction to an account holder",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/transactions/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/assign"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "Body_set_transaction_ah_v3_transactions__id__assign_post"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Transaction"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/transactions/",
              "pathParameters": {
                "id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "account_holder_id": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "account_holder_id": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "xbx8YP14g565Xk",
                  "description": "SQ* STARBUCKS NW 43RD",
                  "date": "2024-03-30",
                  "amount": 10,
                  "entry_type": "outgoing",
                  "currency": "USD",
                  "entities": {
                    "counterparty": {
                      "id": "d4bc3c80-ec1a-3da2-836e-2a4ca4758be5",
                      "name": "Starbucks",
                      "website": "starbucks.com",
                      "logo": "https://logos.ntropy.com/starbucks.com",
                      "mccs": [
                        5814
                      ],
                      "type": "organization"
                    },
                    "intermediaries": [
                      {
                        "id": "916bc837-55ef-3106-88f6-5a8269ca9f2a",
                        "name": "Square",
                        "website": "squareup.com",
                        "logo": "https://logos.ntropy.com/squareup.com",
                        "mccs": [],
                        "type": "payment_processor"
                      }
                    ]
                  },
                  "categories": {
                    "general": "outgoing - coffee shops"
                  },
                  "location": {
                    "raw_address": "Nw 43rd Street 5480, Gainesville, Florida 32653, US",
                    "structured": {
                      "street": "Nw 43rd Street 5480",
                      "city": "Gainesville",
                      "state": "Florida",
                      "postcode": "32653",
                      "country_code": "US",
                      "country": "United States",
                      "latitude": 29.704558,
                      "longitude": -82.389277,
                      "google_maps_url": "https://www.google.com/maps/search/?api=1&query=29.704558,-82.389277",
                      "apple_maps_url": "https://maps.apple.com/?q=29.704558,-82.389277"
                    }
                  },
                  "created_at": "2024-03-30T00:00:00",
                  "account_holder_id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                  "recurrence": {
                    "type": "recurring"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "xbx8YP14g565Xk",
                  "description": "SQ* STARBUCKS NW 43RD",
                  "date": "2024-03-30",
                  "amount": 10,
                  "entry_type": "outgoing",
                  "currency": "USD",
                  "entities": {
                    "counterparty": {
                      "id": "d4bc3c80-ec1a-3da2-836e-2a4ca4758be5",
                      "name": "Starbucks",
                      "website": "starbucks.com",
                      "logo": "https://logos.ntropy.com/starbucks.com",
                      "mccs": [
                        5814
                      ],
                      "type": "organization"
                    },
                    "intermediaries": [
                      {
                        "id": "916bc837-55ef-3106-88f6-5a8269ca9f2a",
                        "name": "Square",
                        "website": "squareup.com",
                        "logo": "https://logos.ntropy.com/squareup.com",
                        "mccs": [],
                        "type": "payment_processor"
                      }
                    ]
                  },
                  "categories": {
                    "general": "outgoing - coffee shops"
                  },
                  "location": {
                    "raw_address": "Nw 43rd Street 5480, Gainesville, Florida 32653, US",
                    "structured": {
                      "street": "Nw 43rd Street 5480",
                      "city": "Gainesville",
                      "state": "Florida",
                      "postcode": "32653",
                      "country_code": "US",
                      "country": "United States",
                      "latitude": 29.704558,
                      "longitude": -82.389277,
                      "google_maps_url": "https://www.google.com/maps/search/?api=1&query=29.704558,-82.389277",
                      "apple_maps_url": "https://maps.apple.com/?q=29.704558,-82.389277"
                    }
                  },
                  "created_at": "2024-03-30T00:00:00",
                  "account_holder_id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                  "recurrence": {
                    "type": "recurring"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "Batches": {
      "subpackageId": "Batches",
      "name": "Batches",
      "endpoints": [
        {
          "auth": true,
          "description": "Returns a list of submitted batches starting with the most recent one.",
          "method": "GET",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "get_batches_v3_batches_get",
          "originalEndpointId": "Batches.get_batches_v3_batches_get",
          "name": "List all batches",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/batches"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Only return batches older or equal than this date",
              "key": "created_after",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "Only return batches newer than this date",
              "key": "created_before",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "Starting point for the set of batches",
              "key": "cursor",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "The limit of batches to be returned",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 50,
                    "default": 10
                  }
                }
              }
            },
            {
              "description": "If specified, only return batches with this status",
              "key": "status",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V3BatchesGetParametersSchema"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "PagedResponse_Batch"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/batches",
              "pathParameters": {},
              "queryParameters": {
                "created_after": "foo",
                "created_before": "foo",
                "cursor": "foo",
                "limit": 42,
                "status": "processing"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "next_cursor": "XjdHaksD",
                  "data": [
                    {
                      "id": "203613d2-83c8-4130-8809-d14206eeec20",
                      "status": "processing",
                      "created_at": "2024-01-01T00:00:00",
                      "updated_at": "2024-01-01T00:00:30",
                      "progress": 0,
                      "total": 4000
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "next_cursor": "XjdHaksD",
                  "data": [
                    {
                      "id": "203613d2-83c8-4130-8809-d14206eeec20",
                      "status": "processing",
                      "created_at": "2024-01-01T00:00:00",
                      "updated_at": "2024-01-01T00:00:30",
                      "progress": 0,
                      "total": 4000
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Creates a batch of transactions and enriches it in an asynchronous fashion. A batch, representing the status of the \nenrichment progress is returned as a result of the submission. \n\nIn order to be notified on the status of the batch, you can setup [webhooks](../../../webhooks) and receive \nthe respective notifications. Alternatively, you can \n[poll](../../../enrichment/introduction/#viewing-the-progress-of-a-batch) for the status of the batch using its id.\n\nThis endpoints supports up to 24960 transactions.",
          "method": "POST",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "post_batch_v3_batches_post",
          "originalEndpointId": "Batches.post_batch_v3_batches_post",
          "name": "Submit a batch of transactions",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/batches"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "AsyncEnrichmentInput"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Batch"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/batches",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "transactions": [
                  {
                    "id": "foo",
                    "description": "foo",
                    "date": "foo",
                    "amount": 42,
                    "entry_type": "incoming",
                    "currency": "EUR",
                    "account_holder_id": "foo"
                  }
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "transactions": [
                    {
                      "id": "foo",
                      "description": "foo",
                      "date": "foo",
                      "amount": 42,
                      "entry_type": "incoming",
                      "currency": "EUR",
                      "account_holder_id": "foo"
                    }
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "203613d2-83c8-4130-8809-d14206eeec20",
                  "status": "processing",
                  "created_at": "2024-01-01T00:00:00",
                  "updated_at": "2024-01-01T00:00:30",
                  "progress": 0,
                  "total": 4000
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "203613d2-83c8-4130-8809-d14206eeec20",
                  "status": "processing",
                  "created_at": "2024-01-01T00:00:00",
                  "updated_at": "2024-01-01T00:00:30",
                  "progress": 0,
                  "total": 4000
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "get_single_batch_v3_batches__id__get",
          "originalEndpointId": "Batches.get_single_batch_v3_batches__id__get",
          "name": "Retrieve a batch",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/batches/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Batch"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/batches/",
              "pathParameters": {
                "id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "203613d2-83c8-4130-8809-d14206eeec20",
                  "status": "processing",
                  "created_at": "2024-01-01T00:00:00",
                  "updated_at": "2024-01-01T00:00:30",
                  "progress": 0,
                  "total": 4000
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "203613d2-83c8-4130-8809-d14206eeec20",
                  "status": "processing",
                  "created_at": "2024-01-01T00:00:00",
                  "updated_at": "2024-01-01T00:00:30",
                  "progress": 0,
                  "total": 4000
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Returns the results of the enrichment request. The resulting enriched transactions are returned in the same order they were submitted. Results are available after the batch has finished processing.",
          "method": "GET",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "get_batch_results_v3_batches__id__results_get",
          "originalEndpointId": "Batches.get_batch_results_v3_batches__id__results_get",
          "name": "Retrieve the results of a batch",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/batches/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/results"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BatchResult"
              }
            },
            "statusCode": 200,
            "description": "Returned batch of transaction enrichment results."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/batches/",
              "pathParameters": {
                "id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "total": 42,
                  "status": "processing",
                  "results": {
                    "transactions": [
                      {
                        "created_at": "foo",
                        "id": "foo"
                      }
                    ]
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "total": 42,
                  "status": "processing",
                  "results": {
                    "transactions": [
                      {
                        "created_at": "foo",
                        "id": "foo"
                      }
                    ]
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "Bank statements": {
      "subpackageId": "Bank statements",
      "name": "Bank statements",
      "endpoints": [
        {
          "auth": true,
          "description": "Return a list of submitted bank statements starting with the most recent one.",
          "method": "GET",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "get_bank_statements_v3_bank_statements_get",
          "originalEndpointId": "Bank statements.get_bank_statements_v3_bank_statements_get",
          "name": "List all bank statements",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/bank_statements"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Only return bank statements older or equal than this date",
              "key": "created_after",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "Only return bank statements newer than this date",
              "key": "created_before",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "Starting point for the set of bank statements",
              "key": "cursor",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "The limit of bank statements to be returned",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 50,
                    "default": 10
                  }
                }
              }
            },
            {
              "description": "If specified, only return bank statements with this status",
              "key": "status",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V3BankStatementsGetParametersSchema"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "PagedResponse_BankStatement"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/bank_statements",
              "pathParameters": {},
              "queryParameters": {
                "created_after": "foo",
                "created_before": "foo",
                "cursor": "foo",
                "limit": 42,
                "status": "queued"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "next_cursor": "XjdHaksD",
                  "data": [
                    {
                      "id": "7f8dceac-2848-472d-b5c3-55cdbaf35a9b",
                      "name": "2014-01-01_2014-02-01_statement.pdf",
                      "status": "processing",
                      "created_at": "2024-01-01T00:00:00",
                      "file": {
                        "no_pages": 1,
                        "size": 4096
                      }
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "next_cursor": "XjdHaksD",
                  "data": [
                    {
                      "id": "7f8dceac-2848-472d-b5c3-55cdbaf35a9b",
                      "name": "2014-01-01_2014-02-01_statement.pdf",
                      "status": "processing",
                      "created_at": "2024-01-01T00:00:00",
                      "file": {
                        "no_pages": 1,
                        "size": 4096
                      }
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Upload a PDF file and queue it for extraction.",
          "method": "POST",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "post_bank_statement_v3_bank_statements_post",
          "originalEndpointId": "Bank statements.post_bank_statement_v3_bank_statements_post",
          "name": "Submit a bank statement PDF",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/bank_statements"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BankStatement"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/bank_statements",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "7f8dceac-2848-472d-b5c3-55cdbaf35a9b",
                  "name": "2014-01-01_2014-02-01_statement.pdf",
                  "status": "processing",
                  "created_at": "2024-01-01T00:00:00",
                  "file": {
                    "no_pages": 1,
                    "size": 4096
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "7f8dceac-2848-472d-b5c3-55cdbaf35a9b",
                  "name": "2014-01-01_2014-02-01_statement.pdf",
                  "status": "processing",
                  "created_at": "2024-01-01T00:00:00",
                  "file": {
                    "no_pages": 1,
                    "size": 4096
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "get_bank_statement_v3_bank_statements__id__get",
          "originalEndpointId": "Bank statements.get_bank_statement_v3_bank_statements__id__get",
          "name": "Retrieve a bank statement",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/bank_statements/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BankStatement"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/bank_statements/",
              "pathParameters": {
                "id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "7f8dceac-2848-472d-b5c3-55cdbaf35a9b",
                  "name": "2014-01-01_2014-02-01_statement.pdf",
                  "status": "processing",
                  "created_at": "2024-01-01T00:00:00",
                  "file": {
                    "no_pages": 1,
                    "size": 4096
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "7f8dceac-2848-472d-b5c3-55cdbaf35a9b",
                  "name": "2014-01-01_2014-02-01_statement.pdf",
                  "status": "processing",
                  "created_at": "2024-01-01T00:00:00",
                  "file": {
                    "no_pages": 1,
                    "size": 4096
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "DELETE",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "delete_bank_statement_v3_bank_statements__id__delete",
          "originalEndpointId": "Bank statements.delete_bank_statement_v3_bank_statements__id__delete",
          "name": "Deletes a bank statement",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/bank_statements/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/bank_statements/",
              "pathParameters": {
                "id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Extracts account holder, bank and account information extracted from the first page of the bank statement, which is typically available before the full results. This is a synchronous call.\n\nComplete guide: [Overview](../../../bank-statements)",
          "method": "POST",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "get_bank_statement_statement_info_v3_bank_statements__id__overview_post",
          "originalEndpointId": "Bank statements.get_bank_statement_statement_info_v3_bank_statements__id__overview_post",
          "name": "Quickly extract account holder, institution and first account",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/bank_statements/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/overview"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "StatementInfo"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/bank_statements/",
              "pathParameters": {
                "id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "institution": "Well's Fargo",
                  "start_date": "2024-01-01",
                  "end_date": "2024-02-01",
                  "account_holder": {
                    "type": "consumer",
                    "name": "John Doe",
                    "address": {
                      "street": "601 Rosebud Avenue",
                      "postcode": "77901",
                      "city": "Victoria",
                      "state": "Texas",
                      "country": "United States"
                    }
                  },
                  "accounts": [
                    {
                      "type": "checking",
                      "number": "83721",
                      "opening_balance": 1000,
                      "closing_balance": 1500,
                      "iso_currency_code": "USD"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "institution": "Well's Fargo",
                  "start_date": "2024-01-01",
                  "end_date": "2024-02-01",
                  "account_holder": {
                    "type": "consumer",
                    "name": "John Doe",
                    "address": {
                      "street": "601 Rosebud Avenue",
                      "postcode": "77901",
                      "city": "Victoria",
                      "state": "Texas",
                      "country": "United States"
                    }
                  },
                  "accounts": [
                    {
                      "type": "checking",
                      "number": "83721",
                      "opening_balance": 1000,
                      "closing_balance": 1500,
                      "iso_currency_code": "USD"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Return the extracted account information and associated transactions from a bank statement PDF. The results are accessible once the statement's status is `completed`.",
          "method": "GET",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "get_bank_statement_result_v3_bank_statements__id__results_get",
          "originalEndpointId": "Bank statements.get_bank_statement_result_v3_bank_statements__id__results_get",
          "name": "Retrieve the extraction results",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/bank_statements/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/results"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BankStatementResults"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/bank_statements/",
              "pathParameters": {
                "id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "accounts": [
                    {
                      "transactions": [
                        {
                          "id": "foo",
                          "description": "foo",
                          "date": "foo",
                          "amount": 42,
                          "entry_type": "incoming",
                          "currency": "EUR"
                        }
                      ]
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "accounts": [
                    {
                      "transactions": [
                        {
                          "id": "foo",
                          "description": "foo",
                          "date": "foo",
                          "amount": 42,
                          "entry_type": "incoming",
                          "currency": "EUR"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "Account Holders": {
      "subpackageId": "Account Holders",
      "name": "Account Holders",
      "endpoints": [
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "get_account_holder_v3_account_holders__id__get",
          "originalEndpointId": "Account Holders.get_account_holder_v3_account_holders__id__get",
          "name": "Retrieve an account holder.",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/account_holders/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "AccountHolderExternal"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/account_holders/",
              "pathParameters": {
                "id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                  "type": "consumer",
                  "name": "John Doe",
                  "created_at": "2024-03-30T00:00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                  "type": "consumer",
                  "name": "John Doe",
                  "created_at": "2024-03-30T00:00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes all of the transactions in the account holder's history. This operation is permanent and irreversible",
          "method": "DELETE",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "delete_account_holder_v3_account_holders__id__delete",
          "originalEndpointId": "Account Holders.delete_account_holder_v3_account_holders__id__delete",
          "name": "Deletes an account holder and their transactions",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/account_holders/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/account_holders/",
              "pathParameters": {
                "id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "get_account_holders_v3_account_holders_get",
          "originalEndpointId": "Account Holders.get_account_holders_v3_account_holders_get",
          "name": "List all account holders.",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/account_holders"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Only return account holders older or equal than this date",
              "key": "created_after",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "Only return account holders newer than this date",
              "key": "created_before",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "Starting point for the set of account holders",
              "key": "cursor",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "The limit of account holders to be returned",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 50,
                    "default": 10
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "PagedResponse_AccountHolderExternal"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/account_holders",
              "pathParameters": {},
              "queryParameters": {
                "created_after": "foo",
                "created_before": "foo",
                "cursor": "foo",
                "limit": 42
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "next_cursor": "XjdHaksD",
                  "data": [
                    {
                      "id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                      "type": "consumer",
                      "name": "John Doe",
                      "created_at": "2024-03-30T00:00:00"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "next_cursor": "XjdHaksD",
                  "data": [
                    {
                      "id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                      "type": "consumer",
                      "name": "John Doe",
                      "created_at": "2024-03-30T00:00:00"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "create_account_holder_v3_account_holders_post",
          "originalEndpointId": "Account Holders.create_account_holder_v3_account_holders_post",
          "name": "Create an account holder.",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/account_holders"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "AccountHolderCreate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "AccountHolderExternal"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/account_holders",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "id": "foo",
                "type": "consumer"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "type": "consumer"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                  "type": "consumer",
                  "name": "John Doe",
                  "created_at": "2024-03-30T00:00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "35b927b6-6fda-40aa-93b8-95b47c2b2cad",
                  "type": "consumer",
                  "name": "John Doe",
                  "created_at": "2024-03-30T00:00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "Recurrence": {
      "subpackageId": "Recurrence",
      "name": "Recurrence",
      "endpoints": [
        {
          "auth": true,
          "description": "Identifies and categorizes recurring patterns found in the transaction history of the account holder, such as periodic payments or subscriptions. These patterns are called recurrence groups.",
          "method": "POST",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "get_account_holder_recurring_payments_v3_account_holders__id__recurring_groups_post",
          "originalEndpointId": "Recurrence.get_account_holder_recurring_payments_v3_account_holders__id__recurring_groups_post",
          "name": "Find recurring groups in a transaction history",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/account_holders/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/recurring_groups"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "RecurrenceGroup"
                }
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/account_holders/",
              "pathParameters": {
                "id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "id": "foo",
                    "start_date": "foo",
                    "end_date": "foo",
                    "total_amount": 42,
                    "average_amount": 42,
                    "periodicity_in_days": 42,
                    "periodicity": "daily",
                    "counterparty": {
                      "type": "person"
                    },
                    "categories": {},
                    "transaction_ids": [
                      "foo"
                    ]
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "id": "foo",
                    "start_date": "foo",
                    "end_date": "foo",
                    "total_amount": 42,
                    "average_amount": 42,
                    "periodicity_in_days": 42,
                    "periodicity": "daily",
                    "counterparty": {
                      "type": "person"
                    },
                    "categories": {},
                    "transaction_ids": [
                      "foo"
                    ]
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "Webhooks": {
      "subpackageId": "Webhooks",
      "name": "Webhooks",
      "endpoints": [
        {
          "auth": true,
          "description": "List all webhooks",
          "method": "GET",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "get_webhooks_v3_webhooks_get",
          "originalEndpointId": "Webhooks.get_webhooks_v3_webhooks_get",
          "name": "List all webhooks",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/webhooks"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "PagedResponse_Webhook"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/webhooks",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "next_cursor": "XjdHaksD",
                  "data": [
                    {
                      "url": "https://example.com:5689",
                      "events": [
                        "batches.completed",
                        "batches.error"
                      ],
                      "token": "hunter2",
                      "id": "e94a150d-40af-4e96-8aa7-2948a6b4d8d3",
                      "created_at": "2024-10-03T02:53:30.167953",
                      "enabled": true
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "next_cursor": "XjdHaksD",
                  "data": [
                    {
                      "url": "https://example.com:5689",
                      "events": [
                        "batches.completed",
                        "batches.error"
                      ],
                      "token": "hunter2",
                      "id": "e94a150d-40af-4e96-8aa7-2948a6b4d8d3",
                      "created_at": "2024-10-03T02:53:30.167953",
                      "enabled": true
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Create a webhook to be called when certain events occur.",
          "method": "POST",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "post_webhook_v3_webhooks_post",
          "originalEndpointId": "Webhooks.post_webhook_v3_webhooks_post",
          "name": "Create a webhook",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/webhooks"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "WebhookBase"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Webhook"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/webhooks",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "url": "foo",
                "events": [
                  "reports.resolved"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "url": "foo",
                  "events": [
                    "reports.resolved"
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "url": "https://example.com:5689",
                  "events": [
                    "batches.completed",
                    "batches.error"
                  ],
                  "token": "hunter2",
                  "id": "e94a150d-40af-4e96-8aa7-2948a6b4d8d3",
                  "created_at": "2024-10-03T02:53:30.167953",
                  "enabled": true
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "url": "https://example.com:5689",
                  "events": [
                    "batches.completed",
                    "batches.error"
                  ],
                  "token": "hunter2",
                  "id": "e94a150d-40af-4e96-8aa7-2948a6b4d8d3",
                  "created_at": "2024-10-03T02:53:30.167953",
                  "enabled": true
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Retrieve a webhook",
          "method": "GET",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "get_webhook_v3_webhooks__id__get",
          "originalEndpointId": "Webhooks.get_webhook_v3_webhooks__id__get",
          "name": "Retrieve a webhook",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/webhooks/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Webhook"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/webhooks/",
              "pathParameters": {
                "id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "url": "https://example.com:5689",
                  "events": [
                    "batches.completed",
                    "batches.error"
                  ],
                  "token": "hunter2",
                  "id": "e94a150d-40af-4e96-8aa7-2948a6b4d8d3",
                  "created_at": "2024-10-03T02:53:30.167953",
                  "enabled": true
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "url": "https://example.com:5689",
                  "events": [
                    "batches.completed",
                    "batches.error"
                  ],
                  "token": "hunter2",
                  "id": "e94a150d-40af-4e96-8aa7-2948a6b4d8d3",
                  "created_at": "2024-10-03T02:53:30.167953",
                  "enabled": true
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Delete a webhook",
          "method": "DELETE",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "delete_webhook_v3_webhooks__id__delete",
          "originalEndpointId": "Webhooks.delete_webhook_v3_webhooks__id__delete",
          "name": "Delete a webhook",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/webhooks/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/webhooks/",
              "pathParameters": {
                "id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Update a webhook. Fields that aren't specified in the body will remain unchanged",
          "method": "PATCH",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "patch_webhook_v3_webhooks__id__patch",
          "originalEndpointId": "Webhooks.patch_webhook_v3_webhooks__id__patch",
          "name": "Update a webhook",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/webhooks/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "WebhookPatch"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Webhook"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/webhooks/",
              "pathParameters": {
                "id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "url": "https://example.com:5689",
                  "events": [
                    "batches.completed",
                    "batches.error"
                  ],
                  "token": "hunter2",
                  "id": "e94a150d-40af-4e96-8aa7-2948a6b4d8d3",
                  "created_at": "2024-10-03T02:53:30.167953",
                  "enabled": true
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "url": "https://example.com:5689",
                  "events": [
                    "batches.completed",
                    "batches.error"
                  ],
                  "token": "hunter2",
                  "id": "e94a150d-40af-4e96-8aa7-2948a6b4d8d3",
                  "created_at": "2024-10-03T02:53:30.167953",
                  "enabled": true
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "Personalization": {
      "subpackageId": "Personalization",
      "name": "Personalization",
      "endpoints": [
        {
          "auth": true,
          "description": "Get the current personalization ruleset.",
          "method": "GET",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "filter_get_v3_rules_get",
          "originalEndpointId": "Personalization.filter_get_v3_rules_get",
          "name": "Get the current personalization ruleset.",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/rules"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "personalization"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/rules",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "if": {
                      "&&": [
                        {
                          "&&": [
                            null
                          ]
                        }
                      ]
                    },
                    "then": [
                      {
                        "if": {
                          "&&": [
                            {}
                          ]
                        }
                      }
                    ],
                    "else": [
                      {
                        "if": {
                          "&&": [
                            {}
                          ]
                        }
                      }
                    ]
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "if": {
                      "&&": [
                        {
                          "&&": [
                            null
                          ]
                        }
                      ]
                    },
                    "then": [
                      {
                        "if": {
                          "&&": [
                            {}
                          ]
                        }
                      }
                    ],
                    "else": [
                      {
                        "if": {
                          "&&": [
                            {}
                          ]
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Set the personalization ruleset.",
          "method": "POST",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "filter_post_v3_rules_post",
          "originalEndpointId": "Personalization.filter_post_v3_rules_post",
          "name": "Set the personalization ruleset.",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/rules"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "personalization"
                }
              }
            }
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/rules",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": [
                {
                  "if": {
                    "&&": [
                      {
                        "&&": [
                          null
                        ]
                      }
                    ]
                  },
                  "then": [
                    {
                      "if": {
                        "&&": [
                          {}
                        ]
                      }
                    }
                  ],
                  "else": [
                    {
                      "if": {
                        "&&": [
                          {}
                        ]
                      }
                    }
                  ]
                }
              ],
              "requestBodyV3": {
                "type": "json",
                "value": [
                  {
                    "if": {
                      "&&": [
                        {
                          "&&": [
                            null
                          ]
                        }
                      ]
                    },
                    "then": [
                      {
                        "if": {
                          "&&": [
                            {}
                          ]
                        }
                      }
                    ],
                    "else": [
                      {
                        "if": {
                          "&&": [
                            {}
                          ]
                        }
                      }
                    ]
                  }
                ]
              },
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Append a rule to the personalization ruleset.",
          "method": "POST",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "filter_append_v3_rules_append_post",
          "originalEndpointId": "Personalization.filter_append_v3_rules_append_post",
          "name": "Append a rule.",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/rules/append"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "Action"
                }
              }
            }
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/rules/append",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "if": {
                  "&&": [
                    {
                      "&&": [
                        {}
                      ]
                    }
                  ]
                }
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "if": {
                    "&&": [
                      {
                        "&&": [
                          {}
                        ]
                      }
                    ]
                  }
                }
              },
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Delete the rule at the specified index from the personalization ruleset.",
          "method": "DELETE",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "filter_delete_v3_rules__index__delete",
          "originalEndpointId": "Personalization.filter_delete_v3_rules__index__delete",
          "name": "Delete a rule.",
          "path": {
            "pathParameters": [
              {
                "key": "index",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/rules/"
              },
              {
                "type": "pathParameter",
                "value": "index"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/rules/",
              "pathParameters": {
                "index": 42
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Modify an existing rule at the specified index on the ruleset.",
          "method": "PATCH",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "filter_patch_v3_rules__index__patch",
          "originalEndpointId": "Personalization.filter_patch_v3_rules__index__patch",
          "name": "Modify an existing rule.",
          "path": {
            "pathParameters": [
              {
                "key": "index",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/rules/"
              },
              {
                "type": "pathParameter",
                "value": "index"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "Action"
                }
              }
            }
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/rules/",
              "pathParameters": {
                "index": 42
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "if": {
                  "&&": [
                    {
                      "&&": [
                        {}
                      ]
                    }
                  ]
                }
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "if": {
                    "&&": [
                      {
                        "&&": [
                          {}
                        ]
                      }
                    ]
                  }
                }
              },
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "Reports": {
      "subpackageId": "Reports",
      "name": "Reports",
      "endpoints": [
        {
          "auth": true,
          "description": "List all reports",
          "method": "GET",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "get_reports_v3_reports_get",
          "originalEndpointId": "Reports.get_reports_v3_reports_get",
          "name": "List all reports",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/reports"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Only return report older or equal than this date",
              "key": "created_after",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "Only return report newer than this date",
              "key": "created_before",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            {
              "description": "Starting point for the set of report",
              "key": "cursor",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "The limit of report to be returned",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 50,
                    "default": 10
                  }
                }
              }
            },
            {
              "description": "If specified, only return reports with this status",
              "key": "status",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V3ReportsGetParametersSchema"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "PagedResponse_Report_"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/reports",
              "pathParameters": {},
              "queryParameters": {
                "created_after": "foo",
                "created_before": "foo",
                "cursor": "foo",
                "limit": 42,
                "status": "open"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "transaction_id": "foo",
                      "description": "foo",
                      "fields": [
                        "foo"
                      ],
                      "id": "foo",
                      "created_at": "foo",
                      "status": "open"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "transaction_id": "foo",
                      "description": "foo",
                      "fields": [
                        "foo"
                      ],
                      "id": "foo",
                      "created_at": "foo",
                      "status": "open"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Report a transaction with incorrect fields.",
          "method": "POST",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "post_report_v3_reports_post",
          "originalEndpointId": "Reports.post_report_v3_reports_post",
          "name": "Create a report",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/reports"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ReportBase"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Report"
              }
            },
            "statusCode": 200,
            "description": "The newly created report"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/reports",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "transaction_id": "xbx8YP14g565Xk",
                "description": "lorem ipsum",
                "fields": [
                  ".entities.counterparty"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "transaction_id": "xbx8YP14g565Xk",
                  "description": "lorem ipsum",
                  "fields": [
                    ".entities.counterparty"
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "transaction_id": "xbx8YP14g565Xk",
                  "description": "lorem ipsum",
                  "fields": [
                    ".entities.counterparty"
                  ],
                  "id": "a652285d-de1b-4a6f-b6ce-45efa9be7952",
                  "created_at": "2024-10-03T02:53:30.167953+00:00",
                  "status": "open"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "transaction_id": "xbx8YP14g565Xk",
                  "description": "lorem ipsum",
                  "fields": [
                    ".entities.counterparty"
                  ],
                  "id": "a652285d-de1b-4a6f-b6ce-45efa9be7952",
                  "created_at": "2024-10-03T02:53:30.167953+00:00",
                  "status": "open"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Retrieve a report",
          "method": "GET",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "get_report_v3_reports__id__get",
          "originalEndpointId": "Reports.get_report_v3_reports__id__get",
          "name": "Retrieve a report",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/reports/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Report"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/reports/",
              "pathParameters": {
                "id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "transaction_id": "xbx8YP14g565Xk",
                  "description": "lorem ipsum",
                  "fields": [
                    ".entities.counterparty"
                  ],
                  "id": "a652285d-de1b-4a6f-b6ce-45efa9be7952",
                  "created_at": "2024-10-03T02:53:30.167953+00:00",
                  "status": "open"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "transaction_id": "xbx8YP14g565Xk",
                  "description": "lorem ipsum",
                  "fields": [
                    ".entities.counterparty"
                  ],
                  "id": "a652285d-de1b-4a6f-b6ce-45efa9be7952",
                  "created_at": "2024-10-03T02:53:30.167953+00:00",
                  "status": "open"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Delete a report",
          "method": "DELETE",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "delete_report_v3_reports__id__delete",
          "originalEndpointId": "Reports.delete_report_v3_reports__id__delete",
          "name": "Delete a report",
          "path": {
            "pathParameters": [
              {
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/reports/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/reports/",
              "pathParameters": {
                "id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "Categories": {
      "subpackageId": "Categories",
      "name": "Categories",
      "endpoints": [
        {
          "auth": true,
          "description": "Retrieves the set of categories. Category sets are different per account holder type.",
          "method": "GET",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "get_category_set_v3_categories__account_holder_type__get",
          "originalEndpointId": "Categories.get_category_set_v3_categories__account_holder_type__get",
          "name": "Retrieve category set",
          "path": {
            "pathParameters": [
              {
                "key": "account_holder_type",
                "type": {
                  "type": "id",
                  "value": "AccountHolderType"
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/categories/"
              },
              {
                "type": "pathParameter",
                "value": "account_holder_type"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "CategorySet"
              }
            },
            "statusCode": 200,
            "description": "Category set for the selected type of account holder"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/categories/",
              "pathParameters": {
                "account_holder_type": "consumer"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "incoming": [
                    "transfer from investment app",
                    "transfer from stock broker",
                    "transfer from crypto broker",
                    "chargeback",
                    "freelance income",
                    "rideshare or delivery income",
                    "paycheck",
                    "benefits",
                    "interest earned",
                    "stock dividend"
                  ],
                  "outgoing": [
                    "digital content and streaming",
                    "vending machine",
                    "reversal",
                    "transfer to investment app",
                    "transfer to stock broker",
                    "transfer to crypto broker",
                    "adjustment",
                    "intra account transfer",
                    "inter account transfer",
                    "peer to peer transfer",
                    "funeral service",
                    "ATM withdrawal",
                    "teller withdrawal"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "incoming": [
                    "transfer from investment app",
                    "transfer from stock broker",
                    "transfer from crypto broker",
                    "chargeback",
                    "freelance income",
                    "rideshare or delivery income",
                    "paycheck",
                    "benefits",
                    "interest earned",
                    "stock dividend"
                  ],
                  "outgoing": [
                    "digital content and streaming",
                    "vending machine",
                    "reversal",
                    "transfer to investment app",
                    "transfer to stock broker",
                    "transfer to crypto broker",
                    "adjustment",
                    "intra account transfer",
                    "inter account transfer",
                    "peer to peer transfer",
                    "funeral service",
                    "ATM withdrawal",
                    "teller withdrawal"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Sets a custom set of categories. Transactions that don't match a category will be categorized `not enough information` regardless of whether it is present in the set.",
          "method": "POST",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "custom_categories_post_v3_categories__account_holder_type__post",
          "originalEndpointId": "Categories.custom_categories_post_v3_categories__account_holder_type__post",
          "name": "Set a custom set of categories",
          "path": {
            "pathParameters": [
              {
                "key": "account_holder_type",
                "type": {
                  "type": "id",
                  "value": "AccountHolderType"
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/categories/"
              },
              {
                "type": "pathParameter",
                "value": "account_holder_type"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "CustomCategorySet"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "CustomCategorySet"
              }
            },
            "statusCode": 200,
            "description": "Custom categories successfully set."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/categories/",
              "pathParameters": {
                "account_holder_type": "consumer"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "incoming": [
                  "salary",
                  "investment income",
                  "other income"
                ],
                "outgoing": [
                  "rent",
                  "utilities",
                  "groceries",
                  "entertainment"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "incoming": [
                    "salary",
                    "investment income",
                    "other income"
                  ],
                  "outgoing": [
                    "rent",
                    "utilities",
                    "groceries",
                    "entertainment"
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "incoming": [
                    "salary",
                    "investment income",
                    "other income"
                  ],
                  "outgoing": [
                    "rent",
                    "utilities",
                    "groceries",
                    "entertainment"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "incoming": [
                    "salary",
                    "investment income",
                    "other income"
                  ],
                  "outgoing": [
                    "rent",
                    "utilities",
                    "groceries",
                    "entertainment"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Resets the set of categories of the specified account holder type to the original values.",
          "method": "POST",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "delete_custom_category_set_v3_categories__account_holder_type__reset_post",
          "originalEndpointId": "Categories.delete_custom_category_set_v3_categories__account_holder_type__reset_post",
          "name": "Reset category set to original values",
          "path": {
            "pathParameters": [
              {
                "key": "account_holder_type",
                "type": {
                  "type": "id",
                  "value": "AccountHolderType"
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/categories/"
              },
              {
                "type": "pathParameter",
                "value": "account_holder_type"
              },
              {
                "type": "literal",
                "value": "/reset"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "CategorySet"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/categories/",
              "pathParameters": {
                "account_holder_type": "consumer"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "incoming": [
                    "transfer from investment app",
                    "transfer from stock broker",
                    "transfer from crypto broker",
                    "chargeback",
                    "freelance income",
                    "rideshare or delivery income",
                    "paycheck",
                    "benefits",
                    "interest earned",
                    "stock dividend"
                  ],
                  "outgoing": [
                    "digital content and streaming",
                    "vending machine",
                    "reversal",
                    "transfer to investment app",
                    "transfer to stock broker",
                    "transfer to crypto broker",
                    "adjustment",
                    "intra account transfer",
                    "inter account transfer",
                    "peer to peer transfer",
                    "funeral service",
                    "ATM withdrawal",
                    "teller withdrawal"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "incoming": [
                    "transfer from investment app",
                    "transfer from stock broker",
                    "transfer from crypto broker",
                    "chargeback",
                    "freelance income",
                    "rideshare or delivery income",
                    "paycheck",
                    "benefits",
                    "interest earned",
                    "stock dividend"
                  ],
                  "outgoing": [
                    "digital content and streaming",
                    "vending machine",
                    "reversal",
                    "transfer to investment app",
                    "transfer to stock broker",
                    "transfer to crypto broker",
                    "adjustment",
                    "intra account transfer",
                    "inter account transfer",
                    "peer to peer transfer",
                    "funeral service",
                    "ATM withdrawal",
                    "teller withdrawal"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "Entities": {
      "subpackageId": "Entities",
      "name": "Entities",
      "endpoints": [
        {
          "auth": true,
          "description": "Resolves a query into an entity by querying our entity resolution system. \n    The parameters `name` and `website` are mutually exclusive. Calls to this endpoint using \n    the `name` parameter are billed the same way transactions are.",
          "method": "GET",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "search_entity_v3_entities_lookup_get",
          "originalEndpointId": "Entities.search_entity_v3_entities_lookup_get",
          "name": "Searches for an entity",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/entities/lookup"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "The name of the entity to resolve",
              "key": "name",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "The website of the entity to resolve",
              "key": "website",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "An unstructured location string of the entity to resolve",
              "key": "location",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Entity"
              }
            },
            "statusCode": 200,
            "description": "Entity"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/entities/lookup",
              "pathParameters": {},
              "queryParameters": {
                "name": "foo",
                "website": "foo",
                "location": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "d4bc3c80-ec1a-3da2-836e-2a4ca4758be5",
                  "name": "Starbucks",
                  "website": "starbucks.com",
                  "logo": "https://logos.ntropy.com/starbucks.com",
                  "mccs": [
                    5814
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "d4bc3c80-ec1a-3da2-836e-2a4ca4758be5",
                  "name": "Starbucks",
                  "website": "starbucks.com",
                  "logo": "https://logos.ntropy.com/starbucks.com",
                  "mccs": [
                    5814
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Retrieve more information about an entity by using its unique ID.",
          "method": "GET",
          "defaultEnvironment": "Production server (uses live data).",
          "environments": [
            {
              "id": "Production server (uses live data).",
              "baseUrl": "https://api.ntropy.com"
            }
          ],
          "id": "get_entity_by_id_v3_entities__id__get",
          "originalEndpointId": "Entities.get_entity_by_id_v3_entities__id__get",
          "name": "Retrieve an entity",
          "path": {
            "pathParameters": [
              {
                "description": "The unique ID of the entity",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v3/entities/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Entity"
              }
            },
            "statusCode": 200,
            "description": "Entity"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v3/entities/",
              "pathParameters": {
                "id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "d4bc3c80-ec1a-3da2-836e-2a4ca4758be5",
                  "name": "Starbucks",
                  "website": "starbucks.com",
                  "logo": "https://logos.ntropy.com/starbucks.com",
                  "mccs": [
                    5814
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "d4bc3c80-ec1a-3da2-836e-2a4ca4758be5",
                  "name": "Starbucks",
                  "website": "starbucks.com",
                  "logo": "https://logos.ntropy.com/starbucks.com",
                  "mccs": [
                    5814
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    }
  },
  "rootPackage": {
    "endpoints": [],
    "webhooks": [],
    "websockets": [],
    "types": [
      "Account",
      "AccountHolder",
      "AccountHolderCreate",
      "AccountHolderExternal",
      "AccountHolderType",
      "AccountType",
      "AccountingCategory",
      "Address",
      "AsyncEnrichmentInput",
      "BankStatement",
      "BankStatementAccount",
      "BankStatementError",
      "BankStatementErrorCode",
      "BankStatementFile",
      "BankStatementResults",
      "BankStatementStatus",
      "BankStatementTransaction",
      "Batch",
      "BatchResult",
      "BatchStatus",
      "Body_post_bank_statement_v3_bank_statements_post",
      "Body_set_transaction_ah_v3_transactions__id__assign_post",
      "Categories",
      "CategoryConfidence",
      "CategorySet",
      "Counterparty",
      "CounterpartyType",
      "Country",
      "Currency",
      "CustomCategorySet",
      "DocumentStatus",
      "EnrichedTransaction",
      "EnrichmentResult",
      "Entities",
      "Entity",
      "EntryType",
      "HTTPValidationError",
      "Intermediary",
      "IntermediaryType",
      "Location",
      "LocationInput",
      "LocationStructured",
      "PagedResponse_AccountHolderExternal",
      "PagedResponse_BankStatement",
      "PagedResponse_Batch",
      "PagedResponse_Report_",
      "PagedResponse_Transaction",
      "PagedResponse_Webhook",
      "Recurrence",
      "RecurrenceGroup",
      "RecurrencePeriodicity",
      "RecurrenceType",
      "Report",
      "ReportBase",
      "ReportStatus",
      "StatementInfo",
      "SyncEnrichmentInput",
      "SyncEnrichmentOutput",
      "Transaction",
      "TransactionError",
      "TransactionErrorCode",
      "TransactionInput",
      "ValidationError",
      "Webhook",
      "WebhookBase",
      "WebhookPatch",
      "Expr",
      "TxProp",
      "FnCall",
      "Action",
      "If",
      "ModifyLabels",
      "EditableTxProp",
      "Setter",
      "personalization"
    ],
    "subpackages": [
      "Transactions",
      "Batches",
      "Bank statements",
      "Account Holders",
      "Recurrence",
      "Webhooks",
      "Personalization",
      "Reports",
      "Categories",
      "Entities"
    ]
  },
  "auth": {
    "type": "header",
    "headerWireValue": "X-Api-Key",
    "nameOverride": "X-Api-Key"
  },
  "snippetsConfiguration": {},
  "globalHeaders": []
}