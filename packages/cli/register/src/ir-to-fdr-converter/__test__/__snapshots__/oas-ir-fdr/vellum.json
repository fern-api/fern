{
  "types": {
    "BlockTypeEnum": {
      "description": "* `CHAT_MESSAGE` - CHAT_MESSAGE\n* `CHAT_HISTORY` - CHAT_HISTORY\n* `JINJA` - JINJA\n* `FUNCTION_DEFINITION` - FUNCTION_DEFINITION",
      "name": "BlockTypeEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "CHAT_MESSAGE"
          },
          {
            "value": "CHAT_HISTORY"
          },
          {
            "value": "JINJA"
          },
          {
            "value": "FUNCTION_DEFINITION"
          }
        ]
      }
    },
    "ChatMessage": {
      "name": "ChatMessage",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "text",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "role",
            "valueType": {
              "type": "id",
              "value": "ChatMessageRole"
            }
          }
        ]
      }
    },
    "ChatMessageRequest": {
      "name": "ChatMessageRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "text",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "role",
            "valueType": {
              "type": "id",
              "value": "ChatMessageRole"
            }
          }
        ]
      }
    },
    "ChatMessageRole": {
      "description": "* `SYSTEM` - System\n* `ASSISTANT` - Assistant\n* `USER` - User\n* `FUNCTION` - Function",
      "name": "ChatMessageRole",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "SYSTEM"
          },
          {
            "value": "ASSISTANT"
          },
          {
            "value": "USER"
          },
          {
            "value": "FUNCTION"
          }
        ]
      }
    },
    "ConditionalNodeResult": {
      "name": "ConditionalNodeResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "ConditionalNodeResultData"
            }
          }
        ]
      }
    },
    "ConditionalNodeResultData": {
      "name": "ConditionalNodeResultData",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "source_handle_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "ContentType": {
      "description": "* `STRING` - STRING\n* `JSON` - JSON",
      "name": "ContentType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "STRING"
          },
          {
            "value": "JSON"
          }
        ]
      }
    },
    "DeploymentNodeResult": {
      "name": "DeploymentNodeResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "DeploymentNodeResultData"
            }
          }
        ]
      }
    },
    "DeploymentNodeResultData": {
      "name": "DeploymentNodeResultData",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "output_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "text",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "delta",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "DeploymentRead": {
      "name": "DeploymentRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "key": "created",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "A human-readable label for the deployment",
            "key": "label",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 150
              }
            }
          },
          {
            "description": "A name that uniquely identifies this deployment within its workspace",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 150
              }
            }
          },
          {
            "description": "The current status of the deployment\n\n* `ACTIVE` - Active\n* `INACTIVE` - Inactive\n* `ARCHIVED` - Archived",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "DeploymentReadStatusEnum"
              }
            }
          },
          {
            "description": "The environment this deployment is used in\n\n* `DEVELOPMENT` - Development\n* `STAGING` - Staging\n* `PRODUCTION` - Production",
            "key": "environment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "EnvironmentEnum"
              }
            }
          },
          {
            "description": "The type of model this deployment serves\n\n* `GENERATE` - Generate\n* `CLASSIFY` - Classify",
            "key": "model_type",
            "valueType": {
              "type": "id",
              "value": "ModelTypeEnum"
            }
          },
          {
            "key": "active_model_version_ids",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "key": "last_deployed_on",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "DeploymentReadStatusEnum": {
      "description": "* `ACTIVE` - Active\n* `INACTIVE` - Inactive\n* `ARCHIVED` - Archived",
      "name": "DeploymentReadStatusEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ACTIVE"
          },
          {
            "value": "INACTIVE"
          },
          {
            "value": "ARCHIVED"
          }
        ]
      }
    },
    "Document": {
      "name": "Document",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the document.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The human-readable name for the document.",
            "key": "label",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 1000
              }
            }
          },
          {
            "description": "The unique ID of the document as represented in an external system and specified when it was originally uploaded.",
            "key": "external_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 1000
                  }
                }
              }
            }
          }
        ]
      }
    },
    "DocumentDocumentToDocumentIndex": {
      "name": "DocumentDocumentToDocumentIndex",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Vellum-generated ID that uniquely identifies this link.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "Vellum-generated ID that uniquely identifies the index this document is included in.",
            "key": "document_index_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "An enum value representing where this document is along its indexing lifecycle for this index.\n\n* `AWAITING_PROCESSING` - Awaiting Processing\n* `QUEUED` - Queued\n* `INDEXING` - Indexing\n* `INDEXED` - Indexed\n* `FAILED` - Failed",
            "key": "indexing_state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IndexingStateEnum"
              }
            }
          }
        ]
      }
    },
    "DocumentIndexCreateRequest": {
      "name": "DocumentIndexCreateRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A human-readable label for the document index",
            "key": "label",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1,
                "maxLength": 150
              }
            }
          },
          {
            "description": "A name that uniquely identifies this index within its workspace",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1,
                "maxLength": 150
              }
            }
          },
          {
            "description": "The current status of the document index\n\n* `ACTIVE` - Active\n* `ARCHIVED` - Archived",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "DocumentIndexStatus"
              }
            }
          },
          {
            "description": "The environment this document index is used in\n\n* `DEVELOPMENT` - Development\n* `STAGING` - Staging\n* `PRODUCTION` - Production",
            "key": "environment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "EnvironmentEnum"
              }
            }
          },
          {
            "description": "Configuration representing how documents should be indexed",
            "key": "indexing_config",
            "valueType": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          },
          {
            "description": "Optionally specify the id of a document index from which you'd like to copy and re-index its documents into this newly created index",
            "key": "copy_documents_from_index_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ]
      }
    },
    "DocumentIndexRead": {
      "name": "DocumentIndexRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "key": "created",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "A human-readable label for the document index",
            "key": "label",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 150
              }
            }
          },
          {
            "description": "A name that uniquely identifies this index within its workspace",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 150
              }
            }
          },
          {
            "description": "The current status of the document index\n\n* `ACTIVE` - Active\n* `ARCHIVED` - Archived",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "DocumentIndexStatus"
              }
            }
          },
          {
            "description": "The environment this document index is used in\n\n* `DEVELOPMENT` - Development\n* `STAGING` - Staging\n* `PRODUCTION` - Production",
            "key": "environment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "EnvironmentEnum"
              }
            }
          },
          {
            "description": "Configuration representing how documents should be indexed",
            "key": "indexing_config",
            "valueType": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "DocumentIndexStatus": {
      "description": "* `ACTIVE` - Active\n* `ARCHIVED` - Archived",
      "name": "DocumentIndexStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ACTIVE"
          },
          {
            "value": "ARCHIVED"
          }
        ]
      }
    },
    "EnrichedNormalizedCompletion": {
      "name": "EnrichedNormalizedCompletion",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The Vellum-generated ID of the completion.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "The external ID that was originally provided along with the generation request, which uniquely identifies this generation in an external system.",
            "key": "external_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "The text generated by the LLM.",
            "key": "text",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The reason the generation finished.\n\n* `LENGTH` - LENGTH\n* `STOP` - STOP\n* `UNKNOWN` - UNKNOWN",
            "key": "finish_reason",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "FinishReasonEnum"
              }
            }
          },
          {
            "description": "The logprobs of the completion. Only present if specified in the original request options.",
            "key": "logprobs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "NormalizedLogProbs"
                }
              }
            }
          },
          {
            "description": "The ID of the model version used to generate this completion.",
            "key": "model_version_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ContentType"
              }
            }
          }
        ]
      }
    },
    "EnvironmentEnum": {
      "description": "* `DEVELOPMENT` - Development\n* `STAGING` - Staging\n* `PRODUCTION` - Production",
      "name": "EnvironmentEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "DEVELOPMENT"
          },
          {
            "value": "STAGING"
          },
          {
            "value": "PRODUCTION"
          }
        ]
      }
    },
    "EvaluationParams": {
      "name": "EvaluationParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The target value to compare the LLM output against. Typically what you expect or desire the LLM output to be.",
            "key": "target",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "EvaluationParamsRequest": {
      "name": "EvaluationParamsRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The target value to compare the LLM output against. Typically what you expect or desire the LLM output to be.",
            "key": "target",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ExecutePromptApiErrorResponse": {
      "name": "ExecutePromptApiErrorResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Details about why the request failed.",
            "key": "detail",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "ExecutePromptEvent": {
      "name": "ExecutePromptEvent",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "InitiatedExecutePromptEvent",
            "type": {
              "type": "id",
              "value": "InitiatedExecutePromptEvent"
            },
            "displayName": "INITIATED"
          },
          {
            "typeName": "StreamingExecutePromptEvent",
            "type": {
              "type": "id",
              "value": "StreamingExecutePromptEvent"
            },
            "displayName": "STREAMING"
          },
          {
            "typeName": "FulfilledExecutePromptEvent",
            "type": {
              "type": "id",
              "value": "FulfilledExecutePromptEvent"
            },
            "displayName": "FULFILLED"
          },
          {
            "typeName": "RejectedExecutePromptEvent",
            "type": {
              "type": "id",
              "value": "RejectedExecutePromptEvent"
            },
            "displayName": "REJECTED"
          }
        ]
      }
    },
    "ExecutePromptStreamRequest": {
      "name": "ExecutePromptStreamRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "inputs",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The ID of the Prompt Deployment. Must provide either this or prompt_deployment_name.",
            "key": "prompt_deployment_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          {
            "description": "The unique name of the Prompt Deployment. Must provide either this or prompt_deployment_id.",
            "key": "prompt_deployment_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          },
          {
            "description": "Optionally specify a release tag if you want to pin to a specific release of the Prompt Deployment",
            "key": "release_tag",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          },
          {
            "description": "Optionally include a unique identifier for tracking purposes. Must be unique within a given Workspace.",
            "key": "external_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          },
          {
            "description": "A list of keys whose values you'd like to directly return from the JSON response of the model provider. Useful if you need lower-level info returned by model providers that Vellum would otherwise omit. Corresponding key/value pairs will be returned under the `raw` key of the API response.",
            "key": "expand_raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              }
            }
          },
          {
            "description": "Arbitrary JSON metadata associated with this request. Can be used to capture additional monitoring data such as user id, session id, etc. for future analysis.",
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "map",
                  "keyType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "valueType": {
                    "type": "unknown"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "InitiatedEnum": {
      "name": "InitiatedEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "INITIATED"
          }
        ]
      }
    },
    "InitiatedPromptExecutionMeta": {
      "description": "The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.",
      "name": "InitiatedPromptExecutionMeta",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "model_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "latency",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "key": "deployment_release_tag",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "prompt_version_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "InitiatedExecutePromptEvent": {
      "description": "The initial data returned indicating that the response from the model has returned and begun streaming.",
      "name": "InitiatedExecutePromptEvent",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "state",
            "valueType": {
              "type": "id",
              "value": "InitiatedEnum"
            }
          },
          {
            "key": "meta",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "InitiatedPromptExecutionMeta"
              }
            }
          },
          {
            "key": "execution_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "StreamingEnum": {
      "name": "StreamingEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "STREAMING"
          }
        ]
      }
    },
    "PromptOutput": {
      "name": "PromptOutput",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "StringVellumValue",
            "type": {
              "type": "id",
              "value": "StringVellumValue"
            },
            "displayName": "STRING"
          },
          {
            "typeName": "JsonVellumValue",
            "type": {
              "type": "id",
              "value": "JsonVellumValue"
            },
            "displayName": "JSON"
          },
          {
            "typeName": "ErrorVellumValue",
            "type": {
              "type": "id",
              "value": "ErrorVellumValue"
            },
            "displayName": "ERROR"
          },
          {
            "typeName": "FunctionCallVellumValue",
            "type": {
              "type": "id",
              "value": "FunctionCallVellumValue"
            },
            "displayName": "FUNCTION_CALL"
          }
        ]
      }
    },
    "StringVellumValue": {
      "description": "A value representing a string.",
      "name": "StringVellumValue",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "StringEnum"
            }
          },
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "StringEnum": {
      "name": "StringEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "STRING"
          }
        ]
      }
    },
    "JsonEnum": {
      "name": "JsonEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "JSON"
          }
        ]
      }
    },
    "JsonVellumValue": {
      "description": "A value representing a JSON object.",
      "name": "JsonVellumValue",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "JsonEnum"
            }
          },
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "ErrorEnum": {
      "name": "ErrorEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ERROR"
          }
        ]
      }
    },
    "FunctionCallVellumValue": {
      "description": "A value representing a Function Call.",
      "name": "FunctionCallVellumValue",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "FunctionCallEnum"
            }
          },
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "FunctionCall"
              }
            }
          }
        ]
      }
    },
    "FunctionCallEnum": {
      "name": "FunctionCallEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "FUNCTION_CALL"
          }
        ]
      }
    },
    "FunctionCall": {
      "description": "The final resolved function call value.",
      "name": "FunctionCall",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "arguments",
            "valueType": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          },
          {
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          },
          {
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "ErrorVellumValue": {
      "description": "A value representing an Error.",
      "name": "ErrorVellumValue",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "ErrorEnum"
            }
          },
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "VellumError"
              }
            }
          }
        ]
      }
    },
    "StreamingExecutePromptEvent": {
      "description": "The data returned for each delta during the prompt execution stream.",
      "name": "StreamingExecutePromptEvent",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "state",
            "valueType": {
              "type": "id",
              "value": "StreamingEnum"
            }
          },
          {
            "key": "output",
            "valueType": {
              "type": "id",
              "value": "PromptOutput"
            }
          },
          {
            "key": "output_index",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "execution_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "meta",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "StreamingPromptExecutionMeta"
              }
            }
          },
          {
            "description": "The subset of the raw response from the model that the request opted into with `expand_raw`.",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          }
        ]
      }
    },
    "StreamingPromptExecutionMeta": {
      "description": "The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.",
      "name": "StreamingPromptExecutionMeta",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "latency",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "FulfilledEnum": {
      "name": "FulfilledEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "FULFILLED"
          }
        ]
      }
    },
    "FulfilledExecutePromptEvent": {
      "description": "The final data event returned indicating that the stream has ended and all final resolved values from the model can be found.",
      "name": "FulfilledExecutePromptEvent",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "state",
            "valueType": {
              "type": "id",
              "value": "FulfilledEnum"
            }
          },
          {
            "key": "outputs",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "PromptOutput"
              }
            }
          },
          {
            "key": "execution_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "meta",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "FulfilledPromptExecutionMeta"
              }
            }
          }
        ]
      }
    },
    "FulfilledPromptExecutionMeta": {
      "description": "The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.",
      "name": "FulfilledPromptExecutionMeta",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "latency",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "key": "finish_reason",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "FinishReasonEnum"
                }
              }
            }
          },
          {
            "key": "usage",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "MLModelUsage"
                }
              }
            }
          },
          {
            "key": "cost",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "Price"
                }
              }
            }
          }
        ]
      }
    },
    "RejectedEnum": {
      "name": "RejectedEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "REJECTED"
          }
        ]
      }
    },
    "RejectedExecutePromptEvent": {
      "description": "The final data returned indicating an error occurred during the stream.",
      "name": "RejectedExecutePromptEvent",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "state",
            "valueType": {
              "type": "id",
              "value": "RejectedEnum"
            }
          },
          {
            "key": "error",
            "valueType": {
              "type": "id",
              "value": "VellumError"
            }
          },
          {
            "key": "execution_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "meta",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RejectedPromptExecutionMeta"
              }
            }
          }
        ]
      }
    },
    "RejectedPromptExecutionMeta": {
      "description": "The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.",
      "name": "RejectedPromptExecutionMeta",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "latency",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "key": "finish_reason",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "FinishReasonEnum"
                }
              }
            }
          }
        ]
      }
    },
    "ExecuteWorkflowStreamRequest": {
      "name": "ExecuteWorkflowStreamRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the Workflow Deployment. Must provide either this or workflow_deployment_name.",
            "key": "workflow_deployment_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          {
            "description": "The name of the Workflow Deployment. Must provide either this or workflow_deployment_id.",
            "key": "workflow_deployment_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          },
          {
            "description": "Optionally specify a release tag if you want to pin to a specific release of the Workflow Deployment",
            "key": "release_tag",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          },
          {
            "key": "inputs",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "WorkflowRequestInputRequest"
              }
            }
          },
          {
            "description": "Optionally include a unique identifier for tracking purposes.",
            "key": "external_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          }
        ]
      }
    },
    "FinishReasonEnum": {
      "description": "* `LENGTH` - LENGTH\n* `STOP` - STOP\n* `UNKNOWN` - UNKNOWN",
      "name": "FinishReasonEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "LENGTH"
          },
          {
            "value": "STOP"
          },
          {
            "value": "UNKNOWN"
          }
        ]
      }
    },
    "GenerateBodyRequest": {
      "name": "GenerateBodyRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the deployment. Must provide either this or deployment_name.",
            "key": "deployment_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          {
            "description": "The name of the deployment. Must provide either this or deployment_id.",
            "key": "deployment_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          },
          {
            "description": "The generation requests to make. Supplying multiple will perform a bulk request to the LLM provided when possible.",
            "key": "requests",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "GenerateRequest"
              }
            }
          },
          {
            "description": "Additional configuration that can be used to control what's included in the response.",
            "key": "options",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "GenerateOptionsRequest"
                }
              }
            }
          }
        ]
      }
    },
    "GenerateErrorResponse": {
      "name": "GenerateErrorResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Details about why the request failed.",
            "key": "detail",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "GenerateOptionsRequest": {
      "name": "GenerateOptionsRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Which logprobs to include, if any. Defaults to NONE.\n\n* `ALL` - ALL\n* `NONE` - NONE",
            "key": "logprobs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "LogprobsEnum"
              }
            }
          }
        ]
      }
    },
    "GenerateRequest": {
      "name": "GenerateRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Key/value pairs for each template variable defined in the deployment's prompt.",
            "key": "input_values",
            "valueType": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          },
          {
            "description": "Optionally provide a list of chat messages that'll be used in place of the special {$chat_history} variable, if included in the prompt.",
            "key": "chat_history",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ChatMessageRequest"
                }
              }
            }
          },
          {
            "description": "Optionally include a unique identifier for each generation, as represented outside of Vellum. Note that this should generally be a list of length one.",
            "key": "external_ids",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "GenerateResponse": {
      "name": "GenerateResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The results of each generation request.",
            "key": "results",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "GenerateResult"
              }
            }
          }
        ]
      }
    },
    "GenerateResult": {
      "name": "GenerateResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "An object containing the resulting generation. This key will be absent if the LLM provider experienced an error.",
            "key": "data",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "GenerateResultData"
              }
            }
          },
          {
            "description": "An object containing details about the error that occurred. This key will be absent if the LLM provider did not experience an error.",
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "GenerateResultError"
              }
            }
          }
        ]
      }
    },
    "GenerateResultData": {
      "name": "GenerateResultData",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The generated completions. This will generally be a list of length one.",
            "key": "completions",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "EnrichedNormalizedCompletion"
              }
            }
          }
        ]
      }
    },
    "GenerateResultError": {
      "name": "GenerateResultError",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The error message returned by the LLM provider.",
            "key": "message",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "GenerateStreamBodyRequest": {
      "name": "GenerateStreamBodyRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the deployment. Must provide either this or deployment_name.",
            "key": "deployment_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          {
            "description": "The name of the deployment. Must provide either this or deployment_id.",
            "key": "deployment_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          },
          {
            "description": "The generation requests to make. Supplying multiple will perform a bulk request to the LLM provided when possible.",
            "key": "requests",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "GenerateRequest"
              }
            }
          },
          {
            "description": "Additional configuration that can be used to control what's included in the response.",
            "key": "options",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "GenerateOptionsRequest"
                }
              }
            }
          }
        ]
      }
    },
    "GenerateStreamResponse": {
      "name": "GenerateStreamResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "delta",
            "valueType": {
              "type": "id",
              "value": "GenerateStreamResult"
            }
          }
        ]
      }
    },
    "GenerateStreamResult": {
      "name": "GenerateStreamResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "request_index",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "GenerateStreamResultData"
              }
            }
          },
          {
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "GenerateResultError"
              }
            }
          }
        ]
      }
    },
    "GenerateStreamResultData": {
      "name": "GenerateStreamResultData",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "completion_index",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "completion",
            "valueType": {
              "type": "id",
              "value": "EnrichedNormalizedCompletion"
            }
          }
        ]
      }
    },
    "IndexingStateEnum": {
      "description": "* `AWAITING_PROCESSING` - Awaiting Processing\n* `QUEUED` - Queued\n* `INDEXING` - Indexing\n* `INDEXED` - Indexed\n* `FAILED` - Failed",
      "name": "IndexingStateEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "AWAITING_PROCESSING"
          },
          {
            "value": "QUEUED"
          },
          {
            "value": "INDEXING"
          },
          {
            "value": "INDEXED"
          },
          {
            "value": "FAILED"
          }
        ]
      }
    },
    "LogprobsEnum": {
      "description": "* `ALL` - ALL\n* `NONE` - NONE",
      "name": "LogprobsEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ALL"
          },
          {
            "value": "NONE"
          }
        ]
      }
    },
    "MLModelUsage": {
      "name": "MLModelUsage",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "output_token_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "key": "input_token_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "key": "input_char_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "key": "output_char_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "key": "compute_nanos",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "key": "cache_creation_input_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "key": "cache_read_input_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "ModelTypeEnum": {
      "description": "* `GENERATE` - Generate\n* `CLASSIFY` - Classify",
      "name": "ModelTypeEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "GENERATE"
          },
          {
            "value": "CLASSIFY"
          }
        ]
      }
    },
    "ModelVersionBuildConfig": {
      "name": "ModelVersionBuildConfig",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the base model used to create this model version, as identified by the LLM provider.",
            "key": "base_model",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Information about the sandbox snapshot that was used to create this model version, if applicable.",
            "key": "sandbox_snapshot",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "ModelVersionSandboxSnapshot"
                }
              }
            }
          }
        ]
      }
    },
    "ModelVersionCompilePromptRequestRequest": {
      "name": "ModelVersionCompilePromptRequestRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Key/value pairs for each variable found within the model version's prompt template.",
            "key": "input_values",
            "valueType": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "ModelVersionCompilePromptResponse": {
      "name": "ModelVersionCompilePromptResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Information about the compiled prompt.",
            "key": "prompt",
            "valueType": {
              "type": "id",
              "value": "ModelVersionCompiledPrompt"
            }
          }
        ]
      }
    },
    "ModelVersionCompiledPrompt": {
      "name": "ModelVersionCompiledPrompt",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The fully compiled prompt in normalized ChatML syntax after all variable substitutions and templating functions are applied.",
            "key": "text",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The approximate number of tokens used by the compiled prompt.",
            "key": "num_tokens",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          }
        ]
      }
    },
    "ModelVersionExecConfig": {
      "name": "ModelVersionExecConfig",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The generation parameters that are passed to the LLM provider at runtime.",
            "key": "parameters",
            "valueType": {
              "type": "id",
              "value": "ModelVersionExecConfigParameters"
            }
          },
          {
            "description": "Names of the input variables specified in the prompt template.",
            "key": "input_variables",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "PromptTemplateInputVariable"
              }
            }
          },
          {
            "description": "The template used to generate prompts for this model version.",
            "key": "prompt_template",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "prompt_block_data",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "PromptTemplateBlockData"
              }
            }
          },
          {
            "key": "prompt_syntax_version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "ModelVersionExecConfigParameters": {
      "name": "ModelVersionExecConfigParameters",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "temperature",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "key": "max_tokens",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "top_p",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "key": "frequency_penalty",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "key": "presence_penalty",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "key": "logit_bias",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "map",
                  "keyType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              }
            }
          },
          {
            "key": "stop",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "key": "top_k",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          }
        ]
      }
    },
    "ModelVersionRead": {
      "name": "ModelVersionRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Vellum-generated ID that uniquely identifies this model version.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "Timestamp of when this model version was created.",
            "key": "created",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "Human-friendly name for this model version.",
            "key": "label",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 150
              }
            }
          },
          {
            "description": "The type of task this model is used for.\n\n* `GENERATE` - Generate\n* `CLASSIFY` - Classify",
            "key": "model_type",
            "valueType": {
              "type": "id",
              "value": "ModelTypeEnum"
            }
          },
          {
            "description": "Which LLM provider this model version is associated with.\n\n* `ANTHROPIC` - Anthropic\n* `COHERE` - Cohere\n* `GOOGLE` - Google\n* `HOSTED` - Hosted\n* `MOSAICML` - MosaicML\n* `MYSTIC` - Mystic\n* `OPENAI` - OpenAI\n* `PYQ` - Pyq",
            "key": "provider",
            "valueType": {
              "type": "id",
              "value": "ProviderEnum"
            }
          },
          {
            "description": "The unique id of this model version as it exists in the above provider's system.",
            "key": "external_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 250
              }
            }
          },
          {
            "description": "Configuration used to build this model version.",
            "key": "build_config",
            "valueType": {
              "type": "id",
              "value": "ModelVersionBuildConfig"
            }
          },
          {
            "description": "Configuration used to execute this model version.",
            "key": "exec_config",
            "valueType": {
              "type": "id",
              "value": "ModelVersionExecConfig"
            }
          },
          {
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ModelVersionReadStatusEnum"
              }
            }
          }
        ]
      }
    },
    "ModelVersionReadStatusEnum": {
      "description": "* `CREATING` - Creating\n* `READY` - Ready\n* `CREATION_FAILED` - Creation Failed\n* `DISABLED` - Disabled",
      "name": "ModelVersionReadStatusEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "CREATING"
          },
          {
            "value": "READY"
          },
          {
            "value": "CREATION_FAILED"
          },
          {
            "value": "DISABLED"
          }
        ]
      }
    },
    "ModelVersionSandboxSnapshot": {
      "name": "ModelVersionSandboxSnapshot",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the sandbox snapshot.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The index of the prompt in the sandbox snapshot.",
            "key": "prompt_index",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          },
          {
            "description": "The id of the prompt in the sandbox snapshot.",
            "key": "prompt_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "sandbox_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "propertyAccess": "READ_ONLY"
          }
        ]
      }
    },
    "NormalizedLogProbs": {
      "name": "NormalizedLogProbs",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "tokens",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "NormalizedTokenLogProbs"
              }
            }
          },
          {
            "key": "likelihood",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          }
        ]
      }
    },
    "NormalizedTokenLogProbs": {
      "name": "NormalizedTokenLogProbs",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "token",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "logprob",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "top_logprobs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            }
          },
          {
            "key": "text_offset",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "PaginatedSlimDocumentList": {
      "name": "PaginatedSlimDocumentList",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "next",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uri"
                  }
                }
              }
            }
          },
          {
            "key": "previous",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uri"
                  }
                }
              }
            }
          },
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "SlimDocument"
                }
              }
            }
          }
        ]
      }
    },
    "Price": {
      "name": "Price",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "value",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "key": "unit",
            "valueType": {
              "type": "id",
              "value": "UnitEnum"
            }
          }
        ]
      }
    },
    "ProcessingFailureReasonEnum": {
      "description": "* `EXCEEDED_CHARACTER_LIMIT` - Exceeded Character Limit",
      "name": "ProcessingFailureReasonEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "EXCEEDED_CHARACTER_LIMIT"
          }
        ]
      }
    },
    "ProcessingStateEnum": {
      "description": "* `QUEUED` - Queued\n* `PROCESSING` - Processing\n* `PROCESSED` - Processed\n* `FAILED` - Failed",
      "name": "ProcessingStateEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "QUEUED"
          },
          {
            "value": "PROCESSING"
          },
          {
            "value": "PROCESSED"
          },
          {
            "value": "FAILED"
          }
        ]
      }
    },
    "PromptNodeResult": {
      "name": "PromptNodeResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "PromptNodeResultData"
            }
          }
        ]
      }
    },
    "PromptNodeResultData": {
      "name": "PromptNodeResultData",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "output_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "text",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "delta",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "PromptTemplateBlock": {
      "name": "PromptTemplateBlock",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "block_type",
            "valueType": {
              "type": "id",
              "value": "BlockTypeEnum"
            }
          },
          {
            "key": "properties",
            "valueType": {
              "type": "id",
              "value": "PromptTemplateBlockProperties"
            }
          }
        ]
      }
    },
    "PromptTemplateBlockData": {
      "name": "PromptTemplateBlockData",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "version",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "blocks",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "PromptTemplateBlock"
              }
            }
          }
        ]
      }
    },
    "PromptTemplateBlockDataRequest": {
      "name": "PromptTemplateBlockDataRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "version",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "blocks",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "PromptTemplateBlockRequest"
              }
            }
          }
        ]
      }
    },
    "PromptTemplateBlockProperties": {
      "name": "PromptTemplateBlockProperties",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "chat_role",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "ChatMessageRole"
                }
              }
            }
          },
          {
            "key": "chat_message_unterminated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "default": false
                }
              }
            }
          },
          {
            "key": "template",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "template_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "ContentType"
                }
              }
            }
          },
          {
            "key": "function_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "function_description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "function_parameters",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "map",
                  "keyType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "valueType": {
                    "type": "unknown"
                  }
                }
              }
            }
          },
          {
            "key": "blocks",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "PromptTemplateBlock"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "PromptTemplateBlockPropertiesRequest": {
      "name": "PromptTemplateBlockPropertiesRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "chat_role",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "ChatMessageRole"
                }
              }
            }
          },
          {
            "key": "chat_message_unterminated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "default": false
                }
              }
            }
          },
          {
            "key": "template",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "template_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "ContentType"
                }
              }
            }
          },
          {
            "key": "function_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          },
          {
            "key": "function_description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          },
          {
            "key": "function_parameters",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "map",
                  "keyType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "valueType": {
                    "type": "unknown"
                  }
                }
              }
            }
          },
          {
            "key": "blocks",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "PromptTemplateBlockRequest"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "PromptTemplateBlockRequest": {
      "name": "PromptTemplateBlockRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1
              }
            }
          },
          {
            "key": "block_type",
            "valueType": {
              "type": "id",
              "value": "BlockTypeEnum"
            }
          },
          {
            "key": "properties",
            "valueType": {
              "type": "id",
              "value": "PromptTemplateBlockPropertiesRequest"
            }
          }
        ]
      }
    },
    "PromptTemplateInputVariable": {
      "name": "PromptTemplateInputVariable",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the input variable.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "PromptTemplateInputVariableRequest": {
      "name": "PromptTemplateInputVariableRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the input variable.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1
              }
            }
          }
        ]
      }
    },
    "ProviderEnum": {
      "description": "* `ANTHROPIC` - Anthropic\n* `COHERE` - Cohere\n* `GOOGLE` - Google\n* `HOSTED` - Hosted\n* `MOSAICML` - MosaicML\n* `MYSTIC` - Mystic\n* `OPENAI` - OpenAI\n* `PYQ` - Pyq",
      "name": "ProviderEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ANTHROPIC"
          },
          {
            "value": "COHERE"
          },
          {
            "value": "GOOGLE"
          },
          {
            "value": "HOSTED"
          },
          {
            "value": "MOSAICML"
          },
          {
            "value": "MYSTIC"
          },
          {
            "value": "OPENAI"
          },
          {
            "value": "PYQ"
          }
        ]
      }
    },
    "RegisterPromptErrorResponse": {
      "name": "RegisterPromptErrorResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Details about why the request failed.",
            "key": "detail",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "RegisterPromptModelParametersRequest": {
      "name": "RegisterPromptModelParametersRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "temperature",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "key": "max_tokens",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "stop",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "top_p",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "key": "top_k",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          {
            "key": "frequency_penalty",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "key": "presence_penalty",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "key": "logit_bias",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "map",
                  "keyType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "RegisterPromptPrompt": {
      "name": "RegisterPromptPrompt",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the generated prompt.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "A human-friendly label for the generated prompt.",
            "key": "label",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "RegisterPromptPromptInfoRequest": {
      "name": "RegisterPromptPromptInfoRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "prompt_syntax_version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "default": 2
                }
              }
            }
          },
          {
            "key": "prompt_block_data",
            "valueType": {
              "type": "id",
              "value": "PromptTemplateBlockDataRequest"
            }
          },
          {
            "description": "Names of the input variables specified in the prompt template.",
            "key": "input_variables",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "PromptTemplateInputVariableRequest"
              }
            }
          }
        ]
      }
    },
    "RegisterPromptRequestRequest": {
      "name": "RegisterPromptRequestRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A human-friendly label for corresponding entities created in Vellum.",
            "key": "label",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1
              }
            }
          },
          {
            "description": "A uniquely-identifying name for corresponding entities created in Vellum.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1
              }
            }
          },
          {
            "description": "Information about how to execute the prompt template.",
            "key": "prompt",
            "valueType": {
              "type": "id",
              "value": "RegisterPromptPromptInfoRequest"
            }
          },
          {
            "description": "The initial LLM provider to use for this prompt\n\n* `ANTHROPIC` - Anthropic\n* `COHERE` - Cohere\n* `GOOGLE` - Google\n* `HOSTED` - Hosted\n* `MOSAICML` - MosaicML\n* `MYSTIC` - Mystic\n* `OPENAI` - OpenAI\n* `PYQ` - Pyq",
            "key": "provider",
            "valueType": {
              "type": "id",
              "value": "ProviderEnum"
            }
          },
          {
            "description": "The initial model to use for this prompt",
            "key": "model",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1
              }
            }
          },
          {
            "description": "The initial model parameters to use for  this prompt",
            "key": "parameters",
            "valueType": {
              "type": "id",
              "value": "RegisterPromptModelParametersRequest"
            }
          },
          {
            "description": "Optionally include additional metadata to store along with the prompt.",
            "key": "meta",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          }
        ]
      }
    },
    "RegisterPromptResponse": {
      "name": "RegisterPromptResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Information about the generated prompt",
            "key": "prompt",
            "valueType": {
              "type": "id",
              "value": "RegisterPromptPrompt"
            }
          },
          {
            "description": "Information about the generated sandbox snapshot",
            "key": "sandbox_snapshot",
            "valueType": {
              "type": "id",
              "value": "RegisteredPromptSandboxSnapshot"
            }
          },
          {
            "description": "Information about the generated sandbox",
            "key": "sandbox",
            "valueType": {
              "type": "id",
              "value": "RegisteredPromptSandbox"
            }
          },
          {
            "description": "Information about the generated model version",
            "key": "model_version",
            "valueType": {
              "type": "id",
              "value": "RegisteredPromptModelVersion"
            }
          },
          {
            "description": "Information about the generated deployment",
            "key": "deployment",
            "valueType": {
              "type": "id",
              "value": "RegisteredPromptDeployment"
            }
          }
        ]
      }
    },
    "RegisteredPromptDeployment": {
      "name": "RegisteredPromptDeployment",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the generated deployment.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "A uniquely-identifying name for generated deployment.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "A human-friendly label for the generated deployment.",
            "key": "label",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "RegisteredPromptModelVersion": {
      "name": "RegisteredPromptModelVersion",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the generated model version.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "A human-friendly label for the generated model version.",
            "key": "label",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "RegisteredPromptSandbox": {
      "name": "RegisteredPromptSandbox",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the generated sandbox.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "A human-friendly label for the generated sandbox.",
            "key": "label",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "RegisteredPromptSandboxSnapshot": {
      "name": "RegisteredPromptSandboxSnapshot",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the generated sandbox snapshot.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "SandboxMetricInputParams": {
      "name": "SandboxMetricInputParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "params",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EvaluationParams"
                }
              }
            }
          }
        ]
      }
    },
    "SandboxMetricInputParamsRequest": {
      "name": "SandboxMetricInputParamsRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "params",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "EvaluationParamsRequest"
                }
              }
            }
          }
        ]
      }
    },
    "SandboxNodeResult": {
      "name": "SandboxNodeResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "SandboxNodeResultData"
            }
          }
        ]
      }
    },
    "SandboxNodeResultData": {
      "name": "SandboxNodeResultData",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "output_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "text",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "delta",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "SandboxScenario": {
      "name": "SandboxScenario",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "label",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "Untitled Scenario"
                }
              }
            }
          },
          {
            "description": "The inputs for the scenario",
            "key": "inputs",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "ScenarioInput"
              }
            }
          },
          {
            "description": "The id of the scenario",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "metric_input_params",
            "valueType": {
              "type": "id",
              "value": "SandboxMetricInputParams"
            }
          }
        ]
      }
    },
    "ScenarioInput": {
      "name": "ScenarioInput",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "ScenarioInputTypeEnum"
                }
              }
            }
          },
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "chat_history",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ChatMessage"
                }
              }
            }
          }
        ]
      }
    },
    "ScenarioInputRequest": {
      "name": "ScenarioInputRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "ScenarioInputTypeEnum"
                }
              }
            }
          },
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "chat_history",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ChatMessageRequest"
                }
              }
            }
          }
        ]
      }
    },
    "ScenarioInputTypeEnum": {
      "description": "* `TEXT` - Text\n* `CHAT_HISTORY` - Chat History",
      "name": "ScenarioInputTypeEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "TEXT"
          },
          {
            "value": "CHAT_HISTORY"
          }
        ]
      }
    },
    "SearchErrorResponse": {
      "name": "SearchErrorResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Details about why the request failed.",
            "key": "detail",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "SearchFiltersRequest": {
      "name": "SearchFiltersRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The document external IDs to filter by",
            "key": "external_ids",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "SearchNodeResult": {
      "name": "SearchNodeResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "SearchNodeResultData"
            }
          }
        ]
      }
    },
    "SearchNodeResultData": {
      "name": "SearchNodeResultData",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "results_output_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "results",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          },
          {
            "key": "text_output_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "text",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "SearchRequestBodyRequest": {
      "name": "SearchRequestBodyRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the index to search against. Must provide either this or index_name.",
            "key": "index_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          {
            "description": "The name of the index to search against. Must provide either this or index_id.",
            "key": "index_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          },
          {
            "description": "The query to search for.",
            "key": "query",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1
              }
            }
          },
          {
            "description": "Configuration options for the search.",
            "key": "options",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "SearchRequestOptionsRequest"
                }
              }
            }
          }
        ]
      }
    },
    "SearchRequestOptionsRequest": {
      "name": "SearchRequestOptionsRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The maximum number of results to return.",
            "key": "limit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "description": "The weights to use for the search. Must add up to 1.0.",
            "key": "weights",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "SearchWeightsRequest"
                }
              }
            }
          },
          {
            "description": "The configuration for merging results.",
            "key": "result_merging",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "SearchResultMergingRequest"
                }
              }
            }
          },
          {
            "description": "The filters to apply to the search.",
            "key": "filters",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "SearchFiltersRequest"
                }
              }
            }
          }
        ]
      }
    },
    "SearchResponse": {
      "name": "SearchResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The results of the search. Each result represents a chunk that matches the search query.",
            "key": "results",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "SearchResult"
              }
            }
          }
        ]
      }
    },
    "SearchResult": {
      "name": "SearchResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The document that contains the chunk that matched the search query.",
            "key": "document",
            "valueType": {
              "type": "id",
              "value": "Document"
            }
          },
          {
            "description": "The text of the chunk that matched the search query.",
            "key": "text",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "keywords",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A score representing how well the chunk matches the search query.",
            "key": "score",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          }
        ]
      }
    },
    "SearchResultMergingRequest": {
      "name": "SearchResultMergingRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Whether to enable merging results",
            "key": "enabled",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    },
    "SearchWeightsRequest": {
      "name": "SearchWeightsRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The relative weight to give to semantic similarity",
            "key": "semantic_similarity",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          },
          {
            "description": "The relative weight to give to keyword matches",
            "key": "keywords",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "double"
              }
            }
          }
        ]
      }
    },
    "SlimDocument": {
      "name": "SlimDocument",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Vellum-generated ID that uniquely identifies this document.",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The external ID that was originally provided when uploading the document.",
            "key": "external_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "maxLength": 1000
                  }
                }
              }
            }
          },
          {
            "description": "A timestamp representing when this document was most recently uploaded.",
            "key": "last_uploaded_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Human-friendly name for this document.",
            "key": "label",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "maxLength": 1000
              }
            }
          },
          {
            "description": "An enum value representing where this document is along its processing lifecycle. Note that this is different than its indexing lifecycle.\n\n* `QUEUED` - Queued\n* `PROCESSING` - Processing\n* `PROCESSED` - Processed\n* `FAILED` - Failed",
            "key": "processing_state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ProcessingStateEnum"
              }
            }
          },
          {
            "description": "An enum value representing why the document could not be processed. Is null unless processing_state is FAILED.\n\n* `EXCEEDED_CHARACTER_LIMIT` - Exceeded Character Limit",
            "key": "processing_failure_reason",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "ProcessingFailureReasonEnum"
                }
              }
            }
          },
          {
            "description": "The document's current status.\n\n* `ACTIVE` - Active",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SlimDocumentStatusEnum"
              }
            }
          },
          {
            "description": "A list of keywords associated with this document. Originally provided when uploading the document.",
            "key": "keywords",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "document_to_document_indexes",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "DocumentDocumentToDocumentIndex"
              }
            }
          }
        ]
      }
    },
    "SlimDocumentStatusEnum": {
      "description": "* `ACTIVE` - Active",
      "name": "SlimDocumentStatusEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ACTIVE"
          }
        ]
      }
    },
    "SubmitCompletionActualRequest": {
      "name": "SubmitCompletionActualRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The Vellum-generated ID of a previously generated completion. Must provide either this or external_id.",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          },
          {
            "description": "The external ID that was originally provided when generating the completion that you'd now like to submit actuals for. Must provide either this or id.",
            "key": "external_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          },
          {
            "description": "Text representing what the completion _should_ have been.",
            "key": "text",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "A number between 0 and 1 representing the quality of the completion. 0 is the worst, 1 is the best.",
            "key": "quality",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "double",
                    "minimum": 0,
                    "maximum": 1
                  }
                }
              }
            }
          },
          {
            "description": "Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.",
            "key": "timestamp",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "SubmitCompletionActualsErrorResponse": {
      "name": "SubmitCompletionActualsErrorResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "detail",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "SubmitCompletionActualsRequest": {
      "name": "SubmitCompletionActualsRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the deployment. Must provide either this or deployment_name.",
            "key": "deployment_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          {
            "description": "The name of the deployment. Must provide either this or deployment_id.",
            "key": "deployment_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          },
          {
            "description": "Feedback regarding the quality of previously generated completions",
            "key": "actuals",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "SubmitCompletionActualRequest"
              }
            }
          }
        ]
      }
    },
    "TerminalNodeChatHistoryResult": {
      "name": "TerminalNodeChatHistoryResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique name given to the terminal node that produced this output.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "key": "value",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "ChatMessage"
              }
            }
          }
        ]
      }
    },
    "TerminalNodeJsonResult": {
      "name": "TerminalNodeJsonResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique name given to the terminal node that produced this output.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "key": "value",
            "valueType": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "TerminalNodeResult": {
      "name": "TerminalNodeResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "TerminalNodeResultData"
            }
          }
        ]
      }
    },
    "TerminalNodeResultData": {
      "name": "TerminalNodeResultData",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "output",
            "valueType": {
              "type": "id",
              "value": "TerminalNodeResultOutput"
            }
          }
        ]
      }
    },
    "TerminalNodeResultOutput": {
      "name": "TerminalNodeResultOutput",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "TerminalNodeStringResult",
            "type": {
              "type": "id",
              "value": "TerminalNodeStringResult"
            },
            "displayName": "STRING"
          },
          {
            "typeName": "TerminalNodeJsonResult",
            "type": {
              "type": "id",
              "value": "TerminalNodeJsonResult"
            },
            "displayName": "JSON"
          },
          {
            "typeName": "TerminalNodeChatHistoryResult",
            "type": {
              "type": "id",
              "value": "TerminalNodeChatHistoryResult"
            },
            "displayName": "CHAT_HISTORY"
          }
        ]
      }
    },
    "TerminalNodeStringResult": {
      "name": "TerminalNodeStringResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The unique name given to the terminal node that produced this output.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "key": "value",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "TestSuiteTestCase": {
      "name": "TestSuiteTestCase",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The id of the test case to update. If none is provided, an id will be generated and a new test case will be appended.",
            "key": "test_case_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A human-friendly label for the test case.",
            "key": "label",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Key/value pairs for each input variable that the Test Suite expects.",
            "key": "input_values",
            "valueType": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          },
          {
            "description": "Parameters to use when evaluating the test case, specific to the test suite's evaluation metric.",
            "key": "evaluation_params",
            "valueType": {
              "type": "id",
              "value": "EvaluationParams"
            }
          }
        ]
      }
    },
    "TestSuiteTestCaseRequest": {
      "name": "TestSuiteTestCaseRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The id of the test case to update. If none is provided, an id will be generated and a new test case will be appended.",
            "key": "test_case_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "minLength": 1
                }
              }
            }
          },
          {
            "description": "A human-friendly label for the test case.",
            "key": "label",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Key/value pairs for each input variable that the Test Suite expects.",
            "key": "input_values",
            "valueType": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          },
          {
            "description": "Parameters to use when evaluating the test case, specific to the test suite's evaluation metric.",
            "key": "evaluation_params",
            "valueType": {
              "type": "id",
              "value": "EvaluationParamsRequest"
            }
          }
        ]
      }
    },
    "UnitEnum": {
      "description": "* `USD` - USD",
      "name": "UnitEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "USD"
          }
        ]
      }
    },
    "UploadDocumentBodyRequest": {
      "name": "UploadDocumentBodyRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Optionally include the names of all indexes that you'd like this document to be included in",
            "key": "add_to_index_names",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              }
            }
          },
          {
            "description": "Optionally include an external ID for this document. This is useful if you want to re-upload the same document later when its contents change and would like it to be re-indexed.",
            "key": "external_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1
                  }
                }
              }
            }
          },
          {
            "description": "A human-friendly name for this document. Typically the filename.",
            "key": "label",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1
              }
            }
          },
          {
            "description": "The file contents of the document.",
            "key": "contents",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          {
            "description": "Optionally include a list of keywords that'll be associated with this document. Used when performing keyword searches.",
            "key": "keywords",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "UploadDocumentErrorResponse": {
      "name": "UploadDocumentErrorResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "detail",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "UploadDocumentResponse": {
      "name": "UploadDocumentResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The ID of the newly created document.",
            "key": "document_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ]
      }
    },
    "UpsertSandboxScenarioRequestRequest": {
      "name": "UpsertSandboxScenarioRequestRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "label",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "Untitled Scenario"
                }
              }
            }
          },
          {
            "description": "The inputs for the scenario",
            "key": "inputs",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "ScenarioInputRequest"
              }
            }
          },
          {
            "description": "The id of the scenario to update. If none is provided, an id will be generated and a new scenario will be appended.",
            "key": "scenario_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "minLength": 1
                }
              }
            }
          },
          {
            "key": "metric_input_params",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SandboxMetricInputParamsRequest"
              }
            }
          }
        ]
      }
    },
    "VellumError": {
      "name": "VellumError",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "message",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "code",
            "valueType": {
              "type": "id",
              "value": "VellumErrorCodeEnum"
            }
          }
        ]
      }
    },
    "VellumErrorCodeEnum": {
      "description": "* `INVALID_REQUEST` - INVALID_REQUEST\n* `INVALID_INPUTS` - INVALID_INPUTS\n* `PROVIDER_ERROR` - PROVIDER_ERROR\n* `REQUEST_TIMEOUT` - REQUEST_TIMEOUT\n* `INTERNAL_SERVER_ERROR` - INTERNAL_SERVER_ERROR\n* `USER_DEFINED_ERROR` - USER_DEFINED_ERROR",
      "name": "VellumErrorCodeEnum",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "INVALID_REQUEST"
          },
          {
            "value": "INVALID_INPUTS"
          },
          {
            "value": "PROVIDER_ERROR"
          },
          {
            "value": "REQUEST_TIMEOUT"
          },
          {
            "value": "INTERNAL_SERVER_ERROR"
          },
          {
            "value": "USER_DEFINED_ERROR"
          }
        ]
      }
    },
    "WorkflowEventError": {
      "name": "WorkflowEventError",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "message",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "code",
            "valueType": {
              "type": "id",
              "value": "WorkflowExecutionEventErrorCode"
            }
          }
        ]
      }
    },
    "WorkflowExecutionEventErrorCode": {
      "description": "* `WORKFLOW_INITIALIZATION` - WORKFLOW_INITIALIZATION\n* `NODE_EXECUTION` - NODE_EXECUTION",
      "name": "WorkflowExecutionEventErrorCode",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "WORKFLOW_INITIALIZATION"
          },
          {
            "value": "NODE_EXECUTION"
          }
        ]
      }
    },
    "WorkflowExecutionNodeResultEvent": {
      "name": "WorkflowExecutionNodeResultEvent",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "run_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "external_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "WorkflowNodeResultEvent"
            }
          }
        ]
      }
    },
    "WorkflowExecutionWorkflowResultEvent": {
      "name": "WorkflowExecutionWorkflowResultEvent",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "run_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "external_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "WorkflowResultEvent"
            }
          }
        ]
      }
    },
    "WorkflowNodeResultData": {
      "name": "WorkflowNodeResultData",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "PromptNodeResult",
            "type": {
              "type": "id",
              "value": "PromptNodeResult"
            },
            "displayName": "PROMPT"
          },
          {
            "typeName": "SandboxNodeResult",
            "type": {
              "type": "id",
              "value": "SandboxNodeResult"
            },
            "displayName": "SANDBOX"
          },
          {
            "typeName": "DeploymentNodeResult",
            "type": {
              "type": "id",
              "value": "DeploymentNodeResult"
            },
            "displayName": "DEPLOYMENT"
          },
          {
            "typeName": "SearchNodeResult",
            "type": {
              "type": "id",
              "value": "SearchNodeResult"
            },
            "displayName": "SEARCH"
          },
          {
            "typeName": "ConditionalNodeResult",
            "type": {
              "type": "id",
              "value": "ConditionalNodeResult"
            },
            "displayName": "CONDITIONAL"
          },
          {
            "typeName": "TerminalNodeResult",
            "type": {
              "type": "id",
              "value": "TerminalNodeResult"
            },
            "displayName": "TERMINAL"
          }
        ]
      }
    },
    "WorkflowNodeResultEvent": {
      "name": "WorkflowNodeResultEvent",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "node_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "node_result_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "state",
            "valueType": {
              "type": "id",
              "value": "WorkflowNodeResultEventState"
            }
          },
          {
            "key": "ts",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "WorkflowNodeResultData"
              }
            }
          },
          {
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "WorkflowEventError"
                }
              }
            }
          }
        ]
      }
    },
    "WorkflowNodeResultEventState": {
      "description": "* `INITIATED` - INITIATED\n* `STREAMING` - STREAMING\n* `FULFILLED` - FULFILLED\n* `REJECTED` - REJECTED",
      "name": "WorkflowNodeResultEventState",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "INITIATED"
          },
          {
            "value": "STREAMING"
          },
          {
            "value": "FULFILLED"
          },
          {
            "value": "REJECTED"
          }
        ]
      }
    },
    "WorkflowRequestChatHistoryInputRequest": {
      "name": "WorkflowRequestChatHistoryInputRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The variable's name, as defined in the Workflow.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1
              }
            }
          },
          {
            "key": "value",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "ChatMessageRequest"
              }
            }
          }
        ]
      }
    },
    "WorkflowRequestInputRequest": {
      "name": "WorkflowRequestInputRequest",
      "shape": {
        "type": "discriminatedUnion",
        "discriminant": "type",
        "variants": [
          {
            "discriminantValue": "STRING",
            "displayName": "STRING",
            "additionalProperties": {
              "extends": [
                "WorkflowRequestStringInputRequest"
              ],
              "properties": []
            }
          },
          {
            "discriminantValue": "JSON",
            "displayName": "JSON",
            "additionalProperties": {
              "extends": [
                "WorkflowRequestJSONInputRequest"
              ],
              "properties": []
            }
          },
          {
            "discriminantValue": "CHAT_HISTORY",
            "displayName": "CHAT_HISTORY",
            "additionalProperties": {
              "extends": [
                "WorkflowRequestChatHistoryInputRequest"
              ],
              "properties": []
            }
          }
        ]
      }
    },
    "WorkflowRequestJSONInputRequest": {
      "name": "WorkflowRequestJSONInputRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The variable's name, as defined in the Workflow.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1
              }
            }
          },
          {
            "key": "value",
            "valueType": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "unknown"
              }
            }
          }
        ]
      }
    },
    "WorkflowRequestStringInputRequest": {
      "name": "WorkflowRequestStringInputRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The variable's name, as defined in the Workflow.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "minLength": 1
              }
            }
          },
          {
            "key": "value",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "WorkflowResultEvent": {
      "name": "WorkflowResultEvent",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "state",
            "valueType": {
              "type": "id",
              "value": "WorkflowNodeResultEventState"
            }
          },
          {
            "key": "ts",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "key": "output",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "WorkflowResultEventOutputData"
              }
            }
          },
          {
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "WorkflowEventError"
                }
              }
            }
          }
        ]
      }
    },
    "WorkflowResultEventOutputData": {
      "name": "WorkflowResultEventOutputData",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "WorkflowResultEventOutputDataString",
            "type": {
              "type": "id",
              "value": "WorkflowResultEventOutputDataString"
            },
            "displayName": "STRING"
          },
          {
            "typeName": "WorkflowResultEventOutputDataJSON",
            "type": {
              "type": "id",
              "value": "WorkflowResultEventOutputDataJSON"
            },
            "displayName": "JSON"
          },
          {
            "typeName": "WorkflowResultEventOutputDataChatHistory",
            "type": {
              "type": "id",
              "value": "WorkflowResultEventOutputDataChatHistory"
            },
            "displayName": "CHAT_HISTORY"
          }
        ]
      }
    },
    "WorkflowResultEventOutputDataChatHistory": {
      "name": "WorkflowResultEventOutputDataChatHistory",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "state",
            "valueType": {
              "type": "id",
              "value": "WorkflowNodeResultEventState"
            }
          },
          {
            "key": "node_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The newly output string value. Only relevant for string outputs with a state of STREAMING.",
            "key": "delta",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "ChatMessage"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "WorkflowResultEventOutputDataJSON": {
      "name": "WorkflowResultEventOutputDataJSON",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "state",
            "valueType": {
              "type": "id",
              "value": "WorkflowNodeResultEventState"
            }
          },
          {
            "key": "node_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The newly output string value. Only relevant for string outputs with a state of STREAMING.",
            "key": "delta",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "unknown"
                }
              }
            }
          }
        ]
      }
    },
    "WorkflowResultEventOutputDataString": {
      "name": "WorkflowResultEventOutputDataString",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "state",
            "valueType": {
              "type": "id",
              "value": "WorkflowNodeResultEventState"
            }
          },
          {
            "key": "node_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "propertyAccess": "READ_ONLY"
          },
          {
            "description": "The newly output string value, meant to be concatenated with all previous. Will be non-null for events of state STREAMING.",
            "key": "delta",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The entire string value. Will be non-null for events of state FULFILLED.",
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "WorkflowStreamEvent": {
      "name": "WorkflowStreamEvent",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "WorkflowExecutionWorkflowResultEvent",
            "type": {
              "type": "id",
              "value": "WorkflowExecutionWorkflowResultEvent"
            },
            "displayName": "WORKFLOW"
          },
          {
            "typeName": "WorkflowExecutionNodeResultEvent",
            "type": {
              "type": "id",
              "value": "WorkflowExecutionNodeResultEvent"
            },
            "displayName": "NODE"
          }
        ]
      }
    }
  },
  "subpackages": {
    "subpackage_deployments": {
      "subpackageId": "subpackage_deployments",
      "name": "deployments",
      "endpoints": [
        {
          "auth": true,
          "description": "\n<strong style=\"background-color:#ffc107; color:white; padding:4px; border-radius:4px\">Unstable</strong>\n\nUsed to retrieve a deployment given its ID or name.\n",
          "method": "GET",
          "defaultEnvironment": "Default",
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.vellum.ai"
            }
          ],
          "id": "retrieve",
          "originalEndpointId": "endpoint_deployments.retrieve",
          "name": "Retrieve",
          "path": {
            "pathParameters": [
              {
                "description": "Either the Deployment's ID or its unique name",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/deployments/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "DeploymentRead"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "retrieveExample",
              "description": "",
              "path": "/v1/deployments/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "created": "foo",
                "label": "foo",
                "name": "foo",
                "status": "ACTIVE",
                "environment": "DEVELOPMENT",
                "model_type": "GENERATE",
                "active_model_version_ids": [
                  "foo"
                ],
                "last_deployed_on": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "created": "foo",
                  "label": "foo",
                  "name": "foo",
                  "status": "ACTIVE",
                  "environment": "DEVELOPMENT",
                  "model_type": "GENERATE",
                  "active_model_version_ids": [
                    "foo"
                  ],
                  "last_deployed_on": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_documentIndexes": {
      "subpackageId": "subpackage_documentIndexes",
      "name": "documentIndexes",
      "endpoints": [
        {
          "auth": true,
          "description": "<strong style=\"background-color:#ffc107; color:white; padding:4px; border-radius:4px\">Unstable</strong>\n\nCreates a new document index.",
          "method": "POST",
          "defaultEnvironment": "Default",
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.vellum.ai"
            }
          ],
          "id": "create",
          "originalEndpointId": "endpoint_documentIndexes.create",
          "name": "Create",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/document-indexes"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "DocumentIndexCreateRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "DocumentIndexRead"
              }
            },
            "statusCode": 201,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "Index Using Instructor Model",
              "description": "",
              "path": "/v1/document-indexes",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "label": "My Document Index",
                "name": "my-document-index",
                "indexing_config": {
                  "chunking": {
                    "chunker_name": "sentence-chunker",
                    "chunker_config": {
                      "character_limit": 1000,
                      "min_overlap_ratio": 0.5
                    }
                  },
                  "vectorizer": {
                    "model_name": "hkunlp/instructor-xl",
                    "config": {
                      "instruction_domain": "",
                      "instruction_document_text_type": "plain_text",
                      "instruction_query_text_type": "plain_text"
                    }
                  }
                }
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "label": "My Document Index",
                  "name": "my-document-index",
                  "indexing_config": {
                    "chunking": {
                      "chunker_name": "sentence-chunker",
                      "chunker_config": {
                        "character_limit": 1000,
                        "min_overlap_ratio": 0.5
                      }
                    },
                    "vectorizer": {
                      "model_name": "hkunlp/instructor-xl",
                      "config": {
                        "instruction_domain": "",
                        "instruction_document_text_type": "plain_text",
                        "instruction_query_text_type": "plain_text"
                      }
                    }
                  }
                }
              },
              "responseStatusCode": 201,
              "responseBody": {
                "id": "foo",
                "created": "foo",
                "label": "foo",
                "name": "foo",
                "status": "ACTIVE",
                "environment": "DEVELOPMENT",
                "indexing_config": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "created": "foo",
                  "label": "foo",
                  "name": "foo",
                  "status": "ACTIVE",
                  "environment": "DEVELOPMENT",
                  "indexing_config": {}
                }
              }
            },
            {
              "name": "Index Using a Sentence Transformers Model",
              "description": "",
              "path": "/v1/document-indexes",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "label": "My Document Index",
                "name": "my-document-index",
                "indexing_config": {
                  "chunking": {
                    "chunker_name": "sentence-chunker",
                    "chunker_config": {
                      "character_limit": 1000,
                      "min_overlap_ratio": 0.5
                    }
                  },
                  "vectorizer": {
                    "model_name": "sentence-transformers/multi-qa-mpnet-base-dot-v1",
                    "config": {}
                  }
                }
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "label": "My Document Index",
                  "name": "my-document-index",
                  "indexing_config": {
                    "chunking": {
                      "chunker_name": "sentence-chunker",
                      "chunker_config": {
                        "character_limit": 1000,
                        "min_overlap_ratio": 0.5
                      }
                    },
                    "vectorizer": {
                      "model_name": "sentence-transformers/multi-qa-mpnet-base-dot-v1",
                      "config": {}
                    }
                  }
                }
              },
              "responseStatusCode": 201,
              "responseBody": {
                "id": "foo",
                "created": "foo",
                "label": "foo",
                "name": "foo",
                "status": "ACTIVE",
                "environment": "DEVELOPMENT",
                "indexing_config": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "created": "foo",
                  "label": "foo",
                  "name": "foo",
                  "status": "ACTIVE",
                  "environment": "DEVELOPMENT",
                  "indexing_config": {}
                }
              }
            },
            {
              "name": "Index Using OpenAI Model",
              "description": "",
              "path": "/v1/document-indexes",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "label": "My Document Index",
                "name": "my-document-index",
                "indexing_config": {
                  "chunking": {
                    "chunker_name": "sentence-chunker",
                    "chunker_config": {
                      "character_limit": 1000,
                      "min_overlap_ratio": 0.5
                    }
                  },
                  "vectorizer": {
                    "model_name": "text-embedding-ada-002",
                    "config": {
                      "add_openai_api_key": true
                    }
                  }
                }
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "label": "My Document Index",
                  "name": "my-document-index",
                  "indexing_config": {
                    "chunking": {
                      "chunker_name": "sentence-chunker",
                      "chunker_config": {
                        "character_limit": 1000,
                        "min_overlap_ratio": 0.5
                      }
                    },
                    "vectorizer": {
                      "model_name": "text-embedding-ada-002",
                      "config": {
                        "add_openai_api_key": true
                      }
                    }
                  }
                }
              },
              "responseStatusCode": 201,
              "responseBody": {
                "id": "foo",
                "created": "foo",
                "label": "foo",
                "name": "foo",
                "status": "ACTIVE",
                "environment": "DEVELOPMENT",
                "indexing_config": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "created": "foo",
                  "label": "foo",
                  "name": "foo",
                  "status": "ACTIVE",
                  "environment": "DEVELOPMENT",
                  "indexing_config": {}
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_documents": {
      "subpackageId": "subpackage_documents",
      "name": "documents",
      "endpoints": [
        {
          "auth": true,
          "description": "\n<strong style=\"background-color:#4caf50; color:white; padding:4px; border-radius:4px\">Stable</strong>\n\nUsed to list documents. Optionally filter on supported fields.\n",
          "method": "GET",
          "defaultEnvironment": "Default",
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.vellum.ai"
            }
          ],
          "id": "list",
          "originalEndpointId": "endpoint_documents.list",
          "name": "List",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/documents"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Filter down to only those documents that are included in the specified index. You may provide either the Vellum-generated ID or the unique name of the index specified upon initial creation.",
              "key": "document_index_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            },
            {
              "description": "Number of results to return per page.",
              "key": "limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "The initial index from which to return the results.",
              "key": "offset",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "Which field to use when ordering the results.",
              "key": "ordering",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "PaginatedSlimDocumentList"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "listExample",
              "description": "",
              "path": "/v1/documents",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "count": 123,
                "next": "http://api.example.org/accounts/?offset=400&limit=100",
                "previous": "http://api.example.org/accounts/?offset=200&limit=100",
                "results": [
                  {
                    "id": "foo",
                    "external_id": "foo",
                    "last_uploaded_at": "foo",
                    "label": "foo",
                    "processing_state": "QUEUED",
                    "processing_failure_reason": "EXCEEDED_CHARACTER_LIMIT",
                    "status": "ACTIVE",
                    "keywords": [
                      "foo"
                    ],
                    "document_to_document_indexes": [
                      {
                        "id": "foo",
                        "document_index_id": "foo",
                        "indexing_state": "AWAITING_PROCESSING"
                      }
                    ]
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "count": 123,
                  "next": "http://api.example.org/accounts/?offset=400&limit=100",
                  "previous": "http://api.example.org/accounts/?offset=200&limit=100",
                  "results": [
                    {
                      "id": "foo",
                      "external_id": "foo",
                      "last_uploaded_at": "foo",
                      "label": "foo",
                      "processing_state": "QUEUED",
                      "processing_failure_reason": "EXCEEDED_CHARACTER_LIMIT",
                      "status": "ACTIVE",
                      "keywords": [
                        "foo"
                      ],
                      "document_to_document_indexes": [
                        {
                          "id": "foo",
                          "document_index_id": "foo",
                          "indexing_state": "AWAITING_PROCESSING"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "<strong style=\"background-color:#4caf50; color:white; padding:4px; border-radius:4px\">Stable</strong>\n\nUpload a document to be indexed and used for search.\n\n**Note:** Uses a base url of `https://documents.vellum.ai`.",
          "method": "POST",
          "defaultEnvironment": "Default",
          "environments": [
            {
              "id": "Documents",
              "baseUrl": "https://documents.vellum.ai"
            }
          ],
          "id": "upload",
          "originalEndpointId": "endpoint_documents.upload",
          "name": "Upload",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/upload-document"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "UploadDocumentBodyRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "UploadDocumentResponse"
              }
            },
            "statusCode": 201,
            "description": ""
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "UploadDocumentErrorResponse"
                }
              },
              "statusCode": 400,
              "description": "",
              "name": "BadRequestError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "UploadDocumentErrorResponse"
                }
              },
              "statusCode": 404,
              "description": "",
              "name": "NotFoundError",
              "examples": []
            },
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "UploadDocumentErrorResponse"
                }
              },
              "statusCode": 500,
              "description": "",
              "name": "InternalServerError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "documentsUploadExample",
              "description": "",
              "path": "/v1/upload-document",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "label": "foo",
                "contents": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "label": "foo",
                  "contents": "foo"
                }
              },
              "responseStatusCode": 201,
              "responseBody": {
                "document_id": "foo"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "document_id": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_modelVersions": {
      "subpackageId": "subpackage_modelVersions",
      "name": "modelVersions",
      "endpoints": [
        {
          "auth": true,
          "description": "\n<strong style=\"background-color:#ffc107; color:white; padding:4px; border-radius:4px\">Unstable</strong>\n\nUsed to retrieve a model version given its ID.\n",
          "method": "GET",
          "defaultEnvironment": "Default",
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.vellum.ai"
            }
          ],
          "id": "retrieve",
          "originalEndpointId": "endpoint_modelVersions.retrieve",
          "name": "Retrieve",
          "path": {
            "pathParameters": [
              {
                "description": "A UUID string identifying this model version.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/model-versions/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ModelVersionRead"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "retrieveExample",
              "description": "",
              "path": "/v1/model-versions/id",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "id": "foo",
                "created": "foo",
                "label": "foo",
                "model_type": "GENERATE",
                "provider": "ANTHROPIC",
                "external_id": "foo",
                "build_config": {
                  "base_model": "foo",
                  "sandbox_snapshot": {
                    "id": "foo",
                    "prompt_index": 42,
                    "prompt_id": "foo",
                    "sandbox_id": "foo"
                  }
                },
                "exec_config": {
                  "parameters": {
                    "temperature": 42,
                    "max_tokens": 42,
                    "top_p": 42,
                    "frequency_penalty": 42,
                    "presence_penalty": 42,
                    "logit_bias": {},
                    "stop": [
                      "foo"
                    ],
                    "top_k": 42
                  },
                  "input_variables": [
                    {
                      "key": "foo"
                    }
                  ],
                  "prompt_template": "foo",
                  "prompt_block_data": {
                    "version": 42,
                    "blocks": [
                      {
                        "id": "foo",
                        "block_type": "CHAT_MESSAGE",
                        "properties": {
                          "chat_role": "SYSTEM",
                          "chat_message_unterminated": false,
                          "template": "foo",
                          "template_type": "STRING",
                          "function_name": "foo",
                          "function_description": "foo",
                          "function_parameters": {},
                          "blocks": [
                            {
                              "id": "foo",
                              "block_type": "CHAT_MESSAGE",
                              "properties": {
                                "chat_role": "SYSTEM",
                                "chat_message_unterminated": false,
                                "template": "foo",
                                "template_type": "STRING",
                                "function_name": "foo",
                                "function_description": "foo",
                                "function_parameters": {},
                                "blocks": [
                                  {
                                    "id": "foo",
                                    "block_type": "CHAT_MESSAGE",
                                    "properties": {}
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "prompt_syntax_version": 42
                },
                "status": "CREATING"
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "foo",
                  "created": "foo",
                  "label": "foo",
                  "model_type": "GENERATE",
                  "provider": "ANTHROPIC",
                  "external_id": "foo",
                  "build_config": {
                    "base_model": "foo",
                    "sandbox_snapshot": {
                      "id": "foo",
                      "prompt_index": 42,
                      "prompt_id": "foo",
                      "sandbox_id": "foo"
                    }
                  },
                  "exec_config": {
                    "parameters": {
                      "temperature": 42,
                      "max_tokens": 42,
                      "top_p": 42,
                      "frequency_penalty": 42,
                      "presence_penalty": 42,
                      "logit_bias": {},
                      "stop": [
                        "foo"
                      ],
                      "top_k": 42
                    },
                    "input_variables": [
                      {
                        "key": "foo"
                      }
                    ],
                    "prompt_template": "foo",
                    "prompt_block_data": {
                      "version": 42,
                      "blocks": [
                        {
                          "id": "foo",
                          "block_type": "CHAT_MESSAGE",
                          "properties": {
                            "chat_role": "SYSTEM",
                            "chat_message_unterminated": false,
                            "template": "foo",
                            "template_type": "STRING",
                            "function_name": "foo",
                            "function_description": "foo",
                            "function_parameters": {},
                            "blocks": [
                              {
                                "id": "foo",
                                "block_type": "CHAT_MESSAGE",
                                "properties": {
                                  "chat_role": "SYSTEM",
                                  "chat_message_unterminated": false,
                                  "template": "foo",
                                  "template_type": "STRING",
                                  "function_name": "foo",
                                  "function_description": "foo",
                                  "function_parameters": {},
                                  "blocks": [
                                    {
                                      "id": "foo",
                                      "block_type": "CHAT_MESSAGE",
                                      "properties": {}
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "prompt_syntax_version": 42
                  },
                  "status": "CREATING"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "<strong style=\"background-color:#ffc107; color:white; padding:4px; border-radius:4px\">Unstable</strong>\n\nCompiles the prompt backing the model version using the provided input values.",
          "method": "POST",
          "defaultEnvironment": "Default",
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.vellum.ai"
            }
          ],
          "id": "model_version_compile_prompt",
          "originalEndpointId": "endpoint_modelVersions.model_version_compile_prompt",
          "name": "Model Version Compile Prompt",
          "path": {
            "pathParameters": [
              {
                "description": "A UUID string identifying this model version.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/model-versions/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/compile-prompt"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ModelVersionCompilePromptRequestRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ModelVersionCompilePromptResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "modelVersionsModelVersionCompilePromptExample",
              "description": "",
              "path": "/v1/model-versions/id/compile-prompt",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "input_values": {}
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "input_values": {}
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "prompt": {
                  "text": "foo",
                  "num_tokens": 42
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "prompt": {
                    "text": "foo",
                    "num_tokens": 42
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_registeredPrompts": {
      "subpackageId": "subpackage_registeredPrompts",
      "name": "registeredPrompts",
      "endpoints": [
        {
          "auth": true,
          "description": "<strong style=\"background-color:#ffc107; color:white; padding:4px; border-radius:4px\">Unstable</strong>\n\nRegisters a prompt within Vellum and creates associated Vellum entities. Intended to be used by integration\npartners, not directly by Vellum users.\n\nUnder the hood, this endpoint creates a new sandbox, a new model version, and a new deployment.",
          "method": "POST",
          "defaultEnvironment": "Default",
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.vellum.ai"
            }
          ],
          "id": "register_prompt",
          "originalEndpointId": "endpoint_registeredPrompts.register_prompt",
          "name": "Register Prompt",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/registered-prompts/register"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "RegisterPromptRequestRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RegisterPromptResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "RegisterPromptErrorResponse"
                }
              },
              "statusCode": 409,
              "description": "",
              "name": "ConflictError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "registeredPromptsRegisterPromptExample",
              "description": "",
              "path": "/v1/registered-prompts/register",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "label": "foo",
                "name": "foo",
                "prompt": {
                  "prompt_block_data": {
                    "version": 42,
                    "blocks": [
                      {
                        "id": "foo",
                        "block_type": "CHAT_MESSAGE",
                        "properties": {}
                      }
                    ]
                  },
                  "input_variables": [
                    {
                      "key": "foo"
                    }
                  ]
                },
                "provider": "ANTHROPIC",
                "model": "foo",
                "parameters": {
                  "temperature": 42,
                  "max_tokens": 42,
                  "stop": [
                    "foo"
                  ],
                  "top_p": 42,
                  "frequency_penalty": 42,
                  "presence_penalty": 42
                }
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "label": "foo",
                  "name": "foo",
                  "prompt": {
                    "prompt_block_data": {
                      "version": 42,
                      "blocks": [
                        {
                          "id": "foo",
                          "block_type": "CHAT_MESSAGE",
                          "properties": {}
                        }
                      ]
                    },
                    "input_variables": [
                      {
                        "key": "foo"
                      }
                    ]
                  },
                  "provider": "ANTHROPIC",
                  "model": "foo",
                  "parameters": {
                    "temperature": 42,
                    "max_tokens": 42,
                    "stop": [
                      "foo"
                    ],
                    "top_p": 42,
                    "frequency_penalty": 42,
                    "presence_penalty": 42
                  }
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "prompt": {
                  "id": "foo",
                  "label": "foo"
                },
                "sandbox_snapshot": {
                  "id": "foo"
                },
                "sandbox": {
                  "id": "foo",
                  "label": "foo"
                },
                "model_version": {
                  "id": "foo",
                  "label": "foo"
                },
                "deployment": {
                  "id": "foo",
                  "name": "foo",
                  "label": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "prompt": {
                    "id": "foo",
                    "label": "foo"
                  },
                  "sandbox_snapshot": {
                    "id": "foo"
                  },
                  "sandbox": {
                    "id": "foo",
                    "label": "foo"
                  },
                  "model_version": {
                    "id": "foo",
                    "label": "foo"
                  },
                  "deployment": {
                    "id": "foo",
                    "name": "foo",
                    "label": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_sandboxes": {
      "subpackageId": "subpackage_sandboxes",
      "name": "sandboxes",
      "endpoints": [
        {
          "auth": true,
          "description": "<strong style=\"background-color:#ffc107; color:white; padding:4px; border-radius:4px\">Unstable</strong>\n\nUpserts a new scenario for a sandbox, keying off of the optionally provided scenario id.\n\nIf an id is provided and has a match, the scenario will be updated. If no id is provided or no match\nis found, a new scenario will be appended to the end.\n\nNote that a full replacement of the scenario is performed, so any fields not provided will be removed\nor overwritten with default values.",
          "method": "POST",
          "defaultEnvironment": "Default",
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.vellum.ai"
            }
          ],
          "id": "upsert_sandbox_scenario",
          "originalEndpointId": "endpoint_sandboxes.upsert_sandbox_scenario",
          "name": "Upsert Sandbox Scenario",
          "path": {
            "pathParameters": [
              {
                "description": "A UUID string identifying this sandbox.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/sandboxes/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/scenarios"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "UpsertSandboxScenarioRequestRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "SandboxScenario"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "Basic Example",
              "description": "",
              "path": "/v1/sandboxes/id/scenarios",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "label": "Scenario 1",
                "inputs": [
                  {
                    "key": "var_1",
                    "type": "TEXT",
                    "value": "Hello, world!"
                  },
                  {
                    "key": "var_2",
                    "type": "TEXT",
                    "value": "Why hello, there!"
                  }
                ],
                "metric_input_params": {
                  "params": {}
                }
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "label": "Scenario 1",
                  "inputs": [
                    {
                      "key": "var_1",
                      "type": "TEXT",
                      "value": "Hello, world!"
                    },
                    {
                      "key": "var_2",
                      "type": "TEXT",
                      "value": "Why hello, there!"
                    }
                  ],
                  "metric_input_params": {
                    "params": {}
                  }
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "label": "Untitled Scenario",
                "inputs": [
                  {
                    "key": "foo",
                    "type": "TEXT",
                    "value": "foo",
                    "chat_history": [
                      {
                        "text": "foo",
                        "role": "SYSTEM"
                      }
                    ]
                  }
                ],
                "id": "foo",
                "metric_input_params": {
                  "params": {
                    "target": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "label": "Untitled Scenario",
                  "inputs": [
                    {
                      "key": "foo",
                      "type": "TEXT",
                      "value": "foo",
                      "chat_history": [
                        {
                          "text": "foo",
                          "role": "SYSTEM"
                        }
                      ]
                    }
                  ],
                  "id": "foo",
                  "metric_input_params": {
                    "params": {
                      "target": "foo"
                    }
                  }
                }
              }
            },
            {
              "name": "Chat History Example",
              "description": "",
              "path": "/v1/sandboxes/id/scenarios",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "label": "Scenario 2",
                "inputs": [
                  {
                    "key": "$chat_history",
                    "type": "CHAT_HISTORY",
                    "chat_history": [
                      {
                        "text": "What's your favorite color?",
                        "role": "USER"
                      },
                      {
                        "text": "AI's don't have a favorite color.... Yet.",
                        "role": "ASSISTANT"
                      }
                    ]
                  }
                ],
                "metric_input_params": {
                  "params": {}
                }
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "label": "Scenario 2",
                  "inputs": [
                    {
                      "key": "$chat_history",
                      "type": "CHAT_HISTORY",
                      "chat_history": [
                        {
                          "text": "What's your favorite color?",
                          "role": "USER"
                        },
                        {
                          "text": "AI's don't have a favorite color.... Yet.",
                          "role": "ASSISTANT"
                        }
                      ]
                    }
                  ],
                  "metric_input_params": {
                    "params": {}
                  }
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "label": "Untitled Scenario",
                "inputs": [
                  {
                    "key": "foo",
                    "type": "TEXT",
                    "value": "foo",
                    "chat_history": [
                      {
                        "text": "foo",
                        "role": "SYSTEM"
                      }
                    ]
                  }
                ],
                "id": "foo",
                "metric_input_params": {
                  "params": {
                    "target": "foo"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "label": "Untitled Scenario",
                  "inputs": [
                    {
                      "key": "foo",
                      "type": "TEXT",
                      "value": "foo",
                      "chat_history": [
                        {
                          "text": "foo",
                          "role": "SYSTEM"
                        }
                      ]
                    }
                  ],
                  "id": "foo",
                  "metric_input_params": {
                    "params": {
                      "target": "foo"
                    }
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "<strong style=\"background-color:#ffc107; color:white; padding:4px; border-radius:4px\">Unstable</strong>\n\nDeletes an existing scenario from a sandbox, keying off of the provided scenario id.",
          "method": "DELETE",
          "defaultEnvironment": "Default",
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.vellum.ai"
            }
          ],
          "id": "delete_sandbox_scenario",
          "originalEndpointId": "endpoint_sandboxes.delete_sandbox_scenario",
          "name": "Delete Sandbox Scenario",
          "path": {
            "pathParameters": [
              {
                "description": "A UUID string identifying this sandbox.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              {
                "description": "An id identifying the scenario that you'd like to delete",
                "key": "scenario_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/sandboxes/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/scenarios/"
              },
              {
                "type": "pathParameter",
                "value": "scenario_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [],
          "examples": [
            {
              "name": "deleteSandboxScenarioExample",
              "description": "",
              "path": "/v1/sandboxes/id/scenarios/scenario_id",
              "pathParameters": {
                "id": "id",
                "scenario_id": "scenario_id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_testSuites": {
      "subpackageId": "subpackage_testSuites",
      "name": "testSuites",
      "endpoints": [
        {
          "auth": true,
          "description": "<strong style=\"background-color:#ffc107; color:white; padding:4px; border-radius:4px\">Unstable</strong>\n\nUpserts a new test case for a test suite, keying off of the optionally provided test case id.\n\nIf an id is provided and has a match, the test case will be updated. If no id is provided or no match\nis found, a new test case will be appended to the end.\n\nNote that a full replacement of the test case is performed, so any fields not provided will be removed\nor overwritten with default values.",
          "method": "POST",
          "defaultEnvironment": "Default",
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.vellum.ai"
            }
          ],
          "id": "upsert_test_suite_test_case",
          "originalEndpointId": "endpoint_testSuites.upsert_test_suite_test_case",
          "name": "Upsert Test Suite Test Case",
          "path": {
            "pathParameters": [
              {
                "description": "A UUID string identifying this test suite.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/test-suites/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/test-cases"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "TestSuiteTestCaseRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TestSuiteTestCase"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "testSuitesUpsertTestSuiteTestCaseExample",
              "description": "",
              "path": "/v1/test-suites/id/test-cases",
              "pathParameters": {
                "id": "id"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "input_values": {},
                "evaluation_params": {}
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "input_values": {},
                  "evaluation_params": {}
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "test_case_id": "foo",
                "label": "foo",
                "input_values": {},
                "evaluation_params": {
                  "target": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "test_case_id": "foo",
                  "label": "foo",
                  "input_values": {},
                  "evaluation_params": {
                    "target": "foo"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "<strong style=\"background-color:#ffc107; color:white; padding:4px; border-radius:4px\">Unstable</strong>\n\nDeletes an existing test case for a test suite, keying off of the test case id.",
          "method": "DELETE",
          "defaultEnvironment": "Default",
          "environments": [
            {
              "id": "Default",
              "baseUrl": "https://api.vellum.ai"
            }
          ],
          "id": "delete_test_suite_test_case",
          "originalEndpointId": "endpoint_testSuites.delete_test_suite_test_case",
          "name": "Delete Test Suite Test Case",
          "path": {
            "pathParameters": [
              {
                "description": "A UUID string identifying this test suite.",
                "key": "id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              },
              {
                "description": "An id identifying the test case that you'd like to delete",
                "key": "test_case_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v1/test-suites/"
              },
              {
                "type": "pathParameter",
                "value": "id"
              },
              {
                "type": "literal",
                "value": "/test-cases/"
              },
              {
                "type": "pathParameter",
                "value": "test_case_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [],
          "examples": [
            {
              "name": "deleteTestSuiteTestCaseExample",
              "description": "",
              "path": "/v1/test-suites/id/test-cases/test_case_id",
              "pathParameters": {
                "id": "id",
                "test_case_id": "test_case_id"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    }
  },
  "rootPackage": {
    "endpoints": [
      {
        "availability": "GenerallyAvailable",
        "auth": true,
        "description": "Executes a deployed Prompt and streams back the results.",
        "method": "POST",
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Predict",
            "baseUrl": "https://predict.vellum.ai"
          }
        ],
        "id": "execute-prompt-stream",
        "originalEndpointId": "endpoint_.execute-prompt-stream",
        "name": "Execute Prompt Stream",
        "path": {
          "pathParameters": [],
          "parts": [
            {
              "type": "literal",
              "value": ""
            },
            {
              "type": "literal",
              "value": "/v1/execute-prompt-stream"
            }
          ]
        },
        "queryParameters": [],
        "headers": [],
        "request": {
          "type": {
            "type": "json",
            "contentType": "application/json",
            "shape": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ExecutePromptStreamRequest"
              }
            }
          }
        },
        "response": {
          "type": {
            "type": "stream",
            "shape": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ExecutePromptEvent"
              }
            }
          },
          "statusCode": 200,
          "description": ""
        },
        "errorsV2": [
          {
            "type": {
              "type": "alias",
              "value": {
                "type": "id",
                "value": "ExecutePromptApiErrorResponse"
              }
            },
            "statusCode": 400,
            "description": "",
            "name": "BadRequestError",
            "examples": []
          },
          {
            "type": {
              "type": "alias",
              "value": {
                "type": "id",
                "value": "ExecutePromptApiErrorResponse"
              }
            },
            "statusCode": 403,
            "description": "",
            "name": "ForbiddenError",
            "examples": []
          },
          {
            "type": {
              "type": "alias",
              "value": {
                "type": "id",
                "value": "ExecutePromptApiErrorResponse"
              }
            },
            "statusCode": 404,
            "description": "",
            "name": "NotFoundError",
            "examples": []
          },
          {
            "type": {
              "type": "alias",
              "value": {
                "type": "id",
                "value": "ExecutePromptApiErrorResponse"
              }
            },
            "statusCode": 500,
            "description": "",
            "name": "InternalServerError",
            "examples": []
          }
        ],
        "examples": [
          {
            "name": "executePromptStreamExample",
            "description": "",
            "path": "/v1/execute-prompt-stream",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "inputs": [
                "foo"
              ]
            },
            "requestBodyV3": {
              "type": "json",
              "value": {
                "inputs": [
                  "foo"
                ]
              }
            },
            "responseStatusCode": 200,
            "responseBody": [
              {
                "state": "INITIATED",
                "meta": {
                  "model_name": "foo",
                  "latency": 42,
                  "deployment_release_tag": "foo",
                  "prompt_version_id": "foo"
                },
                "execution_id": "foo"
              }
            ],
            "responseBodyV3": {
              "type": "stream",
              "value": [
                {
                  "type": "json",
                  "value": {
                    "state": "INITIATED",
                    "meta": {
                      "model_name": "foo",
                      "latency": 42,
                      "deployment_release_tag": "foo",
                      "prompt_version_id": "foo"
                    },
                    "execution_id": "foo"
                  }
                }
              ]
            }
          }
        ],
        "protocol": {
          "type": "rest"
        }
      },
      {
        "auth": true,
        "description": "<strong style=\"background-color:#ffc107; color:white; padding:4px; border-radius:4px\">Unstable</strong>\n\nExecutes a deployed Workflow and streams back its results.",
        "method": "POST",
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Predict",
            "baseUrl": "https://predict.vellum.ai"
          }
        ],
        "id": "execute-workflow-stream",
        "originalEndpointId": "endpoint_.execute-workflow-stream",
        "name": "Execute Workflow Stream",
        "path": {
          "pathParameters": [],
          "parts": [
            {
              "type": "literal",
              "value": ""
            },
            {
              "type": "literal",
              "value": "/v1/execute-workflow-stream"
            }
          ]
        },
        "queryParameters": [],
        "headers": [],
        "request": {
          "type": {
            "type": "json",
            "contentType": "application/json",
            "shape": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ExecuteWorkflowStreamRequest"
              }
            }
          }
        },
        "response": {
          "type": {
            "type": "stream",
            "shape": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "WorkflowStreamEvent"
              }
            }
          },
          "statusCode": 200,
          "description": ""
        },
        "errorsV2": [],
        "examples": [
          {
            "name": "executeWorkflowStreamExample",
            "description": "",
            "path": "/v1/execute-workflow-stream",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "inputs": [
                {
                  "name": "foo",
                  "value": "foo"
                }
              ]
            },
            "requestBodyV3": {
              "type": "json",
              "value": {
                "inputs": [
                  {
                    "name": "foo",
                    "value": "foo"
                  }
                ]
              }
            },
            "responseStatusCode": 200,
            "responseBody": [
              {
                "run_id": "foo",
                "external_id": "foo",
                "type": "foo",
                "data": {
                  "id": "foo",
                  "state": "INITIATED",
                  "ts": "foo",
                  "output": {
                    "name": "foo",
                    "state": "INITIATED",
                    "node_id": "foo",
                    "type": "foo",
                    "delta": "foo",
                    "value": "foo"
                  },
                  "error": {
                    "message": "foo",
                    "code": "WORKFLOW_INITIALIZATION"
                  }
                }
              }
            ],
            "responseBodyV3": {
              "type": "stream",
              "value": [
                {
                  "type": "json",
                  "value": {
                    "run_id": "foo",
                    "external_id": "foo",
                    "type": "foo",
                    "data": {
                      "id": "foo",
                      "state": "INITIATED",
                      "ts": "foo",
                      "output": {
                        "name": "foo",
                        "state": "INITIATED",
                        "node_id": "foo",
                        "type": "foo",
                        "delta": "foo",
                        "value": "foo"
                      },
                      "error": {
                        "message": "foo",
                        "code": "WORKFLOW_INITIALIZATION"
                      }
                    }
                  }
                }
              ]
            }
          }
        ],
        "protocol": {
          "type": "rest"
        }
      },
      {
        "auth": true,
        "description": "<strong style=\"background-color:#4caf50; color:white; padding:4px; border-radius:4px\">Stable</strong>\n\nGenerate a completion using a previously defined deployment.\n\n**Note:** Uses a base url of `https://predict.vellum.ai`.",
        "method": "POST",
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Predict",
            "baseUrl": "https://predict.vellum.ai"
          }
        ],
        "id": "generate",
        "originalEndpointId": "endpoint_.generate",
        "name": "Generate",
        "path": {
          "pathParameters": [],
          "parts": [
            {
              "type": "literal",
              "value": ""
            },
            {
              "type": "literal",
              "value": "/v1/generate"
            }
          ]
        },
        "queryParameters": [],
        "headers": [],
        "request": {
          "type": {
            "type": "json",
            "contentType": "application/json",
            "shape": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "GenerateBodyRequest"
              }
            }
          }
        },
        "response": {
          "type": {
            "type": "reference",
            "value": {
              "type": "id",
              "value": "GenerateResponse"
            }
          },
          "statusCode": 200,
          "description": ""
        },
        "errorsV2": [
          {
            "type": {
              "type": "alias",
              "value": {
                "type": "id",
                "value": "GenerateErrorResponse"
              }
            },
            "statusCode": 400,
            "description": "",
            "name": "BadRequestError",
            "examples": []
          },
          {
            "type": {
              "type": "alias",
              "value": {
                "type": "id",
                "value": "GenerateErrorResponse"
              }
            },
            "statusCode": 403,
            "description": "",
            "name": "ForbiddenError",
            "examples": []
          },
          {
            "type": {
              "type": "alias",
              "value": {
                "type": "id",
                "value": "GenerateErrorResponse"
              }
            },
            "statusCode": 404,
            "description": "",
            "name": "NotFoundError",
            "examples": []
          },
          {
            "type": {
              "type": "alias",
              "value": {
                "type": "id",
                "value": "GenerateErrorResponse"
              }
            },
            "statusCode": 500,
            "description": "",
            "name": "InternalServerError",
            "examples": []
          }
        ],
        "examples": [
          {
            "name": "generateExample",
            "description": "",
            "path": "/v1/generate",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "requests": [
                {
                  "input_values": {}
                }
              ]
            },
            "requestBodyV3": {
              "type": "json",
              "value": {
                "requests": [
                  {
                    "input_values": {}
                  }
                ]
              }
            },
            "responseStatusCode": 200,
            "responseBody": {
              "results": [
                {
                  "data": {
                    "completions": [
                      {
                        "id": "foo",
                        "external_id": "foo",
                        "text": "foo",
                        "finish_reason": "LENGTH",
                        "logprobs": {
                          "tokens": [
                            {
                              "token": "foo",
                              "logprob": 42,
                              "top_logprobs": {},
                              "text_offset": 42
                            }
                          ],
                          "likelihood": 42
                        },
                        "model_version_id": "foo",
                        "type": "STRING"
                      }
                    ]
                  },
                  "error": {
                    "message": "foo"
                  }
                }
              ]
            },
            "responseBodyV3": {
              "type": "json",
              "value": {
                "results": [
                  {
                    "data": {
                      "completions": [
                        {
                          "id": "foo",
                          "external_id": "foo",
                          "text": "foo",
                          "finish_reason": "LENGTH",
                          "logprobs": {
                            "tokens": [
                              {
                                "token": "foo",
                                "logprob": 42,
                                "top_logprobs": {},
                                "text_offset": 42
                              }
                            ],
                            "likelihood": 42
                          },
                          "model_version_id": "foo",
                          "type": "STRING"
                        }
                      ]
                    },
                    "error": {
                      "message": "foo"
                    }
                  }
                ]
              }
            }
          }
        ],
        "protocol": {
          "type": "rest"
        }
      },
      {
        "auth": true,
        "description": "<strong style=\"background-color:#4caf50; color:white; padding:4px; border-radius:4px\">Stable</strong>\n\nGenerate a stream of completions using a previously defined deployment.\n\n**Note:** Uses a base url of `https://predict.vellum.ai`.",
        "method": "POST",
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Predict",
            "baseUrl": "https://predict.vellum.ai"
          }
        ],
        "id": "generate-stream",
        "originalEndpointId": "endpoint_.generate-stream",
        "name": "Generate Stream",
        "path": {
          "pathParameters": [],
          "parts": [
            {
              "type": "literal",
              "value": ""
            },
            {
              "type": "literal",
              "value": "/v1/generate-stream"
            }
          ]
        },
        "queryParameters": [],
        "headers": [],
        "request": {
          "type": {
            "type": "json",
            "contentType": "application/json",
            "shape": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "GenerateStreamBodyRequest"
              }
            }
          }
        },
        "response": {
          "type": {
            "type": "stream",
            "shape": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "GenerateStreamResponse"
              }
            }
          },
          "statusCode": 200,
          "description": ""
        },
        "errorsV2": [
          {
            "type": {
              "type": "alias",
              "value": {
                "type": "id",
                "value": "GenerateErrorResponse"
              }
            },
            "statusCode": 400,
            "description": "",
            "name": "BadRequestError",
            "examples": []
          },
          {
            "type": {
              "type": "alias",
              "value": {
                "type": "id",
                "value": "GenerateErrorResponse"
              }
            },
            "statusCode": 403,
            "description": "",
            "name": "ForbiddenError",
            "examples": []
          },
          {
            "type": {
              "type": "alias",
              "value": {
                "type": "id",
                "value": "GenerateErrorResponse"
              }
            },
            "statusCode": 404,
            "description": "",
            "name": "NotFoundError",
            "examples": []
          },
          {
            "type": {
              "type": "alias",
              "value": {
                "type": "id",
                "value": "GenerateErrorResponse"
              }
            },
            "statusCode": 500,
            "description": "",
            "name": "InternalServerError",
            "examples": []
          }
        ],
        "examples": [
          {
            "name": "generateStreamExample",
            "description": "",
            "path": "/v1/generate-stream",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "requests": [
                {
                  "input_values": {}
                }
              ]
            },
            "requestBodyV3": {
              "type": "json",
              "value": {
                "requests": [
                  {
                    "input_values": {}
                  }
                ]
              }
            },
            "responseStatusCode": 200,
            "responseBody": [
              {
                "delta": {
                  "request_index": 42,
                  "data": {
                    "completion_index": 42,
                    "completion": {
                      "id": "foo",
                      "external_id": "foo",
                      "text": "foo",
                      "finish_reason": "LENGTH",
                      "logprobs": {
                        "tokens": [
                          {
                            "token": "foo",
                            "logprob": 42,
                            "top_logprobs": {},
                            "text_offset": 42
                          }
                        ],
                        "likelihood": 42
                      },
                      "model_version_id": "foo",
                      "type": "STRING"
                    }
                  },
                  "error": {
                    "message": "foo"
                  }
                }
              }
            ],
            "responseBodyV3": {
              "type": "stream",
              "value": [
                {
                  "type": "json",
                  "value": {
                    "delta": {
                      "request_index": 42,
                      "data": {
                        "completion_index": 42,
                        "completion": {
                          "id": "foo",
                          "external_id": "foo",
                          "text": "foo",
                          "finish_reason": "LENGTH",
                          "logprobs": {
                            "tokens": [
                              {
                                "token": "foo",
                                "logprob": 42,
                                "top_logprobs": {},
                                "text_offset": 42
                              }
                            ],
                            "likelihood": 42
                          },
                          "model_version_id": "foo",
                          "type": "STRING"
                        }
                      },
                      "error": {
                        "message": "foo"
                      }
                    }
                  }
                }
              ]
            }
          }
        ],
        "protocol": {
          "type": "rest"
        }
      },
      {
        "auth": true,
        "description": "<strong style=\"background-color:#4caf50; color:white; padding:4px; border-radius:4px\">Stable</strong>\n\nPerform a search against a document index.\n\n**Note:** Uses a base url of `https://predict.vellum.ai`.",
        "method": "POST",
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Predict",
            "baseUrl": "https://predict.vellum.ai"
          }
        ],
        "id": "search",
        "originalEndpointId": "endpoint_.search",
        "name": "Search",
        "path": {
          "pathParameters": [],
          "parts": [
            {
              "type": "literal",
              "value": ""
            },
            {
              "type": "literal",
              "value": "/v1/search"
            }
          ]
        },
        "queryParameters": [],
        "headers": [],
        "request": {
          "type": {
            "type": "json",
            "contentType": "application/json",
            "shape": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "SearchRequestBodyRequest"
              }
            }
          }
        },
        "response": {
          "type": {
            "type": "reference",
            "value": {
              "type": "id",
              "value": "SearchResponse"
            }
          },
          "statusCode": 200,
          "description": ""
        },
        "errorsV2": [
          {
            "type": {
              "type": "alias",
              "value": {
                "type": "id",
                "value": "SearchErrorResponse"
              }
            },
            "statusCode": 400,
            "description": "",
            "name": "BadRequestError",
            "examples": []
          },
          {
            "type": {
              "type": "alias",
              "value": {
                "type": "id",
                "value": "SearchErrorResponse"
              }
            },
            "statusCode": 404,
            "description": "",
            "name": "NotFoundError",
            "examples": []
          },
          {
            "type": {
              "type": "alias",
              "value": {
                "type": "id",
                "value": "SearchErrorResponse"
              }
            },
            "statusCode": 500,
            "description": "",
            "name": "InternalServerError",
            "examples": []
          }
        ],
        "examples": [
          {
            "name": "searchExample",
            "description": "",
            "path": "/v1/search",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "query": "foo"
            },
            "requestBodyV3": {
              "type": "json",
              "value": {
                "query": "foo"
              }
            },
            "responseStatusCode": 200,
            "responseBody": {
              "results": [
                {
                  "document": {
                    "id": "foo",
                    "label": "foo",
                    "external_id": "foo"
                  },
                  "text": "foo",
                  "keywords": [
                    "foo"
                  ],
                  "score": 42
                }
              ]
            },
            "responseBodyV3": {
              "type": "json",
              "value": {
                "results": [
                  {
                    "document": {
                      "id": "foo",
                      "label": "foo",
                      "external_id": "foo"
                    },
                    "text": "foo",
                    "keywords": [
                      "foo"
                    ],
                    "score": 42
                  }
                ]
              }
            }
          }
        ],
        "protocol": {
          "type": "rest"
        }
      },
      {
        "auth": true,
        "description": "<strong style=\"background-color:#4caf50; color:white; padding:4px; border-radius:4px\">Stable</strong>\n\nUsed to submit feedback regarding the quality of previously generated completions.\n\n**Note:** Uses a base url of `https://predict.vellum.ai`.",
        "method": "POST",
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Predict",
            "baseUrl": "https://predict.vellum.ai"
          }
        ],
        "id": "submit-completion-actuals",
        "originalEndpointId": "endpoint_.submit-completion-actuals",
        "name": "Submit Completion Actuals",
        "path": {
          "pathParameters": [],
          "parts": [
            {
              "type": "literal",
              "value": ""
            },
            {
              "type": "literal",
              "value": "/v1/submit-completion-actuals"
            }
          ]
        },
        "queryParameters": [],
        "headers": [],
        "request": {
          "type": {
            "type": "json",
            "contentType": "application/json",
            "shape": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "SubmitCompletionActualsRequest"
              }
            }
          }
        },
        "errorsV2": [
          {
            "type": {
              "type": "alias",
              "value": {
                "type": "id",
                "value": "SubmitCompletionActualsErrorResponse"
              }
            },
            "statusCode": 400,
            "description": "",
            "name": "BadRequestError",
            "examples": []
          },
          {
            "type": {
              "type": "alias",
              "value": {
                "type": "id",
                "value": "SubmitCompletionActualsErrorResponse"
              }
            },
            "statusCode": 404,
            "description": "",
            "name": "NotFoundError",
            "examples": []
          },
          {
            "type": {
              "type": "alias",
              "value": {
                "type": "id",
                "value": "SubmitCompletionActualsErrorResponse"
              }
            },
            "statusCode": 500,
            "description": "",
            "name": "InternalServerError",
            "examples": []
          }
        ],
        "examples": [
          {
            "name": "submitCompletionActualsExample",
            "description": "",
            "path": "/v1/submit-completion-actuals",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "actuals": [
                {}
              ]
            },
            "requestBodyV3": {
              "type": "json",
              "value": {
                "actuals": [
                  {}
                ]
              }
            },
            "responseStatusCode": 200
          }
        ],
        "protocol": {
          "type": "rest"
        }
      }
    ],
    "webhooks": [],
    "websockets": [],
    "types": [
      "BlockTypeEnum",
      "ChatMessage",
      "ChatMessageRequest",
      "ChatMessageRole",
      "ConditionalNodeResult",
      "ConditionalNodeResultData",
      "ContentType",
      "DeploymentNodeResult",
      "DeploymentNodeResultData",
      "DeploymentRead",
      "DeploymentReadStatusEnum",
      "Document",
      "DocumentDocumentToDocumentIndex",
      "DocumentIndexCreateRequest",
      "DocumentIndexRead",
      "DocumentIndexStatus",
      "EnrichedNormalizedCompletion",
      "EnvironmentEnum",
      "EvaluationParams",
      "EvaluationParamsRequest",
      "ExecutePromptApiErrorResponse",
      "ExecutePromptEvent",
      "ExecutePromptStreamRequest",
      "InitiatedEnum",
      "InitiatedPromptExecutionMeta",
      "InitiatedExecutePromptEvent",
      "StreamingEnum",
      "PromptOutput",
      "StringVellumValue",
      "StringEnum",
      "JsonEnum",
      "JsonVellumValue",
      "ErrorEnum",
      "FunctionCallVellumValue",
      "FunctionCallEnum",
      "FunctionCall",
      "ErrorVellumValue",
      "StreamingExecutePromptEvent",
      "StreamingPromptExecutionMeta",
      "FulfilledEnum",
      "FulfilledExecutePromptEvent",
      "FulfilledPromptExecutionMeta",
      "RejectedEnum",
      "RejectedExecutePromptEvent",
      "RejectedPromptExecutionMeta",
      "ExecuteWorkflowStreamRequest",
      "FinishReasonEnum",
      "GenerateBodyRequest",
      "GenerateErrorResponse",
      "GenerateOptionsRequest",
      "GenerateRequest",
      "GenerateResponse",
      "GenerateResult",
      "GenerateResultData",
      "GenerateResultError",
      "GenerateStreamBodyRequest",
      "GenerateStreamResponse",
      "GenerateStreamResult",
      "GenerateStreamResultData",
      "IndexingStateEnum",
      "LogprobsEnum",
      "MLModelUsage",
      "ModelTypeEnum",
      "ModelVersionBuildConfig",
      "ModelVersionCompilePromptRequestRequest",
      "ModelVersionCompilePromptResponse",
      "ModelVersionCompiledPrompt",
      "ModelVersionExecConfig",
      "ModelVersionExecConfigParameters",
      "ModelVersionRead",
      "ModelVersionReadStatusEnum",
      "ModelVersionSandboxSnapshot",
      "NormalizedLogProbs",
      "NormalizedTokenLogProbs",
      "PaginatedSlimDocumentList",
      "Price",
      "ProcessingFailureReasonEnum",
      "ProcessingStateEnum",
      "PromptNodeResult",
      "PromptNodeResultData",
      "PromptTemplateBlock",
      "PromptTemplateBlockData",
      "PromptTemplateBlockDataRequest",
      "PromptTemplateBlockProperties",
      "PromptTemplateBlockPropertiesRequest",
      "PromptTemplateBlockRequest",
      "PromptTemplateInputVariable",
      "PromptTemplateInputVariableRequest",
      "ProviderEnum",
      "RegisterPromptErrorResponse",
      "RegisterPromptModelParametersRequest",
      "RegisterPromptPrompt",
      "RegisterPromptPromptInfoRequest",
      "RegisterPromptRequestRequest",
      "RegisterPromptResponse",
      "RegisteredPromptDeployment",
      "RegisteredPromptModelVersion",
      "RegisteredPromptSandbox",
      "RegisteredPromptSandboxSnapshot",
      "SandboxMetricInputParams",
      "SandboxMetricInputParamsRequest",
      "SandboxNodeResult",
      "SandboxNodeResultData",
      "SandboxScenario",
      "ScenarioInput",
      "ScenarioInputRequest",
      "ScenarioInputTypeEnum",
      "SearchErrorResponse",
      "SearchFiltersRequest",
      "SearchNodeResult",
      "SearchNodeResultData",
      "SearchRequestBodyRequest",
      "SearchRequestOptionsRequest",
      "SearchResponse",
      "SearchResult",
      "SearchResultMergingRequest",
      "SearchWeightsRequest",
      "SlimDocument",
      "SlimDocumentStatusEnum",
      "SubmitCompletionActualRequest",
      "SubmitCompletionActualsErrorResponse",
      "SubmitCompletionActualsRequest",
      "TerminalNodeChatHistoryResult",
      "TerminalNodeJsonResult",
      "TerminalNodeResult",
      "TerminalNodeResultData",
      "TerminalNodeResultOutput",
      "TerminalNodeStringResult",
      "TestSuiteTestCase",
      "TestSuiteTestCaseRequest",
      "UnitEnum",
      "UploadDocumentBodyRequest",
      "UploadDocumentErrorResponse",
      "UploadDocumentResponse",
      "UpsertSandboxScenarioRequestRequest",
      "VellumError",
      "VellumErrorCodeEnum",
      "WorkflowEventError",
      "WorkflowExecutionEventErrorCode",
      "WorkflowExecutionNodeResultEvent",
      "WorkflowExecutionWorkflowResultEvent",
      "WorkflowNodeResultData",
      "WorkflowNodeResultEvent",
      "WorkflowNodeResultEventState",
      "WorkflowRequestChatHistoryInputRequest",
      "WorkflowRequestInputRequest",
      "WorkflowRequestJSONInputRequest",
      "WorkflowRequestStringInputRequest",
      "WorkflowResultEvent",
      "WorkflowResultEventOutputData",
      "WorkflowResultEventOutputDataChatHistory",
      "WorkflowResultEventOutputDataJSON",
      "WorkflowResultEventOutputDataString",
      "WorkflowStreamEvent"
    ],
    "subpackages": [
      "subpackage_deployments",
      "subpackage_documentIndexes",
      "subpackage_documents",
      "subpackage_modelVersions",
      "subpackage_registeredPrompts",
      "subpackage_sandboxes",
      "subpackage_testSuites"
    ]
  },
  "auth": {
    "type": "header",
    "headerWireValue": "X_API_KEY",
    "nameOverride": "X_API_KEY"
  },
  "snippetsConfiguration": {},
  "globalHeaders": []
}