{
  "types": {
    "signatureType": {
      "description": "`signature` must be sent along with your upload request if you would like to use signed uploads.\nThe signature should be generated on your backend.\n**Note**: the process requires knowledge of your Uploadcare Project's Secret key.\nSee [signed uploads](https://uploadcare.com/docs/security/secure-uploads/) for details.\n",
      "name": "signatureType",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "expireType": {
      "description": "`expire` must be sent along with your upload request if you would like to use signed uploads.\nThe parameter defines the time during which your signature is valid. It's a UNIX timestamp.\nSee [signed uploads](https://uploadcare.com/docs/security/secure-uploads/) for details.\n",
      "name": "expireType",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "integer"
          }
        }
      }
    },
    "storeType": {
      "description": "Determines if an uploaded file should be marked as temporary or permanent.\n\nThe parameter can have the following values:\n- `0` - do not mark an uploaded file as stored and remove it after 24 hours\n- `1` - mark the uploaded file as stored\n- `auto` - delegate the choice of the file-storing behavior to a project-wide setting called\n  [auto-store](https://app.uploadcare.com/projects/-/settings/#storage).\n\nThe default value depends on the user registration date.\n\nFor all users registered after February 12, 2024 (UTC 13:30), the default value is `auto`. \nFile-storing behavior depends entirely on what is set in the \n[storage settings](https://app.uploadcare.com/projects/-/settings/#storage) in the Dashboard.\n\nFor users registered before February 12, 2024, the default value is `0`. \nTo ensure that file storage in the project matches the settings in the Dashboard,\nchange the value to `auto`.\n",
      "name": "storeType",
      "shape": {
        "type": "enum",
        "default": "auto",
        "values": [
          {
            "value": "0"
          },
          {
            "value": "1"
          },
          {
            "value": "auto"
          }
        ]
      }
    },
    "projectPublicKeyType": {
      "description": "Public key identifying an Uploadcare project your uploads will go to.",
      "name": "projectPublicKeyType",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "fileUploadInfo": {
      "description": "Information about an uploaded file.",
      "name": "fileUploadInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "File's unique ID.",
            "key": "uuid",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Same as `uuid`",
            "key": "file_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "File's size in bytes.",
            "key": "size",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Same as `size`.",
            "key": "total",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Same as `size`.",
            "key": "done",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Original file of the uploaded file.",
            "key": "original_filename",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sanitized `original_filename`.",
            "key": "filename",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "File's MIME-type.",
            "key": "mime_type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "image_info",
            "valueType": {
              "type": "id",
              "value": "imageInfo"
            }
          },
          {
            "key": "video_info",
            "valueType": {
              "type": "id",
              "value": "legacyVideoInfo"
            }
          },
          {
            "key": "content_info",
            "valueType": {
              "type": "id",
              "value": "contentInfo"
            }
          },
          {
            "key": "metadata",
            "valueType": {
              "type": "id",
              "value": "metadata"
            }
          },
          {
            "description": "True if the uploaded file is an image of a supported file format.",
            "key": "is_image",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "True if the file has been marked as stored.",
            "key": "is_stored",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "True if the file is ready to be fetched from Uploadcare's CDN.",
            "key": "is_ready",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "Name of an AWS S3 bucket where the file is stored. Only available if you associate a Foreign Storage Bucket with your project.",
            "key": "s3_bucket",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "FileUploadInfoWaitingStatusStatus": {
      "description": "The system is preparing to handle the request.\n",
      "name": "FileUploadInfoWaitingStatusStatus",
      "shape": {
        "type": "enum",
        "default": "waiting",
        "values": [
          {
            "value": "waiting"
          }
        ]
      }
    },
    "fileUploadInfoWaitingStatus": {
      "name": "fileUploadInfoWaitingStatus",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The system is preparing to handle the request.\n",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "FileUploadInfoWaitingStatusStatus"
              }
            }
          }
        ]
      }
    },
    "FileUploadInfoProgressStatusStatus": {
      "description": "The system is fetching/uploading the file.\n",
      "name": "FileUploadInfoProgressStatusStatus",
      "shape": {
        "type": "enum",
        "default": "progress",
        "values": [
          {
            "value": "progress"
          }
        ]
      }
    },
    "fileUploadInfoProgressStatus": {
      "name": "fileUploadInfoProgressStatus",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The system is fetching/uploading the file.\n",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "FileUploadInfoProgressStatusStatus"
              }
            }
          },
          {
            "description": "The expected size of the fetched file (in bytes).\n\n**Note:** the value can be missing if the server we are fetching the file from\ndoes not provide the information or if the server is returning the file in, for\nexample, [compressed form](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding).\n",
            "key": "total",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "description": "How many bytes of the file have been fetched so far.\n",
            "key": "done",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "FileUploadInfoSuccessStatusStatus": {
      "description": "The file has been fetched/uploaded successfully.",
      "name": "FileUploadInfoSuccessStatusStatus",
      "shape": {
        "type": "enum",
        "default": "success",
        "values": [
          {
            "value": "success"
          }
        ]
      }
    },
    "fileUploadInfoSuccessStatus": {
      "name": "fileUploadInfoSuccessStatus",
      "shape": {
        "type": "object",
        "extends": [
          "fileUploadInfo"
        ],
        "properties": [
          {
            "description": "The file has been fetched/uploaded successfully.",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "FileUploadInfoSuccessStatusStatus"
              }
            }
          }
        ]
      }
    },
    "FileUploadInfoErrorStatusStatus": {
      "description": "The system failed to fetch and/or upload the file.\n",
      "name": "FileUploadInfoErrorStatusStatus",
      "shape": {
        "type": "enum",
        "default": "error",
        "values": [
          {
            "value": "error"
          }
        ]
      }
    },
    "fileUploadInfoErrorStatus": {
      "name": "fileUploadInfoErrorStatus",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The system failed to fetch and/or upload the file.\n",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "FileUploadInfoErrorStatusStatus"
              }
            }
          },
          {
            "description": "Human readable description of the issue with the fetch/upload task.\n",
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Machine readable error code.\n\nNote: See the [Errors > FromURL upload errors](#tag/Errors) section of this\npage for a full list of all possible error codes.\n",
            "key": "error_code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "FileUploadInfoUnknownStatusStatus": {
      "description": "The system does not have information about the task.\n\nNote: Uploadcare stores information about the `/from_url/` tasks for a limited\nperiod of time only. The endpoint can return the status `unknown` for the tasks\nthat are tool old (or that have not been created at all).\n",
      "name": "FileUploadInfoUnknownStatusStatus",
      "shape": {
        "type": "enum",
        "default": "unknown",
        "values": [
          {
            "value": "unknown"
          }
        ]
      }
    },
    "fileUploadInfoUnknownStatus": {
      "name": "fileUploadInfoUnknownStatus",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The system does not have information about the task.\n\nNote: Uploadcare stores information about the `/from_url/` tasks for a limited\nperiod of time only. The endpoint can return the status `unknown` for the tasks\nthat are tool old (or that have not been created at all).\n",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "FileUploadInfoUnknownStatusStatus"
              }
            }
          }
        ]
      }
    },
    "FileUploadInfoFromUrlType": {
      "name": "FileUploadInfoFromUrlType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "file_info"
          }
        ]
      }
    },
    "fileUploadInfoFromURL": {
      "name": "fileUploadInfoFromURL",
      "shape": {
        "type": "object",
        "extends": [
          "fileUploadInfo"
        ],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "FileUploadInfoFromUrlType"
              }
            }
          }
        ]
      }
    },
    "FromUrlUploadResponseSchemaType": {
      "name": "FromUrlUploadResponseSchemaType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "token"
          }
        ]
      }
    },
    "fromURLUploadResponseSchema": {
      "description": "`/from_url/` upload response.",
      "name": "fromURLUploadResponseSchema",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "FromUrlUploadResponseSchemaType"
              }
            }
          },
          {
            "description": "Token to identify a `/from_url/` request.",
            "key": "token",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ]
      }
    },
    "groupInfo": {
      "description": "File group information object.",
      "name": "groupInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Group's unique ID.",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "ISO-8601 date and time when the group was created.",
            "key": "datetime_created",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "description": "ISO-8601 date and time when the group was marked as stored.",
            "key": "datetime_stored",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            "availability": "Deprecated"
          },
          {
            "description": "Number of the files in the group.",
            "key": "files_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Group's CDN URL.",
            "key": "cdn_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          {
            "description": "Group's API resource URL. See the [REST API](/api-refs/rest-api/) documentation for details.",
            "key": "url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          {
            "description": "The list of files in the group. An array may contain null values if a file has been removed.\n",
            "key": "files",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "unknown"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "metadataValue": {
      "description": "Arbitrary metadata associated with the file.\nSee [docs](https://uploadcare.com/docs/file-metadata/) and [REST API v0.7](/api-refs/rest-api/v0.7.0/#tag/File-metadata) for more information.\n",
      "name": "metadataValue",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "minLength": 1,
            "maxLength": 512
          }
        }
      }
    },
    "autoStoreDisabledError": {
      "name": "autoStoreDisabledError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Autostore is disabled."
          }
        }
      }
    },
    "uploadcarePublicKeyRequiredError": {
      "name": "uploadcarePublicKeyRequiredError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "UPLOADCARE_PUB_KEY is required."
          }
        }
      }
    },
    "publicKeyRequiredError": {
      "name": "publicKeyRequiredError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "pub_key is required."
          }
        }
      }
    },
    "uploadcarePublicKeyInvalidError": {
      "name": "uploadcarePublicKeyInvalidError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "UPLOADCARE_PUB_KEY is invalid."
          }
        }
      }
    },
    "publicKeyInvalidError": {
      "name": "publicKeyInvalidError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "pub_key is invalid."
          }
        }
      }
    },
    "projectPublicKeyRemovedError": {
      "name": "projectPublicKeyRemovedError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Project <PUB-KEY> is marked as removed."
          }
        }
      }
    },
    "accountBlockedError": {
      "name": "accountBlockedError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Account has been blocked."
          }
        }
      }
    },
    "accountUnpaidError": {
      "name": "accountUnpaidError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Account has been blocked for non payment."
          }
        }
      }
    },
    "uploadFailedError": {
      "name": "uploadFailedError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Upload failed."
          }
        }
      }
    },
    "accountLimitsExceededError": {
      "name": "accountLimitsExceededError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Account has reached its limits."
          }
        }
      }
    },
    "signatureExpirationError": {
      "name": "signatureExpirationError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Expired signature."
          }
        }
      }
    },
    "signatureInvalidError": {
      "name": "signatureInvalidError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Invalid signature."
          }
        }
      }
    },
    "requestFiledsNumberLimitExceededError": {
      "name": "requestFiledsNumberLimitExceededError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "The request contains too many HTTP POST fields."
          }
        }
      }
    },
    "postRequestParserFailedError": {
      "name": "postRequestParserFailedError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "HTTP POST request parsing failed."
          }
        }
      }
    },
    "nullCharactersForbiddenError": {
      "name": "nullCharactersForbiddenError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Null characters are not allowed."
          }
        }
      }
    },
    "fileMetadataKeyDuplicatedError": {
      "name": "fileMetadataKeyDuplicatedError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "File's metadata key `<KEY>` has a duplicate."
          }
        }
      }
    },
    "fileMetadataKeyEmptyError": {
      "name": "fileMetadataKeyEmptyError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "File's metadata key can not be empty."
          }
        }
      }
    },
    "fileMetadataKeyForbiddenError": {
      "name": "fileMetadataKeyForbiddenError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "File's metadata key `<KEY>` contains symbols not allowed by the metadata key format."
          }
        }
      }
    },
    "fileMetadataKeyLengthTooBigError": {
      "name": "fileMetadataKeyLengthTooBigError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Length of file metadata key `<KEY>` can not be more than <LENGTH> symbols."
          }
        }
      }
    },
    "fileMetadataValueEmptyError": {
      "name": "fileMetadataValueEmptyError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Value of the file metadata key `<KEY>` can not be empty."
          }
        }
      }
    },
    "fileMetadataValueForbiddenError": {
      "name": "fileMetadataValueForbiddenError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Value of file metadata key `<KEY>` contains symbols not allowed by the metadata value format."
          }
        }
      }
    },
    "fileMetadataValueLengthTooBigError": {
      "name": "fileMetadataValueLengthTooBigError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Value of file metadata's key `<KEY>` can not be more than <LENGTH> symbols in length."
          }
        }
      }
    },
    "fileMetadataKeysNumberTooBigError": {
      "name": "fileMetadataKeysNumberTooBigError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "A file can not have more than <NUMBER> metadata keys."
          }
        }
      }
    },
    "filesRequiredError": {
      "name": "filesRequiredError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Request does not contain files."
          }
        }
      }
    },
    "fileSizeLimitExceededError": {
      "name": "fileSizeLimitExceededError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "File is too large."
          }
        }
      }
    },
    "fileTypeForbiddenError": {
      "name": "fileTypeForbiddenError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Uploading of these file types is not allowed."
          }
        }
      }
    },
    "fileInfectedError": {
      "name": "fileInfectedError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "The file is infected by <VIRUS-NAME> virus."
          }
        }
      }
    },
    "requestParamRequiredError": {
      "name": "requestParamRequiredError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "<PARAMETER-NAME> is required."
          }
        }
      }
    },
    "multipartSizeInvalidError": {
      "name": "multipartSizeInvalidError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "size should be integer."
          }
        }
      }
    },
    "multipartFileSizeLimitExceededError": {
      "name": "multipartFileSizeLimitExceededError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "File size exceeds project limit."
          }
        }
      }
    },
    "multipartFileSizeTooSmallError": {
      "name": "multipartFileSizeTooSmallError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "File size can not be less than <SIZE> bytes. Please use direct upload instead of multipart."
          }
        }
      }
    },
    "multipartPartSizeInvalidError": {
      "name": "multipartPartSizeInvalidError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Multipart Upload Part Size should be an integer."
          }
        }
      }
    },
    "multipartPartSizeTooSmallError": {
      "name": "multipartPartSizeTooSmallError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Multipart Upload Part Size can not be less than <SIZE> bytes."
          }
        }
      }
    },
    "multipartPartSizeTooBigError": {
      "name": "multipartPartSizeTooBigError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Multipart Upload Part Size can not be more than <SIZE> bytes."
          }
        }
      }
    },
    "multipartFileIdRequiredError": {
      "name": "multipartFileIdRequiredError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "uuid is required."
          }
        }
      }
    },
    "multipartFileAlreadyUploadedError": {
      "name": "multipartFileAlreadyUploadedError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "File is already uploaded."
          }
        }
      }
    },
    "multipartUploadSizeTooLargeError": {
      "name": "multipartUploadSizeTooLargeError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Uploaded size is more than expected."
          }
        }
      }
    },
    "multipartUploadSizeTooSmallError": {
      "name": "multipartUploadSizeTooSmallError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "File size mismatch. Not all parts uploaded?"
          }
        }
      }
    },
    "multipartFileCompletionFailedError": {
      "name": "multipartFileCompletionFailedError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Can not complete upload. Wrong parts size?"
          }
        }
      }
    },
    "uuidInvalidError": {
      "name": "uuidInvalidError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "uuid is invalid."
          }
        }
      }
    },
    "sourceURLRequiredError": {
      "name": "sourceURLRequiredError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "source_url is required."
          }
        }
      }
    },
    "urlParsingFailedError": {
      "name": "urlParsingFailedError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Failed to parse URL."
          }
        }
      }
    },
    "urlSchemeRequiredError": {
      "name": "urlSchemeRequiredError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "No URL scheme supplied."
          }
        }
      }
    },
    "urlSchemeInvalidError": {
      "name": "urlSchemeInvalidError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Invalid URL scheme."
          }
        }
      }
    },
    "urlHostRequiredError": {
      "name": "urlHostRequiredError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "No URL host supplied."
          }
        }
      }
    },
    "urlBlacklistedError": {
      "name": "urlBlacklistedError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Source is blacklisted."
          }
        }
      }
    },
    "hostnameNotFoundError": {
      "name": "hostnameNotFoundError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Host does not exist."
          }
        }
      }
    },
    "urlHostMalformedError": {
      "name": "urlHostMalformedError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "URL host is malformed."
          }
        }
      }
    },
    "urlHostPrivateIPForbiddenError": {
      "name": "urlHostPrivateIPForbiddenError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Only public IPs are allowed."
          }
        }
      }
    },
    "tokenRequiredError": {
      "name": "tokenRequiredError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "token is required."
          }
        }
      }
    },
    "fileIdRequiredError": {
      "name": "fileIdRequiredError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "file_id is required."
          }
        }
      }
    },
    "fileIdInvalidError": {
      "name": "fileIdInvalidError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "file_id is invalid."
          }
        }
      }
    },
    "fileNotFoundError": {
      "name": "fileNotFoundError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "File is not found."
          }
        }
      }
    },
    "groupFilesInvalidError": {
      "name": "groupFilesInvalidError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "This is not valid file url: %s."
          }
        }
      }
    },
    "groupFileURLParsingFailedError": {
      "name": "groupFileURLParsingFailedError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "No files[N] parameters found."
          }
        }
      }
    },
    "groupFilesNotFoundError": {
      "name": "groupFilesNotFoundError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "Some files not found."
          }
        }
      }
    },
    "groupIdRequiredError": {
      "name": "groupIdRequiredError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "group_id is required."
          }
        }
      }
    },
    "groupNotFoundError": {
      "name": "groupNotFoundError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "group_id is invalid."
          }
        }
      }
    },
    "signatureRequiredError": {
      "name": "signatureRequiredError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "`signature` is required."
          }
        }
      }
    },
    "signatureExpirationRequiredError": {
      "name": "signatureExpirationRequiredError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "`expire` is required."
          }
        }
      }
    },
    "signatureExpirationInvalidError": {
      "name": "signatureExpirationInvalidError",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "default": "`expire` must be a UNIX timestamp."
          }
        }
      }
    },
    "ImageInfoColorMode": {
      "description": "Image color mode.",
      "name": "ImageInfoColorMode",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "RGB"
          },
          {
            "value": "RGBA"
          },
          {
            "value": "RGBa"
          },
          {
            "value": "RGBX"
          },
          {
            "value": "L"
          },
          {
            "value": "LA"
          },
          {
            "value": "La"
          },
          {
            "value": "P"
          },
          {
            "value": "PA"
          },
          {
            "value": "CMYK"
          },
          {
            "value": "YCbCr"
          },
          {
            "value": "HSV"
          },
          {
            "value": "LAB"
          }
        ]
      }
    },
    "ImageInfoGeoLocation": {
      "description": "Geo-location of image from EXIF.",
      "name": "ImageInfoGeoLocation",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Location latitude.",
            "key": "latitude",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Location longitude.",
            "key": "longitude",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "imageInfo": {
      "description": "Image metadata.",
      "name": "imageInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Image color mode.",
            "key": "color_mode",
            "valueType": {
              "type": "id",
              "value": "ImageInfoColorMode"
            }
          },
          {
            "description": "Image orientation from EXIF.",
            "key": "orientation",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 8
                }
              }
            }
          },
          {
            "description": "Image format.",
            "key": "format",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Set to true if a file contains a sequence of images (GIF for example).",
            "key": "sequence",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "Image height in pixels.",
            "key": "height",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Image width in pixels.",
            "key": "width",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Geo-location of image from EXIF.",
            "key": "geo_location",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ImageInfoGeoLocation"
              }
            }
          },
          {
            "description": "Image date and time from EXIF. Please be aware that this data is not always formatted and displayed exactly as it appears in the EXIF.",
            "key": "datetime_original",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "description": "Image DPI for two dimensions.",
            "key": "dpi",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "LegacyVideoInfoAudio": {
      "description": "Audio stream's metadata.",
      "name": "LegacyVideoInfoAudio",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Audio stream's bitrate.",
            "key": "bitrate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "description": "Audio stream's codec.",
            "key": "codec",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Audio stream's sample rate.",
            "key": "sample_rate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "description": "Audio stream's number of channels.",
            "key": "channels",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "LegacyVideoInfoVideo": {
      "description": "Video stream's metadata.",
      "name": "LegacyVideoInfoVideo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Video stream's image height.",
            "key": "height",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Video stream's image width.",
            "key": "width",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Video stream's frame rate.",
            "key": "frame_rate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Video stream's bitrate.",
            "key": "bitrate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Video stream codec.",
            "key": "codec",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "legacyVideoInfo": {
      "description": "Video metadata.",
      "name": "legacyVideoInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Video file's duration in milliseconds.",
            "key": "duration",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Video file's format.",
            "key": "format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Video file's bitrate.",
            "key": "bitrate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Audio stream's metadata.",
            "key": "audio",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "LegacyVideoInfoAudio"
                }
              }
            }
          },
          {
            "description": "Video stream's metadata.",
            "key": "video",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "LegacyVideoInfoVideo"
              }
            }
          }
        ]
      }
    },
    "SchemasImageInfoColorMode": {
      "description": "Image color mode.",
      "name": "SchemasImageInfoColorMode",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "RGB"
          },
          {
            "value": "RGBA"
          },
          {
            "value": "RGBa"
          },
          {
            "value": "RGBX"
          },
          {
            "value": "L"
          },
          {
            "value": "LA"
          },
          {
            "value": "La"
          },
          {
            "value": "P"
          },
          {
            "value": "PA"
          },
          {
            "value": "CMYK"
          },
          {
            "value": "YCbCr"
          },
          {
            "value": "HSV"
          },
          {
            "value": "LAB"
          }
        ]
      }
    },
    "SchemasImageInfoGeoLocation": {
      "description": "Geo-location of image from EXIF.",
      "name": "SchemasImageInfoGeoLocation",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Location latitude.",
            "key": "latitude",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Location longitude.",
            "key": "longitude",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "schemas-imageInfo": {
      "description": "Image metadata.",
      "name": "schemas-imageInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Image color mode.",
            "key": "color_mode",
            "valueType": {
              "type": "id",
              "value": "SchemasImageInfoColorMode"
            }
          },
          {
            "description": "Image orientation from EXIF.",
            "key": "orientation",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 8
                }
              }
            }
          },
          {
            "description": "Image format.",
            "key": "format",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Set to true if a file contains a sequence of images (GIF for example).",
            "key": "sequence",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "Image height in pixels.",
            "key": "height",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Image width in pixels.",
            "key": "width",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Geo-location of image from EXIF.",
            "key": "geo_location",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SchemasImageInfoGeoLocation"
              }
            }
          },
          {
            "description": "Image date and time from EXIF. Please be aware that this data is not always formatted and displayed exactly as it appears in the EXIF.",
            "key": "datetime_original",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "description": "Image DPI for two dimensions.",
            "key": "dpi",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "VideoInfoAudioItems": {
      "description": "Audio stream's metadata.",
      "name": "VideoInfoAudioItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Audio stream's bitrate.",
            "key": "bitrate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Audio stream's codec.",
            "key": "codec",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Audio stream's sample rate.",
            "key": "sample_rate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Audio stream's number of channels.",
            "key": "channels",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "VideoInfoVideoItems": {
      "description": "Video stream's metadata.",
      "name": "VideoInfoVideoItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Video stream's image height.",
            "key": "height",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Video stream's image width.",
            "key": "width",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Video stream's frame rate.",
            "key": "frame_rate",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Video stream's bitrate.",
            "key": "bitrate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Video stream's codec.",
            "key": "codec",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "videoInfo": {
      "description": "Video metadata.",
      "name": "videoInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Video file's duration in milliseconds.",
            "key": "duration",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Video file's format.",
            "key": "format",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Video file's bitrate.",
            "key": "bitrate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "audio",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "VideoInfoAudioItems"
              }
            }
          },
          {
            "key": "video",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "VideoInfoVideoItems"
              }
            }
          }
        ]
      }
    },
    "ContentInfoMime": {
      "description": "MIME type.",
      "name": "ContentInfoMime",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Full MIME type.",
            "key": "mime",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Type of MIME type.",
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Subtype of MIME type.",
            "key": "subtype",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "contentInfo": {
      "description": "Information about file content.",
      "name": "contentInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "MIME type.",
            "key": "mime",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ContentInfoMime"
              }
            }
          },
          {
            "key": "image",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "schemas-imageInfo"
              }
            }
          },
          {
            "key": "video",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "videoInfo"
              }
            }
          }
        ]
      }
    },
    "metadata": {
      "description": "Arbitrary metadata associated with a file.",
      "name": "metadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "Upload_baseUpload_Response_200": {
      "description": "JSON object where the key is the file name of the uploaded file and\nthe value is the unique ID of the file on our systems.\n",
      "name": "Upload_baseUpload_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "filename",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ]
      }
    },
    "Upload_multipartFileUploadStart_Response_200": {
      "name": "Upload_multipartFileUploadStart_Response_200",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "File's UUID.",
            "key": "uuid",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "parts",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          }
        ]
      }
    },
    "FromUrlPostRequestBodySchemaCheckUrlDuplicates": {
      "description": "If set to \"1\", enables the `source_url` duplicates prevention.\nSpecifically, if the `source_url` had already been fetched and uploaded previously,\nthis request will return information about the already uploaded file.\n",
      "name": "FromUrlPostRequestBodySchemaCheckUrlDuplicates",
      "shape": {
        "type": "enum",
        "default": "0",
        "values": [
          {
            "value": "0"
          },
          {
            "value": "1"
          }
        ]
      }
    },
    "FromUrlPostRequestBodySchemaSaveUrlDuplicates": {
      "description": "Determines if the requested `source_url` should be kept in the history of\nfetched/uploaded URLs. If the value is not defined explicitly, it is set\nto the value of the `check_URL_duplicates` parameter.\n",
      "name": "FromUrlPostRequestBodySchemaSaveUrlDuplicates",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "0"
          },
          {
            "value": "1"
          }
        ]
      }
    },
    "Upload_fromURLUpload_Response_200": {
      "name": "Upload_fromURLUpload_Response_200",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "fromURLUploadResponseSchema",
            "type": {
              "type": "id",
              "value": "fromURLUploadResponseSchema"
            }
          },
          {
            "typeName": "fileUploadInfoFromURL",
            "type": {
              "type": "id",
              "value": "fileUploadInfoFromURL"
            }
          }
        ]
      }
    },
    "Upload_fromURLUploadStatus_Response_200": {
      "name": "Upload_fromURLUploadStatus_Response_200",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "fileUploadInfoWaitingStatus",
            "type": {
              "type": "id",
              "value": "fileUploadInfoWaitingStatus"
            }
          },
          {
            "typeName": "fileUploadInfoProgressStatus",
            "type": {
              "type": "id",
              "value": "fileUploadInfoProgressStatus"
            }
          },
          {
            "typeName": "fileUploadInfoSuccessStatus",
            "type": {
              "type": "id",
              "value": "fileUploadInfoSuccessStatus"
            }
          },
          {
            "typeName": "fileUploadInfoErrorStatus",
            "type": {
              "type": "id",
              "value": "fileUploadInfoErrorStatus"
            }
          },
          {
            "typeName": "fileUploadInfoUnknownStatus",
            "type": {
              "type": "id",
              "value": "fileUploadInfoUnknownStatus"
            }
          }
        ]
      }
    }
  },
  "subpackages": {
    "Upload": {
      "subpackageId": "Upload",
      "name": "Upload",
      "endpoints": [
        {
          "auth": false,
          "description": "Direct file uploads comply with the [RFC 7578](https://www.rfc-editor.org/rfc/rfc7578) standard.\nIn other words, you can perform a direct upload by making an HTTP POST request with the Content-Type\nheader set to `multipart/form-data`.\n\n**Note**: Direct file uploads support files smaller than 100 megabytes only.\nIf you would like to upload larger files, please use [Multipart Uploads](/api-refs/upload-api/#operation/multipartFileUploadStart) instead.\n\nFile upload example with curl:\n\n```\ncurl -F \"UPLOADCARE_PUB_KEY=YOUR_PUBLIC_KEY\" -F \"my_file.jpg=@my_file.jpg\" \"https://upload.uploadcare.com/base/\"\n```\n",
          "method": "POST",
          "defaultEnvironment": "Production server",
          "environments": [
            {
              "id": "Production server",
              "baseUrl": "https://upload.uploadcare.com"
            }
          ],
          "id": "baseUpload",
          "originalEndpointId": "Upload.baseUpload",
          "name": "Direct uploads",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/base/"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "fileUpload",
              "value": {
                "name": "Upload_baseUpload_Request",
                "properties": [
                  {
                    "type": "bodyProperty",
                    "key": "UPLOADCARE_PUB_KEY",
                    "valueType": {
                      "type": "id",
                      "value": "projectPublicKeyType"
                    },
                    "contentType": "multipart/form-data",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "UPLOADCARE_STORE",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "storeType"
                      }
                    },
                    "contentType": "multipart/form-data",
                    "exploded": false
                  },
                  {
                    "type": "file",
                    "value": {
                      "type": "fileArray",
                      "key": "{filename}",
                      "isOptional": false,
                      "contentType": "multipart/form-data",
                      "description": "File's content"
                    }
                  },
                  {
                    "type": "bodyProperty",
                    "key": "metadata[{key}]",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "metadataValue"
                      }
                    },
                    "contentType": "multipart/form-data",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "signature",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "signatureType"
                      }
                    },
                    "contentType": "multipart/form-data",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "expire",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "expireType"
                      }
                    },
                    "contentType": "multipart/form-data",
                    "exploded": false
                  }
                ]
              },
              "contentType": "multipart/form-data"
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Upload_baseUpload_Response_200"
              }
            },
            "statusCode": 200,
            "description": "The file was uploaded successfully."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/base/",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "UPLOADCARE_PUB_KEY": "YOUR_PUBLIC_KEY",
                "UPLOADCARE_STORE": "auto",
                "{filename}": [
                  "foo"
                ]
              },
              "requestBodyV3": {
                "type": "form",
                "value": {
                  "UPLOADCARE_PUB_KEY": {
                    "type": "json",
                    "value": "YOUR_PUBLIC_KEY"
                  },
                  "UPLOADCARE_STORE": {
                    "type": "json",
                    "value": "auto"
                  },
                  "{filename}": {
                    "type": "filenames",
                    "value": [
                      "foo"
                    ]
                  },
                  "metadata[{key}]": {
                    "type": "json"
                  },
                  "signature": {
                    "type": "json"
                  },
                  "expire": {
                    "type": "json"
                  }
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Multipart uploads should be used if you need to upload files larger than 100 megabytes or if you want to\nexplicitly trigger [AWS S3 Transfer Acceleration](https://aws.amazon.com/s3/transfer-acceleration/).\nWhen you use Multipart Uploads your files go straight to AWS S3 bypassing our upload instances.\n\nTo upload large files, 3 requests are sent in sequence:\n1. `/multipart/start/`\n2. `<presigned-url-x>`\n3. `/multipart/complete/`.\n\n**Note**: Multipart uploads support files larger than 10 megabytes only.\n",
          "method": "POST",
          "defaultEnvironment": "Production server",
          "environments": [
            {
              "id": "Production server",
              "baseUrl": "https://upload.uploadcare.com"
            }
          ],
          "id": "multipartFileUploadStart",
          "originalEndpointId": "Upload.multipartFileUploadStart",
          "name": "Start multipart upload",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/multipart/start/"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "fileUpload",
              "value": {
                "name": "Upload_multipartFileUploadStart_Request",
                "properties": [
                  {
                    "type": "bodyProperty",
                    "key": "UPLOADCARE_PUB_KEY",
                    "valueType": {
                      "type": "id",
                      "value": "projectPublicKeyType"
                    },
                    "contentType": "multipart/form-data",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "UPLOADCARE_STORE",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "storeType"
                      }
                    },
                    "contentType": "multipart/form-data",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "filename",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "contentType": "multipart/form-data",
                    "description": "Original file name of the uploaded file",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "size",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    },
                    "contentType": "multipart/form-data",
                    "description": "Precise file size of the uploaded file (in bytes).\n**Note**: The size should not exceed max file size cap for your project.\n",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "part_size",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer",
                          "minimum": 5242880,
                          "maximum": 5368709120,
                          "default": 5242880
                        }
                      }
                    },
                    "contentType": "multipart/form-data",
                    "description": "Multipart Uploads expect that you will split the uploaded file into equally sized\nparts (except for the last part) and then will upload them to AWS S3 (possibly in parallel).\nBy default, we assume that you will upload the files in 5 megabyte chunks,\nso we return a list of presigned AWS S3 URLs accordingly.\nIf you intend to upload large files (for example, larger than a gigabyte),\nwe recommend to bump the part size and to pass the expected chunk size\nto us as a value of the `part_size` parameter (in bytes).\n",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "content_type",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "contentType": "multipart/form-data",
                    "description": "File's MIME-type.",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "metadata[{key}]",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "metadataValue"
                      }
                    },
                    "contentType": "multipart/form-data",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "signature",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "signatureType"
                      }
                    },
                    "contentType": "multipart/form-data",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "expire",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "expireType"
                      }
                    },
                    "contentType": "multipart/form-data",
                    "exploded": false
                  }
                ]
              },
              "contentType": "multipart/form-data"
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Upload_multipartFileUploadStart_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Multipart upload started successfully."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/multipart/start/",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "UPLOADCARE_PUB_KEY": "YOUR_PUBLIC_KEY",
                "UPLOADCARE_STORE": "auto",
                "filename": "myfile.mp4",
                "size": 27796904,
                "content_type": "video/mp4"
              },
              "requestBodyV3": {
                "type": "form",
                "value": {
                  "UPLOADCARE_PUB_KEY": {
                    "type": "json",
                    "value": "YOUR_PUBLIC_KEY"
                  },
                  "UPLOADCARE_STORE": {
                    "type": "json",
                    "value": "auto"
                  },
                  "filename": {
                    "type": "json",
                    "value": "myfile.mp4"
                  },
                  "size": {
                    "type": "json",
                    "value": 27796904
                  },
                  "part_size": {
                    "type": "json"
                  },
                  "content_type": {
                    "type": "json",
                    "value": "video/mp4"
                  },
                  "metadata[{key}]": {
                    "type": "json"
                  },
                  "signature": {
                    "type": "json"
                  },
                  "expire": {
                    "type": "json"
                  }
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "uuid": "67947755-1584-4e3f-902b-d4e2bf76a841",
                  "parts": [
                    "<presigned-url-1>",
                    "<presigned-url-2>",
                    "<presigned-url-3>",
                    "<presigned-url-4>",
                    "<presigned-url-5>"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "uuid": "67947755-1584-4e3f-902b-d4e2bf76a841",
                  "parts": [
                    "<presigned-url-1>",
                    "<presigned-url-2>",
                    "<presigned-url-3>",
                    "<presigned-url-4>",
                    "<presigned-url-5>"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "The second phase is about uploading the file parts to the presigned upload URLs returned from the\n`/multipart/start/` endpoint.\n\nEach uploaded part should be at least 5 MiB (5242880 bytes) in size except for the last one, which can be smaller.\nYou can upload the file parts in parallel provided that the byte order stays unchanged.\n\n**Note**: You MUST define `Content-Type` header for your data.\n",
          "method": "PUT",
          "defaultEnvironment": "Production server",
          "environments": [
            {
              "id": "Production server",
              "baseUrl": "https://upload.uploadcare.com"
            }
          ],
          "id": "multipartFileUploadPart",
          "originalEndpointId": "Upload.multipartFileUploadPart",
          "name": "Upload individual file parts",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/<presigned-url-x>"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/<presigned-url-x>",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Once all the file parts have been uploaded successfully, complete the\nupload session to assemble all the file parts into a single resulting file.\n",
          "method": "POST",
          "defaultEnvironment": "Production server",
          "environments": [
            {
              "id": "Production server",
              "baseUrl": "https://upload.uploadcare.com"
            }
          ],
          "id": "multipartFileUploadComplete",
          "originalEndpointId": "Upload.multipartFileUploadComplete",
          "name": "Complete multipart upload",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/multipart/complete/"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "fileUpload",
              "value": {
                "name": "Upload_multipartFileUploadComplete_Request",
                "properties": [
                  {
                    "type": "bodyProperty",
                    "key": "UPLOADCARE_PUB_KEY",
                    "valueType": {
                      "type": "id",
                      "value": "projectPublicKeyType"
                    },
                    "contentType": "multipart/form-data",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "uuid",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "format": "uuid"
                      }
                    },
                    "contentType": "multipart/form-data",
                    "description": "File's UUID from the `/multipart/start/` endpoint.",
                    "exploded": false
                  }
                ]
              },
              "contentType": "multipart/form-data"
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "fileUploadInfo"
              }
            },
            "statusCode": 200,
            "description": "The file was uploaded successfully."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/multipart/complete/",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "UPLOADCARE_PUB_KEY": "YOUR_PUBLIC_KEY",
                "uuid": "67947755-1584-4e3f-902b-d4e2bf76a841"
              },
              "requestBodyV3": {
                "type": "form",
                "value": {
                  "UPLOADCARE_PUB_KEY": {
                    "type": "json",
                    "value": "YOUR_PUBLIC_KEY"
                  },
                  "uuid": {
                    "type": "json",
                    "value": "67947755-1584-4e3f-902b-d4e2bf76a841"
                  }
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                  "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                  "size": 2667636,
                  "total": 2667636,
                  "done": 2667636,
                  "original_filename": "IMG-0412_123.JPG",
                  "filename": "IMG0412_123.JPG",
                  "mime_type": "image/jpeg",
                  "image_info": {
                    "color_mode": "RGB",
                    "orientation": 6,
                    "format": "JPEG",
                    "sequence": false,
                    "height": 4032,
                    "width": 3024,
                    "geo_location": {
                      "latitude": 55.62013611111111,
                      "longitude": 37.66299166666666
                    },
                    "datetime_original": "foo",
                    "dpi": [
                      72,
                      72
                    ]
                  },
                  "video_info": null,
                  "content_info": {
                    "mime": {
                      "mime": "image/jpeg",
                      "type": "image",
                      "subtype": "jpeg"
                    },
                    "image": {
                      "color_mode": "RGB",
                      "orientation": 6,
                      "format": "JPEG",
                      "sequence": false,
                      "height": 4032,
                      "width": 3024,
                      "geo_location": {
                        "latitude": 55.62013611111111,
                        "longitude": 37.66299166666666
                      },
                      "datetime_original": "foo",
                      "dpi": [
                        72,
                        72
                      ]
                    }
                  },
                  "metadata": {
                    "subsystem": "uploader",
                    "pet": "cat"
                  },
                  "is_image": true,
                  "is_stored": true,
                  "is_ready": true
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                  "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                  "size": 2667636,
                  "total": 2667636,
                  "done": 2667636,
                  "original_filename": "IMG-0412_123.JPG",
                  "filename": "IMG0412_123.JPG",
                  "mime_type": "image/jpeg",
                  "image_info": {
                    "color_mode": "RGB",
                    "orientation": 6,
                    "format": "JPEG",
                    "sequence": false,
                    "height": 4032,
                    "width": 3024,
                    "geo_location": {
                      "latitude": 55.62013611111111,
                      "longitude": 37.66299166666666
                    },
                    "datetime_original": "foo",
                    "dpi": [
                      72,
                      72
                    ]
                  },
                  "video_info": null,
                  "content_info": {
                    "mime": {
                      "mime": "image/jpeg",
                      "type": "image",
                      "subtype": "jpeg"
                    },
                    "image": {
                      "color_mode": "RGB",
                      "orientation": 6,
                      "format": "JPEG",
                      "sequence": false,
                      "height": 4032,
                      "width": 3024,
                      "geo_location": {
                        "latitude": 55.62013611111111,
                        "longitude": 37.66299166666666
                      },
                      "datetime_original": "foo",
                      "dpi": [
                        72,
                        72
                      ]
                    }
                  },
                  "metadata": {
                    "subsystem": "uploader",
                    "pet": "cat"
                  },
                  "is_image": true,
                  "is_stored": true,
                  "is_ready": true
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Uploadcare can fetch a file from a publicly available URL and then automatically upload the\nfetched file to your project.\n\n#### Upload tokens\nRequests to the endpoint return a JSON dictionary with a `token` that can be further used\nto [check the status](/api-refs/upload-api/#operation/fromURLUploadStatus) of the upload\nrequest.\n\n**Note:** The token is not a file ID and can't be used to address the file directly.\nThe actual file ID should be retrieved by calling the `/from_url/status/` endpoint.\n\n#### Duplicates prevention\nBy default, every call to the `/from_url/` endpoint with the same `source_url` results in\na new upload leading to file duplication.\n\nIf you would like Uploadcare to keep track of the requested URLs and avoid the duplicate\nuploads, pass the `save_URL_duplicates` and `check_URL_duplicates` parameters described below.\n",
          "method": "POST",
          "defaultEnvironment": "Production server",
          "environments": [
            {
              "id": "Production server",
              "baseUrl": "https://upload.uploadcare.com"
            }
          ],
          "id": "fromURLUpload",
          "originalEndpointId": "Upload.fromURLUpload",
          "name": "Upload files from URLs",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/from_url/"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "fileUpload",
              "value": {
                "name": "Upload_fromURLUpload_Request",
                "properties": [
                  {
                    "type": "bodyProperty",
                    "key": "pub_key",
                    "valueType": {
                      "type": "id",
                      "value": "projectPublicKeyType"
                    },
                    "contentType": "multipart/form-data",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "source_url",
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "format": "uri"
                      }
                    },
                    "contentType": "multipart/form-data",
                    "description": "Source URL of the file to fetch and upload.\n\n**Note**: The URL should point to a resource publicly available via HTTP/HTTPS.\n",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "store",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "storeType"
                      }
                    },
                    "contentType": "multipart/form-data",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "filename",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    "contentType": "multipart/form-data",
                    "description": "Sets the file name of the resource fetched from the source URL.\nIf not defined, the file name is obtained from either HTTP\nresponse headers or the `source_url`'s path.\n\n**Note:** The filename will be sanitized to only contain the following symbols:\n`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789._`.\n",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "check_URL_duplicates",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "FromUrlPostRequestBodySchemaCheckUrlDuplicates"
                      }
                    },
                    "contentType": "multipart/form-data",
                    "description": "If set to \"1\", enables the `source_url` duplicates prevention.\nSpecifically, if the `source_url` had already been fetched and uploaded previously,\nthis request will return information about the already uploaded file.\n",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "save_URL_duplicates",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "FromUrlPostRequestBodySchemaSaveUrlDuplicates"
                      }
                    },
                    "contentType": "multipart/form-data",
                    "description": "Determines if the requested `source_url` should be kept in the history of\nfetched/uploaded URLs. If the value is not defined explicitly, it is set\nto the value of the `check_URL_duplicates` parameter.\n",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "metadata[{key}]",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "metadataValue"
                      }
                    },
                    "contentType": "multipart/form-data",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "signature",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "signatureType"
                      }
                    },
                    "contentType": "multipart/form-data",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "expire",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "expireType"
                      }
                    },
                    "contentType": "multipart/form-data",
                    "exploded": false
                  }
                ]
              },
              "contentType": "multipart/form-data"
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Upload_fromURLUpload_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Status Token or File Info of an already downloaded file."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/from_url/",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "pub_key": "YOUR_PUBLIC_KEY",
                "source_url": "https://source.unsplash.com/featured"
              },
              "requestBodyV3": {
                "type": "form",
                "value": {
                  "pub_key": {
                    "type": "json",
                    "value": "YOUR_PUBLIC_KEY"
                  },
                  "source_url": {
                    "type": "json",
                    "value": "https://source.unsplash.com/featured"
                  },
                  "store": {
                    "type": "json"
                  },
                  "filename": {
                    "type": "json"
                  },
                  "check_URL_duplicates": {
                    "type": "json"
                  },
                  "save_URL_duplicates": {
                    "type": "json"
                  },
                  "metadata[{key}]": {
                    "type": "json"
                  },
                  "signature": {
                    "type": "json"
                  },
                  "expire": {
                    "type": "json"
                  }
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "type": "token",
                  "token": "945ebb27-1fd6-46c6-a859-b9893712d650"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "type": "token",
                  "token": "945ebb27-1fd6-46c6-a859-b9893712d650"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "The endpoint notifies about the progress of the task by changing the value of the `status` field:\n  * the field is set to `waiting` initially\n  * once the system starts processing the request, the field is set to `progress`\n  * if the file is fetched and uploaded successfully, the `status` field is set to `success`\n    and the endpoint returns a JSON object holding information about the uploaded file\n  * if the system fails to fetch/upload the file, the `status` field is set to `error` and\n    the `error` field is set to the cause of the error.\n",
          "method": "GET",
          "defaultEnvironment": "Production server",
          "environments": [
            {
              "id": "Production server",
              "baseUrl": "https://upload.uploadcare.com"
            }
          ],
          "id": "fromURLUploadStatus",
          "originalEndpointId": "Upload.fromURLUploadStatus",
          "name": "Check the status of a task to fetch/upload a file from a URL",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/from_url/status/"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Token returned by the `/from_url/` endpoint that identifies a request to fetch/upload a file from a URL.",
              "key": "token",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Upload_fromURLUploadStatus_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Request was processed successfully.\n"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/from_url/status/",
              "pathParameters": {},
              "queryParameters": {
                "token": "945ebb27-1fd6-46c6-a859-b9893712d650"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "status": "waiting"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "status": "waiting"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Returns a JSON object with information about an uploaded file (file size, MIME type, metadata, etc).\n",
          "method": "GET",
          "defaultEnvironment": "Production server",
          "environments": [
            {
              "id": "Production server",
              "baseUrl": "https://upload.uploadcare.com"
            }
          ],
          "id": "fileUploadInfo",
          "originalEndpointId": "Upload.fileUploadInfo",
          "name": "Get information about an uploaded file",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/info/"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "pub_key",
              "type": {
                "type": "id",
                "value": "projectPublicKeyType"
              }
            },
            {
              "description": "File's unique ID.",
              "key": "file_id",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "fileUploadInfo"
              }
            },
            "statusCode": 200,
            "description": "File information was retrieved successfully."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/info/",
              "pathParameters": {},
              "queryParameters": {
                "pub_key": "YOUR_PUBLIC_KEY",
                "file_id": "67947755-1584-4e3f-902b-d4e2bf76a841"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                  "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                  "size": 2667636,
                  "total": 2667636,
                  "done": 2667636,
                  "original_filename": "IMG-0412_123.JPG",
                  "filename": "IMG0412_123.JPG",
                  "mime_type": "image/jpeg",
                  "image_info": {
                    "color_mode": "RGB",
                    "orientation": 6,
                    "format": "JPEG",
                    "sequence": false,
                    "height": 4032,
                    "width": 3024,
                    "geo_location": {
                      "latitude": 55.62013611111111,
                      "longitude": 37.66299166666666
                    },
                    "datetime_original": "foo",
                    "dpi": [
                      72,
                      72
                    ]
                  },
                  "video_info": null,
                  "content_info": {
                    "mime": {
                      "mime": "image/jpeg",
                      "type": "image",
                      "subtype": "jpeg"
                    },
                    "image": {
                      "color_mode": "RGB",
                      "orientation": 6,
                      "format": "JPEG",
                      "sequence": false,
                      "height": 4032,
                      "width": 3024,
                      "geo_location": {
                        "latitude": 55.62013611111111,
                        "longitude": 37.66299166666666
                      },
                      "datetime_original": "foo",
                      "dpi": [
                        72,
                        72
                      ]
                    }
                  },
                  "metadata": {
                    "subsystem": "uploader",
                    "pet": "cat"
                  },
                  "is_image": true,
                  "is_stored": true,
                  "is_ready": true
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                  "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                  "size": 2667636,
                  "total": 2667636,
                  "done": 2667636,
                  "original_filename": "IMG-0412_123.JPG",
                  "filename": "IMG0412_123.JPG",
                  "mime_type": "image/jpeg",
                  "image_info": {
                    "color_mode": "RGB",
                    "orientation": 6,
                    "format": "JPEG",
                    "sequence": false,
                    "height": 4032,
                    "width": 3024,
                    "geo_location": {
                      "latitude": 55.62013611111111,
                      "longitude": 37.66299166666666
                    },
                    "datetime_original": "foo",
                    "dpi": [
                      72,
                      72
                    ]
                  },
                  "video_info": null,
                  "content_info": {
                    "mime": {
                      "mime": "image/jpeg",
                      "type": "image",
                      "subtype": "jpeg"
                    },
                    "image": {
                      "color_mode": "RGB",
                      "orientation": 6,
                      "format": "JPEG",
                      "sequence": false,
                      "height": 4032,
                      "width": 3024,
                      "geo_location": {
                        "latitude": 55.62013611111111,
                        "longitude": 37.66299166666666
                      },
                      "datetime_original": "foo",
                      "dpi": [
                        72,
                        72
                      ]
                    }
                  },
                  "metadata": {
                    "subsystem": "uploader",
                    "pet": "cat"
                  },
                  "is_image": true,
                  "is_stored": true,
                  "is_ready": true
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "Groups": {
      "subpackageId": "Groups",
      "name": "Groups",
      "endpoints": [
        {
          "auth": false,
          "description": "Create a file group from a set of already uploaded files.\n\nThe most common use case for creating a file group is when a user uploads\nmultiple files at once and then wants to display them together.\n\n**Note:** A group itself and files within it MUST belong to the same project.\n\n**Note:** Groups are immutable and the only way to add/remove a file to a group\nis to create a new one.\n",
          "method": "POST",
          "defaultEnvironment": "Production server",
          "environments": [
            {
              "id": "Production server",
              "baseUrl": "https://upload.uploadcare.com"
            }
          ],
          "id": "createFilesGroup",
          "originalEndpointId": "Groups.createFilesGroup",
          "name": "Create a file group",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/group/"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "fileUpload",
              "value": {
                "name": "Groups_createFilesGroup_Request",
                "properties": [
                  {
                    "type": "bodyProperty",
                    "key": "pub_key",
                    "valueType": {
                      "type": "id",
                      "value": "projectPublicKeyType"
                    },
                    "contentType": "multipart/form-data",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "files[]",
                    "valueType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    "contentType": "multipart/form-data",
                    "description": "Set of files you want to add to the group.\nEach element can be a file UUID with or without the applied image\nprocessing operations.\n",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "signature",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "signatureType"
                      }
                    },
                    "contentType": "multipart/form-data",
                    "exploded": false
                  },
                  {
                    "type": "bodyProperty",
                    "key": "expire",
                    "valueType": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "expireType"
                      }
                    },
                    "contentType": "multipart/form-data",
                    "exploded": false
                  }
                ]
              },
              "contentType": "multipart/form-data"
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "groupInfo"
              }
            },
            "statusCode": 200,
            "description": "The group was created successfully."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/group/",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "pub_key": "YOUR_PUBLIC_KEY",
                "files[]": [
                  "d6d34fa9-addd-472c-868d-2e5c105f9fcd",
                  "b1026315-8116-4632-8364-607e64fca723/-/resize/x800/"
                ]
              },
              "requestBodyV3": {
                "type": "form",
                "value": {
                  "pub_key": {
                    "type": "json",
                    "value": "YOUR_PUBLIC_KEY"
                  },
                  "files[]": {
                    "type": "json",
                    "value": [
                      "d6d34fa9-addd-472c-868d-2e5c105f9fcd",
                      "b1026315-8116-4632-8364-607e64fca723/-/resize/x800/"
                    ]
                  },
                  "signature": {
                    "type": "json"
                  },
                  "expire": {
                    "type": "json"
                  }
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "0d712319-b970-4602-850c-bae1ced521a6~1",
                  "datetime_created": "2018-09-12T10:03:38.686710Z",
                  "datetime_stored": null,
                  "files_count": 1,
                  "cdn_url": "https://ucarecdn.com/0d712319-b970-4602-850c-bae1ced521a6~1/",
                  "url": "https://api.uploadcare.com/groups/0d712319-b970-4602-850c-bae1ced521a6~1/",
                  "files": [
                    "foo"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "0d712319-b970-4602-850c-bae1ced521a6~1",
                  "datetime_created": "2018-09-12T10:03:38.686710Z",
                  "datetime_stored": null,
                  "files_count": 1,
                  "cdn_url": "https://ucarecdn.com/0d712319-b970-4602-850c-bae1ced521a6~1/",
                  "url": "https://api.uploadcare.com/groups/0d712319-b970-4602-850c-bae1ced521a6~1/",
                  "files": [
                    "foo"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Returns a JSON object with information about a file group (when the group was created,\nnumber of the files in the group, etc).\n",
          "method": "GET",
          "defaultEnvironment": "Production server",
          "environments": [
            {
              "id": "Production server",
              "baseUrl": "https://upload.uploadcare.com"
            }
          ],
          "id": "filesGroupInfo",
          "originalEndpointId": "Groups.filesGroupInfo",
          "name": "Get information about a file group",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/group/info/"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "pub_key",
              "type": {
                "type": "id",
                "value": "projectPublicKeyType"
              }
            },
            {
              "description": "Group's unique ID. Group IDs look like `UUID~N`, where the `~N` part reflects the number of the files in the group.\n",
              "key": "group_id",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "groupInfo"
              }
            },
            "statusCode": 200,
            "description": "File group information was retrieved successfully."
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/group/info/",
              "pathParameters": {},
              "queryParameters": {
                "pub_key": "YOUR_PUBLIC_KEY",
                "group_id": "d52d7136-a2e5-4338-9f45-affbf83b857d~2"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "0d712319-b970-4602-850c-bae1ced521a6~1",
                  "datetime_created": "2018-09-12T10:03:38.686710Z",
                  "datetime_stored": null,
                  "files_count": 1,
                  "cdn_url": "https://ucarecdn.com/0d712319-b970-4602-850c-bae1ced521a6~1/",
                  "url": "https://api.uploadcare.com/groups/0d712319-b970-4602-850c-bae1ced521a6~1/",
                  "files": [
                    "foo"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "0d712319-b970-4602-850c-bae1ced521a6~1",
                  "datetime_created": "2018-09-12T10:03:38.686710Z",
                  "datetime_stored": null,
                  "files_count": 1,
                  "cdn_url": "https://ucarecdn.com/0d712319-b970-4602-850c-bae1ced521a6~1/",
                  "url": "https://api.uploadcare.com/groups/0d712319-b970-4602-850c-bae1ced521a6~1/",
                  "files": [
                    "foo"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    }
  },
  "rootPackage": {
    "endpoints": [],
    "webhooks": [],
    "websockets": [],
    "types": [
      "signatureType",
      "expireType",
      "storeType",
      "projectPublicKeyType",
      "fileUploadInfo",
      "fileUploadInfoWaitingStatus",
      "fileUploadInfoProgressStatus",
      "fileUploadInfoSuccessStatus",
      "fileUploadInfoErrorStatus",
      "fileUploadInfoUnknownStatus",
      "fileUploadInfoFromURL",
      "fromURLUploadResponseSchema",
      "groupInfo",
      "metadataValue",
      "autoStoreDisabledError",
      "uploadcarePublicKeyRequiredError",
      "publicKeyRequiredError",
      "uploadcarePublicKeyInvalidError",
      "publicKeyInvalidError",
      "projectPublicKeyRemovedError",
      "accountBlockedError",
      "accountUnpaidError",
      "uploadFailedError",
      "accountLimitsExceededError",
      "signatureExpirationError",
      "signatureInvalidError",
      "requestFiledsNumberLimitExceededError",
      "postRequestParserFailedError",
      "nullCharactersForbiddenError",
      "fileMetadataKeyDuplicatedError",
      "fileMetadataKeyEmptyError",
      "fileMetadataKeyForbiddenError",
      "fileMetadataKeyLengthTooBigError",
      "fileMetadataValueEmptyError",
      "fileMetadataValueForbiddenError",
      "fileMetadataValueLengthTooBigError",
      "fileMetadataKeysNumberTooBigError",
      "filesRequiredError",
      "fileSizeLimitExceededError",
      "fileTypeForbiddenError",
      "fileInfectedError",
      "requestParamRequiredError",
      "multipartSizeInvalidError",
      "multipartFileSizeLimitExceededError",
      "multipartFileSizeTooSmallError",
      "multipartPartSizeInvalidError",
      "multipartPartSizeTooSmallError",
      "multipartPartSizeTooBigError",
      "multipartFileIdRequiredError",
      "multipartFileAlreadyUploadedError",
      "multipartUploadSizeTooLargeError",
      "multipartUploadSizeTooSmallError",
      "multipartFileCompletionFailedError",
      "uuidInvalidError",
      "sourceURLRequiredError",
      "urlParsingFailedError",
      "urlSchemeRequiredError",
      "urlSchemeInvalidError",
      "urlHostRequiredError",
      "urlBlacklistedError",
      "hostnameNotFoundError",
      "urlHostMalformedError",
      "urlHostPrivateIPForbiddenError",
      "tokenRequiredError",
      "fileIdRequiredError",
      "fileIdInvalidError",
      "fileNotFoundError",
      "groupFilesInvalidError",
      "groupFileURLParsingFailedError",
      "groupFilesNotFoundError",
      "groupIdRequiredError",
      "groupNotFoundError",
      "signatureRequiredError",
      "signatureExpirationRequiredError",
      "signatureExpirationInvalidError",
      "imageInfo",
      "legacyVideoInfo",
      "schemas-imageInfo",
      "videoInfo",
      "contentInfo",
      "metadata"
    ],
    "subpackages": [
      "Upload",
      "Groups"
    ]
  },
  "snippetsConfiguration": {},
  "globalHeaders": []
}