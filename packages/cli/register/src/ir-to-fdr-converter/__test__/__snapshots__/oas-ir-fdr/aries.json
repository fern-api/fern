{
  "types": {
    "AMLRecord": {
      "name": "AMLRecord",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "aml",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "amlContext",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ActionMenuFetchResult": {
      "name": "ActionMenuFetchResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "result",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ActionMenuFetchResult_result"
              }
            }
          }
        ]
      }
    },
    "ActionMenuModulesResult": {
      "name": "ActionMenuModulesResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "AdminConfigConfig": {
      "description": "Configuration settings",
      "name": "AdminConfigConfig",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "AdminConfig": {
      "name": "AdminConfig",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Configuration settings",
            "key": "config",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AdminConfigConfig"
              }
            }
          }
        ]
      }
    },
    "AdminMediationDeny": {
      "name": "AdminMediationDeny",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of mediator rules for recipient",
            "key": "mediator_terms",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "List of recipient rules for mediation",
            "key": "recipient_terms",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "AdminModules": {
      "name": "AdminModules",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of admin modules",
            "key": "result",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "AdminReset": {
      "name": "AdminReset",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "AdminShutdown": {
      "name": "AdminShutdown",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "AdminStatusConductor": {
      "description": "Conductor statistics",
      "name": "AdminStatusConductor",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "AdminStatusTiming": {
      "description": "Timing results",
      "name": "AdminStatusTiming",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "AdminStatus": {
      "name": "AdminStatus",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Conductor statistics",
            "key": "conductor",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AdminStatusConductor"
              }
            }
          },
          {
            "description": "Default label",
            "key": "label",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Timing results",
            "key": "timing",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AdminStatusTiming"
              }
            }
          },
          {
            "description": "Version code",
            "key": "version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "AdminStatusLiveliness": {
      "name": "AdminStatusLiveliness",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Liveliness status",
            "key": "alive",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "AdminStatusReadiness": {
      "name": "AdminStatusReadiness",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Readiness status",
            "key": "ready",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "AttachDecorator": {
      "name": "AttachDecorator",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Attachment identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Byte count of data included by reference",
            "key": "byte_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "AttachDecoratorData"
            }
          },
          {
            "description": "Human-readable description of content",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "File name",
            "key": "filename",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Hint regarding last modification datetime, in ISO-8601 format",
            "key": "lastmod_time",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "description": "MIME type",
            "key": "mime-type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "AttachDecoratorDataJson": {
      "description": "JSON-serialized data",
      "name": "AttachDecoratorDataJson",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "AttachDecoratorData": {
      "name": "AttachDecoratorData",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Base64-encoded data",
            "key": "base64",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[a-zA-Z0-9+/]*={0,2}$"
                }
              }
            }
          },
          {
            "description": "JSON-serialized data",
            "key": "json",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AttachDecoratorDataJson"
              }
            }
          },
          {
            "key": "jws",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AttachDecoratorData_jws"
              }
            }
          },
          {
            "description": "List of hypertext links to data",
            "key": "links",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "SHA256 hash (binhex encoded) of content",
            "key": "sha256",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[a-fA-F0-9+/]{64}$"
                }
              }
            }
          }
        ]
      }
    },
    "AttachDecoratorData1JWS": {
      "name": "AttachDecoratorData1JWS",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "header",
            "valueType": {
              "type": "id",
              "value": "AttachDecoratorDataJWSHeader"
            }
          },
          {
            "description": "protected JWS header",
            "key": "protected",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[-_a-zA-Z0-9]*$"
                }
              }
            }
          },
          {
            "description": "signature",
            "key": "signature",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[-_a-zA-Z0-9]*$"
              }
            }
          }
        ]
      }
    },
    "AttachDecoratorDataJWS": {
      "name": "AttachDecoratorDataJWS",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "header",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AttachDecoratorDataJWSHeader"
              }
            }
          },
          {
            "description": "protected JWS header",
            "key": "protected",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[-_a-zA-Z0-9]*$"
                }
              }
            }
          },
          {
            "description": "signature",
            "key": "signature",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[-_a-zA-Z0-9]*$"
                }
              }
            }
          },
          {
            "description": "List of signatures",
            "key": "signatures",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "AttachDecoratorData1JWS"
                }
              }
            }
          }
        ]
      }
    },
    "AttachDecoratorDataJWSHeader": {
      "name": "AttachDecoratorDataJWSHeader",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Key identifier, in W3C did:key or DID URL format",
            "key": "kid",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^did:(?:key:z[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+|sov:[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}(;.*)?(\\?.*)?#.+)$"
              }
            }
          }
        ]
      }
    },
    "AttachmentDefType": {
      "description": "Attachment type",
      "name": "AttachmentDefType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "credential-offer"
          },
          {
            "value": "present-proof"
          }
        ]
      }
    },
    "AttachmentDef": {
      "name": "AttachmentDef",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Attachment identifier",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Attachment type",
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AttachmentDefType"
              }
            }
          }
        ]
      }
    },
    "AttributeMimeTypesResult": {
      "name": "AttributeMimeTypesResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "map",
                  "keyType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "BasicMessageModuleResponse": {
      "name": "BasicMessageModuleResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ClaimFormatJwt": {
      "name": "ClaimFormatJwt",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ClaimFormatJwtVc": {
      "name": "ClaimFormatJwtVc",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ClaimFormatJwtVp": {
      "name": "ClaimFormatJwtVp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ClaimFormatLdp": {
      "name": "ClaimFormatLdp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ClaimFormatLdpVc": {
      "name": "ClaimFormatLdpVc",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ClaimFormatLdpVp": {
      "name": "ClaimFormatLdpVp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ClaimFormat": {
      "name": "ClaimFormat",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jwt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ClaimFormatJwt"
              }
            }
          },
          {
            "key": "jwt_vc",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ClaimFormatJwtVc"
              }
            }
          },
          {
            "key": "jwt_vp",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ClaimFormatJwtVp"
              }
            }
          },
          {
            "key": "ldp",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ClaimFormatLdp"
              }
            }
          },
          {
            "key": "ldp_vc",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ClaimFormatLdpVc"
              }
            }
          },
          {
            "key": "ldp_vp",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ClaimFormatLdpVp"
              }
            }
          }
        ]
      }
    },
    "ClearPendingRevocationsRequest": {
      "name": "ClearPendingRevocationsRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Credential revocation ids by revocation registry id: omit for all, specify null or empty list for all pending per revocation registry",
            "key": "purge",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "regex": "^[1-9][0-9]*$"
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "ConnRecordAccept": {
      "description": "Connection acceptance: manual or auto",
      "name": "ConnRecordAccept",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "manual"
          },
          {
            "value": "auto"
          }
        ]
      }
    },
    "ConnRecordConnectionProtocol": {
      "description": "Connection protocol used",
      "name": "ConnRecordConnectionProtocol",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "connections/1.0"
          },
          {
            "value": "didexchange/1.0"
          }
        ]
      }
    },
    "ConnRecordInvitationMode": {
      "description": "Invitation mode",
      "name": "ConnRecordInvitationMode",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "once"
          },
          {
            "value": "multi"
          },
          {
            "value": "static"
          }
        ]
      }
    },
    "ConnRecordRoutingState": {
      "description": "Routing state of connection",
      "name": "ConnRecordRoutingState",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "none"
          },
          {
            "value": "request"
          },
          {
            "value": "active"
          },
          {
            "value": "error"
          }
        ]
      }
    },
    "ConnRecordTheirRole": {
      "description": "Their role in the connection protocol",
      "name": "ConnRecordTheirRole",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "invitee"
          },
          {
            "value": "requester"
          },
          {
            "value": "inviter"
          },
          {
            "value": "responder"
          }
        ]
      }
    },
    "ConnRecord": {
      "name": "ConnRecord",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Connection acceptance: manual or auto",
            "key": "accept",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConnRecordAccept"
              }
            }
          },
          {
            "description": "Optional alias to apply to connection for later use",
            "key": "alias",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Connection identifier",
            "key": "connection_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Connection protocol used",
            "key": "connection_protocol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConnRecordConnectionProtocol"
              }
            }
          },
          {
            "description": "Time of record creation",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "description": "Error message",
            "key": "error_msg",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Inbound routing connection id to use",
            "key": "inbound_connection_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Public key for connection",
            "key": "invitation_key",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
                }
              }
            }
          },
          {
            "description": "Invitation mode",
            "key": "invitation_mode",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConnRecordInvitationMode"
              }
            }
          },
          {
            "description": "ID of out-of-band invitation message",
            "key": "invitation_msg_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Our DID for connection",
            "key": "my_did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            }
          },
          {
            "description": "Connection request identifier",
            "key": "request_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "State per RFC 23",
            "key": "rfc23_state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Routing state of connection",
            "key": "routing_state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConnRecordRoutingState"
              }
            }
          },
          {
            "description": "Current record state",
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Their DID for connection",
            "key": "their_did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            }
          },
          {
            "description": "Their label for connection",
            "key": "their_label",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Other agent's public DID for connection",
            "key": "their_public_did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Their role in the connection protocol",
            "key": "their_role",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConnRecordTheirRole"
              }
            }
          },
          {
            "description": "Time of last record update",
            "key": "updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          }
        ]
      }
    },
    "ConnectionInvitation": {
      "name": "ConnectionInvitation",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "DID for connection invitation",
            "key": "did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            }
          },
          {
            "description": "Optional image URL for connection invitation",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "url"
                  }
                }
              }
            }
          },
          {
            "description": "Optional label for connection invitation",
            "key": "label",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of recipient keys",
            "key": "recipientKeys",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
                  }
                }
              }
            }
          },
          {
            "description": "List of routing keys",
            "key": "routingKeys",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
                  }
                }
              }
            }
          },
          {
            "description": "Service endpoint at which to reach this agent",
            "key": "serviceEndpoint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ConnectionList": {
      "name": "ConnectionList",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of connection records",
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ConnRecord"
                }
              }
            }
          }
        ]
      }
    },
    "ConnectionMetadataResults": {
      "description": "Dictionary of metadata associated with connection.",
      "name": "ConnectionMetadataResults",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ConnectionMetadata": {
      "name": "ConnectionMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Dictionary of metadata associated with connection.",
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConnectionMetadataResults"
              }
            }
          }
        ]
      }
    },
    "ConnectionMetadataSetRequestMetadata": {
      "description": "Dictionary of metadata to set for connection.",
      "name": "ConnectionMetadataSetRequestMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ConnectionMetadataSetRequest": {
      "name": "ConnectionMetadataSetRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Dictionary of metadata to set for connection.",
            "key": "metadata",
            "valueType": {
              "type": "id",
              "value": "ConnectionMetadataSetRequestMetadata"
            }
          }
        ]
      }
    },
    "ConnectionModuleResponse": {
      "name": "ConnectionModuleResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ConnectionStaticRequest": {
      "name": "ConnectionStaticRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Alias to assign to this connection",
            "key": "alias",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Local DID",
            "key": "my_did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            }
          },
          {
            "description": "Seed to use for the local DID",
            "key": "my_seed",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Remote DID",
            "key": "their_did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            }
          },
          {
            "description": "URL endpoint for other party",
            "key": "their_endpoint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
                }
              }
            }
          },
          {
            "description": "Other party's label for this connection",
            "key": "their_label",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Seed to use for the remote DID",
            "key": "their_seed",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Remote verification key",
            "key": "their_verkey",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ConnectionStaticResult": {
      "name": "ConnectionStaticResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Local DID",
            "key": "my_did",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
              }
            }
          },
          {
            "description": "My URL endpoint",
            "key": "my_endpoint",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
              }
            }
          },
          {
            "description": "My verification key",
            "key": "my_verkey",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
              }
            }
          },
          {
            "key": "record",
            "valueType": {
              "type": "id",
              "value": "ConnRecord"
            }
          },
          {
            "description": "Remote DID",
            "key": "their_did",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
              }
            }
          },
          {
            "description": "Remote verification key",
            "key": "their_verkey",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
              }
            }
          }
        ]
      }
    },
    "ConstraintsStatusActive": {
      "name": "ConstraintsStatusActive",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "required"
          },
          {
            "value": "allowed"
          },
          {
            "value": "disallowed"
          }
        ]
      }
    },
    "ConstraintsStatusRevoked": {
      "name": "ConstraintsStatusRevoked",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "required"
          },
          {
            "value": "allowed"
          },
          {
            "value": "disallowed"
          }
        ]
      }
    },
    "ConstraintsStatusSuspended": {
      "name": "ConstraintsStatusSuspended",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "required"
          },
          {
            "value": "allowed"
          },
          {
            "value": "disallowed"
          }
        ]
      }
    },
    "ConstraintsSubjectIsIssuer": {
      "description": "SubjectIsIssuer",
      "name": "ConstraintsSubjectIsIssuer",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "required"
          },
          {
            "value": "preferred"
          }
        ]
      }
    },
    "Constraints": {
      "name": "Constraints",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "fields",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "DIFField"
                }
              }
            }
          },
          {
            "key": "is_holder",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "DIFHolder"
                }
              }
            }
          },
          {
            "description": "LimitDisclosure",
            "key": "limit_disclosure",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "status_active",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConstraintsStatusActive"
              }
            }
          },
          {
            "key": "status_revoked",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConstraintsStatusRevoked"
              }
            }
          },
          {
            "key": "status_suspended",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConstraintsStatusSuspended"
              }
            }
          },
          {
            "description": "SubjectIsIssuer",
            "key": "subject_is_issuer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConstraintsSubjectIsIssuer"
              }
            }
          }
        ]
      }
    },
    "CreateInvitationRequestMetadata": {
      "description": "Optional metadata to attach to the connection created with the invitation",
      "name": "CreateInvitationRequestMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "CreateInvitationRequest": {
      "name": "CreateInvitationRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Identifier for active mediation record to be used",
            "key": "mediation_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                }
              }
            }
          },
          {
            "description": "Optional metadata to attach to the connection created with the invitation",
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "CreateInvitationRequestMetadata"
              }
            }
          },
          {
            "description": "Optional label for connection invitation",
            "key": "my_label",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of recipient keys",
            "key": "recipient_keys",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
                  }
                }
              }
            }
          },
          {
            "description": "List of routing keys",
            "key": "routing_keys",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
                  }
                }
              }
            }
          },
          {
            "description": "Connection endpoint",
            "key": "service_endpoint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "CreateWalletRequestKeyManagementMode": {
      "description": "Key management method to use for this wallet.",
      "name": "CreateWalletRequestKeyManagementMode",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "managed"
          }
        ]
      }
    },
    "CreateWalletRequestWalletDispatchType": {
      "description": "Webhook target dispatch type for this wallet.             default - Dispatch only to webhooks associated with this wallet.             base - Dispatch only to webhooks associated with the base wallet.             both - Dispatch to both webhook targets.",
      "name": "CreateWalletRequestWalletDispatchType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "default"
          },
          {
            "value": "both"
          },
          {
            "value": "base"
          }
        ]
      }
    },
    "CreateWalletRequestWalletKeyDerivation": {
      "description": "Key derivation",
      "name": "CreateWalletRequestWalletKeyDerivation",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ARGON2I_MOD"
          },
          {
            "value": "ARGON2I_INT"
          },
          {
            "value": "RAW"
          }
        ]
      }
    },
    "CreateWalletRequestWalletType": {
      "description": "Type of the wallet to create",
      "name": "CreateWalletRequestWalletType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "askar"
          },
          {
            "value": "in_memory"
          },
          {
            "value": "indy"
          }
        ]
      }
    },
    "CreateWalletRequest": {
      "name": "CreateWalletRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Image url for this wallet. This image url is publicized            (self-attested) to other agents as part of forming a connection.",
            "key": "image_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Key management method to use for this wallet.",
            "key": "key_management_mode",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "CreateWalletRequestKeyManagementMode"
              }
            }
          },
          {
            "description": "Label for this wallet. This label is publicized            (self-attested) to other agents as part of forming a connection.",
            "key": "label",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Webhook target dispatch type for this wallet.             default - Dispatch only to webhooks associated with this wallet.             base - Dispatch only to webhooks associated with the base wallet.             both - Dispatch to both webhook targets.",
            "key": "wallet_dispatch_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "CreateWalletRequestWalletDispatchType"
              }
            }
          },
          {
            "description": "Master key used for key derivation.",
            "key": "wallet_key",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Key derivation",
            "key": "wallet_key_derivation",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "CreateWalletRequestWalletKeyDerivation"
              }
            }
          },
          {
            "description": "Wallet name",
            "key": "wallet_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Type of the wallet to create",
            "key": "wallet_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "CreateWalletRequestWalletType"
              }
            }
          },
          {
            "description": "List of Webhook URLs associated with this subwallet",
            "key": "wallet_webhook_urls",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "CreateWalletResponseKeyManagementMode": {
      "description": "Mode regarding management of wallet key",
      "name": "CreateWalletResponseKeyManagementMode",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "managed"
          },
          {
            "value": "unmanaged"
          }
        ]
      }
    },
    "CreateWalletResponseSettings": {
      "description": "Settings for this wallet.",
      "name": "CreateWalletResponseSettings",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "CreateWalletResponse": {
      "name": "CreateWalletResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Time of record creation",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "description": "Mode regarding management of wallet key",
            "key": "key_management_mode",
            "valueType": {
              "type": "id",
              "value": "CreateWalletResponseKeyManagementMode"
            }
          },
          {
            "description": "Settings for this wallet.",
            "key": "settings",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "CreateWalletResponseSettings"
              }
            }
          },
          {
            "description": "Current record state",
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Authorization token to authenticate wallet requests",
            "key": "token",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Time of last record update",
            "key": "updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "description": "Wallet record ID",
            "key": "wallet_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "CreateWalletTokenRequest": {
      "name": "CreateWalletTokenRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Master key used for key derivation. Only required for             unamanged wallets.",
            "key": "wallet_key",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "CreateWalletTokenResponse": {
      "name": "CreateWalletTokenResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Authorization token to authenticate wallet requests",
            "key": "token",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "CredAttrSpec": {
      "name": "CredAttrSpec",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "MIME type: omit for (null) default",
            "key": "mime-type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Attribute name",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Attribute value: base64-encode if MIME type is present",
            "key": "value",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "CredDefValue": {
      "name": "CredDefValue",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "primary",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "CredDefValue_primary"
              }
            }
          },
          {
            "key": "revocation",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "CredDefValue_revocation"
              }
            }
          }
        ]
      }
    },
    "CredDefValuePrimary": {
      "name": "CredDefValuePrimary",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "n",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9]*$"
                }
              }
            }
          },
          {
            "key": "r",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "Generated"
              }
            }
          },
          {
            "key": "rctxt",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9]*$"
                }
              }
            }
          },
          {
            "key": "s",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9]*$"
                }
              }
            }
          },
          {
            "key": "z",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9]*$"
                }
              }
            }
          }
        ]
      }
    },
    "CredDefValueRevocation": {
      "name": "CredDefValueRevocation",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "g",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "g_dash",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "h",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "h0",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "h1",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "h2",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "h_cap",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "htilde",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "pk",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "u",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "y",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "CredInfoList": {
      "name": "CredInfoList",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "IndyCredInfo"
                }
              }
            }
          }
        ]
      }
    },
    "CredRevIndyRecordsResultRevRegDelta": {
      "description": "Indy revocation registry delta",
      "name": "CredRevIndyRecordsResultRevRegDelta",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "CredRevIndyRecordsResult": {
      "name": "CredRevIndyRecordsResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Indy revocation registry delta",
            "key": "rev_reg_delta",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "CredRevIndyRecordsResultRevRegDelta"
              }
            }
          }
        ]
      }
    },
    "CredRevRecordDetailsResult": {
      "name": "CredRevRecordDetailsResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "IssuerCredRevRecord"
                }
              }
            }
          }
        ]
      }
    },
    "CredRevRecordResult": {
      "name": "CredRevRecordResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "result",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IssuerCredRevRecord"
              }
            }
          }
        ]
      }
    },
    "CredRevokedResult": {
      "name": "CredRevokedResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Whether credential is revoked on the ledger",
            "key": "revoked",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "CredentialContextItems": {
      "name": "CredentialContextItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "CredentialCredentialSubject": {
      "name": "CredentialCredentialSubject",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "CredentialIssuer": {
      "description": "The JSON-LD Verifiable Credential Issuer. Either string of object with id field.",
      "name": "CredentialIssuer",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "Credential": {
      "name": "Credential",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The JSON-LD context of the credential",
            "key": "@context",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "CredentialContextItems"
              }
            }
          },
          {
            "key": "credentialSubject",
            "valueType": {
              "type": "id",
              "value": "CredentialCredentialSubject"
            }
          },
          {
            "description": "The expiration date",
            "key": "expirationDate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([0-9]{4})-([0-9]{2})-([0-9]{2})([Tt ]([0-9]{2}):([0-9]{2}):([0-9]{2})(\\.[0-9]+)?)?(([Zz]|([+-])([0-9]{2}):([0-9]{2})))?$"
                }
              }
            }
          },
          {
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "\\w+:(\\/?\\/?)[^\\s]+"
                }
              }
            }
          },
          {
            "description": "The issuance date",
            "key": "issuanceDate",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^([0-9]{4})-([0-9]{2})-([0-9]{2})([Tt ]([0-9]{2}):([0-9]{2}):([0-9]{2})(\\.[0-9]+)?)?(([Zz]|([+-])([0-9]{2}):([0-9]{2})))?$"
              }
            }
          },
          {
            "description": "The JSON-LD Verifiable Credential Issuer. Either string of object with id field.",
            "key": "issuer",
            "valueType": {
              "type": "id",
              "value": "CredentialIssuer"
            }
          },
          {
            "key": "proof",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "Credential_proof"
              }
            }
          },
          {
            "description": "The JSON-LD type of the credential",
            "key": "type",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "CredentialDefinitionType": {
      "description": "Signature type: CL for Camenisch-Lysyanskaya",
      "name": "CredentialDefinitionType",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "CredentialDefinition": {
      "name": "CredentialDefinition",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Credential definition identifier",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                }
              }
            }
          },
          {
            "description": "Schema identifier within credential definition identifier",
            "key": "schemaId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Tag within credential definition identifier",
            "key": "tag",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Signature type: CL for Camenisch-Lysyanskaya",
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "CredentialDefinitionType"
              }
            }
          },
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "CredentialDefinition_value"
              }
            }
          },
          {
            "description": "Node protocol version",
            "key": "ver",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9.]+$"
                }
              }
            }
          }
        ]
      }
    },
    "CredentialDefinitionGetResult": {
      "name": "CredentialDefinitionGetResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "credential_definition",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "CredentialDefinition"
              }
            }
          }
        ]
      }
    },
    "CredentialDefinitionSendRequest": {
      "name": "CredentialDefinitionSendRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Revocation registry size",
            "key": "revocation_registry_size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 4,
                  "maximum": 32768
                }
              }
            }
          },
          {
            "description": "Schema identifier",
            "key": "schema_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
                }
              }
            }
          },
          {
            "description": "Revocation supported flag",
            "key": "support_revocation",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Credential definition identifier tag",
            "key": "tag",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "CredentialDefinitionSendResult": {
      "name": "CredentialDefinitionSendResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Credential definition identifier",
            "key": "credential_definition_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                }
              }
            }
          }
        ]
      }
    },
    "CredentialDefinitionsCreatedResult": {
      "name": "CredentialDefinitionsCreatedResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "credential_definition_ids",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "CredentialOffer": {
      "name": "CredentialOffer",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "credential_preview",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "CredentialPreview"
              }
            }
          },
          {
            "key": "offers~attach",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "AttachDecorator"
              }
            }
          }
        ]
      }
    },
    "CredentialPreview": {
      "name": "CredentialPreview",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message type identifier",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "attributes",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "CredAttrSpec"
              }
            }
          }
        ]
      }
    },
    "CredentialProposal": {
      "name": "CredentialProposal",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "cred_def_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                }
              }
            }
          },
          {
            "key": "credential_proposal",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "CredentialPreview"
              }
            }
          },
          {
            "key": "issuer_did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            }
          },
          {
            "key": "schema_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
                }
              }
            }
          },
          {
            "key": "schema_issuer_did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            }
          },
          {
            "key": "schema_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "schema_version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9.]+$"
                }
              }
            }
          }
        ]
      }
    },
    "CredentialStatusOptions": {
      "name": "CredentialStatusOptions",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Credential status method type to use for the credential. Should match status method registered in the Verifiable Credential Extension Registry",
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "DidKeyType": {
      "description": "Key type associated with the DID",
      "name": "DidKeyType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ed25519"
          },
          {
            "value": "bls12381g2"
          }
        ]
      }
    },
    "DidPosture": {
      "description": "Whether DID is current public DID, posted to ledger but not current public DID, or local to the wallet",
      "name": "DidPosture",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "public"
          },
          {
            "value": "posted"
          },
          {
            "value": "wallet_only"
          }
        ]
      }
    },
    "DID": {
      "name": "DID",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "DID of interest",
            "key": "did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$|^did:([a-zA-Z0-9_]+):([a-zA-Z0-9_.%-]+(:[a-zA-Z0-9_.%-]+)*)((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(\\/[^#?]*)?([?][^#]*)?(\\#.*)?$$"
                }
              }
            }
          },
          {
            "description": "Key type associated with the DID",
            "key": "key_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "DidKeyType"
              }
            }
          },
          {
            "description": "Did method associated with the DID",
            "key": "method",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Whether DID is current public DID, posted to ledger but not current public DID, or local to the wallet",
            "key": "posture",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "DidPosture"
              }
            }
          },
          {
            "description": "Public verification key",
            "key": "verkey",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
                }
              }
            }
          }
        ]
      }
    },
    "DIDCreate": {
      "name": "DIDCreate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Method for the requested DID.Supported methods are 'key', 'sov', and any other registered method.",
            "key": "method",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "options",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "DIDCreate_options"
              }
            }
          },
          {
            "description": "Optional seed to use for DID, Must beenabled in configuration before use.",
            "key": "seed",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "DidCreateOptionsKeyType": {
      "description": "Key type to use for the DID keypair. Validated with the chosen DID method's supported key types.",
      "name": "DidCreateOptionsKeyType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ed25519"
          },
          {
            "value": "bls12381g2"
          }
        ]
      }
    },
    "DIDCreateOptions": {
      "name": "DIDCreateOptions",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Specify final value of the did (including did:<method>: prefix)if the method supports or requires so.",
            "key": "did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$|^did:([a-zA-Z0-9_]+):([a-zA-Z0-9_.%-]+(:[a-zA-Z0-9_.%-]+)*)((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(\\/[^#?]*)?([?][^#]*)?(\\#.*)?$$"
                }
              }
            }
          },
          {
            "description": "Key type to use for the DID keypair. Validated with the chosen DID method's supported key types.",
            "key": "key_type",
            "valueType": {
              "type": "id",
              "value": "DidCreateOptionsKeyType"
            }
          }
        ]
      }
    },
    "DIDEndpoint": {
      "name": "DIDEndpoint",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "DID of interest",
            "key": "did",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
              }
            }
          },
          {
            "description": "Endpoint to set (omit to delete)",
            "key": "endpoint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
                }
              }
            }
          }
        ]
      }
    },
    "DidEndpointWithTypeEndpointType": {
      "description": "Endpoint type to set (default 'Endpoint'); affects only public or posted DIDs",
      "name": "DidEndpointWithTypeEndpointType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "Endpoint"
          },
          {
            "value": "Profile"
          },
          {
            "value": "LinkedDomains"
          }
        ]
      }
    },
    "DIDEndpointWithType": {
      "name": "DIDEndpointWithType",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "DID of interest",
            "key": "did",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
              }
            }
          },
          {
            "description": "Endpoint to set (omit to delete)",
            "key": "endpoint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
                }
              }
            }
          },
          {
            "description": "Endpoint type to set (default 'Endpoint'); affects only public or posted DIDs",
            "key": "endpoint_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "DidEndpointWithTypeEndpointType"
              }
            }
          }
        ]
      }
    },
    "DIDList": {
      "name": "DIDList",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "DID list",
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "DID"
                }
              }
            }
          }
        ]
      }
    },
    "DIDResult": {
      "name": "DIDResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "result",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "DID"
              }
            }
          }
        ]
      }
    },
    "DIDXRequest": {
      "name": "DIDXRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "DID of exchange",
            "key": "did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            }
          },
          {
            "key": "did_doc~attach",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "DIDXRequest_did_doc_attach"
              }
            }
          },
          {
            "description": "Label for DID exchange request",
            "key": "label",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "DifFieldPredicate": {
      "description": "Preference",
      "name": "DifFieldPredicate",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "required"
          },
          {
            "value": "preferred"
          }
        ]
      }
    },
    "DIFField": {
      "name": "DIFField",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "filter",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "Filter"
              }
            }
          },
          {
            "description": "ID",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "path",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Preference",
            "key": "predicate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "DifFieldPredicate"
              }
            }
          },
          {
            "description": "Purpose",
            "key": "purpose",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "DifHolderDirective": {
      "description": "Preference",
      "name": "DifHolderDirective",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "required"
          },
          {
            "value": "preferred"
          }
        ]
      }
    },
    "DIFHolder": {
      "name": "DIFHolder",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Preference",
            "key": "directive",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "DifHolderDirective"
              }
            }
          },
          {
            "key": "field_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "DIFOptions": {
      "name": "DIFOptions",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Challenge protect against replay attack",
            "key": "challenge",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                }
              }
            }
          },
          {
            "description": "Domain protect against replay attack",
            "key": "domain",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "DifPresSpecRecordIds": {
      "description": "Mapping of input_descriptor id to list of stored W3C credential record_id",
      "name": "DifPresSpecRecordIds",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "DifPresSpecRevealDoc": {
      "description": "reveal doc [JSON-LD frame] dict used to derive the credential when selective disclosure is required",
      "name": "DifPresSpecRevealDoc",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "DIFPresSpec": {
      "name": "DIFPresSpec",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Issuer identifier to sign the presentation, if different from current public DID",
            "key": "issuer_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "presentation_definition",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "PresentationDefinition"
              }
            }
          },
          {
            "description": "Mapping of input_descriptor id to list of stored W3C credential record_id",
            "key": "record_ids",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "DifPresSpecRecordIds"
              }
            }
          },
          {
            "description": "reveal doc [JSON-LD frame] dict used to derive the credential when selective disclosure is required",
            "key": "reveal_doc",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "DifPresSpecRevealDoc"
              }
            }
          }
        ]
      }
    },
    "DIFProofProposal": {
      "name": "DIFProofProposal",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "input_descriptors",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "InputDescriptors"
                }
              }
            }
          },
          {
            "key": "options",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "DIFOptions"
              }
            }
          }
        ]
      }
    },
    "DIFProofRequest": {
      "name": "DIFProofRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "options",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "DIFOptions"
              }
            }
          },
          {
            "key": "presentation_definition",
            "valueType": {
              "type": "id",
              "value": "PresentationDefinition"
            }
          }
        ]
      }
    },
    "Date": {
      "name": "Date",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Expiry Date",
            "key": "expires_time",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "Disclose": {
      "name": "Disclose",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of protocol descriptors",
            "key": "protocols",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "ProtocolDescriptor"
              }
            }
          }
        ]
      }
    },
    "DisclosuresDisclosuresItems": {
      "name": "DisclosuresDisclosuresItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "Disclosures": {
      "name": "Disclosures",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of protocol or goal_code descriptors",
            "key": "disclosures",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "DisclosuresDisclosuresItems"
              }
            }
          }
        ]
      }
    },
    "DocCredential": {
      "description": "Credential to sign",
      "name": "DocCredential",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "Doc": {
      "name": "Doc",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Credential to sign",
            "key": "credential",
            "valueType": {
              "type": "id",
              "value": "DocCredential"
            }
          },
          {
            "key": "options",
            "valueType": {
              "type": "id",
              "value": "Doc_options"
            }
          }
        ]
      }
    },
    "EndorserInfo": {
      "name": "EndorserInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Endorser DID",
            "key": "endorser_did",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Endorser Name",
            "key": "endorser_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "EndpointsResult": {
      "name": "EndpointsResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "My endpoint",
            "key": "my_endpoint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
                }
              }
            }
          },
          {
            "description": "Their endpoint",
            "key": "their_endpoint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
                }
              }
            }
          }
        ]
      }
    },
    "FilterConst": {
      "description": "Const",
      "name": "FilterConst",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "FilterEnumItems": {
      "description": "Enum",
      "name": "FilterEnumItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "FilterExclusiveMaximum": {
      "description": "ExclusiveMaximum",
      "name": "FilterExclusiveMaximum",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "FilterExclusiveMinimum": {
      "description": "ExclusiveMinimum",
      "name": "FilterExclusiveMinimum",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "FilterMaximum": {
      "description": "Maximum",
      "name": "FilterMaximum",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "FilterMinimum": {
      "description": "Minimum",
      "name": "FilterMinimum",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "Filter": {
      "name": "Filter",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Const",
            "key": "const",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "FilterConst"
              }
            }
          },
          {
            "key": "enum",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "FilterEnumItems"
                }
              }
            }
          },
          {
            "description": "ExclusiveMaximum",
            "key": "exclusiveMaximum",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "FilterExclusiveMaximum"
              }
            }
          },
          {
            "description": "ExclusiveMinimum",
            "key": "exclusiveMinimum",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "FilterExclusiveMinimum"
              }
            }
          },
          {
            "description": "Format",
            "key": "format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Max Length",
            "key": "maxLength",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Maximum",
            "key": "maximum",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "FilterMaximum"
              }
            }
          },
          {
            "description": "Min Length",
            "key": "minLength",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Minimum",
            "key": "minimum",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "FilterMinimum"
              }
            }
          },
          {
            "description": "Not",
            "key": "not",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Pattern",
            "key": "pattern",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Type",
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "Generated": {
      "name": "Generated",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "master_secret",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9]*$"
                }
              }
            }
          },
          {
            "key": "number",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9]*$"
                }
              }
            }
          },
          {
            "key": "remainder",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9]*$"
                }
              }
            }
          }
        ]
      }
    },
    "GetDIDEndpointResponse": {
      "name": "GetDIDEndpointResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Full verification key",
            "key": "endpoint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "GetDIDVerkeyResponse": {
      "name": "GetDIDVerkeyResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Full verification key",
            "key": "verkey",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "GetNymRoleResponseRole": {
      "description": "Ledger role",
      "name": "GetNymRoleResponseRole",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "STEWARD"
          },
          {
            "value": "TRUSTEE"
          },
          {
            "value": "ENDORSER"
          },
          {
            "value": "NETWORK_MONITOR"
          },
          {
            "value": "USER"
          },
          {
            "value": "ROLE_REMOVE"
          }
        ]
      }
    },
    "GetNymRoleResponse": {
      "name": "GetNymRoleResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Ledger role",
            "key": "role",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "GetNymRoleResponseRole"
              }
            }
          }
        ]
      }
    },
    "HolderModuleResponse": {
      "name": "HolderModuleResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "IndyAttrValue": {
      "name": "IndyAttrValue",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Attribute encoded value",
            "key": "encoded",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^-?[0-9]*$"
              }
            }
          },
          {
            "description": "Attribute raw value",
            "key": "raw",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "IndyCredAbstract": {
      "name": "IndyCredAbstract",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Credential definition identifier",
            "key": "cred_def_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
              }
            }
          },
          {
            "key": "key_correctness_proof",
            "valueType": {
              "type": "id",
              "value": "IndyCredAbstract_key_correctness_proof"
            }
          },
          {
            "description": "Nonce in credential abstract",
            "key": "nonce",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[0-9]*$"
              }
            }
          },
          {
            "description": "Schema identifier",
            "key": "schema_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
              }
            }
          }
        ]
      }
    },
    "IndyCredInfo": {
      "name": "IndyCredInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Attribute names and value",
            "key": "attrs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Credential definition identifier",
            "key": "cred_def_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                }
              }
            }
          },
          {
            "description": "Credential revocation identifier",
            "key": "cred_rev_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[1-9][0-9]*$"
                  }
                }
              }
            }
          },
          {
            "description": "Wallet referent",
            "key": "referent",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Revocation registry identifier",
            "key": "rev_reg_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                  }
                }
              }
            }
          },
          {
            "description": "Schema identifier",
            "key": "schema_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
                }
              }
            }
          }
        ]
      }
    },
    "IndyCredPrecis": {
      "name": "IndyCredPrecis",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "cred_info",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IndyCredPrecis_cred_info"
              }
            }
          },
          {
            "key": "interval",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IndyCredPrecis_interval"
              }
            }
          },
          {
            "key": "presentation_referents",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "IndyCredRequestBlindedMs": {
      "description": "Blinded master secret",
      "name": "IndyCredRequestBlindedMs",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "IndyCredRequestBlindedMsCorrectnessProof": {
      "description": "Blinded master secret correctness proof",
      "name": "IndyCredRequestBlindedMsCorrectnessProof",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "IndyCredRequest": {
      "name": "IndyCredRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Blinded master secret",
            "key": "blinded_ms",
            "valueType": {
              "type": "id",
              "value": "IndyCredRequestBlindedMs"
            }
          },
          {
            "description": "Blinded master secret correctness proof",
            "key": "blinded_ms_correctness_proof",
            "valueType": {
              "type": "id",
              "value": "IndyCredRequestBlindedMsCorrectnessProof"
            }
          },
          {
            "description": "Credential definition identifier",
            "key": "cred_def_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
              }
            }
          },
          {
            "description": "Nonce in credential request",
            "key": "nonce",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[0-9]*$"
              }
            }
          },
          {
            "description": "Prover DID",
            "key": "prover_did",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
              }
            }
          }
        ]
      }
    },
    "IndyCredentialRevReg": {
      "description": "Revocation registry state",
      "name": "IndyCredentialRevReg",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "IndyCredentialSignature": {
      "description": "Credential signature",
      "name": "IndyCredentialSignature",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "IndyCredentialSignatureCorrectnessProof": {
      "description": "Credential signature correctness proof",
      "name": "IndyCredentialSignatureCorrectnessProof",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "IndyCredentialWitness": {
      "description": "Witness for revocation proof",
      "name": "IndyCredentialWitness",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "IndyCredential": {
      "name": "IndyCredential",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Credential definition identifier",
            "key": "cred_def_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
              }
            }
          },
          {
            "description": "Revocation registry state",
            "key": "rev_reg",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IndyCredentialRevReg"
                }
              }
            }
          },
          {
            "description": "Revocation registry identifier",
            "key": "rev_reg_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                  }
                }
              }
            }
          },
          {
            "description": "Schema identifier",
            "key": "schema_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
              }
            }
          },
          {
            "description": "Credential signature",
            "key": "signature",
            "valueType": {
              "type": "id",
              "value": "IndyCredentialSignature"
            }
          },
          {
            "description": "Credential signature correctness proof",
            "key": "signature_correctness_proof",
            "valueType": {
              "type": "id",
              "value": "IndyCredentialSignatureCorrectnessProof"
            }
          },
          {
            "description": "Credential attributes",
            "key": "values",
            "valueType": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "id",
                "value": "IndyCredential_values_value"
              }
            }
          },
          {
            "description": "Witness for revocation proof",
            "key": "witness",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IndyCredentialWitness"
                }
              }
            }
          }
        ]
      }
    },
    "IndyEQProof": {
      "name": "IndyEQProof",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "a_prime",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9]*$"
                }
              }
            }
          },
          {
            "key": "e",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9]*$"
                }
              }
            }
          },
          {
            "key": "m",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[0-9]*$"
                  }
                }
              }
            }
          },
          {
            "key": "m2",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9]*$"
                }
              }
            }
          },
          {
            "key": "revealed_attrs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^-?[0-9]*$"
                  }
                }
              }
            }
          },
          {
            "key": "v",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9]*$"
                }
              }
            }
          }
        ]
      }
    },
    "IndyGEProof": {
      "name": "IndyGEProof",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "alpha",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9]*$"
                }
              }
            }
          },
          {
            "key": "mj",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9]*$"
                }
              }
            }
          },
          {
            "key": "predicate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IndyGEProofPred"
              }
            }
          },
          {
            "key": "r",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[0-9]*$"
                  }
                }
              }
            }
          },
          {
            "key": "t",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[0-9]*$"
                  }
                }
              }
            }
          },
          {
            "key": "u",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[0-9]*$"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "IndyGeProofPredPType": {
      "description": "Predicate type",
      "name": "IndyGeProofPredPType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "LT"
          },
          {
            "value": "LE"
          },
          {
            "value": "GE"
          },
          {
            "value": "GT"
          }
        ]
      }
    },
    "IndyGEProofPred": {
      "name": "IndyGEProofPred",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Attribute name, indy-canonicalized",
            "key": "attr_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Predicate type",
            "key": "p_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IndyGeProofPredPType"
              }
            }
          },
          {
            "description": "Predicate threshold value",
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "IndyKeyCorrectnessProof": {
      "name": "IndyKeyCorrectnessProof",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "c in key correctness proof",
            "key": "c",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[0-9]*$"
              }
            }
          },
          {
            "description": "xr_cap in key correctness proof",
            "key": "xr_cap",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "xz_cap in key correctness proof",
            "key": "xz_cap",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[0-9]*$"
              }
            }
          }
        ]
      }
    },
    "IndyNonRevocProof": {
      "name": "IndyNonRevocProof",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "c_list",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "x_list",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "IndyNonRevocationInterval": {
      "name": "IndyNonRevocationInterval",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Earliest time of interest in non-revocation interval",
            "key": "from",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 18446744073709552000
                }
              }
            }
          },
          {
            "description": "Latest time of interest in non-revocation interval",
            "key": "to",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 18446744073709552000
                }
              }
            }
          }
        ]
      }
    },
    "IndyPresAttrSpec": {
      "name": "IndyPresAttrSpec",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "cred_def_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                }
              }
            }
          },
          {
            "description": "MIME type (default null)",
            "key": "mime-type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Attribute name",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Credential referent",
            "key": "referent",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Attribute value",
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "IndyPresPredSpecPredicate": {
      "description": "Predicate type ('<', '<=', '>=', or '>')",
      "name": "IndyPresPredSpecPredicate",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "<"
          },
          {
            "value": "<="
          },
          {
            "value": ">="
          },
          {
            "value": ">"
          }
        ]
      }
    },
    "IndyPresPredSpec": {
      "name": "IndyPresPredSpec",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Credential definition identifier",
            "key": "cred_def_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                }
              }
            }
          },
          {
            "description": "Attribute name",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Predicate type ('<', '<=', '>=', or '>')",
            "key": "predicate",
            "valueType": {
              "type": "id",
              "value": "IndyPresPredSpecPredicate"
            }
          },
          {
            "description": "Threshold value",
            "key": "threshold",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "IndyPresPreview": {
      "name": "IndyPresPreview",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message type identifier",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "attributes",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "IndyPresAttrSpec"
              }
            }
          },
          {
            "key": "predicates",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "IndyPresPredSpec"
              }
            }
          }
        ]
      }
    },
    "IndyPresSpec": {
      "name": "IndyPresSpec",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Nested object mapping proof request attribute referents to requested-attribute specifiers",
            "key": "requested_attributes",
            "valueType": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "id",
                "value": "IndyRequestedCredsRequestedAttr"
              }
            }
          },
          {
            "description": "Nested object mapping proof request predicate referents to requested-predicate specifiers",
            "key": "requested_predicates",
            "valueType": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "id",
                "value": "IndyRequestedCredsRequestedPred"
              }
            }
          },
          {
            "description": "Self-attested attributes to build into proof",
            "key": "self_attested_attributes",
            "valueType": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Whether to trace event (default false)",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "IndyPrimaryProof": {
      "name": "IndyPrimaryProof",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "eq_proof",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IndyPrimaryProof_eq_proof"
              }
            }
          },
          {
            "description": "Indy GE proofs",
            "key": "ge_proofs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "IndyGEProof"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "IndyProof": {
      "name": "IndyProof",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Indy proof.identifiers content",
            "key": "identifiers",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "IndyProofIdentifier"
                }
              }
            }
          },
          {
            "key": "proof",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IndyProof_proof"
              }
            }
          },
          {
            "key": "requested_proof",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IndyProof_requested_proof"
              }
            }
          }
        ]
      }
    },
    "IndyProofIdentifier": {
      "name": "IndyProofIdentifier",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Credential definition identifier",
            "key": "cred_def_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                }
              }
            }
          },
          {
            "description": "Revocation registry identifier",
            "key": "rev_reg_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                  }
                }
              }
            }
          },
          {
            "description": "Schema identifier",
            "key": "schema_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
                }
              }
            }
          },
          {
            "description": "Timestamp epoch",
            "key": "timestamp",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 18446744073709552000
                  }
                }
              }
            }
          }
        ]
      }
    },
    "IndyProofProof": {
      "name": "IndyProofProof",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "aggregated_proof",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IndyProofProof_aggregated_proof"
              }
            }
          },
          {
            "description": "Indy proof proofs",
            "key": "proofs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "IndyProofProofProofsProof"
                }
              }
            }
          }
        ]
      }
    },
    "IndyProofProofAggregatedProof": {
      "name": "IndyProofProofAggregatedProof",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "c_hash value",
            "key": "c_hash",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "c_list value",
            "key": "c_list",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "IndyProofProofProofsProof": {
      "name": "IndyProofProofProofsProof",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "non_revoc_proof",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IndyProofProofProofsProof_non_revoc_proof"
              }
            }
          },
          {
            "key": "primary_proof",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IndyProofProofProofsProof_primary_proof"
              }
            }
          }
        ]
      }
    },
    "IndyProofReqAttrSpec": {
      "name": "IndyProofReqAttrSpec",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Attribute name",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Attribute name group",
            "key": "names",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "non_revoked",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IndyProofReqAttrSpec_non_revoked"
              }
            }
          },
          {
            "description": "If present, credential must satisfy one of given restrictions: specify schema_id, schema_issuer_did, schema_name, schema_version, issuer_did, cred_def_id, and/or attr::<attribute-name>::value where <attribute-name> represents a credential attribute name",
            "key": "restrictions",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "map",
                  "keyType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "IndyProofReqAttrSpecNonRevoked": {
      "name": "IndyProofReqAttrSpecNonRevoked",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Earliest time of interest in non-revocation interval",
            "key": "from",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 18446744073709552000
                }
              }
            }
          },
          {
            "description": "Latest time of interest in non-revocation interval",
            "key": "to",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 18446744073709552000
                }
              }
            }
          }
        ]
      }
    },
    "IndyProofReqPredSpecPType": {
      "description": "Predicate type ('<', '<=', '>=', or '>')",
      "name": "IndyProofReqPredSpecPType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "<"
          },
          {
            "value": "<="
          },
          {
            "value": ">="
          },
          {
            "value": ">"
          }
        ]
      }
    },
    "IndyProofReqPredSpec": {
      "name": "IndyProofReqPredSpec",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Attribute name",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "non_revoked",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IndyProofReqPredSpec_non_revoked"
              }
            }
          },
          {
            "description": "Predicate type ('<', '<=', '>=', or '>')",
            "key": "p_type",
            "valueType": {
              "type": "id",
              "value": "IndyProofReqPredSpecPType"
            }
          },
          {
            "description": "Threshold value",
            "key": "p_value",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "If present, credential must satisfy one of given restrictions: specify schema_id, schema_issuer_did, schema_name, schema_version, issuer_did, cred_def_id, and/or attr::<attribute-name>::value where <attribute-name> represents a credential attribute name",
            "key": "restrictions",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "map",
                  "keyType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "IndyProofReqPredSpecNonRevoked": {
      "name": "IndyProofReqPredSpecNonRevoked",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Earliest time of interest in non-revocation interval",
            "key": "from",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 18446744073709552000
                }
              }
            }
          },
          {
            "description": "Latest time of interest in non-revocation interval",
            "key": "to",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 18446744073709552000
                }
              }
            }
          }
        ]
      }
    },
    "IndyProofRequest": {
      "name": "IndyProofRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Proof request name",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "non_revoked",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IndyProofRequest_non_revoked"
              }
            }
          },
          {
            "description": "Nonce",
            "key": "nonce",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[1-9][0-9]*$"
                }
              }
            }
          },
          {
            "description": "Requested attribute specifications of proof request",
            "key": "requested_attributes",
            "valueType": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "id",
                "value": "IndyProofReqAttrSpec"
              }
            }
          },
          {
            "description": "Requested predicate specifications of proof request",
            "key": "requested_predicates",
            "valueType": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "id",
                "value": "IndyProofReqPredSpec"
              }
            }
          },
          {
            "description": "Proof request version",
            "key": "version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9.]+$"
                }
              }
            }
          }
        ]
      }
    },
    "IndyProofRequestNonRevoked": {
      "name": "IndyProofRequestNonRevoked",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Earliest time of interest in non-revocation interval",
            "key": "from",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 18446744073709552000
                }
              }
            }
          },
          {
            "description": "Latest time of interest in non-revocation interval",
            "key": "to",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 18446744073709552000
                }
              }
            }
          }
        ]
      }
    },
    "IndyProofRequestedProofSelfAttestedAttrs": {
      "description": "Proof requested proof self-attested attributes",
      "name": "IndyProofRequestedProofSelfAttestedAttrs",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "IndyProofRequestedProofUnrevealedAttrs": {
      "description": "Unrevealed attributes",
      "name": "IndyProofRequestedProofUnrevealedAttrs",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "IndyProofRequestedProof": {
      "name": "IndyProofRequestedProof",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Proof requested proof predicates.",
            "key": "predicates",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "id",
                  "value": "IndyProofRequestedProofPredicate"
                }
              }
            }
          },
          {
            "description": "Proof requested proof revealed attribute groups",
            "key": "revealed_attr_groups",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "map",
                  "keyType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "valueType": {
                    "type": "id",
                    "value": "IndyProofRequestedProofRevealedAttrGroup"
                  }
                }
              }
            }
          },
          {
            "description": "Proof requested proof revealed attributes",
            "key": "revealed_attrs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "map",
                  "keyType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "valueType": {
                    "type": "id",
                    "value": "IndyProofRequestedProofRevealedAttr"
                  }
                }
              }
            }
          },
          {
            "description": "Proof requested proof self-attested attributes",
            "key": "self_attested_attrs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IndyProofRequestedProofSelfAttestedAttrs"
              }
            }
          },
          {
            "description": "Unrevealed attributes",
            "key": "unrevealed_attrs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IndyProofRequestedProofUnrevealedAttrs"
              }
            }
          }
        ]
      }
    },
    "IndyProofRequestedProofPredicate": {
      "name": "IndyProofRequestedProofPredicate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Sub-proof index",
            "key": "sub_proof_index",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "IndyProofRequestedProofRevealedAttr": {
      "name": "IndyProofRequestedProofRevealedAttr",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Encoded value",
            "key": "encoded",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^-?[0-9]*$"
                }
              }
            }
          },
          {
            "description": "Raw value",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Sub-proof index",
            "key": "sub_proof_index",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "IndyProofRequestedProofRevealedAttrGroup": {
      "name": "IndyProofRequestedProofRevealedAttrGroup",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Sub-proof index",
            "key": "sub_proof_index",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Indy proof requested proof revealed attr groups group value",
            "key": "values",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "id",
                  "value": "RawEncoded"
                }
              }
            }
          }
        ]
      }
    },
    "IndyRequestedCredsRequestedAttr": {
      "name": "IndyRequestedCredsRequestedAttr",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Wallet credential identifier (typically but not necessarily a UUID)",
            "key": "cred_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Whether to reveal attribute in proof (default true)",
            "key": "revealed",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "IndyRequestedCredsRequestedPred": {
      "name": "IndyRequestedCredsRequestedPred",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Wallet credential identifier (typically but not necessarily a UUID)",
            "key": "cred_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Epoch timestamp of interest for non-revocation proof",
            "key": "timestamp",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 18446744073709552000
                }
              }
            }
          }
        ]
      }
    },
    "IndyRevRegDefRevocDefType": {
      "description": "Revocation registry type (specify CL_ACCUM)",
      "name": "IndyRevRegDefRevocDefType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "CL_ACCUM"
          }
        ]
      }
    },
    "IndyRevRegDef": {
      "name": "IndyRevRegDef",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Credential definition identifier",
            "key": "credDefId",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                }
              }
            }
          },
          {
            "description": "Indy revocation registry identifier",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                }
              }
            }
          },
          {
            "description": "Revocation registry type (specify CL_ACCUM)",
            "key": "revocDefType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IndyRevRegDefRevocDefType"
              }
            }
          },
          {
            "description": "Revocation registry tag",
            "key": "tag",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IndyRevRegDef_value"
              }
            }
          },
          {
            "description": "Version of revocation registry definition",
            "key": "ver",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9.]+$"
                }
              }
            }
          }
        ]
      }
    },
    "IndyRevRegDefValueIssuanceType": {
      "description": "Issuance type",
      "name": "IndyRevRegDefValueIssuanceType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ISSUANCE_ON_DEMAND"
          },
          {
            "value": "ISSUANCE_BY_DEFAULT"
          }
        ]
      }
    },
    "IndyRevRegDefValue": {
      "name": "IndyRevRegDefValue",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Issuance type",
            "key": "issuanceType",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IndyRevRegDefValueIssuanceType"
              }
            }
          },
          {
            "description": "Maximum number of credentials; registry size",
            "key": "maxCredNum",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 1
                }
              }
            }
          },
          {
            "key": "publicKeys",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IndyRevRegDefValue_publicKeys"
              }
            }
          },
          {
            "description": "Tails hash value",
            "key": "tailsHash",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
                }
              }
            }
          },
          {
            "description": "Tails file location",
            "key": "tailsLocation",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "IndyRevRegDefValuePublicKeys": {
      "name": "IndyRevRegDefValuePublicKeys",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "accumKey",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IndyRevRegDefValuePublicKeysAccumKey"
              }
            }
          }
        ]
      }
    },
    "IndyRevRegDefValuePublicKeysAccumKey": {
      "name": "IndyRevRegDefValuePublicKeysAccumKey",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Value for z",
            "key": "z",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "IndyRevRegEntry": {
      "name": "IndyRevRegEntry",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IndyRevRegEntry_value"
              }
            }
          },
          {
            "description": "Version of revocation registry entry",
            "key": "ver",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9.]+$"
                }
              }
            }
          }
        ]
      }
    },
    "IndyRevRegEntryValue": {
      "name": "IndyRevRegEntryValue",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Accumulator value",
            "key": "accum",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Previous accumulator value",
            "key": "prevAccum",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Revoked credential revocation identifiers",
            "key": "revoked",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "InputDescriptorsMetadata": {
      "description": "Metadata dictionary",
      "name": "InputDescriptorsMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "InputDescriptors": {
      "name": "InputDescriptors",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "constraints",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "Constraints"
              }
            }
          },
          {
            "key": "group",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "ID",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Metadata dictionary",
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "InputDescriptorsMetadata"
              }
            }
          },
          {
            "description": "Name",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Purpose",
            "key": "purpose",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "schema",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "InputDescriptors_schema"
              }
            }
          }
        ]
      }
    },
    "IntroModuleResponse": {
      "name": "IntroModuleResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "InvitationCreateRequestMetadata": {
      "description": "Optional metadata to attach to the connection created with the invitation",
      "name": "InvitationCreateRequestMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "InvitationCreateRequest": {
      "name": "InvitationCreateRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of mime type in order of preference that should be use in responding to the message",
            "key": "accept",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Alias for connection",
            "key": "alias",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Optional invitation attachments",
            "key": "attachments",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "AttachmentDef"
                }
              }
            }
          },
          {
            "key": "handshake_protocols",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Identifier for active mediation record to be used",
            "key": "mediation_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                }
              }
            }
          },
          {
            "description": "Optional metadata to attach to the connection created with the invitation",
            "key": "metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "InvitationCreateRequestMetadata"
              }
            }
          },
          {
            "description": "Label for connection invitation",
            "key": "my_label",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OOB protocol version",
            "key": "protocol_version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Whether to use public DID in invitation",
            "key": "use_public_did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "InvitationMessageServicesItems": {
      "description": "Either a DIDComm service object (as per RFC0067) or a DID string.",
      "name": "InvitationMessageServicesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "InvitationMessage": {
      "name": "InvitationMessage",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of mime type in order of preference",
            "key": "accept",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "handshake_protocols",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Optional image URL for out-of-band invitation",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "url"
                  }
                }
              }
            }
          },
          {
            "description": "Optional label",
            "key": "label",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Optional request attachment",
            "key": "requests~attach",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "AttachDecorator"
                }
              }
            }
          },
          {
            "key": "services",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "InvitationMessageServicesItems"
                }
              }
            }
          }
        ]
      }
    },
    "InvitationRecord": {
      "name": "InvitationRecord",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Time of record creation",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "description": "Invitation message identifier",
            "key": "invi_msg_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "invitation",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "InvitationRecord_invitation"
              }
            }
          },
          {
            "description": "Invitation record identifier",
            "key": "invitation_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Invitation message URL",
            "key": "invitation_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Out of band record identifier",
            "key": "oob_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Out of band message exchange state",
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Record trace information, based on agent configuration",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Time of last record update",
            "key": "updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          }
        ]
      }
    },
    "InvitationResult": {
      "name": "InvitationResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Connection identifier",
            "key": "connection_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "invitation",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConnectionInvitation"
              }
            }
          },
          {
            "description": "Invitation URL",
            "key": "invitation_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "IssueCredentialModuleResponse": {
      "name": "IssueCredentialModuleResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "IssuerCredRevRecord": {
      "name": "IssuerCredRevRecord",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Time of record creation",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "description": "Credential definition identifier",
            "key": "cred_def_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                }
              }
            }
          },
          {
            "description": "Credential exchange record identifier at credential issue",
            "key": "cred_ex_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Credential exchange version",
            "key": "cred_ex_version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Credential revocation identifier",
            "key": "cred_rev_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[1-9][0-9]*$"
                }
              }
            }
          },
          {
            "description": "Issuer credential revocation record identifier",
            "key": "record_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Revocation registry identifier",
            "key": "rev_reg_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                }
              }
            }
          },
          {
            "description": "Issue credential revocation record state",
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Time of last record update",
            "key": "updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          }
        ]
      }
    },
    "IssuerRevRegRecordRevocDefType": {
      "description": "Revocation registry type (specify CL_ACCUM)",
      "name": "IssuerRevRegRecordRevocDefType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "CL_ACCUM"
          }
        ]
      }
    },
    "IssuerRevRegRecord": {
      "name": "IssuerRevRegRecord",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Time of record creation",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "description": "Credential definition identifier",
            "key": "cred_def_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                }
              }
            }
          },
          {
            "description": "Error message",
            "key": "error_msg",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Issuer DID",
            "key": "issuer_did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            }
          },
          {
            "description": "Maximum number of credentials for revocation registry",
            "key": "max_cred_num",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Credential revocation identifier for credential revoked and pending publication to ledger",
            "key": "pending_pub",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Issuer revocation registry record identifier",
            "key": "record_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Revocation registry type (specify CL_ACCUM)",
            "key": "revoc_def_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IssuerRevRegRecordRevocDefType"
              }
            }
          },
          {
            "key": "revoc_reg_def",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IssuerRevRegRecord_revoc_reg_def"
              }
            }
          },
          {
            "key": "revoc_reg_entry",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IssuerRevRegRecord_revoc_reg_entry"
              }
            }
          },
          {
            "description": "Revocation registry identifier",
            "key": "revoc_reg_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                }
              }
            }
          },
          {
            "description": "Issue revocation registry record state",
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Tag within issuer revocation registry identifier",
            "key": "tag",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Tails hash",
            "key": "tails_hash",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
                }
              }
            }
          },
          {
            "description": "Local path to tails file",
            "key": "tails_local_path",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Public URI for tails file",
            "key": "tails_public_uri",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Time of last record update",
            "key": "updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          }
        ]
      }
    },
    "Keylist": {
      "name": "Keylist",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of keylist records",
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "RouteRecord"
                }
              }
            }
          }
        ]
      }
    },
    "KeylistQueryFilter": {
      "description": "Query dictionary object",
      "name": "KeylistQueryFilter",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "KeylistQuery": {
      "name": "KeylistQuery",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Query dictionary object",
            "key": "filter",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "KeylistQueryFilter"
              }
            }
          },
          {
            "key": "paginate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "KeylistQuery_paginate"
              }
            }
          }
        ]
      }
    },
    "KeylistQueryFilterRequestFilter": {
      "description": "Filter for keylist query",
      "name": "KeylistQueryFilterRequestFilter",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "KeylistQueryFilterRequest": {
      "name": "KeylistQueryFilterRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Filter for keylist query",
            "key": "filter",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "KeylistQueryFilterRequestFilter"
              }
            }
          }
        ]
      }
    },
    "KeylistQueryPaginate": {
      "name": "KeylistQueryPaginate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Limit for keylist query",
            "key": "limit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Offset value for query",
            "key": "offset",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "KeylistUpdate": {
      "name": "KeylistUpdate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of update rules",
            "key": "updates",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "KeylistUpdateRule"
                }
              }
            }
          }
        ]
      }
    },
    "KeylistUpdateRequest": {
      "name": "KeylistUpdateRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "updates",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "KeylistUpdateRule"
                }
              }
            }
          }
        ]
      }
    },
    "KeylistUpdateRuleAction": {
      "description": "Action for specific key",
      "name": "KeylistUpdateRuleAction",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "add"
          },
          {
            "value": "remove"
          }
        ]
      }
    },
    "KeylistUpdateRule": {
      "name": "KeylistUpdateRule",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Action for specific key",
            "key": "action",
            "valueType": {
              "type": "id",
              "value": "KeylistUpdateRuleAction"
            }
          },
          {
            "description": "Key to remove or add",
            "key": "recipient_key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^did:key:z[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$|^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
              }
            }
          }
        ]
      }
    },
    "LDProofVCDetail": {
      "name": "LDProofVCDetail",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "credential",
            "valueType": {
              "type": "id",
              "value": "LDProofVCDetail_credential"
            }
          },
          {
            "key": "options",
            "valueType": {
              "type": "id",
              "value": "LDProofVCDetail_options"
            }
          }
        ]
      }
    },
    "LDProofVCDetailOptions": {
      "name": "LDProofVCDetailOptions",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A challenge to include in the proof. SHOULD be provided by the requesting party of the credential (=holder)",
            "key": "challenge",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The date and time of the proof (with a maximum accuracy in seconds). Defaults to current system time",
            "key": "created",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "key": "credentialStatus",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "LDProofVCDetailOptions_credentialStatus"
              }
            }
          },
          {
            "description": "The intended domain of validity for the proof",
            "key": "domain",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The proof purpose used for the proof. Should match proof purposes registered in the Linked Data Proofs Specification",
            "key": "proofPurpose",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The proof type used for the proof. Should match suites registered in the Linked Data Cryptographic Suite Registry",
            "key": "proofType",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "LedgerConfigInstance": {
      "name": "LedgerConfigInstance",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "genesis_file",
            "key": "genesis_file",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "genesis_transactions",
            "key": "genesis_transactions",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "genesis_url",
            "key": "genesis_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "ledger_id",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "is_production",
            "key": "is_production",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "LedgerConfigList": {
      "name": "LedgerConfigList",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "ledger_config_list",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "LedgerConfigInstance"
              }
            }
          }
        ]
      }
    },
    "LedgerModulesResult": {
      "name": "LedgerModulesResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "LinkedDataProof": {
      "name": "LinkedDataProof",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Associates a challenge with a proof, for use with a proofPurpose such as authentication",
            "key": "challenge",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The string value of an ISO8601 combined date and time string generated by the Signature Algorithm",
            "key": "created",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
              }
            }
          },
          {
            "description": "A string value specifying the restricted domain of the signature.",
            "key": "domain",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "\\w+:(\\/?\\/?)[^\\s]+"
                }
              }
            }
          },
          {
            "description": "Associates a Detached Json Web Signature with a proof",
            "key": "jws",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The nonce",
            "key": "nonce",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Proof purpose",
            "key": "proofPurpose",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The proof value of a proof",
            "key": "proofValue",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Identifies the digital signature suite that was used to create the signature",
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Information used for proof verification",
            "key": "verificationMethod",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "\\w+:(\\/?\\/?)[^\\s]+"
              }
            }
          }
        ]
      }
    },
    "MediationCreateRequest": {
      "name": "MediationCreateRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of mediator rules for recipient",
            "key": "mediator_terms",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "List of recipient rules for mediation",
            "key": "recipient_terms",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "MediationDeny": {
      "name": "MediationDeny",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "mediator_terms",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "recipient_terms",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "MediationGrant": {
      "name": "MediationGrant",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "endpoint on which messages destined for the recipient are received.",
            "key": "endpoint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "routing_keys",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "MediationIdMatchInfo": {
      "name": "MediationIdMatchInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Mediation record identifier",
            "key": "mediation_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ]
      }
    },
    "MediationList": {
      "name": "MediationList",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of mediation records",
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "MediationRecord"
                }
              }
            }
          }
        ]
      }
    },
    "MediationRecord": {
      "name": "MediationRecord",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "connection_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Time of record creation",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "key": "endpoint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "mediation_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "mediator_terms",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "recipient_terms",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "role",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "routing_keys",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^did:key:z[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$"
                  }
                }
              }
            }
          },
          {
            "description": "Current record state",
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Time of last record update",
            "key": "updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          }
        ]
      }
    },
    "Menu": {
      "name": "Menu",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Introductory text for the menu",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "An optional error message to display in menu header",
            "key": "errormsg",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of menu options",
            "key": "options",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "MenuOption"
              }
            }
          },
          {
            "description": "Menu title",
            "key": "title",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "MenuForm": {
      "name": "MenuForm",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Additional descriptive text for menu form",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of form parameters",
            "key": "params",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "MenuFormParam"
                }
              }
            }
          },
          {
            "description": "Alternative label for form submit button",
            "key": "submit-label",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Menu form title",
            "key": "title",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "MenuFormParam": {
      "name": "MenuFormParam",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Default parameter value",
            "key": "default",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Additional descriptive text for menu form parameter",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Menu parameter name",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Whether parameter is required",
            "key": "required",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Menu parameter title",
            "key": "title",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Menu form parameter input type",
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "MenuJson": {
      "name": "MenuJson",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Introductory text for the menu",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Optional error message to display in menu header",
            "key": "errormsg",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of menu options",
            "key": "options",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "MenuOption"
              }
            }
          },
          {
            "description": "Menu title",
            "key": "title",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "MenuOption": {
      "name": "MenuOption",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Additional descriptive text for menu option",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Whether to show option as disabled",
            "key": "disabled",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "form",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "MenuForm"
              }
            }
          },
          {
            "description": "Menu option name (unique identifier)",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Menu option title",
            "key": "title",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "MultitenantModuleResponse": {
      "name": "MultitenantModuleResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "OobRecordRole": {
      "description": "OOB Role",
      "name": "OobRecordRole",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "sender"
          },
          {
            "value": "receiver"
          }
        ]
      }
    },
    "OobRecordState": {
      "description": "Out of band message exchange state",
      "name": "OobRecordState",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "initial"
          },
          {
            "value": "prepare-response"
          },
          {
            "value": "await-response"
          },
          {
            "value": "reuse-not-accepted"
          },
          {
            "value": "reuse-accepted"
          },
          {
            "value": "done"
          },
          {
            "value": "deleted"
          }
        ]
      }
    },
    "OobRecord": {
      "name": "OobRecord",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Connection record identifier",
            "key": "attach_thread_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Connection record identifier",
            "key": "connection_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Time of record creation",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "description": "Invitation message identifier",
            "key": "invi_msg_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "invitation",
            "valueType": {
              "type": "id",
              "value": "InvitationRecord_invitation"
            }
          },
          {
            "description": "Oob record identifier",
            "key": "oob_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Recipient key used for oob invitation",
            "key": "our_recipient_key",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "OOB Role",
            "key": "role",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OobRecordRole"
              }
            }
          },
          {
            "description": "Out of band message exchange state",
            "key": "state",
            "valueType": {
              "type": "id",
              "value": "OobRecordState"
            }
          },
          {
            "key": "their_service",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ServiceDecorator"
              }
            }
          },
          {
            "description": "Record trace information, based on agent configuration",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Time of last record update",
            "key": "updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          }
        ]
      }
    },
    "PerformRequest": {
      "name": "PerformRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Menu option name",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Input parameter values",
            "key": "params",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "PingRequest": {
      "name": "PingRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Comment for the ping message",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "PingRequestResponse": {
      "name": "PingRequestResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Thread ID of the ping message",
            "key": "thread_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "PresentationDefinition": {
      "name": "PresentationDefinition",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ClaimFormat"
              }
            }
          },
          {
            "description": "Unique Resource Identifier",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                }
              }
            }
          },
          {
            "key": "input_descriptors",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "InputDescriptors"
                }
              }
            }
          },
          {
            "description": "Human-friendly name that describes what the presentation definition pertains to",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Describes the purpose for which the Presentation Definition's inputs are being requested",
            "key": "purpose",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "submission_requirements",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "SubmissionRequirements"
                }
              }
            }
          }
        ]
      }
    },
    "PresentationProposal": {
      "name": "PresentationProposal",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "presentation_proposal",
            "valueType": {
              "type": "id",
              "value": "IndyPresPreview"
            }
          }
        ]
      }
    },
    "PresentationRequest": {
      "name": "PresentationRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "request_presentations~attach",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "AttachDecorator"
              }
            }
          }
        ]
      }
    },
    "ProtocolDescriptor": {
      "name": "ProtocolDescriptor",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "pid",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "List of roles",
            "key": "roles",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "PublishRevocations": {
      "name": "PublishRevocations",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Credential revocation ids by revocation registry id",
            "key": "rrid2crid",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "regex": "^[1-9][0-9]*$"
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "Queries": {
      "name": "Queries",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "queries",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "QueryItem"
                }
              }
            }
          }
        ]
      }
    },
    "Query": {
      "name": "Query",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "query",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "QueryItemFeatureType": {
      "description": "feature type",
      "name": "QueryItemFeatureType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "protocol"
          },
          {
            "value": "goal-code"
          }
        ]
      }
    },
    "QueryItem": {
      "name": "QueryItem",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "feature type",
            "key": "feature-type",
            "valueType": {
              "type": "id",
              "value": "QueryItemFeatureType"
            }
          },
          {
            "description": "match",
            "key": "match",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "RawEncoded": {
      "name": "RawEncoded",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Encoded value",
            "key": "encoded",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^-?[0-9]*$"
                }
              }
            }
          },
          {
            "description": "Raw value",
            "key": "raw",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ReceiveInvitationRequest": {
      "name": "ReceiveInvitationRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "DID for connection invitation",
            "key": "did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            }
          },
          {
            "description": "Optional image URL for connection invitation",
            "key": "imageUrl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "url"
                  }
                }
              }
            }
          },
          {
            "description": "Optional label for connection invitation",
            "key": "label",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of recipient keys",
            "key": "recipientKeys",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
                  }
                }
              }
            }
          },
          {
            "description": "List of routing keys",
            "key": "routingKeys",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
                  }
                }
              }
            }
          },
          {
            "description": "Service endpoint at which to reach this agent",
            "key": "serviceEndpoint",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "RemoveWalletRequest": {
      "name": "RemoveWalletRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Master key used for key derivation. Only required for             unmanaged wallets.",
            "key": "wallet_key",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ResolutionResultDidDocument": {
      "description": "DID Document",
      "name": "ResolutionResultDidDocument",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ResolutionResultMetadata": {
      "description": "Resolution metadata",
      "name": "ResolutionResultMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ResolutionResult": {
      "name": "ResolutionResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "DID Document",
            "key": "did_document",
            "valueType": {
              "type": "id",
              "value": "ResolutionResultDidDocument"
            }
          },
          {
            "description": "Resolution metadata",
            "key": "metadata",
            "valueType": {
              "type": "id",
              "value": "ResolutionResultMetadata"
            }
          }
        ]
      }
    },
    "RevRegCreateRequest": {
      "name": "RevRegCreateRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Credential definition identifier",
            "key": "credential_definition_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                }
              }
            }
          },
          {
            "description": "Revocation registry size",
            "key": "max_cred_num",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 4,
                  "maximum": 32768
                }
              }
            }
          }
        ]
      }
    },
    "RevRegIssuedResult": {
      "name": "RevRegIssuedResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Number of credentials issued against revocation registry",
            "key": "result",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          }
        ]
      }
    },
    "RevRegResult": {
      "name": "RevRegResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "result",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "IssuerRevRegRecord"
              }
            }
          }
        ]
      }
    },
    "RevRegUpdateTailsFileUri": {
      "name": "RevRegUpdateTailsFileUri",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Public URI to the tails file",
            "key": "tails_public_uri",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "url"
              }
            }
          }
        ]
      }
    },
    "RevRegWalletUpdatedResultAccumCalculated": {
      "description": "Calculated accumulator for phantom revocations",
      "name": "RevRegWalletUpdatedResultAccumCalculated",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "RevRegWalletUpdatedResultAccumFixed": {
      "description": "Applied ledger transaction to fix revocations",
      "name": "RevRegWalletUpdatedResultAccumFixed",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "RevRegWalletUpdatedResultRevRegDelta": {
      "description": "Indy revocation registry delta",
      "name": "RevRegWalletUpdatedResultRevRegDelta",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "RevRegWalletUpdatedResult": {
      "name": "RevRegWalletUpdatedResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Calculated accumulator for phantom revocations",
            "key": "accum_calculated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RevRegWalletUpdatedResultAccumCalculated"
              }
            }
          },
          {
            "description": "Applied ledger transaction to fix revocations",
            "key": "accum_fixed",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RevRegWalletUpdatedResultAccumFixed"
              }
            }
          },
          {
            "description": "Indy revocation registry delta",
            "key": "rev_reg_delta",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RevRegWalletUpdatedResultRevRegDelta"
              }
            }
          }
        ]
      }
    },
    "RevRegsCreated": {
      "name": "RevRegsCreated",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "rev_reg_ids",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "RevocationModuleResponse": {
      "name": "RevocationModuleResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "RevokeRequestNotifyVersion": {
      "description": "Specify which version of the revocation notification should be sent",
      "name": "RevokeRequestNotifyVersion",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "v1_0"
          },
          {
            "value": "v2_0"
          }
        ]
      }
    },
    "RevokeRequest": {
      "name": "RevokeRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Optional comment to include in revocation notification",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Connection ID to which the revocation notification will be sent; required if notify is true",
            "key": "connection_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                }
              }
            }
          },
          {
            "description": "Credential exchange identifier",
            "key": "cred_ex_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                }
              }
            }
          },
          {
            "description": "Credential revocation identifier",
            "key": "cred_rev_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[1-9][0-9]*$"
                }
              }
            }
          },
          {
            "description": "Send a notification to the credential recipient",
            "key": "notify",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Specify which version of the revocation notification should be sent",
            "key": "notify_version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RevokeRequestNotifyVersion"
              }
            }
          },
          {
            "description": "(True) publish revocation to ledger immediately, or (default, False) mark it pending",
            "key": "publish",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Revocation registry identifier",
            "key": "rev_reg_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                }
              }
            }
          },
          {
            "description": "Thread ID of the credential exchange message thread resulting in the credential now being revoked; required if notify is true",
            "key": "thread_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "RouteRecord": {
      "name": "RouteRecord",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "connection_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Time of record creation",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "key": "recipient_key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "record_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "role",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Current record state",
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Time of last record update",
            "key": "updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "key": "wallet_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "Schema": {
      "name": "Schema",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Schema attribute names",
            "key": "attrNames",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Schema identifier",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
                }
              }
            }
          },
          {
            "description": "Schema name",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Schema sequence number",
            "key": "seqNo",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 1
                }
              }
            }
          },
          {
            "description": "Node protocol version",
            "key": "ver",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9.]+$"
                }
              }
            }
          },
          {
            "description": "Schema version",
            "key": "version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9.]+$"
                }
              }
            }
          }
        ]
      }
    },
    "SchemaGetResult": {
      "name": "SchemaGetResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "schema",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "Schema"
              }
            }
          }
        ]
      }
    },
    "SchemaInputDescriptor": {
      "name": "SchemaInputDescriptor",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Required",
            "key": "required",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "URI",
            "key": "uri",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "SchemaSendRequest": {
      "name": "SchemaSendRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of schema attributes",
            "key": "attributes",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Schema name",
            "key": "schema_name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Schema version",
            "key": "schema_version",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[0-9.]+$"
              }
            }
          }
        ]
      }
    },
    "SchemaSendResult": {
      "name": "SchemaSendResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "schema",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SchemaSendResult_schema"
              }
            }
          },
          {
            "description": "Schema identifier",
            "key": "schema_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
              }
            }
          }
        ]
      }
    },
    "SchemasCreatedResult": {
      "name": "SchemasCreatedResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "schema_ids",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "SchemasInputDescriptorFilter": {
      "name": "SchemasInputDescriptorFilter",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "oneOf",
            "key": "oneof_filter",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "uri_groups",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "SchemaInputDescriptor"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "SendMenu": {
      "name": "SendMenu",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "menu",
            "valueType": {
              "type": "id",
              "value": "SendMenu_menu"
            }
          }
        ]
      }
    },
    "SendMessage": {
      "name": "SendMessage",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message content",
            "key": "content",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ServiceDecorator": {
      "name": "ServiceDecorator",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of recipient keys",
            "key": "recipientKeys",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
                }
              }
            }
          },
          {
            "description": "List of routing keys",
            "key": "routingKeys",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
                  }
                }
              }
            }
          },
          {
            "description": "Service endpoint at which to reach this agent",
            "key": "serviceEndpoint",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "SignRequest": {
      "name": "SignRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "doc",
            "valueType": {
              "type": "id",
              "value": "Doc"
            }
          },
          {
            "description": "Verkey to use for signing",
            "key": "verkey",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "SignResponseSignedDoc": {
      "description": "Signed document",
      "name": "SignResponseSignedDoc",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "SignResponse": {
      "name": "SignResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Error text",
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Signed document",
            "key": "signed_doc",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SignResponseSignedDoc"
              }
            }
          }
        ]
      }
    },
    "SignatureOptions": {
      "name": "SignatureOptions",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "challenge",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "domain",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "proofPurpose",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "verificationMethod",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "SignedDoc": {
      "name": "SignedDoc",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "proof",
            "valueType": {
              "type": "id",
              "value": "SignedDoc_proof"
            }
          }
        ]
      }
    },
    "SubmissionRequirementsRule": {
      "description": "Selection",
      "name": "SubmissionRequirementsRule",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "all"
          },
          {
            "value": "pick"
          }
        ]
      }
    },
    "SubmissionRequirements": {
      "name": "SubmissionRequirements",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Count Value",
            "key": "count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "From",
            "key": "from",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "from_nested",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "SubmissionRequirements"
                }
              }
            }
          },
          {
            "description": "Max Value",
            "key": "max",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Min Value",
            "key": "min",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Name",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Purpose",
            "key": "purpose",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Selection",
            "key": "rule",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "SubmissionRequirementsRule"
              }
            }
          }
        ]
      }
    },
    "TAAAccept": {
      "name": "TAAAccept",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "mechanism",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "text",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "TAAAcceptance": {
      "name": "TAAAcceptance",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "mechanism",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "time",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 18446744073709552000
                }
              }
            }
          }
        ]
      }
    },
    "TAAInfo": {
      "name": "TAAInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "aml_record",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "AMLRecord"
              }
            }
          },
          {
            "key": "taa_accepted",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TAAAcceptance"
              }
            }
          },
          {
            "key": "taa_record",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TAARecord"
              }
            }
          },
          {
            "key": "taa_required",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "TAARecord": {
      "name": "TAARecord",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "digest",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "text",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "TAAResult": {
      "name": "TAAResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "result",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TAAInfo"
              }
            }
          }
        ]
      }
    },
    "TailsDeleteResponse": {
      "name": "TailsDeleteResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "message",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "TransactionJobsTransactionMyJob": {
      "description": "My transaction related job",
      "name": "TransactionJobsTransactionMyJob",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "TRANSACTION_AUTHOR"
          },
          {
            "value": "TRANSACTION_ENDORSER"
          },
          {
            "value": "reset"
          }
        ]
      }
    },
    "TransactionJobsTransactionTheirJob": {
      "description": "Their transaction related job",
      "name": "TransactionJobsTransactionTheirJob",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "TRANSACTION_AUTHOR"
          },
          {
            "value": "TRANSACTION_ENDORSER"
          },
          {
            "value": "reset"
          }
        ]
      }
    },
    "TransactionJobs": {
      "name": "TransactionJobs",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "My transaction related job",
            "key": "transaction_my_job",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TransactionJobsTransactionMyJob"
              }
            }
          },
          {
            "description": "Their transaction related job",
            "key": "transaction_their_job",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TransactionJobsTransactionTheirJob"
              }
            }
          }
        ]
      }
    },
    "TransactionList": {
      "name": "TransactionList",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of transaction records",
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "TransactionRecord"
                }
              }
            }
          }
        ]
      }
    },
    "TransactionRecordMessagesAttachItems": {
      "name": "TransactionRecordMessagesAttachItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "TransactionRecordMetaData": {
      "name": "TransactionRecordMetaData",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "TransactionRecordSignatureRequestItems": {
      "name": "TransactionRecordSignatureRequestItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "TransactionRecordSignatureResponseItems": {
      "name": "TransactionRecordSignatureResponseItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "TransactionRecordTiming": {
      "name": "TransactionRecordTiming",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "TransactionRecord": {
      "name": "TransactionRecord",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Transaction type",
            "key": "_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The connection identifier for thie particular transaction record",
            "key": "connection_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Time of record creation",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "description": "If True, Endorser will write the transaction after endorsing it",
            "key": "endorser_write_txn",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "formats",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "map",
                  "keyType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "key": "messages_attach",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "TransactionRecordMessagesAttachItems"
                }
              }
            }
          },
          {
            "key": "meta_data",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TransactionRecordMetaData"
              }
            }
          },
          {
            "key": "signature_request",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "TransactionRecordSignatureRequestItems"
                }
              }
            }
          },
          {
            "key": "signature_response",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "TransactionRecordSignatureResponseItems"
                }
              }
            }
          },
          {
            "description": "Current record state",
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Thread Identifier",
            "key": "thread_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "timing",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TransactionRecordTiming"
              }
            }
          },
          {
            "description": "Record trace information, based on agent configuration",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Transaction identifier",
            "key": "transaction_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Time of last record update",
            "key": "updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          }
        ]
      }
    },
    "TxnOrCredentialDefinitionSendResult": {
      "name": "TxnOrCredentialDefinitionSendResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "sent",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "CredentialDefinitionSendResult"
              }
            }
          },
          {
            "key": "txn",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TxnOrCredentialDefinitionSendResult_txn"
              }
            }
          }
        ]
      }
    },
    "TxnOrPublishRevocationsResult": {
      "name": "TxnOrPublishRevocationsResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "sent",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "PublishRevocations"
              }
            }
          },
          {
            "key": "txn",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TxnOrPublishRevocationsResult_txn"
              }
            }
          }
        ]
      }
    },
    "TxnOrRegisterLedgerNymResponse": {
      "name": "TxnOrRegisterLedgerNymResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Success of nym registration operation",
            "key": "success",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "txn",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TxnOrRegisterLedgerNymResponse_txn"
              }
            }
          }
        ]
      }
    },
    "TxnOrRevRegResult": {
      "name": "TxnOrRevRegResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "sent",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RevRegResult"
              }
            }
          },
          {
            "key": "txn",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TxnOrRevRegResult_txn"
              }
            }
          }
        ]
      }
    },
    "TxnOrSchemaSendResult": {
      "name": "TxnOrSchemaSendResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "sent",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TxnOrSchemaSendResult_sent"
              }
            }
          },
          {
            "key": "txn",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TxnOrSchemaSendResult_txn"
              }
            }
          }
        ]
      }
    },
    "UpdateWalletRequestWalletDispatchType": {
      "description": "Webhook target dispatch type for this wallet.             default - Dispatch only to webhooks associated with this wallet.             base - Dispatch only to webhooks associated with the base wallet.             both - Dispatch to both webhook targets.",
      "name": "UpdateWalletRequestWalletDispatchType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "default"
          },
          {
            "value": "both"
          },
          {
            "value": "base"
          }
        ]
      }
    },
    "UpdateWalletRequest": {
      "name": "UpdateWalletRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Image url for this wallet. This image url is publicized            (self-attested) to other agents as part of forming a connection.",
            "key": "image_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Label for this wallet. This label is publicized            (self-attested) to other agents as part of forming a connection.",
            "key": "label",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Webhook target dispatch type for this wallet.             default - Dispatch only to webhooks associated with this wallet.             base - Dispatch only to webhooks associated with the base wallet.             both - Dispatch to both webhook targets.",
            "key": "wallet_dispatch_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "UpdateWalletRequestWalletDispatchType"
              }
            }
          },
          {
            "description": "List of Webhook URLs associated with this subwallet",
            "key": "wallet_webhook_urls",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "V10CredentialBoundOfferRequest": {
      "name": "V10CredentialBoundOfferRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "counter_proposal",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V10CredentialBoundOfferRequest_counter_proposal"
              }
            }
          }
        ]
      }
    },
    "V10CredentialConnFreeOfferRequest": {
      "name": "V10CredentialConnFreeOfferRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Whether to respond automatically to credential requests, creating and issuing requested credentials",
            "key": "auto_issue",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
            "key": "auto_remove",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Credential definition identifier",
            "key": "cred_def_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
              }
            }
          },
          {
            "key": "credential_preview",
            "valueType": {
              "type": "id",
              "value": "CredentialPreview"
            }
          },
          {
            "description": "Record trace information, based on agent configuration",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V10CredentialCreate": {
      "name": "V10CredentialCreate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
            "key": "auto_remove",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Credential definition identifier",
            "key": "cred_def_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                }
              }
            }
          },
          {
            "key": "credential_proposal",
            "valueType": {
              "type": "id",
              "value": "CredentialPreview"
            }
          },
          {
            "description": "Credential issuer DID",
            "key": "issuer_did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            }
          },
          {
            "description": "Schema identifier",
            "key": "schema_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
                }
              }
            }
          },
          {
            "description": "Schema issuer DID",
            "key": "schema_issuer_did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            }
          },
          {
            "description": "Schema name",
            "key": "schema_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Schema version",
            "key": "schema_version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9.]+$"
                }
              }
            }
          },
          {
            "description": "Record trace information, based on agent configuration",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V10CredentialExchangeCredentialRequestMetadata": {
      "description": "(Indy) credential request metadata",
      "name": "V10CredentialExchangeCredentialRequestMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "V10CredentialExchangeInitiator": {
      "description": "Issue-credential exchange initiator: self or external",
      "name": "V10CredentialExchangeInitiator",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "self"
          },
          {
            "value": "external"
          }
        ]
      }
    },
    "V10CredentialExchangeRole": {
      "description": "Issue-credential exchange role: holder or issuer",
      "name": "V10CredentialExchangeRole",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "holder"
          },
          {
            "value": "issuer"
          }
        ]
      }
    },
    "V10CredentialExchange": {
      "name": "V10CredentialExchange",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Issuer choice to issue to request in this credential exchange",
            "key": "auto_issue",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Holder choice to accept offer in this credential exchange",
            "key": "auto_offer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Issuer choice to remove this credential exchange record when complete",
            "key": "auto_remove",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Connection identifier",
            "key": "connection_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Time of record creation",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "key": "credential",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V10CredentialExchange_credential"
              }
            }
          },
          {
            "description": "Credential definition identifier",
            "key": "credential_definition_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                }
              }
            }
          },
          {
            "description": "Credential exchange identifier",
            "key": "credential_exchange_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Credential identifier",
            "key": "credential_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "credential_offer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V10CredentialExchange_credential_offer"
              }
            }
          },
          {
            "key": "credential_offer_dict",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V10CredentialExchange_credential_offer_dict"
              }
            }
          },
          {
            "key": "credential_proposal_dict",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V10CredentialExchange_credential_proposal_dict"
              }
            }
          },
          {
            "key": "credential_request",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V10CredentialExchange_credential_request"
              }
            }
          },
          {
            "description": "(Indy) credential request metadata",
            "key": "credential_request_metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V10CredentialExchangeCredentialRequestMetadata"
              }
            }
          },
          {
            "description": "Error message",
            "key": "error_msg",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Issue-credential exchange initiator: self or external",
            "key": "initiator",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V10CredentialExchangeInitiator"
              }
            }
          },
          {
            "description": "Parent thread identifier",
            "key": "parent_thread_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "raw_credential",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V10CredentialExchange_raw_credential"
              }
            }
          },
          {
            "description": "Revocation registry identifier",
            "key": "revoc_reg_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Credential identifier within revocation registry",
            "key": "revocation_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Issue-credential exchange role: holder or issuer",
            "key": "role",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V10CredentialExchangeRole"
              }
            }
          },
          {
            "description": "Schema identifier",
            "key": "schema_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
                }
              }
            }
          },
          {
            "description": "Issue-credential exchange state",
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Thread identifier",
            "key": "thread_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Record trace information, based on agent configuration",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Time of last record update",
            "key": "updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          }
        ]
      }
    },
    "V10CredentialExchangeListResult": {
      "name": "V10CredentialExchangeListResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Aries#0036 v1.0 credential exchange records",
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V10CredentialExchange"
                }
              }
            }
          }
        ]
      }
    },
    "V10CredentialFreeOfferRequest": {
      "name": "V10CredentialFreeOfferRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Whether to respond automatically to credential requests, creating and issuing requested credentials",
            "key": "auto_issue",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
            "key": "auto_remove",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Connection identifier",
            "key": "connection_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Credential definition identifier",
            "key": "cred_def_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
              }
            }
          },
          {
            "key": "credential_preview",
            "valueType": {
              "type": "id",
              "value": "CredentialPreview"
            }
          },
          {
            "description": "Record trace information, based on agent configuration",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V10CredentialIssueRequest": {
      "name": "V10CredentialIssueRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "V10CredentialProblemReportRequest": {
      "name": "V10CredentialProblemReportRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "description",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "V10CredentialProposalRequestMand": {
      "name": "V10CredentialProposalRequestMand",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
            "key": "auto_remove",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Connection identifier",
            "key": "connection_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Credential definition identifier",
            "key": "cred_def_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                }
              }
            }
          },
          {
            "key": "credential_proposal",
            "valueType": {
              "type": "id",
              "value": "CredentialPreview"
            }
          },
          {
            "description": "Credential issuer DID",
            "key": "issuer_did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            }
          },
          {
            "description": "Schema identifier",
            "key": "schema_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
                }
              }
            }
          },
          {
            "description": "Schema issuer DID",
            "key": "schema_issuer_did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            }
          },
          {
            "description": "Schema name",
            "key": "schema_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Schema version",
            "key": "schema_version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9.]+$"
                }
              }
            }
          },
          {
            "description": "Record trace information, based on agent configuration",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V10CredentialProposalRequestOpt": {
      "name": "V10CredentialProposalRequestOpt",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
            "key": "auto_remove",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Connection identifier",
            "key": "connection_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Credential definition identifier",
            "key": "cred_def_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                }
              }
            }
          },
          {
            "key": "credential_proposal",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "CredentialPreview"
              }
            }
          },
          {
            "description": "Credential issuer DID",
            "key": "issuer_did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            }
          },
          {
            "description": "Schema identifier",
            "key": "schema_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
                }
              }
            }
          },
          {
            "description": "Schema issuer DID",
            "key": "schema_issuer_did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            }
          },
          {
            "description": "Schema name",
            "key": "schema_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Schema version",
            "key": "schema_version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9.]+$"
                }
              }
            }
          },
          {
            "description": "Record trace information, based on agent configuration",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V10CredentialStoreRequest": {
      "name": "V10CredentialStoreRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "credential_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V10DiscoveryExchangeListResult": {
      "name": "V10DiscoveryExchangeListResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V10DiscoveryExchangeListResult_results_inner"
                }
              }
            }
          }
        ]
      }
    },
    "V10DiscoveryRecord": {
      "name": "V10DiscoveryRecord",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Connection identifier",
            "key": "connection_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Time of record creation",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "key": "disclose",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V10DiscoveryRecord_disclose"
              }
            }
          },
          {
            "description": "Credential exchange identifier",
            "key": "discovery_exchange_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "query_msg",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V10DiscoveryRecord_query_msg"
              }
            }
          },
          {
            "description": "Current record state",
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Thread identifier",
            "key": "thread_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Record trace information, based on agent configuration",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Time of last record update",
            "key": "updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          }
        ]
      }
    },
    "V10PresentProofModuleResponse": {
      "name": "V10PresentProofModuleResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "V10PresentationCreateRequestRequest": {
      "name": "V10PresentationCreateRequestRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Verifier choice to auto-verify proof presentation",
            "key": "auto_verify",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "proof_request",
            "valueType": {
              "type": "id",
              "value": "IndyProofRequest"
            }
          },
          {
            "description": "Whether to trace event (default false)",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V10PresentationExchangeInitiator": {
      "description": "Present-proof exchange initiator: self or external",
      "name": "V10PresentationExchangeInitiator",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "self"
          },
          {
            "value": "external"
          }
        ]
      }
    },
    "V10PresentationExchangeRole": {
      "description": "Present-proof exchange role: prover or verifier",
      "name": "V10PresentationExchangeRole",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "prover"
          },
          {
            "value": "verifier"
          }
        ]
      }
    },
    "V10PresentationExchangeVerified": {
      "description": "Whether presentation is verified: true or false",
      "name": "V10PresentationExchangeVerified",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "true"
          },
          {
            "value": "false"
          }
        ]
      }
    },
    "V10PresentationExchange": {
      "name": "V10PresentationExchange",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Prover choice to auto-present proof as verifier requests",
            "key": "auto_present",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Verifier choice to auto-verify proof presentation",
            "key": "auto_verify",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Connection identifier",
            "key": "connection_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Time of record creation",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "description": "Error message",
            "key": "error_msg",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Present-proof exchange initiator: self or external",
            "key": "initiator",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V10PresentationExchangeInitiator"
              }
            }
          },
          {
            "key": "presentation",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V10PresentationExchange_presentation"
              }
            }
          },
          {
            "description": "Presentation exchange identifier",
            "key": "presentation_exchange_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "presentation_proposal_dict",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V10PresentationExchange_presentation_proposal_dict"
              }
            }
          },
          {
            "key": "presentation_request",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V10PresentationExchange_presentation_request"
              }
            }
          },
          {
            "key": "presentation_request_dict",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V10PresentationExchange_presentation_request_dict"
              }
            }
          },
          {
            "description": "Present-proof exchange role: prover or verifier",
            "key": "role",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V10PresentationExchangeRole"
              }
            }
          },
          {
            "description": "Present-proof exchange state",
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Thread identifier",
            "key": "thread_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Record trace information, based on agent configuration",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Time of last record update",
            "key": "updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "description": "Whether presentation is verified: true or false",
            "key": "verified",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V10PresentationExchangeVerified"
              }
            }
          },
          {
            "key": "verified_msgs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "V10PresentationExchangeList": {
      "name": "V10PresentationExchangeList",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Aries RFC 37 v1.0 presentation exchange records",
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V10PresentationExchange"
                }
              }
            }
          }
        ]
      }
    },
    "V10PresentationProblemReportRequest": {
      "name": "V10PresentationProblemReportRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "description",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "V10PresentationProposalRequest": {
      "name": "V10PresentationProposalRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Whether to respond automatically to presentation requests, building and presenting requested proof",
            "key": "auto_present",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Connection identifier",
            "key": "connection_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "presentation_proposal",
            "valueType": {
              "type": "id",
              "value": "IndyPresPreview"
            }
          },
          {
            "description": "Whether to trace event (default false)",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V10PresentationSendRequestRequest": {
      "name": "V10PresentationSendRequestRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Verifier choice to auto-verify proof presentation",
            "key": "auto_verify",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Connection identifier",
            "key": "connection_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "proof_request",
            "valueType": {
              "type": "id",
              "value": "IndyProofRequest"
            }
          },
          {
            "description": "Whether to trace event (default false)",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V10PresentationSendRequestToProposal": {
      "name": "V10PresentationSendRequestToProposal",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Verifier choice to auto-verify proof presentation",
            "key": "auto_verify",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Whether to trace event (default false)",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V20CredAttrSpec": {
      "name": "V20CredAttrSpec",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "MIME type: omit for (null) default",
            "key": "mime-type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Attribute name",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Attribute value: base64-encode if MIME type is present",
            "key": "value",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "V20CredBoundOfferRequest": {
      "name": "V20CredBoundOfferRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "counter_preview",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredBoundOfferRequest_counter_preview"
              }
            }
          },
          {
            "key": "filter",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredBoundOfferRequest_filter"
              }
            }
          }
        ]
      }
    },
    "V20CredExFree": {
      "name": "V20CredExFree",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
            "key": "auto_remove",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Connection identifier",
            "key": "connection_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "credential_preview",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredPreview"
              }
            }
          },
          {
            "key": "filter",
            "valueType": {
              "type": "id",
              "value": "V20CredBoundOfferRequest_filter"
            }
          },
          {
            "description": "Record trace information, based on agent configuration",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "For ld-proofs. Verification method for signing.",
            "key": "verification_method",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "V20CredExRecordInitiator": {
      "description": "Issue-credential exchange initiator: self or external",
      "name": "V20CredExRecordInitiator",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "self"
          },
          {
            "value": "external"
          }
        ]
      }
    },
    "V20CredExRecordRole": {
      "description": "Issue-credential exchange role: holder or issuer",
      "name": "V20CredExRecordRole",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "issuer"
          },
          {
            "value": "holder"
          }
        ]
      }
    },
    "V20CredExRecordState": {
      "description": "Issue-credential exchange state",
      "name": "V20CredExRecordState",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "proposal-sent"
          },
          {
            "value": "proposal-received"
          },
          {
            "value": "offer-sent"
          },
          {
            "value": "offer-received"
          },
          {
            "value": "request-sent"
          },
          {
            "value": "request-received"
          },
          {
            "value": "credential-issued"
          },
          {
            "value": "credential-received"
          },
          {
            "value": "done"
          },
          {
            "value": "credential-revoked"
          },
          {
            "value": "abandoned"
          },
          {
            "value": "deleted"
          }
        ]
      }
    },
    "V20CredExRecord": {
      "name": "V20CredExRecord",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Issuer choice to issue to request in this credential exchange",
            "key": "auto_issue",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Holder choice to accept offer in this credential exchange",
            "key": "auto_offer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Issuer choice to remove this credential exchange record when complete",
            "key": "auto_remove",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "by_format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredExRecord_by_format"
              }
            }
          },
          {
            "description": "Connection identifier",
            "key": "connection_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Time of record creation",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "description": "Credential exchange identifier",
            "key": "cred_ex_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "cred_issue",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredExRecord_cred_issue"
              }
            }
          },
          {
            "key": "cred_offer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredExRecord_cred_offer"
              }
            }
          },
          {
            "key": "cred_preview",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredExRecord_cred_preview"
              }
            }
          },
          {
            "key": "cred_proposal",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredExRecord_cred_proposal"
              }
            }
          },
          {
            "key": "cred_request",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredExRecord_cred_request"
              }
            }
          },
          {
            "description": "Error message",
            "key": "error_msg",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Issue-credential exchange initiator: self or external",
            "key": "initiator",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredExRecordInitiator"
              }
            }
          },
          {
            "description": "Parent thread identifier",
            "key": "parent_thread_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Issue-credential exchange role: holder or issuer",
            "key": "role",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredExRecordRole"
              }
            }
          },
          {
            "description": "Issue-credential exchange state",
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredExRecordState"
              }
            }
          },
          {
            "description": "Thread identifier",
            "key": "thread_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Record trace information, based on agent configuration",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Time of last record update",
            "key": "updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          }
        ]
      }
    },
    "V20CredExRecordByFormatCredIssue": {
      "name": "V20CredExRecordByFormatCredIssue",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "V20CredExRecordByFormatCredOffer": {
      "name": "V20CredExRecordByFormatCredOffer",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "V20CredExRecordByFormatCredProposal": {
      "name": "V20CredExRecordByFormatCredProposal",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "V20CredExRecordByFormatCredRequest": {
      "name": "V20CredExRecordByFormatCredRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "V20CredExRecordByFormat": {
      "name": "V20CredExRecordByFormat",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "cred_issue",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredExRecordByFormatCredIssue"
              }
            }
          },
          {
            "key": "cred_offer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredExRecordByFormatCredOffer"
              }
            }
          },
          {
            "key": "cred_proposal",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredExRecordByFormatCredProposal"
              }
            }
          },
          {
            "key": "cred_request",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredExRecordByFormatCredRequest"
              }
            }
          }
        ]
      }
    },
    "V20CredExRecordDetail": {
      "name": "V20CredExRecordDetail",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "cred_ex_record",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredExRecordDetail_cred_ex_record"
              }
            }
          },
          {
            "key": "indy",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredExRecordIndy"
              }
            }
          },
          {
            "key": "ld_proof",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredExRecordLDProof"
              }
            }
          }
        ]
      }
    },
    "V20CredExRecordIndyCredRequestMetadata": {
      "description": "Credential request metadata for indy holder",
      "name": "V20CredExRecordIndyCredRequestMetadata",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "V20CredExRecordIndy": {
      "name": "V20CredExRecordIndy",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Time of record creation",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "description": "Corresponding v2.0 credential exchange record identifier",
            "key": "cred_ex_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Record identifier",
            "key": "cred_ex_indy_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Credential identifier stored in wallet",
            "key": "cred_id_stored",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Credential request metadata for indy holder",
            "key": "cred_request_metadata",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredExRecordIndyCredRequestMetadata"
              }
            }
          },
          {
            "description": "Credential revocation identifier within revocation registry",
            "key": "cred_rev_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[1-9][0-9]*$"
                }
              }
            }
          },
          {
            "description": "Revocation registry identifier",
            "key": "rev_reg_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                }
              }
            }
          },
          {
            "description": "Current record state",
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Time of last record update",
            "key": "updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          }
        ]
      }
    },
    "V20CredExRecordLDProof": {
      "name": "V20CredExRecordLDProof",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Time of record creation",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "description": "Corresponding v2.0 credential exchange record identifier",
            "key": "cred_ex_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Record identifier",
            "key": "cred_ex_ld_proof_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Credential identifier stored in wallet",
            "key": "cred_id_stored",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Current record state",
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Time of last record update",
            "key": "updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          }
        ]
      }
    },
    "V20CredExRecordListResult": {
      "name": "V20CredExRecordListResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Credential exchange records and corresponding detail records",
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V20CredExRecordDetail"
                }
              }
            }
          }
        ]
      }
    },
    "V20CredFilter": {
      "name": "V20CredFilter",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "indy",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredFilter_indy"
              }
            }
          },
          {
            "key": "ld_proof",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredFilter_ld_proof"
              }
            }
          }
        ]
      }
    },
    "V20CredFilterIndy": {
      "name": "V20CredFilterIndy",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Credential definition identifier",
            "key": "cred_def_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                }
              }
            }
          },
          {
            "description": "Credential issuer DID",
            "key": "issuer_did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            }
          },
          {
            "description": "Schema identifier",
            "key": "schema_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
                }
              }
            }
          },
          {
            "description": "Schema issuer DID",
            "key": "schema_issuer_did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            }
          },
          {
            "description": "Schema name",
            "key": "schema_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Schema version",
            "key": "schema_version",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[0-9.]+$"
                }
              }
            }
          }
        ]
      }
    },
    "V20CredFilterLDProof": {
      "name": "V20CredFilterLDProof",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "ld_proof",
            "valueType": {
              "type": "id",
              "value": "V20CredFilter_ld_proof"
            }
          }
        ]
      }
    },
    "V20CredFormat": {
      "name": "V20CredFormat",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Attachment identifier",
            "key": "attach_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Attachment format specifier",
            "key": "format",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "V20CredIssue": {
      "name": "V20CredIssue",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Credential attachments",
            "key": "credentials~attach",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "AttachDecorator"
              }
            }
          },
          {
            "description": "Acceptable attachment formats",
            "key": "formats",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "V20CredFormat"
              }
            }
          },
          {
            "description": "Issuer-unique identifier to coordinate credential replacement",
            "key": "replacement_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V20CredIssueProblemReportRequest": {
      "name": "V20CredIssueProblemReportRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "description",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "V20CredIssueRequest": {
      "name": "V20CredIssueRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "V20CredOffer": {
      "name": "V20CredOffer",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "credential_preview",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredPreview"
              }
            }
          },
          {
            "description": "Acceptable credential formats",
            "key": "formats",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "V20CredFormat"
              }
            }
          },
          {
            "description": "Offer attachments",
            "key": "offers~attach",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "AttachDecorator"
              }
            }
          },
          {
            "description": "Issuer-unique identifier to coordinate credential replacement",
            "key": "replacement_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V20CredOfferConnFreeRequest": {
      "name": "V20CredOfferConnFreeRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Whether to respond automatically to credential requests, creating and issuing requested credentials",
            "key": "auto_issue",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
            "key": "auto_remove",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "credential_preview",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredPreview"
              }
            }
          },
          {
            "key": "filter",
            "valueType": {
              "type": "id",
              "value": "V20CredBoundOfferRequest_filter"
            }
          },
          {
            "description": "Record trace information, based on agent configuration",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V20CredOfferRequest": {
      "name": "V20CredOfferRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Whether to respond automatically to credential requests, creating and issuing requested credentials",
            "key": "auto_issue",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
            "key": "auto_remove",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Connection identifier",
            "key": "connection_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "credential_preview",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredPreview"
              }
            }
          },
          {
            "key": "filter",
            "valueType": {
              "type": "id",
              "value": "V20CredBoundOfferRequest_filter"
            }
          },
          {
            "description": "Record trace information, based on agent configuration",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V20CredPreview": {
      "name": "V20CredPreview",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message type identifier",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "attributes",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "V20CredAttrSpec"
              }
            }
          }
        ]
      }
    },
    "V20CredProposal": {
      "name": "V20CredProposal",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "credential_preview",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredProposal_credential_preview"
              }
            }
          },
          {
            "description": "Credential filter per acceptable format on corresponding identifier",
            "key": "filters~attach",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "AttachDecorator"
              }
            }
          },
          {
            "description": "Attachment formats",
            "key": "formats",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "V20CredFormat"
              }
            }
          }
        ]
      }
    },
    "V20CredRequest": {
      "name": "V20CredRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Acceptable attachment formats",
            "key": "formats",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "V20CredFormat"
              }
            }
          },
          {
            "description": "Request attachments",
            "key": "requests~attach",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "AttachDecorator"
              }
            }
          }
        ]
      }
    },
    "V20CredRequestFree": {
      "name": "V20CredRequestFree",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
            "key": "auto_remove",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Connection identifier",
            "key": "connection_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "filter",
            "valueType": {
              "type": "id",
              "value": "V20CredRequestFree_filter"
            }
          },
          {
            "description": "Holder DID to substitute for the credentialSubject.id",
            "key": "holder_did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Whether to trace event (default false)",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V20CredRequestRequest": {
      "name": "V20CredRequestRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Holder DID to substitute for the credentialSubject.id",
            "key": "holder_did",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "V20CredStoreRequest": {
      "name": "V20CredStoreRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "credential_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "V20DiscoveryExchangeListResult": {
      "name": "V20DiscoveryExchangeListResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V20DiscoveryExchangeListResult_results_inner"
                }
              }
            }
          }
        ]
      }
    },
    "V20DiscoveryExchangeResult": {
      "name": "V20DiscoveryExchangeResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20DiscoveryExchangeListResult_results_inner"
              }
            }
          }
        ]
      }
    },
    "V20DiscoveryRecord": {
      "name": "V20DiscoveryRecord",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Connection identifier",
            "key": "connection_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Time of record creation",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "key": "disclosures",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20DiscoveryRecord_disclosures"
              }
            }
          },
          {
            "description": "Credential exchange identifier",
            "key": "discovery_exchange_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "queries_msg",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20DiscoveryRecord_queries_msg"
              }
            }
          },
          {
            "description": "Current record state",
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Thread identifier",
            "key": "thread_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Record trace information, based on agent configuration",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Time of last record update",
            "key": "updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          }
        ]
      }
    },
    "V20IssueCredSchemaCore": {
      "name": "V20IssueCredSchemaCore",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Whether to remove the credential exchange record on completion (overrides --preserve-exchange-records configuration setting)",
            "key": "auto_remove",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "credential_preview",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20CredPreview"
              }
            }
          },
          {
            "key": "filter",
            "valueType": {
              "type": "id",
              "value": "V20CredBoundOfferRequest_filter"
            }
          },
          {
            "description": "Record trace information, based on agent configuration",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V20IssueCredentialModuleResponse": {
      "name": "V20IssueCredentialModuleResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "V20Pres": {
      "name": "V20Pres",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Acceptable attachment formats",
            "key": "formats",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "V20PresFormat"
              }
            }
          },
          {
            "key": "presentations~attach",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "AttachDecorator"
              }
            }
          }
        ]
      }
    },
    "V20PresCreateRequestRequest": {
      "name": "V20PresCreateRequestRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Verifier choice to auto-verify proof presentation",
            "key": "auto_verify",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "presentation_request",
            "valueType": {
              "type": "id",
              "value": "V20PresRequestByFormat"
            }
          },
          {
            "description": "Whether to trace event (default false)",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V20PresExRecordInitiator": {
      "description": "Present-proof exchange initiator: self or external",
      "name": "V20PresExRecordInitiator",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "self"
          },
          {
            "value": "external"
          }
        ]
      }
    },
    "V20PresExRecordRole": {
      "description": "Present-proof exchange role: prover or verifier",
      "name": "V20PresExRecordRole",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "prover"
          },
          {
            "value": "verifier"
          }
        ]
      }
    },
    "V20PresExRecordState": {
      "description": "Present-proof exchange state",
      "name": "V20PresExRecordState",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "proposal-sent"
          },
          {
            "value": "proposal-received"
          },
          {
            "value": "request-sent"
          },
          {
            "value": "request-received"
          },
          {
            "value": "presentation-sent"
          },
          {
            "value": "presentation-received"
          },
          {
            "value": "done"
          },
          {
            "value": "abandoned"
          },
          {
            "value": "deleted"
          }
        ]
      }
    },
    "V20PresExRecordVerified": {
      "description": "Whether presentation is verified: 'true' or 'false'",
      "name": "V20PresExRecordVerified",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "true"
          },
          {
            "value": "false"
          }
        ]
      }
    },
    "V20PresExRecord": {
      "name": "V20PresExRecord",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Prover choice to auto-present proof as verifier requests",
            "key": "auto_present",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Verifier choice to auto-verify proof presentation",
            "key": "auto_verify",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "by_format",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20PresExRecord_by_format"
              }
            }
          },
          {
            "description": "Connection identifier",
            "key": "connection_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Time of record creation",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "description": "Error message",
            "key": "error_msg",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Present-proof exchange initiator: self or external",
            "key": "initiator",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20PresExRecordInitiator"
              }
            }
          },
          {
            "key": "pres",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20PresExRecord_pres"
              }
            }
          },
          {
            "description": "Presentation exchange identifier",
            "key": "pres_ex_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "pres_proposal",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20PresExRecord_pres_proposal"
              }
            }
          },
          {
            "key": "pres_request",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20PresExRecord_pres_request"
              }
            }
          },
          {
            "description": "Present-proof exchange role: prover or verifier",
            "key": "role",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20PresExRecordRole"
              }
            }
          },
          {
            "description": "Present-proof exchange state",
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20PresExRecordState"
              }
            }
          },
          {
            "description": "Thread identifier",
            "key": "thread_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Record trace information, based on agent configuration",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Time of last record update",
            "key": "updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "description": "Whether presentation is verified: 'true' or 'false'",
            "key": "verified",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20PresExRecordVerified"
              }
            }
          },
          {
            "key": "verified_msgs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "V20PresExRecordByFormatPres": {
      "name": "V20PresExRecordByFormatPres",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "V20PresExRecordByFormatPresProposal": {
      "name": "V20PresExRecordByFormatPresProposal",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "V20PresExRecordByFormatPresRequest": {
      "name": "V20PresExRecordByFormatPresRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "V20PresExRecordByFormat": {
      "name": "V20PresExRecordByFormat",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "pres",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20PresExRecordByFormatPres"
              }
            }
          },
          {
            "key": "pres_proposal",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20PresExRecordByFormatPresProposal"
              }
            }
          },
          {
            "key": "pres_request",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20PresExRecordByFormatPresRequest"
              }
            }
          }
        ]
      }
    },
    "V20PresExRecordList": {
      "name": "V20PresExRecordList",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Presentation exchange records",
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "V20PresExRecord"
                }
              }
            }
          }
        ]
      }
    },
    "V20PresFormat": {
      "name": "V20PresFormat",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Attachment identifier",
            "key": "attach_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Attachment format specifier",
            "key": "format",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "V20PresProblemReportRequest": {
      "name": "V20PresProblemReportRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "description",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "V20PresProposal": {
      "name": "V20PresProposal",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "formats",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "V20PresFormat"
              }
            }
          },
          {
            "description": "Attachment per acceptable format on corresponding identifier",
            "key": "proposals~attach",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "AttachDecorator"
              }
            }
          }
        ]
      }
    },
    "V20PresProposalByFormat": {
      "name": "V20PresProposalByFormat",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "dif",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20PresProposalByFormat_dif"
              }
            }
          },
          {
            "key": "indy",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20PresProposalByFormat_indy"
              }
            }
          }
        ]
      }
    },
    "V20PresProposalRequest": {
      "name": "V20PresProposalRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Whether to respond automatically to presentation requests, building and presenting requested proof",
            "key": "auto_present",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Connection identifier",
            "key": "connection_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "presentation_proposal",
            "valueType": {
              "type": "id",
              "value": "V20PresProposalByFormat"
            }
          },
          {
            "description": "Whether to trace event (default false)",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V20PresRequest": {
      "name": "V20PresRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Message identifier",
            "key": "@id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Message type",
            "key": "@type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Human-readable comment",
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "formats",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "V20PresFormat"
              }
            }
          },
          {
            "description": "Attachment per acceptable format on corresponding identifier",
            "key": "request_presentations~attach",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "AttachDecorator"
              }
            }
          },
          {
            "description": "Whether verifier will send confirmation ack",
            "key": "will_confirm",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V20PresRequestByFormat": {
      "name": "V20PresRequestByFormat",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "dif",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20PresRequestByFormat_dif"
              }
            }
          },
          {
            "key": "indy",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20PresRequestByFormat_indy"
              }
            }
          }
        ]
      }
    },
    "V20PresSendRequestRequest": {
      "name": "V20PresSendRequestRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Verifier choice to auto-verify proof presentation",
            "key": "auto_verify",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "comment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Connection identifier",
            "key": "connection_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "presentation_request",
            "valueType": {
              "type": "id",
              "value": "V20PresRequestByFormat"
            }
          },
          {
            "description": "Whether to trace event (default false)",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V20PresSpecByFormatRequest": {
      "name": "V20PresSpecByFormatRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "dif",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20PresSpecByFormatRequest_dif"
              }
            }
          },
          {
            "key": "indy",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "V20PresSpecByFormatRequest_indy"
              }
            }
          },
          {
            "description": "Record trace information, based on agent configuration",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "V20PresentProofModuleResponse": {
      "name": "V20PresentProofModuleResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "V20PresentationSendRequestToProposal": {
      "name": "V20PresentationSendRequestToProposal",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Verifier choice to auto-verify proof presentation",
            "key": "auto_verify",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "description": "Whether to trace event (default false)",
            "key": "trace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          }
        ]
      }
    },
    "VcRecordCredValue": {
      "description": "(JSON-serializable) credential value",
      "name": "VcRecordCredValue",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "VCRecord": {
      "name": "VCRecord",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "contexts",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
                  }
                }
              }
            }
          },
          {
            "key": "cred_tags",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "(JSON-serializable) credential value",
            "key": "cred_value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "VcRecordCredValue"
              }
            }
          },
          {
            "key": "expanded_types",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Credential identifier",
            "key": "given_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Issuer identifier",
            "key": "issuer_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "proof_types",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Record identifier",
            "key": "record_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "schema_ids",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "subject_ids",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "VCRecordList": {
      "name": "VCRecordList",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "VCRecord"
                }
              }
            }
          }
        ]
      }
    },
    "VerifyRequest": {
      "name": "VerifyRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "doc",
            "valueType": {
              "type": "id",
              "value": "VerifyRequest_doc"
            }
          },
          {
            "description": "Verkey to use for doc verification",
            "key": "verkey",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "VerifyResponse": {
      "name": "VerifyResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Error text",
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "valid",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    },
    "W3CCredentialsListRequest": {
      "name": "W3CCredentialsListRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "contexts",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
                  }
                }
              }
            }
          },
          {
            "description": "Given credential id to match",
            "key": "given_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Credential issuer identifier to match",
            "key": "issuer_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Maximum number of results to return",
            "key": "max_results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "proof_types",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Schema identifiers, all of which to match",
            "key": "schema_ids",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
                  }
                }
              }
            }
          },
          {
            "description": "Subject identifiers, all of which to match",
            "key": "subject_ids",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Tag filter",
            "key": "tag_query",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "types",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "WalletList": {
      "name": "WalletList",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of wallet records",
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "WalletRecord"
                }
              }
            }
          }
        ]
      }
    },
    "WalletModuleResponse": {
      "name": "WalletModuleResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "WalletRecordKeyManagementMode": {
      "description": "Mode regarding management of wallet key",
      "name": "WalletRecordKeyManagementMode",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "managed"
          },
          {
            "value": "unmanaged"
          }
        ]
      }
    },
    "WalletRecordSettings": {
      "description": "Settings for this wallet.",
      "name": "WalletRecordSettings",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "WalletRecord": {
      "name": "WalletRecord",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Time of record creation",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "description": "Mode regarding management of wallet key",
            "key": "key_management_mode",
            "valueType": {
              "type": "id",
              "value": "WalletRecordKeyManagementMode"
            }
          },
          {
            "description": "Settings for this wallet.",
            "key": "settings",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "WalletRecordSettings"
              }
            }
          },
          {
            "description": "Current record state",
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Time of last record update",
            "key": "updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$"
                }
              }
            }
          },
          {
            "description": "Wallet record ID",
            "key": "wallet_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "WriteLedgerRequest": {
      "name": "WriteLedgerRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "ledger_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ActionMenuFetchResult_result": {
      "description": "Action menu",
      "name": "ActionMenuFetchResult_result",
      "shape": {
        "type": "object",
        "extends": [
          "Menu"
        ],
        "properties": []
      }
    },
    "AttachDecoratorData_jws": {
      "description": "Detached Java Web Signature",
      "name": "AttachDecoratorData_jws",
      "shape": {
        "type": "object",
        "extends": [
          "AttachDecoratorDataJWS"
        ],
        "properties": []
      }
    },
    "CredDefValue_primary": {
      "description": "Primary value for credential definition",
      "name": "CredDefValue_primary",
      "shape": {
        "type": "object",
        "extends": [
          "CredDefValuePrimary"
        ],
        "properties": []
      }
    },
    "CredDefValue_revocation": {
      "description": "Revocation value for credential definition",
      "name": "CredDefValue_revocation",
      "shape": {
        "type": "object",
        "extends": [
          "CredDefValueRevocation"
        ],
        "properties": []
      }
    },
    "Credential_proof": {
      "description": "The proof of the credential",
      "name": "Credential_proof",
      "shape": {
        "type": "object",
        "extends": [
          "LinkedDataProof"
        ],
        "properties": []
      }
    },
    "CredentialDefinition_value": {
      "description": "Credential definition primary and revocation values",
      "name": "CredentialDefinition_value",
      "shape": {
        "type": "object",
        "extends": [
          "CredDefValue"
        ],
        "properties": []
      }
    },
    "DIDCreate_options": {
      "description": "To define a key type and/or a did depending on chosen DID method.",
      "name": "DIDCreate_options",
      "shape": {
        "type": "object",
        "extends": [
          "DIDCreateOptions"
        ],
        "properties": []
      }
    },
    "DIDXRequest_did_doc_attach": {
      "description": "As signed attachment, DID Doc associated with DID",
      "name": "DIDXRequest_did_doc_attach",
      "shape": {
        "type": "object",
        "extends": [
          "AttachDecorator"
        ],
        "properties": []
      }
    },
    "Doc_options": {
      "description": "Signature options",
      "name": "Doc_options",
      "shape": {
        "type": "object",
        "extends": [
          "SignatureOptions"
        ],
        "properties": []
      }
    },
    "IndyCredAbstract_key_correctness_proof": {
      "description": "Key correctness proof",
      "name": "IndyCredAbstract_key_correctness_proof",
      "shape": {
        "type": "object",
        "extends": [
          "IndyKeyCorrectnessProof"
        ],
        "properties": []
      }
    },
    "IndyCredPrecis_cred_info": {
      "description": "Credential info",
      "name": "IndyCredPrecis_cred_info",
      "shape": {
        "type": "object",
        "extends": [
          "IndyCredInfo"
        ],
        "properties": []
      }
    },
    "IndyCredPrecis_interval": {
      "description": "Non-revocation interval from presentation request",
      "name": "IndyCredPrecis_interval",
      "shape": {
        "type": "object",
        "extends": [
          "IndyNonRevocationInterval"
        ],
        "properties": []
      }
    },
    "IndyCredential_values_value": {
      "description": "Attribute value",
      "name": "IndyCredential_values_value",
      "shape": {
        "type": "object",
        "extends": [
          "IndyAttrValue"
        ],
        "properties": []
      }
    },
    "IndyPrimaryProof_eq_proof": {
      "description": "Indy equality proof",
      "name": "IndyPrimaryProof_eq_proof",
      "shape": {
        "type": "object",
        "extends": [
          "IndyEQProof"
        ],
        "properties": []
      }
    },
    "IndyProof_proof": {
      "description": "Indy proof.proof content",
      "name": "IndyProof_proof",
      "shape": {
        "type": "object",
        "extends": [
          "IndyProofProof"
        ],
        "properties": []
      }
    },
    "IndyProof_requested_proof": {
      "description": "Indy proof.requested_proof content",
      "name": "IndyProof_requested_proof",
      "shape": {
        "type": "object",
        "extends": [
          "IndyProofRequestedProof"
        ],
        "properties": []
      }
    },
    "IndyProofProof_aggregated_proof": {
      "description": "Indy proof aggregated proof",
      "name": "IndyProofProof_aggregated_proof",
      "shape": {
        "type": "object",
        "extends": [
          "IndyProofProofAggregatedProof"
        ],
        "properties": []
      }
    },
    "IndyProofProofProofsProof_non_revoc_proof": {
      "description": "Indy non-revocation proof",
      "name": "IndyProofProofProofsProof_non_revoc_proof",
      "shape": {
        "type": "object",
        "extends": [
          "IndyNonRevocProof"
        ],
        "properties": []
      }
    },
    "IndyProofProofProofsProof_primary_proof": {
      "description": "Indy primary proof",
      "name": "IndyProofProofProofsProof_primary_proof",
      "shape": {
        "type": "object",
        "extends": [
          "IndyPrimaryProof"
        ],
        "properties": []
      }
    },
    "IndyProofReqAttrSpec_non_revoked": {
      "name": "IndyProofReqAttrSpec_non_revoked",
      "shape": {
        "type": "object",
        "extends": [
          "IndyProofReqAttrSpecNonRevoked"
        ],
        "properties": []
      }
    },
    "IndyProofReqPredSpec_non_revoked": {
      "name": "IndyProofReqPredSpec_non_revoked",
      "shape": {
        "type": "object",
        "extends": [
          "IndyProofReqPredSpecNonRevoked"
        ],
        "properties": []
      }
    },
    "IndyProofRequest_non_revoked": {
      "name": "IndyProofRequest_non_revoked",
      "shape": {
        "type": "object",
        "extends": [
          "IndyProofRequestNonRevoked"
        ],
        "properties": []
      }
    },
    "IndyRevRegDef_value": {
      "description": "Revocation registry definition value",
      "name": "IndyRevRegDef_value",
      "shape": {
        "type": "object",
        "extends": [
          "IndyRevRegDefValue"
        ],
        "properties": []
      }
    },
    "IndyRevRegDefValue_publicKeys": {
      "description": "Public keys",
      "name": "IndyRevRegDefValue_publicKeys",
      "shape": {
        "type": "object",
        "extends": [
          "IndyRevRegDefValuePublicKeys"
        ],
        "properties": []
      }
    },
    "IndyRevRegEntry_value": {
      "description": "Revocation registry entry value",
      "name": "IndyRevRegEntry_value",
      "shape": {
        "type": "object",
        "extends": [
          "IndyRevRegEntryValue"
        ],
        "properties": []
      }
    },
    "InputDescriptors_schema": {
      "description": "Accepts a list of schema or a dict containing filters like oneof_filter.",
      "name": "InputDescriptors_schema",
      "shape": {
        "type": "object",
        "extends": [
          "SchemasInputDescriptorFilter"
        ],
        "properties": []
      }
    },
    "InvitationRecord_invitation": {
      "description": "Out of band invitation message",
      "name": "InvitationRecord_invitation",
      "shape": {
        "type": "object",
        "extends": [
          "InvitationMessage"
        ],
        "properties": []
      }
    },
    "IssuerRevRegRecord_revoc_reg_def": {
      "description": "Revocation registry definition",
      "name": "IssuerRevRegRecord_revoc_reg_def",
      "shape": {
        "type": "object",
        "extends": [
          "IndyRevRegDef"
        ],
        "properties": []
      }
    },
    "IssuerRevRegRecord_revoc_reg_entry": {
      "description": "Revocation registry entry",
      "name": "IssuerRevRegRecord_revoc_reg_entry",
      "shape": {
        "type": "object",
        "extends": [
          "IndyRevRegEntry"
        ],
        "properties": []
      }
    },
    "KeylistQuery_paginate": {
      "description": "Pagination info",
      "name": "KeylistQuery_paginate",
      "shape": {
        "type": "object",
        "extends": [
          "KeylistQueryPaginate"
        ],
        "properties": []
      }
    },
    "LDProofVCDetail_credential": {
      "description": "Detail of the JSON-LD Credential to be issued",
      "name": "LDProofVCDetail_credential",
      "shape": {
        "type": "object",
        "extends": [
          "Credential"
        ],
        "properties": []
      }
    },
    "LDProofVCDetail_options": {
      "description": "Options for specifying how the linked data proof is created.",
      "name": "LDProofVCDetail_options",
      "shape": {
        "type": "object",
        "extends": [
          "LDProofVCDetailOptions"
        ],
        "properties": []
      }
    },
    "LDProofVCDetailOptions_credentialStatus": {
      "description": "The credential status mechanism to use for the credential. Omitting the property indicates the issued credential will not include a credential status",
      "name": "LDProofVCDetailOptions_credentialStatus",
      "shape": {
        "type": "object",
        "extends": [
          "CredentialStatusOptions"
        ],
        "properties": []
      }
    },
    "SchemaSendResult_schema": {
      "description": "Schema definition",
      "name": "SchemaSendResult_schema",
      "shape": {
        "type": "object",
        "extends": [
          "Schema"
        ],
        "properties": []
      }
    },
    "SendMenu_menu": {
      "description": "Menu to send to connection",
      "name": "SendMenu_menu",
      "shape": {
        "type": "object",
        "extends": [
          "MenuJson"
        ],
        "properties": []
      }
    },
    "SignedDoc_proof": {
      "description": "Linked data proof",
      "name": "SignedDoc_proof",
      "shape": {
        "type": "object",
        "extends": [
          "SignatureOptions"
        ],
        "properties": []
      }
    },
    "TxnOrCredentialDefinitionSendResult_txn": {
      "description": "Credential definition transaction to endorse",
      "name": "TxnOrCredentialDefinitionSendResult_txn",
      "shape": {
        "type": "object",
        "extends": [
          "TransactionRecord"
        ],
        "properties": []
      }
    },
    "TxnOrPublishRevocationsResult_txn": {
      "description": "Revocation registry revocations transaction to endorse",
      "name": "TxnOrPublishRevocationsResult_txn",
      "shape": {
        "type": "object",
        "extends": [
          "TransactionRecord"
        ],
        "properties": []
      }
    },
    "TxnOrRegisterLedgerNymResponse_txn": {
      "description": "DID transaction to endorse",
      "name": "TxnOrRegisterLedgerNymResponse_txn",
      "shape": {
        "type": "object",
        "extends": [
          "TransactionRecord"
        ],
        "properties": []
      }
    },
    "TxnOrRevRegResult_txn": {
      "description": "Revocation registry definition transaction to endorse",
      "name": "TxnOrRevRegResult_txn",
      "shape": {
        "type": "object",
        "extends": [
          "TransactionRecord"
        ],
        "properties": []
      }
    },
    "TxnOrSchemaSendResult_sent": {
      "description": "Content sent",
      "name": "TxnOrSchemaSendResult_sent",
      "shape": {
        "type": "object",
        "extends": [
          "SchemaSendResult"
        ],
        "properties": []
      }
    },
    "TxnOrSchemaSendResult_txn": {
      "description": "Schema transaction to endorse",
      "name": "TxnOrSchemaSendResult_txn",
      "shape": {
        "type": "object",
        "extends": [
          "TransactionRecord"
        ],
        "properties": []
      }
    },
    "V10CredentialBoundOfferRequest_counter_proposal": {
      "description": "Optional counter-proposal",
      "name": "V10CredentialBoundOfferRequest_counter_proposal",
      "shape": {
        "type": "object",
        "extends": [
          "CredentialProposal"
        ],
        "properties": []
      }
    },
    "V10CredentialExchange_credential": {
      "description": "Credential as stored",
      "name": "V10CredentialExchange_credential",
      "shape": {
        "type": "object",
        "extends": [
          "IndyCredInfo"
        ],
        "properties": []
      }
    },
    "V10CredentialExchange_credential_offer": {
      "description": "(Indy) credential offer",
      "name": "V10CredentialExchange_credential_offer",
      "shape": {
        "type": "object",
        "extends": [
          "IndyCredAbstract"
        ],
        "properties": []
      }
    },
    "V10CredentialExchange_credential_offer_dict": {
      "description": "Credential offer message",
      "name": "V10CredentialExchange_credential_offer_dict",
      "shape": {
        "type": "object",
        "extends": [
          "CredentialOffer"
        ],
        "properties": []
      }
    },
    "V10CredentialExchange_credential_proposal_dict": {
      "description": "Credential proposal message",
      "name": "V10CredentialExchange_credential_proposal_dict",
      "shape": {
        "type": "object",
        "extends": [
          "CredentialProposal"
        ],
        "properties": []
      }
    },
    "V10CredentialExchange_credential_request": {
      "description": "(Indy) credential request",
      "name": "V10CredentialExchange_credential_request",
      "shape": {
        "type": "object",
        "extends": [
          "IndyCredRequest"
        ],
        "properties": []
      }
    },
    "V10CredentialExchange_raw_credential": {
      "description": "Credential as received, prior to storage in holder wallet",
      "name": "V10CredentialExchange_raw_credential",
      "shape": {
        "type": "object",
        "extends": [
          "IndyCredential"
        ],
        "properties": []
      }
    },
    "V10DiscoveryExchangeListResult_results_inner": {
      "description": "Discover Features v1.0 exchange record",
      "name": "V10DiscoveryExchangeListResult_results_inner",
      "shape": {
        "type": "object",
        "extends": [
          "V10DiscoveryRecord"
        ],
        "properties": []
      }
    },
    "V10DiscoveryRecord_disclose": {
      "description": "Disclose message",
      "name": "V10DiscoveryRecord_disclose",
      "shape": {
        "type": "object",
        "extends": [
          "Disclose"
        ],
        "properties": []
      }
    },
    "V10DiscoveryRecord_query_msg": {
      "description": "Query message",
      "name": "V10DiscoveryRecord_query_msg",
      "shape": {
        "type": "object",
        "extends": [
          "Query"
        ],
        "properties": []
      }
    },
    "V10PresentationExchange_presentation": {
      "description": "(Indy) presentation (also known as proof)",
      "name": "V10PresentationExchange_presentation",
      "shape": {
        "type": "object",
        "extends": [
          "IndyProof"
        ],
        "properties": []
      }
    },
    "V10PresentationExchange_presentation_proposal_dict": {
      "description": "Presentation proposal message",
      "name": "V10PresentationExchange_presentation_proposal_dict",
      "shape": {
        "type": "object",
        "extends": [
          "PresentationProposal"
        ],
        "properties": []
      }
    },
    "V10PresentationExchange_presentation_request": {
      "description": "(Indy) presentation request (also known as proof request)",
      "name": "V10PresentationExchange_presentation_request",
      "shape": {
        "type": "object",
        "extends": [
          "IndyProofRequest"
        ],
        "properties": []
      }
    },
    "V10PresentationExchange_presentation_request_dict": {
      "description": "Presentation request message",
      "name": "V10PresentationExchange_presentation_request_dict",
      "shape": {
        "type": "object",
        "extends": [
          "PresentationRequest"
        ],
        "properties": []
      }
    },
    "V20CredBoundOfferRequest_counter_preview": {
      "description": "Optional content for counter-proposal",
      "name": "V20CredBoundOfferRequest_counter_preview",
      "shape": {
        "type": "object",
        "extends": [
          "V20CredPreview"
        ],
        "properties": []
      }
    },
    "V20CredBoundOfferRequest_filter": {
      "description": "Credential specification criteria by format",
      "name": "V20CredBoundOfferRequest_filter",
      "shape": {
        "type": "object",
        "extends": [
          "V20CredFilter"
        ],
        "properties": []
      }
    },
    "V20CredExRecord_by_format": {
      "description": "Attachment content by format for proposal, offer, request, and issue",
      "name": "V20CredExRecord_by_format",
      "shape": {
        "type": "object",
        "extends": [
          "V20CredExRecordByFormat"
        ],
        "properties": []
      }
    },
    "V20CredExRecord_cred_issue": {
      "description": "Serialized credential issue message",
      "name": "V20CredExRecord_cred_issue",
      "shape": {
        "type": "object",
        "extends": [
          "V20CredIssue"
        ],
        "properties": []
      }
    },
    "V20CredExRecord_cred_offer": {
      "description": "Credential offer message",
      "name": "V20CredExRecord_cred_offer",
      "shape": {
        "type": "object",
        "extends": [
          "V20CredOffer"
        ],
        "properties": []
      }
    },
    "V20CredExRecord_cred_preview": {
      "description": "Credential preview from credential proposal",
      "name": "V20CredExRecord_cred_preview",
      "shape": {
        "type": "object",
        "extends": [
          "V20CredPreview"
        ],
        "properties": []
      }
    },
    "V20CredExRecord_cred_proposal": {
      "description": "Credential proposal message",
      "name": "V20CredExRecord_cred_proposal",
      "shape": {
        "type": "object",
        "extends": [
          "V20CredProposal"
        ],
        "properties": []
      }
    },
    "V20CredExRecord_cred_request": {
      "description": "Serialized credential request message",
      "name": "V20CredExRecord_cred_request",
      "shape": {
        "type": "object",
        "extends": [
          "V20CredRequest"
        ],
        "properties": []
      }
    },
    "V20CredExRecordDetail_cred_ex_record": {
      "description": "Credential exchange record",
      "name": "V20CredExRecordDetail_cred_ex_record",
      "shape": {
        "type": "object",
        "extends": [
          "V20CredExRecord"
        ],
        "properties": []
      }
    },
    "V20CredFilter_indy": {
      "description": "Credential filter for indy",
      "name": "V20CredFilter_indy",
      "shape": {
        "type": "object",
        "extends": [
          "V20CredFilterIndy"
        ],
        "properties": []
      }
    },
    "V20CredFilter_ld_proof": {
      "description": "Credential filter for linked data proof",
      "name": "V20CredFilter_ld_proof",
      "shape": {
        "type": "object",
        "extends": [
          "LDProofVCDetail"
        ],
        "properties": []
      }
    },
    "V20CredProposal_credential_preview": {
      "description": "Credential preview",
      "name": "V20CredProposal_credential_preview",
      "shape": {
        "type": "object",
        "extends": [
          "V20CredPreview"
        ],
        "properties": []
      }
    },
    "V20CredRequestFree_filter": {
      "description": "Credential specification criteria by format",
      "name": "V20CredRequestFree_filter",
      "shape": {
        "type": "object",
        "extends": [
          "V20CredFilterLDProof"
        ],
        "properties": []
      }
    },
    "V20DiscoveryExchangeListResult_results_inner": {
      "description": "Discover Features v2.0 exchange record",
      "name": "V20DiscoveryExchangeListResult_results_inner",
      "shape": {
        "type": "object",
        "extends": [
          "V20DiscoveryRecord"
        ],
        "properties": []
      }
    },
    "V20DiscoveryRecord_disclosures": {
      "description": "Disclosures message",
      "name": "V20DiscoveryRecord_disclosures",
      "shape": {
        "type": "object",
        "extends": [
          "Disclosures"
        ],
        "properties": []
      }
    },
    "V20DiscoveryRecord_queries_msg": {
      "description": "Queries message",
      "name": "V20DiscoveryRecord_queries_msg",
      "shape": {
        "type": "object",
        "extends": [
          "Queries"
        ],
        "properties": []
      }
    },
    "V20PresExRecord_by_format": {
      "description": "Attachment content by format for proposal, request, and presentation",
      "name": "V20PresExRecord_by_format",
      "shape": {
        "type": "object",
        "extends": [
          "V20PresExRecordByFormat"
        ],
        "properties": []
      }
    },
    "V20PresExRecord_pres": {
      "description": "Presentation message",
      "name": "V20PresExRecord_pres",
      "shape": {
        "type": "object",
        "extends": [
          "V20Pres"
        ],
        "properties": []
      }
    },
    "V20PresExRecord_pres_proposal": {
      "description": "Presentation proposal message",
      "name": "V20PresExRecord_pres_proposal",
      "shape": {
        "type": "object",
        "extends": [
          "V20PresProposal"
        ],
        "properties": []
      }
    },
    "V20PresExRecord_pres_request": {
      "description": "Presentation request message",
      "name": "V20PresExRecord_pres_request",
      "shape": {
        "type": "object",
        "extends": [
          "V20PresRequest"
        ],
        "properties": []
      }
    },
    "V20PresProposalByFormat_dif": {
      "description": "Presentation proposal for DIF",
      "name": "V20PresProposalByFormat_dif",
      "shape": {
        "type": "object",
        "extends": [
          "DIFProofProposal"
        ],
        "properties": []
      }
    },
    "V20PresProposalByFormat_indy": {
      "description": "Presentation proposal for indy",
      "name": "V20PresProposalByFormat_indy",
      "shape": {
        "type": "object",
        "extends": [
          "IndyProofRequest"
        ],
        "properties": []
      }
    },
    "V20PresRequestByFormat_dif": {
      "description": "Presentation request for DIF",
      "name": "V20PresRequestByFormat_dif",
      "shape": {
        "type": "object",
        "extends": [
          "DIFProofRequest"
        ],
        "properties": []
      }
    },
    "V20PresRequestByFormat_indy": {
      "description": "Presentation request for indy",
      "name": "V20PresRequestByFormat_indy",
      "shape": {
        "type": "object",
        "extends": [
          "IndyProofRequest"
        ],
        "properties": []
      }
    },
    "V20PresSpecByFormatRequest_dif": {
      "description": "Optional Presentation specification for DIF, overrides the PresentionExchange record's PresRequest",
      "name": "V20PresSpecByFormatRequest_dif",
      "shape": {
        "type": "object",
        "extends": [
          "DIFPresSpec"
        ],
        "properties": []
      }
    },
    "V20PresSpecByFormatRequest_indy": {
      "description": "Presentation specification for indy",
      "name": "V20PresSpecByFormatRequest_indy",
      "shape": {
        "type": "object",
        "extends": [
          "IndyPresSpec"
        ],
        "properties": []
      }
    },
    "VerifyRequest_doc": {
      "description": "Signed document",
      "name": "VerifyRequest_doc",
      "shape": {
        "type": "object",
        "extends": [
          "SignedDoc"
        ],
        "properties": []
      }
    },
    "ConnectionsGetParametersSchema": {
      "name": "ConnectionsGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "invitee"
          },
          {
            "value": "requester"
          },
          {
            "value": "inviter"
          },
          {
            "value": "responder"
          }
        ]
      }
    },
    "IssueCredential20RecordsGetParametersSchema": {
      "name": "IssueCredential20RecordsGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "proposal-sent"
          },
          {
            "value": "proposal-received"
          },
          {
            "value": "offer-sent"
          },
          {
            "value": "offer-received"
          },
          {
            "value": "request-sent"
          },
          {
            "value": "request-received"
          },
          {
            "value": "credential-issued"
          },
          {
            "value": "credential-received"
          },
          {
            "value": "done"
          },
          {
            "value": "credential-revoked"
          },
          {
            "value": "abandoned"
          }
        ]
      }
    },
    "IssueCredentialRecordsGetParametersSchema": {
      "name": "IssueCredentialRecordsGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "proposal_sent"
          },
          {
            "value": "proposal_received"
          },
          {
            "value": "offer_sent"
          },
          {
            "value": "offer_received"
          },
          {
            "value": "request_sent"
          },
          {
            "value": "request_received"
          },
          {
            "value": "credential_issued"
          },
          {
            "value": "credential_received"
          },
          {
            "value": "credential_acked"
          },
          {
            "value": "credential_revoked"
          },
          {
            "value": "abandoned"
          }
        ]
      }
    },
    "LedgerDidEndpointGetParametersSchema": {
      "name": "LedgerDidEndpointGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "Endpoint"
          },
          {
            "value": "Profile"
          },
          {
            "value": "LinkedDomains"
          }
        ]
      }
    },
    "LedgerRegisterNymPostParametersSchema": {
      "name": "LedgerRegisterNymPostParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "STEWARD"
          },
          {
            "value": "TRUSTEE"
          },
          {
            "value": "ENDORSER"
          },
          {
            "value": "NETWORK_MONITOR"
          },
          {
            "value": "reset"
          }
        ]
      }
    },
    "MediationKeylistsGetParametersSchema": {
      "name": "MediationKeylistsGetParametersSchema",
      "shape": {
        "type": "enum",
        "default": "server",
        "values": [
          {
            "value": "client"
          },
          {
            "value": "server"
          }
        ]
      }
    },
    "MediationRequestsGetParametersSchema": {
      "name": "MediationRequestsGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "request"
          },
          {
            "value": "granted"
          },
          {
            "value": "denied"
          }
        ]
      }
    },
    "PresentProof20RecordsGetParametersSchema": {
      "name": "PresentProof20RecordsGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "proposal-sent"
          },
          {
            "value": "proposal-received"
          },
          {
            "value": "request-sent"
          },
          {
            "value": "request-received"
          },
          {
            "value": "presentation-sent"
          },
          {
            "value": "presentation-received"
          },
          {
            "value": "done"
          },
          {
            "value": "abandoned"
          }
        ]
      }
    },
    "PresentProofRecordsGetParametersSchema": {
      "name": "PresentProofRecordsGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "proposal_sent"
          },
          {
            "value": "proposal_received"
          },
          {
            "value": "request_sent"
          },
          {
            "value": "request_received"
          },
          {
            "value": "presentation_sent"
          },
          {
            "value": "presentation_received"
          },
          {
            "value": "verified"
          },
          {
            "value": "presentation_acked"
          },
          {
            "value": "abandoned"
          }
        ]
      }
    },
    "RevocationRegistriesCreatedGetParametersSchema": {
      "name": "RevocationRegistriesCreatedGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "init"
          },
          {
            "value": "generated"
          },
          {
            "value": "posted"
          },
          {
            "value": "active"
          },
          {
            "value": "full"
          }
        ]
      }
    },
    "RevocationRegistryRevRegIdSetStatePatchParametersSchema": {
      "name": "RevocationRegistryRevRegIdSetStatePatchParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "init"
          },
          {
            "value": "generated"
          },
          {
            "value": "posted"
          },
          {
            "value": "active"
          },
          {
            "value": "full"
          }
        ]
      }
    },
    "TransactionsConnIdSetEndorserRolePostParametersSchema": {
      "name": "TransactionsConnIdSetEndorserRolePostParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "TRANSACTION_AUTHOR"
          },
          {
            "value": "TRANSACTION_ENDORSER"
          },
          {
            "value": "reset"
          }
        ]
      }
    },
    "WalletDidGetParametersSchema": {
      "name": "WalletDidGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "public"
          },
          {
            "value": "posted"
          },
          {
            "value": "wallet_only"
          }
        ]
      }
    }
  },
  "subpackages": {
    "action-menu": {
      "subpackageId": "action-menu",
      "name": "action-menu",
      "endpoints": [
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "close_menu_by_conn_id",
          "originalEndpointId": "action-menu.close_menu_by_conn_id",
          "name": "Close the active menu associated with a connection",
          "path": {
            "pathParameters": [
              {
                "description": "Connection identifier",
                "key": "conn_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/action-menu/"
              },
              {
                "type": "pathParameter",
                "value": "conn_id"
              },
              {
                "type": "literal",
                "value": "/close"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ActionMenuModulesResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/action-menu/",
              "pathParameters": {
                "conn_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "fetch_menu_by_conn_id",
          "originalEndpointId": "action-menu.fetch_menu_by_conn_id",
          "name": "Fetch the active menu",
          "path": {
            "pathParameters": [
              {
                "description": "Connection identifier",
                "key": "conn_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/action-menu/"
              },
              {
                "type": "pathParameter",
                "value": "conn_id"
              },
              {
                "type": "literal",
                "value": "/fetch"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ActionMenuFetchResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/action-menu/",
              "pathParameters": {
                "conn_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "perform_action_by_conn_id",
          "originalEndpointId": "action-menu.perform_action_by_conn_id",
          "name": "Perform an action associated with the active menu",
          "path": {
            "pathParameters": [
              {
                "description": "Connection identifier",
                "key": "conn_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/action-menu/"
              },
              {
                "type": "pathParameter",
                "value": "conn_id"
              },
              {
                "type": "literal",
                "value": "/perform"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "PerformRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ActionMenuModulesResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/action-menu/",
              "pathParameters": {
                "conn_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "name": "Query",
                "params": {
                  "key": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                }
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "Query",
                  "params": {
                    "key": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                  }
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "request_menu_by_conn_id",
          "originalEndpointId": "action-menu.request_menu_by_conn_id",
          "name": "Request the active menu",
          "path": {
            "pathParameters": [
              {
                "description": "Connection identifier",
                "key": "conn_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/action-menu/"
              },
              {
                "type": "pathParameter",
                "value": "conn_id"
              },
              {
                "type": "literal",
                "value": "/request"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ActionMenuModulesResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/action-menu/",
              "pathParameters": {
                "conn_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_menu_to_conn_id",
          "originalEndpointId": "action-menu.send_menu_to_conn_id",
          "name": "Send an action menu to a connection",
          "path": {
            "pathParameters": [
              {
                "description": "Connection identifier",
                "key": "conn_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/action-menu/"
              },
              {
                "type": "pathParameter",
                "value": "conn_id"
              },
              {
                "type": "literal",
                "value": "/send-menu"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "SendMenu"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ActionMenuModulesResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/action-menu/",
              "pathParameters": {
                "conn_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "menu": {}
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "menu": {}
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "connection": {
      "subpackageId": "connection",
      "name": "connection",
      "endpoints": [
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_matching_connections",
          "originalEndpointId": "connection.get_matching_connections",
          "name": "Query agent-to-agent connections",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/connections"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Alias",
              "key": "alias",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Connection protocol used",
              "key": "connection_protocol",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "ConnectionsGetParametersSchema"
                }
              }
            },
            {
              "description": "invitation key",
              "key": "invitation_key",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
                  }
                }
              }
            },
            {
              "description": "Identifier of the associated Invitation Mesage",
              "key": "invitation_msg_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            },
            {
              "description": "My DID",
              "key": "my_did",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                  }
                }
              }
            },
            {
              "description": "Connection state",
              "key": "state",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "ConnectionsGetParametersSchema"
                }
              }
            },
            {
              "description": "Their DID",
              "key": "their_did",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                  }
                }
              }
            },
            {
              "description": "Their Public DID",
              "key": "their_public_did",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                  }
                }
              }
            },
            {
              "description": "Their role in the connection protocol",
              "key": "their_role",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "ConnectionsGetParametersSchema"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ConnectionList"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/connections",
              "pathParameters": {},
              "queryParameters": {
                "alias": "foo",
                "connection_protocol": "connections/1.0",
                "invitation_key": "foo",
                "invitation_msg_id": "foo",
                "my_did": "foo",
                "state": "start",
                "their_did": "foo",
                "their_public_did": "foo",
                "their_role": "invitee"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "accept": "auto",
                      "alias": "Bob, providing quotes",
                      "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "connection_protocol": "connections/1.0",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "error_msg": "No DIDDoc provided; cannot connect to public DID",
                      "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                      "invitation_mode": "once",
                      "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "my_did": "WgWxqztrNooG92RXvxSTWv",
                      "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "rfc23_state": "invitation-sent",
                      "routing_state": "active",
                      "state": "active",
                      "their_did": "WgWxqztrNooG92RXvxSTWv",
                      "their_label": "Bob",
                      "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                      "their_role": "requester",
                      "updated_at": "2021-12-31 23:59:59+00:00"
                    },
                    {
                      "accept": "auto",
                      "alias": "Bob, providing quotes",
                      "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "connection_protocol": "connections/1.0",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "error_msg": "No DIDDoc provided; cannot connect to public DID",
                      "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                      "invitation_mode": "once",
                      "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "my_did": "WgWxqztrNooG92RXvxSTWv",
                      "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "rfc23_state": "invitation-sent",
                      "routing_state": "active",
                      "state": "active",
                      "their_did": "WgWxqztrNooG92RXvxSTWv",
                      "their_label": "Bob",
                      "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                      "their_role": "requester",
                      "updated_at": "2021-12-31 23:59:59+00:00"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "accept": "auto",
                      "alias": "Bob, providing quotes",
                      "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "connection_protocol": "connections/1.0",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "error_msg": "No DIDDoc provided; cannot connect to public DID",
                      "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                      "invitation_mode": "once",
                      "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "my_did": "WgWxqztrNooG92RXvxSTWv",
                      "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "rfc23_state": "invitation-sent",
                      "routing_state": "active",
                      "state": "active",
                      "their_did": "WgWxqztrNooG92RXvxSTWv",
                      "their_label": "Bob",
                      "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                      "their_role": "requester",
                      "updated_at": "2021-12-31 23:59:59+00:00"
                    },
                    {
                      "accept": "auto",
                      "alias": "Bob, providing quotes",
                      "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "connection_protocol": "connections/1.0",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "error_msg": "No DIDDoc provided; cannot connect to public DID",
                      "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                      "invitation_mode": "once",
                      "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "my_did": "WgWxqztrNooG92RXvxSTWv",
                      "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "rfc23_state": "invitation-sent",
                      "routing_state": "active",
                      "state": "active",
                      "their_did": "WgWxqztrNooG92RXvxSTWv",
                      "their_label": "Bob",
                      "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                      "their_role": "requester",
                      "updated_at": "2021-12-31 23:59:59+00:00"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "create_connection_invitation",
          "originalEndpointId": "connection.create_connection_invitation",
          "name": "Create a new connection invitation",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/connections/create-invitation"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Alias",
              "key": "alias",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Auto-accept connection (defaults to configuration)",
              "key": "auto_accept",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "description": "Create invitation for multiple use (default false)",
              "key": "multi_use",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "description": "Create invitation from public DID (default false)",
              "key": "public",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          ],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "CreateInvitationRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "InvitationResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/connections/create-invitation",
              "pathParameters": {},
              "queryParameters": {
                "alias": "foo",
                "auto_accept": true,
                "multi_use": true,
                "public": true
              },
              "headers": {},
              "requestBody": {
                "mediation_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "metadata": {},
                "my_label": "Bob",
                "recipient_keys": [
                  "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                  "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                ],
                "routing_keys": [
                  "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                  "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                ],
                "service_endpoint": "http://192.168.56.102:8020"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "mediation_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "metadata": {},
                  "my_label": "Bob",
                  "recipient_keys": [
                    "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                    "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                  ],
                  "routing_keys": [
                    "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                    "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                  ],
                  "service_endpoint": "http://192.168.56.102:8020"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation": {
                    "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "@type": "https://didcomm.org/my-family/1.0/my-message-type",
                    "did": "WgWxqztrNooG92RXvxSTWv",
                    "imageUrl": "http://192.168.56.101/img/logo.jpg",
                    "label": "Bob",
                    "recipientKeys": [
                      "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                      "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                    ],
                    "routingKeys": [
                      "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                      "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                    ],
                    "serviceEndpoint": "http://192.168.56.101:8020"
                  },
                  "invitation_url": "http://192.168.56.101:8020/invite?c_i=eyJAdHlwZSI6Li4ufQ=="
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation": {
                    "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "@type": "https://didcomm.org/my-family/1.0/my-message-type",
                    "did": "WgWxqztrNooG92RXvxSTWv",
                    "imageUrl": "http://192.168.56.101/img/logo.jpg",
                    "label": "Bob",
                    "recipientKeys": [
                      "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                      "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                    ],
                    "routingKeys": [
                      "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                      "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                    ],
                    "serviceEndpoint": "http://192.168.56.101:8020"
                  },
                  "invitation_url": "http://192.168.56.101:8020/invite?c_i=eyJAdHlwZSI6Li4ufQ=="
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "create_static_connection",
          "originalEndpointId": "connection.create_static_connection",
          "name": "Create a new static connection",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/connections/create-static"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ConnectionStaticRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ConnectionStaticResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/connections/create-static",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "alias": "alias",
                "my_did": "WgWxqztrNooG92RXvxSTWv",
                "my_seed": "my_seed",
                "their_did": "WgWxqztrNooG92RXvxSTWv",
                "their_endpoint": "https://myhost:8021",
                "their_label": "their_label",
                "their_seed": "their_seed",
                "their_verkey": "their_verkey"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "alias": "alias",
                  "my_did": "WgWxqztrNooG92RXvxSTWv",
                  "my_seed": "my_seed",
                  "their_did": "WgWxqztrNooG92RXvxSTWv",
                  "their_endpoint": "https://myhost:8021",
                  "their_label": "their_label",
                  "their_seed": "their_seed",
                  "their_verkey": "their_verkey"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "my_did": "WgWxqztrNooG92RXvxSTWv",
                  "my_endpoint": "https://myhost:8021",
                  "my_verkey": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                  "record": {
                    "accept": "auto",
                    "alias": "Bob, providing quotes",
                    "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "connection_protocol": "connections/1.0",
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "error_msg": "No DIDDoc provided; cannot connect to public DID",
                    "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                    "invitation_mode": "once",
                    "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "my_did": "WgWxqztrNooG92RXvxSTWv",
                    "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "rfc23_state": "invitation-sent",
                    "routing_state": "active",
                    "state": "active",
                    "their_did": "WgWxqztrNooG92RXvxSTWv",
                    "their_label": "Bob",
                    "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                    "their_role": "requester",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  },
                  "their_did": "WgWxqztrNooG92RXvxSTWv",
                  "their_verkey": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "my_did": "WgWxqztrNooG92RXvxSTWv",
                  "my_endpoint": "https://myhost:8021",
                  "my_verkey": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                  "record": {
                    "accept": "auto",
                    "alias": "Bob, providing quotes",
                    "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "connection_protocol": "connections/1.0",
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "error_msg": "No DIDDoc provided; cannot connect to public DID",
                    "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                    "invitation_mode": "once",
                    "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "my_did": "WgWxqztrNooG92RXvxSTWv",
                    "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "rfc23_state": "invitation-sent",
                    "routing_state": "active",
                    "state": "active",
                    "their_did": "WgWxqztrNooG92RXvxSTWv",
                    "their_label": "Bob",
                    "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                    "their_role": "requester",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  },
                  "their_did": "WgWxqztrNooG92RXvxSTWv",
                  "their_verkey": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "receive_connection_invitation",
          "originalEndpointId": "connection.receive_connection_invitation",
          "name": "Receive a new connection invitation",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/connections/receive-invitation"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Alias",
              "key": "alias",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Auto-accept connection (defaults to configuration)",
              "key": "auto_accept",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "description": "Identifier for active mediation record to be used",
              "key": "mediation_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            }
          ],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ReceiveInvitationRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ConnRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/connections/receive-invitation",
              "pathParameters": {},
              "queryParameters": {
                "alias": "foo",
                "auto_accept": true,
                "mediation_id": "foo"
              },
              "headers": {},
              "requestBody": {
                "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "@type": "https://didcomm.org/my-family/1.0/my-message-type",
                "did": "WgWxqztrNooG92RXvxSTWv",
                "imageUrl": "http://192.168.56.101/img/logo.jpg",
                "label": "Bob",
                "recipientKeys": [
                  "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                  "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                ],
                "routingKeys": [
                  "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                  "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                ],
                "serviceEndpoint": "http://192.168.56.101:8020"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "@type": "https://didcomm.org/my-family/1.0/my-message-type",
                  "did": "WgWxqztrNooG92RXvxSTWv",
                  "imageUrl": "http://192.168.56.101/img/logo.jpg",
                  "label": "Bob",
                  "recipientKeys": [
                    "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                    "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                  ],
                  "routingKeys": [
                    "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                    "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                  ],
                  "serviceEndpoint": "http://192.168.56.101:8020"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "accept": "auto",
                  "alias": "Bob, providing quotes",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "connection_protocol": "connections/1.0",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "No DIDDoc provided; cannot connect to public DID",
                  "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                  "invitation_mode": "once",
                  "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "my_did": "WgWxqztrNooG92RXvxSTWv",
                  "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "rfc23_state": "invitation-sent",
                  "routing_state": "active",
                  "state": "active",
                  "their_did": "WgWxqztrNooG92RXvxSTWv",
                  "their_label": "Bob",
                  "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                  "their_role": "requester",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "accept": "auto",
                  "alias": "Bob, providing quotes",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "connection_protocol": "connections/1.0",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "No DIDDoc provided; cannot connect to public DID",
                  "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                  "invitation_mode": "once",
                  "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "my_did": "WgWxqztrNooG92RXvxSTWv",
                  "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "rfc23_state": "invitation-sent",
                  "routing_state": "active",
                  "state": "active",
                  "their_did": "WgWxqztrNooG92RXvxSTWv",
                  "their_label": "Bob",
                  "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                  "their_role": "requester",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_connection_record",
          "originalEndpointId": "connection.get_connection_record",
          "name": "Fetch a single connection record",
          "path": {
            "pathParameters": [
              {
                "description": "Connection identifier",
                "key": "conn_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/connections/"
              },
              {
                "type": "pathParameter",
                "value": "conn_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ConnRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/connections/",
              "pathParameters": {
                "conn_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "accept": "auto",
                  "alias": "Bob, providing quotes",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "connection_protocol": "connections/1.0",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "No DIDDoc provided; cannot connect to public DID",
                  "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                  "invitation_mode": "once",
                  "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "my_did": "WgWxqztrNooG92RXvxSTWv",
                  "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "rfc23_state": "invitation-sent",
                  "routing_state": "active",
                  "state": "active",
                  "their_did": "WgWxqztrNooG92RXvxSTWv",
                  "their_label": "Bob",
                  "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                  "their_role": "requester",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "accept": "auto",
                  "alias": "Bob, providing quotes",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "connection_protocol": "connections/1.0",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "No DIDDoc provided; cannot connect to public DID",
                  "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                  "invitation_mode": "once",
                  "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "my_did": "WgWxqztrNooG92RXvxSTWv",
                  "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "rfc23_state": "invitation-sent",
                  "routing_state": "active",
                  "state": "active",
                  "their_did": "WgWxqztrNooG92RXvxSTWv",
                  "their_label": "Bob",
                  "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                  "their_role": "requester",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "DELETE",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "delete_connection_record",
          "originalEndpointId": "connection.delete_connection_record",
          "name": "Remove an existing connection record",
          "path": {
            "pathParameters": [
              {
                "description": "Connection identifier",
                "key": "conn_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/connections/"
              },
              {
                "type": "pathParameter",
                "value": "conn_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ConnectionModuleResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/connections/",
              "pathParameters": {
                "conn_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "accept_connection_invitation",
          "originalEndpointId": "connection.accept_connection_invitation",
          "name": "Accept a stored connection invitation",
          "path": {
            "pathParameters": [
              {
                "description": "Connection identifier",
                "key": "conn_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/connections/"
              },
              {
                "type": "pathParameter",
                "value": "conn_id"
              },
              {
                "type": "literal",
                "value": "/accept-invitation"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Identifier for active mediation record to be used",
              "key": "mediation_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            },
            {
              "description": "My URL endpoint",
              "key": "my_endpoint",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
                  }
                }
              }
            },
            {
              "description": "Label for connection",
              "key": "my_label",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ConnRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/connections/",
              "pathParameters": {
                "conn_id": "foo"
              },
              "queryParameters": {
                "mediation_id": "foo",
                "my_endpoint": "foo",
                "my_label": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "accept": "auto",
                  "alias": "Bob, providing quotes",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "connection_protocol": "connections/1.0",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "No DIDDoc provided; cannot connect to public DID",
                  "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                  "invitation_mode": "once",
                  "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "my_did": "WgWxqztrNooG92RXvxSTWv",
                  "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "rfc23_state": "invitation-sent",
                  "routing_state": "active",
                  "state": "active",
                  "their_did": "WgWxqztrNooG92RXvxSTWv",
                  "their_label": "Bob",
                  "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                  "their_role": "requester",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "accept": "auto",
                  "alias": "Bob, providing quotes",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "connection_protocol": "connections/1.0",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "No DIDDoc provided; cannot connect to public DID",
                  "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                  "invitation_mode": "once",
                  "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "my_did": "WgWxqztrNooG92RXvxSTWv",
                  "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "rfc23_state": "invitation-sent",
                  "routing_state": "active",
                  "state": "active",
                  "their_did": "WgWxqztrNooG92RXvxSTWv",
                  "their_label": "Bob",
                  "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                  "their_role": "requester",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "accept_connection_request",
          "originalEndpointId": "connection.accept_connection_request",
          "name": "Accept a stored connection request",
          "path": {
            "pathParameters": [
              {
                "description": "Connection identifier",
                "key": "conn_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/connections/"
              },
              {
                "type": "pathParameter",
                "value": "conn_id"
              },
              {
                "type": "literal",
                "value": "/accept-request"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "My URL endpoint",
              "key": "my_endpoint",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ConnRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/connections/",
              "pathParameters": {
                "conn_id": "foo"
              },
              "queryParameters": {
                "my_endpoint": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "accept": "auto",
                  "alias": "Bob, providing quotes",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "connection_protocol": "connections/1.0",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "No DIDDoc provided; cannot connect to public DID",
                  "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                  "invitation_mode": "once",
                  "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "my_did": "WgWxqztrNooG92RXvxSTWv",
                  "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "rfc23_state": "invitation-sent",
                  "routing_state": "active",
                  "state": "active",
                  "their_did": "WgWxqztrNooG92RXvxSTWv",
                  "their_label": "Bob",
                  "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                  "their_role": "requester",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "accept": "auto",
                  "alias": "Bob, providing quotes",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "connection_protocol": "connections/1.0",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "No DIDDoc provided; cannot connect to public DID",
                  "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                  "invitation_mode": "once",
                  "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "my_did": "WgWxqztrNooG92RXvxSTWv",
                  "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "rfc23_state": "invitation-sent",
                  "routing_state": "active",
                  "state": "active",
                  "their_did": "WgWxqztrNooG92RXvxSTWv",
                  "their_label": "Bob",
                  "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                  "their_role": "requester",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_connection_endpoint",
          "originalEndpointId": "connection.get_connection_endpoint",
          "name": "Fetch connection remote endpoint",
          "path": {
            "pathParameters": [
              {
                "description": "Connection identifier",
                "key": "conn_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/connections/"
              },
              {
                "type": "pathParameter",
                "value": "conn_id"
              },
              {
                "type": "literal",
                "value": "/endpoints"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "EndpointsResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/connections/",
              "pathParameters": {
                "conn_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "my_endpoint": "https://myhost:8021",
                  "their_endpoint": "https://myhost:8021"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "my_endpoint": "https://myhost:8021",
                  "their_endpoint": "https://myhost:8021"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "set_inbound_connection",
          "originalEndpointId": "connection.set_inbound_connection",
          "name": "Assign another connection as the inbound connection",
          "path": {
            "pathParameters": [
              {
                "description": "Connection identifier",
                "key": "conn_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Inbound connection identifier",
                "key": "ref_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/connections/"
              },
              {
                "type": "pathParameter",
                "value": "conn_id"
              },
              {
                "type": "literal",
                "value": "/establish-inbound/"
              },
              {
                "type": "pathParameter",
                "value": "ref_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ConnectionModuleResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/connections/",
              "pathParameters": {
                "conn_id": "foo",
                "ref_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_connection_metadata",
          "originalEndpointId": "connection.get_connection_metadata",
          "name": "Fetch connection metadata",
          "path": {
            "pathParameters": [
              {
                "description": "Connection identifier",
                "key": "conn_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/connections/"
              },
              {
                "type": "pathParameter",
                "value": "conn_id"
              },
              {
                "type": "literal",
                "value": "/metadata"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Key to retrieve.",
              "key": "key",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ConnectionMetadata"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/connections/",
              "pathParameters": {
                "conn_id": "foo"
              },
              "queryParameters": {
                "key": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": {}
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": {}
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "set_connection_metadata",
          "originalEndpointId": "connection.set_connection_metadata",
          "name": "Set connection metadata",
          "path": {
            "pathParameters": [
              {
                "description": "Connection identifier",
                "key": "conn_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/connections/"
              },
              {
                "type": "pathParameter",
                "value": "conn_id"
              },
              {
                "type": "literal",
                "value": "/metadata"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ConnectionMetadataSetRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ConnectionMetadata"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/connections/",
              "pathParameters": {
                "conn_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "metadata": {}
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "metadata": {}
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": {}
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": {}
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "basicmessage": {
      "subpackageId": "basicmessage",
      "name": "basicmessage",
      "endpoints": [
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_message",
          "originalEndpointId": "basicmessage.send_message",
          "name": "Send a basic message to a connection",
          "path": {
            "pathParameters": [
              {
                "description": "Connection identifier",
                "key": "conn_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/connections/"
              },
              {
                "type": "pathParameter",
                "value": "conn_id"
              },
              {
                "type": "literal",
                "value": "/send-message"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "SendMessage"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BasicMessageModuleResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/connections/",
              "pathParameters": {
                "conn_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "content": "Hello"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "content": "Hello"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "trustping": {
      "subpackageId": "trustping",
      "name": "trustping",
      "endpoints": [
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_ping",
          "originalEndpointId": "trustping.send_ping",
          "name": "Send a trust ping to a connection",
          "path": {
            "pathParameters": [
              {
                "description": "Connection identifier",
                "key": "conn_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/connections/"
              },
              {
                "type": "pathParameter",
                "value": "conn_id"
              },
              {
                "type": "literal",
                "value": "/send-ping"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "PingRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "PingRequestResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/connections/",
              "pathParameters": {
                "conn_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "comment": "comment"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "comment": "comment"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "thread_id": "thread_id"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "thread_id": "thread_id"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "introduction": {
      "subpackageId": "introduction",
      "name": "introduction",
      "endpoints": [
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "start_connection_introduction",
          "originalEndpointId": "introduction.start_connection_introduction",
          "name": "Start an introduction between two connections",
          "path": {
            "pathParameters": [
              {
                "description": "Connection identifier",
                "key": "conn_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/connections/"
              },
              {
                "type": "pathParameter",
                "value": "conn_id"
              },
              {
                "type": "literal",
                "value": "/start-introduction"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Target connection identifier",
              "key": "target_connection_id",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "description": "Message",
              "key": "message",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "IntroModuleResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/connections/",
              "pathParameters": {
                "conn_id": "foo"
              },
              "queryParameters": {
                "target_connection_id": "foo",
                "message": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "credential-definition": {
      "subpackageId": "credential-definition",
      "name": "credential-definition",
      "endpoints": [
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "publish_credential_definition",
          "originalEndpointId": "credential-definition.publish_credential_definition",
          "name": "Sends a credential definition to the ledger",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/credential-definitions"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Connection identifier",
              "key": "conn_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Create Transaction For Endorser's signature",
              "key": "create_transaction_for_endorser",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          ],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "CredentialDefinitionSendRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TxnOrCredentialDefinitionSendResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/credential-definitions",
              "pathParameters": {},
              "queryParameters": {
                "conn_id": "foo",
                "create_transaction_for_endorser": true
              },
              "headers": {},
              "requestBody": {
                "revocation_registry_size": 1000,
                "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                "support_revocation": true,
                "tag": "default"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "revocation_registry_size": 1000,
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "support_revocation": true,
                  "tag": "default"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "sent": {
                    "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "sent": {
                    "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_created_cred_defs",
          "originalEndpointId": "credential-definition.get_created_cred_defs",
          "name": "Search for matching credential definitions that agent originated",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/credential-definitions/created"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Credential definition id",
              "key": "cred_def_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                  }
                }
              }
            },
            {
              "description": "Issuer DID",
              "key": "issuer_did",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                  }
                }
              }
            },
            {
              "description": "Schema identifier",
              "key": "schema_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
                  }
                }
              }
            },
            {
              "description": "Schema issuer DID",
              "key": "schema_issuer_did",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                  }
                }
              }
            },
            {
              "description": "Schema name",
              "key": "schema_name",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Schema version",
              "key": "schema_version",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[0-9.]+$"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "CredentialDefinitionsCreatedResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/credential-definitions/created",
              "pathParameters": {},
              "queryParameters": {
                "cred_def_id": "foo",
                "issuer_did": "foo",
                "schema_id": "foo",
                "schema_issuer_did": "foo",
                "schema_name": "foo",
                "schema_version": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "credential_definition_ids": [
                    "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                    "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "credential_definition_ids": [
                    "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                    "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_credential_definition",
          "originalEndpointId": "credential-definition.get_credential_definition",
          "name": "Gets a credential definition from the ledger",
          "path": {
            "pathParameters": [
              {
                "description": "Credential definition identifier",
                "key": "cred_def_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/credential-definitions/"
              },
              {
                "type": "pathParameter",
                "value": "cred_def_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "CredentialDefinitionGetResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/credential-definitions/",
              "pathParameters": {
                "cred_def_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "credential_definition": {
                    "id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                    "schemaId": "20",
                    "tag": "tag",
                    "type": "CL",
                    "ver": "1.0"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "credential_definition": {
                    "id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                    "schemaId": "20",
                    "tag": "tag",
                    "type": "CL",
                    "ver": "1.0"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "write_credential_definition",
          "originalEndpointId": "credential-definition.write_credential_definition",
          "name": "Writes a credential definition non-secret record to the wallet",
          "path": {
            "pathParameters": [
              {
                "description": "Credential definition identifier",
                "key": "cred_def_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/credential-definitions/"
              },
              {
                "type": "pathParameter",
                "value": "cred_def_id"
              },
              {
                "type": "literal",
                "value": "/write_record"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "CredentialDefinitionGetResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/credential-definitions/",
              "pathParameters": {
                "cred_def_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "credential_definition": {
                    "id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                    "schemaId": "20",
                    "tag": "tag",
                    "type": "CL",
                    "ver": "1.0"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "credential_definition": {
                    "id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                    "schemaId": "20",
                    "tag": "tag",
                    "type": "CL",
                    "ver": "1.0"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "credentials": {
      "subpackageId": "credentials",
      "name": "credentials",
      "endpoints": [
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_credential_mime_types",
          "originalEndpointId": "credentials.get_credential_mime_types",
          "name": "Get attribute MIME types from wallet",
          "path": {
            "pathParameters": [
              {
                "description": "Credential identifier",
                "key": "credential_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/credential/mime-types/"
              },
              {
                "type": "pathParameter",
                "value": "credential_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "AttributeMimeTypesResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/credential/mime-types/",
              "pathParameters": {
                "credential_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": {
                    "key": "results"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": {
                    "key": "results"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_revocation_status",
          "originalEndpointId": "credentials.get_revocation_status",
          "name": "Query credential revocation status by id",
          "path": {
            "pathParameters": [
              {
                "description": "Credential identifier",
                "key": "credential_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/credential/revoked/"
              },
              {
                "type": "pathParameter",
                "value": "credential_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Earliest epoch of revocation status interval of interest",
              "key": "from",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[0-9]*$"
                  }
                }
              }
            },
            {
              "description": "Latest epoch of revocation status interval of interest",
              "key": "to",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[0-9]*$"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "CredRevokedResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/credential/revoked/",
              "pathParameters": {
                "credential_id": "foo"
              },
              "queryParameters": {
                "from": "foo",
                "to": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "revoked": true
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "revoked": true
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_w3c_credential",
          "originalEndpointId": "credentials.get_w3c_credential",
          "name": "Fetch W3C credential from wallet by id",
          "path": {
            "pathParameters": [
              {
                "description": "Credential identifier",
                "key": "credential_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/credential/w3c/"
              },
              {
                "type": "pathParameter",
                "value": "credential_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "VCRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/credential/w3c/",
              "pathParameters": {
                "credential_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "contexts": [
                    "https://myhost:8021",
                    "https://myhost:8021"
                  ],
                  "cred_tags": {
                    "key": "cred_tags"
                  },
                  "cred_value": {},
                  "expanded_types": [
                    "https://w3id.org/citizenship#PermanentResidentCard",
                    "https://w3id.org/citizenship#PermanentResidentCard"
                  ],
                  "given_id": "http://example.edu/credentials/3732",
                  "issuer_id": "https://example.edu/issuers/14",
                  "proof_types": [
                    "Ed25519Signature2018",
                    "Ed25519Signature2018"
                  ],
                  "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "schema_ids": [
                    "https://example.org/examples/degree.json",
                    "https://example.org/examples/degree.json"
                  ],
                  "subject_ids": [
                    "did:example:ebfeb1f712ebc6f1c276e12ec21",
                    "did:example:ebfeb1f712ebc6f1c276e12ec21"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "contexts": [
                    "https://myhost:8021",
                    "https://myhost:8021"
                  ],
                  "cred_tags": {
                    "key": "cred_tags"
                  },
                  "cred_value": {},
                  "expanded_types": [
                    "https://w3id.org/citizenship#PermanentResidentCard",
                    "https://w3id.org/citizenship#PermanentResidentCard"
                  ],
                  "given_id": "http://example.edu/credentials/3732",
                  "issuer_id": "https://example.edu/issuers/14",
                  "proof_types": [
                    "Ed25519Signature2018",
                    "Ed25519Signature2018"
                  ],
                  "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "schema_ids": [
                    "https://example.org/examples/degree.json",
                    "https://example.org/examples/degree.json"
                  ],
                  "subject_ids": [
                    "did:example:ebfeb1f712ebc6f1c276e12ec21",
                    "did:example:ebfeb1f712ebc6f1c276e12ec21"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "DELETE",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "delete_w3c_credential",
          "originalEndpointId": "credentials.delete_w3c_credential",
          "name": "Remove W3C credential from wallet by id",
          "path": {
            "pathParameters": [
              {
                "description": "Credential identifier",
                "key": "credential_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/credential/w3c/"
              },
              {
                "type": "pathParameter",
                "value": "credential_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "HolderModuleResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/credential/w3c/",
              "pathParameters": {
                "credential_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_credential_record",
          "originalEndpointId": "credentials.get_credential_record",
          "name": "Fetch credential from wallet by id",
          "path": {
            "pathParameters": [
              {
                "description": "Credential identifier",
                "key": "credential_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/credential/"
              },
              {
                "type": "pathParameter",
                "value": "credential_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "IndyCredInfo"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/credential/",
              "pathParameters": {
                "credential_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "attrs": {
                    "key": "alice"
                  },
                  "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "cred_rev_id": "12345",
                  "referent": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "attrs": {
                    "key": "alice"
                  },
                  "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "cred_rev_id": "12345",
                  "referent": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "DELETE",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "delete_credential_record",
          "originalEndpointId": "credentials.delete_credential_record",
          "name": "Remove credential from wallet by id",
          "path": {
            "pathParameters": [
              {
                "description": "Credential identifier",
                "key": "credential_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/credential/"
              },
              {
                "type": "pathParameter",
                "value": "credential_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "HolderModuleResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/credential/",
              "pathParameters": {
                "credential_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_credentials",
          "originalEndpointId": "credentials.get_credentials",
          "name": "Fetch credentials from wallet",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/credentials"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Maximum number to retrieve",
              "key": "count",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[1-9][0-9]*$"
                  }
                }
              }
            },
            {
              "description": "Start index",
              "key": "start",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[0-9]*$"
                  }
                }
              }
            },
            {
              "description": "(JSON) WQL query",
              "key": "wql",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^{.*}$"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "CredInfoList"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/credentials",
              "pathParameters": {},
              "queryParameters": {
                "count": "foo",
                "start": "foo",
                "wql": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "attrs": {
                        "key": "alice"
                      },
                      "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                      "cred_rev_id": "12345",
                      "referent": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                      "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                    },
                    {
                      "attrs": {
                        "key": "alice"
                      },
                      "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                      "cred_rev_id": "12345",
                      "referent": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                      "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "attrs": {
                        "key": "alice"
                      },
                      "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                      "cred_rev_id": "12345",
                      "referent": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                      "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                    },
                    {
                      "attrs": {
                        "key": "alice"
                      },
                      "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                      "cred_rev_id": "12345",
                      "referent": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                      "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_w3c_credentials",
          "originalEndpointId": "credentials.get_w3c_credentials",
          "name": "Fetch W3C credentials from wallet",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/credentials/w3c"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Maximum number to retrieve",
              "key": "count",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[1-9][0-9]*$"
                  }
                }
              }
            },
            {
              "description": "Start index",
              "key": "start",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[0-9]*$"
                  }
                }
              }
            },
            {
              "description": "(JSON) WQL query",
              "key": "wql",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^{.*}$"
                  }
                }
              }
            }
          ],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "W3CCredentialsListRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "VCRecordList"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/credentials/w3c",
              "pathParameters": {},
              "queryParameters": {
                "count": "foo",
                "start": "foo",
                "wql": "foo"
              },
              "headers": {},
              "requestBody": {
                "contexts": [
                  "https://myhost:8021",
                  "https://myhost:8021"
                ],
                "given_id": "given_id",
                "issuer_id": "issuer_id",
                "max_results": 0,
                "proof_types": [
                  "Ed25519Signature2018",
                  "Ed25519Signature2018"
                ],
                "schema_ids": [
                  "https://myhost:8021",
                  "https://myhost:8021"
                ],
                "subject_ids": [
                  "subject_ids",
                  "subject_ids"
                ],
                "tag_query": {
                  "key": "tag_query"
                },
                "types": [
                  "https://myhost:8021",
                  "https://myhost:8021"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "contexts": [
                    "https://myhost:8021",
                    "https://myhost:8021"
                  ],
                  "given_id": "given_id",
                  "issuer_id": "issuer_id",
                  "max_results": 0,
                  "proof_types": [
                    "Ed25519Signature2018",
                    "Ed25519Signature2018"
                  ],
                  "schema_ids": [
                    "https://myhost:8021",
                    "https://myhost:8021"
                  ],
                  "subject_ids": [
                    "subject_ids",
                    "subject_ids"
                  ],
                  "tag_query": {
                    "key": "tag_query"
                  },
                  "types": [
                    "https://myhost:8021",
                    "https://myhost:8021"
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "contexts": [
                        "https://myhost:8021",
                        "https://myhost:8021"
                      ],
                      "cred_tags": {
                        "key": "cred_tags"
                      },
                      "cred_value": {},
                      "expanded_types": [
                        "https://w3id.org/citizenship#PermanentResidentCard",
                        "https://w3id.org/citizenship#PermanentResidentCard"
                      ],
                      "given_id": "http://example.edu/credentials/3732",
                      "issuer_id": "https://example.edu/issuers/14",
                      "proof_types": [
                        "Ed25519Signature2018",
                        "Ed25519Signature2018"
                      ],
                      "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "schema_ids": [
                        "https://example.org/examples/degree.json",
                        "https://example.org/examples/degree.json"
                      ],
                      "subject_ids": [
                        "did:example:ebfeb1f712ebc6f1c276e12ec21",
                        "did:example:ebfeb1f712ebc6f1c276e12ec21"
                      ]
                    },
                    {
                      "contexts": [
                        "https://myhost:8021",
                        "https://myhost:8021"
                      ],
                      "cred_tags": {
                        "key": "cred_tags"
                      },
                      "cred_value": {},
                      "expanded_types": [
                        "https://w3id.org/citizenship#PermanentResidentCard",
                        "https://w3id.org/citizenship#PermanentResidentCard"
                      ],
                      "given_id": "http://example.edu/credentials/3732",
                      "issuer_id": "https://example.edu/issuers/14",
                      "proof_types": [
                        "Ed25519Signature2018",
                        "Ed25519Signature2018"
                      ],
                      "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "schema_ids": [
                        "https://example.org/examples/degree.json",
                        "https://example.org/examples/degree.json"
                      ],
                      "subject_ids": [
                        "did:example:ebfeb1f712ebc6f1c276e12ec21",
                        "did:example:ebfeb1f712ebc6f1c276e12ec21"
                      ]
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "contexts": [
                        "https://myhost:8021",
                        "https://myhost:8021"
                      ],
                      "cred_tags": {
                        "key": "cred_tags"
                      },
                      "cred_value": {},
                      "expanded_types": [
                        "https://w3id.org/citizenship#PermanentResidentCard",
                        "https://w3id.org/citizenship#PermanentResidentCard"
                      ],
                      "given_id": "http://example.edu/credentials/3732",
                      "issuer_id": "https://example.edu/issuers/14",
                      "proof_types": [
                        "Ed25519Signature2018",
                        "Ed25519Signature2018"
                      ],
                      "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "schema_ids": [
                        "https://example.org/examples/degree.json",
                        "https://example.org/examples/degree.json"
                      ],
                      "subject_ids": [
                        "did:example:ebfeb1f712ebc6f1c276e12ec21",
                        "did:example:ebfeb1f712ebc6f1c276e12ec21"
                      ]
                    },
                    {
                      "contexts": [
                        "https://myhost:8021",
                        "https://myhost:8021"
                      ],
                      "cred_tags": {
                        "key": "cred_tags"
                      },
                      "cred_value": {},
                      "expanded_types": [
                        "https://w3id.org/citizenship#PermanentResidentCard",
                        "https://w3id.org/citizenship#PermanentResidentCard"
                      ],
                      "given_id": "http://example.edu/credentials/3732",
                      "issuer_id": "https://example.edu/issuers/14",
                      "proof_types": [
                        "Ed25519Signature2018",
                        "Ed25519Signature2018"
                      ],
                      "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "schema_ids": [
                        "https://example.org/examples/degree.json",
                        "https://example.org/examples/degree.json"
                      ],
                      "subject_ids": [
                        "did:example:ebfeb1f712ebc6f1c276e12ec21",
                        "did:example:ebfeb1f712ebc6f1c276e12ec21"
                      ]
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "did-exchange": {
      "subpackageId": "did-exchange",
      "name": "did-exchange",
      "endpoints": [
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "create_didex_request",
          "originalEndpointId": "did-exchange.create_didex_request",
          "name": "Create and send a request against public DID's implicit invitation",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/didexchange/create-request"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Qualified public DID to which to request connection",
              "key": "their_public_did",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$|^did:([a-zA-Z0-9_]+):([a-zA-Z0-9_.%-]+(:[a-zA-Z0-9_.%-]+)*)((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(\\/[^#?]*)?([?][^#]*)?(\\#.*)?$$"
                }
              }
            },
            {
              "description": "Alias for connection",
              "key": "alias",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Identifier for active mediation record to be used",
              "key": "mediation_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            },
            {
              "description": "My URL endpoint",
              "key": "my_endpoint",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
                  }
                }
              }
            },
            {
              "description": "Label for connection request",
              "key": "my_label",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Use public DID for this connection",
              "key": "use_public_did",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ConnRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/didexchange/create-request",
              "pathParameters": {},
              "queryParameters": {
                "their_public_did": "foo",
                "alias": "foo",
                "mediation_id": "foo",
                "my_endpoint": "foo",
                "my_label": "foo",
                "use_public_did": true
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "accept": "auto",
                  "alias": "Bob, providing quotes",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "connection_protocol": "connections/1.0",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "No DIDDoc provided; cannot connect to public DID",
                  "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                  "invitation_mode": "once",
                  "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "my_did": "WgWxqztrNooG92RXvxSTWv",
                  "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "rfc23_state": "invitation-sent",
                  "routing_state": "active",
                  "state": "active",
                  "their_did": "WgWxqztrNooG92RXvxSTWv",
                  "their_label": "Bob",
                  "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                  "their_role": "requester",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "accept": "auto",
                  "alias": "Bob, providing quotes",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "connection_protocol": "connections/1.0",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "No DIDDoc provided; cannot connect to public DID",
                  "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                  "invitation_mode": "once",
                  "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "my_did": "WgWxqztrNooG92RXvxSTWv",
                  "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "rfc23_state": "invitation-sent",
                  "routing_state": "active",
                  "state": "active",
                  "their_did": "WgWxqztrNooG92RXvxSTWv",
                  "their_label": "Bob",
                  "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                  "their_role": "requester",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "receive_didex_request",
          "originalEndpointId": "did-exchange.receive_didex_request",
          "name": "Receive request against public DID's implicit invitation",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/didexchange/receive-request"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Alias for connection",
              "key": "alias",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Auto-accept connection (defaults to configuration)",
              "key": "auto_accept",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "description": "Identifier for active mediation record to be used",
              "key": "mediation_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            },
            {
              "description": "My URL endpoint",
              "key": "my_endpoint",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
                  }
                }
              }
            }
          ],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "DIDXRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ConnRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/didexchange/receive-request",
              "pathParameters": {},
              "queryParameters": {
                "alias": "foo",
                "auto_accept": true,
                "mediation_id": "foo",
                "my_endpoint": "foo"
              },
              "headers": {},
              "requestBody": {
                "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "@type": "https://didcomm.org/my-family/1.0/my-message-type",
                "did": "WgWxqztrNooG92RXvxSTWv",
                "label": "Request to connect with Bob"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "@type": "https://didcomm.org/my-family/1.0/my-message-type",
                  "did": "WgWxqztrNooG92RXvxSTWv",
                  "label": "Request to connect with Bob"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "accept": "auto",
                  "alias": "Bob, providing quotes",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "connection_protocol": "connections/1.0",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "No DIDDoc provided; cannot connect to public DID",
                  "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                  "invitation_mode": "once",
                  "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "my_did": "WgWxqztrNooG92RXvxSTWv",
                  "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "rfc23_state": "invitation-sent",
                  "routing_state": "active",
                  "state": "active",
                  "their_did": "WgWxqztrNooG92RXvxSTWv",
                  "their_label": "Bob",
                  "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                  "their_role": "requester",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "accept": "auto",
                  "alias": "Bob, providing quotes",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "connection_protocol": "connections/1.0",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "No DIDDoc provided; cannot connect to public DID",
                  "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                  "invitation_mode": "once",
                  "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "my_did": "WgWxqztrNooG92RXvxSTWv",
                  "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "rfc23_state": "invitation-sent",
                  "routing_state": "active",
                  "state": "active",
                  "their_did": "WgWxqztrNooG92RXvxSTWv",
                  "their_label": "Bob",
                  "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                  "their_role": "requester",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "accept_didex_invitation",
          "originalEndpointId": "did-exchange.accept_didex_invitation",
          "name": "Accept a stored connection invitation",
          "path": {
            "pathParameters": [
              {
                "description": "Connection identifier",
                "key": "conn_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/didexchange/"
              },
              {
                "type": "pathParameter",
                "value": "conn_id"
              },
              {
                "type": "literal",
                "value": "/accept-invitation"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "My URL endpoint",
              "key": "my_endpoint",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
                  }
                }
              }
            },
            {
              "description": "Label for connection request",
              "key": "my_label",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ConnRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/didexchange/",
              "pathParameters": {
                "conn_id": "foo"
              },
              "queryParameters": {
                "my_endpoint": "foo",
                "my_label": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "accept": "auto",
                  "alias": "Bob, providing quotes",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "connection_protocol": "connections/1.0",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "No DIDDoc provided; cannot connect to public DID",
                  "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                  "invitation_mode": "once",
                  "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "my_did": "WgWxqztrNooG92RXvxSTWv",
                  "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "rfc23_state": "invitation-sent",
                  "routing_state": "active",
                  "state": "active",
                  "their_did": "WgWxqztrNooG92RXvxSTWv",
                  "their_label": "Bob",
                  "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                  "their_role": "requester",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "accept": "auto",
                  "alias": "Bob, providing quotes",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "connection_protocol": "connections/1.0",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "No DIDDoc provided; cannot connect to public DID",
                  "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                  "invitation_mode": "once",
                  "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "my_did": "WgWxqztrNooG92RXvxSTWv",
                  "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "rfc23_state": "invitation-sent",
                  "routing_state": "active",
                  "state": "active",
                  "their_did": "WgWxqztrNooG92RXvxSTWv",
                  "their_label": "Bob",
                  "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                  "their_role": "requester",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "accept_didex_request",
          "originalEndpointId": "did-exchange.accept_didex_request",
          "name": "Accept a stored connection request",
          "path": {
            "pathParameters": [
              {
                "description": "Connection identifier",
                "key": "conn_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/didexchange/"
              },
              {
                "type": "pathParameter",
                "value": "conn_id"
              },
              {
                "type": "literal",
                "value": "/accept-request"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Identifier for active mediation record to be used",
              "key": "mediation_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            },
            {
              "description": "My URL endpoint",
              "key": "my_endpoint",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[A-Za-z0-9\\.\\-\\+]+://([A-Za-z0-9][.A-Za-z0-9-_]+[A-Za-z0-9])+(:[1-9][0-9]*)?(/[^?&#]+)?$"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ConnRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/didexchange/",
              "pathParameters": {
                "conn_id": "foo"
              },
              "queryParameters": {
                "mediation_id": "foo",
                "my_endpoint": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "accept": "auto",
                  "alias": "Bob, providing quotes",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "connection_protocol": "connections/1.0",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "No DIDDoc provided; cannot connect to public DID",
                  "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                  "invitation_mode": "once",
                  "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "my_did": "WgWxqztrNooG92RXvxSTWv",
                  "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "rfc23_state": "invitation-sent",
                  "routing_state": "active",
                  "state": "active",
                  "their_did": "WgWxqztrNooG92RXvxSTWv",
                  "their_label": "Bob",
                  "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                  "their_role": "requester",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "accept": "auto",
                  "alias": "Bob, providing quotes",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "connection_protocol": "connections/1.0",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "No DIDDoc provided; cannot connect to public DID",
                  "inbound_connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation_key": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                  "invitation_mode": "once",
                  "invitation_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "my_did": "WgWxqztrNooG92RXvxSTWv",
                  "request_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "rfc23_state": "invitation-sent",
                  "routing_state": "active",
                  "state": "active",
                  "their_did": "WgWxqztrNooG92RXvxSTWv",
                  "their_label": "Bob",
                  "their_public_did": "2cpBmR3FqGKWi5EyUbpRY8",
                  "their_role": "requester",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "discover-features v2.0": {
      "subpackageId": "discover-features v2.0",
      "name": "discover-features v2.0",
      "endpoints": [
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_v20_features_queries",
          "originalEndpointId": "discover-features v2.0.get_v20_features_queries",
          "name": "Query supported features",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/discover-features-2.0/queries"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Connection identifier, if none specified, then the query will provide features for this agent.",
              "key": "connection_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Goal-code feature-type query",
              "key": "query_goal_code",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Protocol feature-type query",
              "key": "query_protocol",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20DiscoveryExchangeResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/discover-features-2.0/queries",
              "pathParameters": {},
              "queryParameters": {
                "connection_id": "foo",
                "query_goal_code": "foo",
                "query_protocol": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_v20_feature_records",
          "originalEndpointId": "discover-features v2.0.get_v20_feature_records",
          "name": "Discover Features v2.0 records",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/discover-features-2.0/records"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Connection identifier",
              "key": "connection_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20DiscoveryExchangeListResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/discover-features-2.0/records",
              "pathParameters": {},
              "queryParameters": {
                "connection_id": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {},
                    {}
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {},
                    {}
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "discover-features": {
      "subpackageId": "discover-features",
      "name": "discover-features",
      "endpoints": [
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_v10_features_query",
          "originalEndpointId": "discover-features.get_v10_features_query",
          "name": "Query supported features",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/discover-features/query"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Comment",
              "key": "comment",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Connection identifier, if none specified, then the query will provide features for this agent.",
              "key": "connection_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Protocol feature query",
              "key": "query",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10DiscoveryRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/discover-features/query",
              "pathParameters": {},
              "queryParameters": {
                "comment": "foo",
                "connection_id": "foo",
                "query": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "discovery_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "state": "active",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "discovery_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "state": "active",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_v10_feature_records",
          "originalEndpointId": "discover-features.get_v10_feature_records",
          "name": "Discover Features records",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/discover-features/records"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Connection identifier",
              "key": "connection_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10DiscoveryExchangeListResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/discover-features/records",
              "pathParameters": {},
              "queryParameters": {
                "connection_id": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {},
                    {}
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {},
                    {}
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "issue-credential v2.0": {
      "subpackageId": "issue-credential v2.0",
      "name": "issue-credential v2.0",
      "endpoints": [
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "create_credential_record",
          "originalEndpointId": "issue-credential v2.0.create_credential_record",
          "name": "Create a credential record without sending (generally for use with Out-Of-Band)",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential-2.0/create"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V20IssueCredSchemaCore"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20CredExRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential-2.0/create",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "auto_remove": true,
                "comment": "comment",
                "credential_preview": {
                  "@type": "issue-credential/2.0/credential-preview",
                  "attributes": [
                    {
                      "mime-type": "image/jpeg",
                      "name": "favourite_drink",
                      "value": "martini"
                    },
                    {
                      "mime-type": "image/jpeg",
                      "name": "favourite_drink",
                      "value": "martini"
                    }
                  ]
                },
                "filter": {},
                "trace": true
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "auto_remove": true,
                  "comment": "comment",
                  "credential_preview": {
                    "@type": "issue-credential/2.0/credential-preview",
                    "attributes": [
                      {
                        "mime-type": "image/jpeg",
                        "name": "favourite_drink",
                        "value": "martini"
                      },
                      {
                        "mime-type": "image/jpeg",
                        "name": "favourite_drink",
                        "value": "martini"
                      }
                    ]
                  },
                  "filter": {},
                  "trace": true
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "error_msg": "The front fell off",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "issuer",
                  "state": "done",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "error_msg": "The front fell off",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "issuer",
                  "state": "done",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "create_free_credential_offer",
          "originalEndpointId": "issue-credential v2.0.create_free_credential_offer",
          "name": "Create a credential offer, independent of any proposal or connection",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential-2.0/create-offer"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V20CredOfferConnFreeRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20CredExRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential-2.0/create-offer",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "auto_issue": true,
                "auto_remove": true,
                "comment": "comment",
                "credential_preview": {
                  "@type": "issue-credential/2.0/credential-preview",
                  "attributes": [
                    {
                      "mime-type": "image/jpeg",
                      "name": "favourite_drink",
                      "value": "martini"
                    },
                    {
                      "mime-type": "image/jpeg",
                      "name": "favourite_drink",
                      "value": "martini"
                    }
                  ]
                },
                "filter": {},
                "trace": true
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "auto_issue": true,
                  "auto_remove": true,
                  "comment": "comment",
                  "credential_preview": {
                    "@type": "issue-credential/2.0/credential-preview",
                    "attributes": [
                      {
                        "mime-type": "image/jpeg",
                        "name": "favourite_drink",
                        "value": "martini"
                      },
                      {
                        "mime-type": "image/jpeg",
                        "name": "favourite_drink",
                        "value": "martini"
                      }
                    ]
                  },
                  "filter": {},
                  "trace": true
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "error_msg": "The front fell off",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "issuer",
                  "state": "done",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "error_msg": "The front fell off",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "issuer",
                  "state": "done",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_matching_cred_ex_records-v2",
          "originalEndpointId": "issue-credential v2.0.get_matching_cred_ex_records-v2",
          "name": "Fetch all credential exchange records",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential-2.0/records"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Connection identifier",
              "key": "connection_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            },
            {
              "description": "Role assigned in credential exchange",
              "key": "role",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssueCredential20RecordsGetParametersSchema"
                }
              }
            },
            {
              "description": "Credential exchange state",
              "key": "state",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssueCredential20RecordsGetParametersSchema"
                }
              }
            },
            {
              "description": "Thread identifier",
              "key": "thread_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20CredExRecordListResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential-2.0/records",
              "pathParameters": {},
              "queryParameters": {
                "connection_id": "foo",
                "role": "issuer",
                "state": "proposal-sent",
                "thread_id": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "indy": {
                        "created_at": "2021-12-31 23:59:59+00:00",
                        "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "cred_ex_indy_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "cred_request_metadata": {},
                        "cred_rev_id": "12345",
                        "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                        "state": "active",
                        "updated_at": "2021-12-31 23:59:59+00:00"
                      },
                      "ld_proof": {
                        "created_at": "2021-12-31 23:59:59+00:00",
                        "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "cred_ex_ld_proof_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "state": "active",
                        "updated_at": "2021-12-31 23:59:59+00:00"
                      }
                    },
                    {
                      "indy": {
                        "created_at": "2021-12-31 23:59:59+00:00",
                        "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "cred_ex_indy_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "cred_request_metadata": {},
                        "cred_rev_id": "12345",
                        "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                        "state": "active",
                        "updated_at": "2021-12-31 23:59:59+00:00"
                      },
                      "ld_proof": {
                        "created_at": "2021-12-31 23:59:59+00:00",
                        "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "cred_ex_ld_proof_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "state": "active",
                        "updated_at": "2021-12-31 23:59:59+00:00"
                      }
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "indy": {
                        "created_at": "2021-12-31 23:59:59+00:00",
                        "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "cred_ex_indy_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "cred_request_metadata": {},
                        "cred_rev_id": "12345",
                        "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                        "state": "active",
                        "updated_at": "2021-12-31 23:59:59+00:00"
                      },
                      "ld_proof": {
                        "created_at": "2021-12-31 23:59:59+00:00",
                        "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "cred_ex_ld_proof_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "state": "active",
                        "updated_at": "2021-12-31 23:59:59+00:00"
                      }
                    },
                    {
                      "indy": {
                        "created_at": "2021-12-31 23:59:59+00:00",
                        "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "cred_ex_indy_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "cred_request_metadata": {},
                        "cred_rev_id": "12345",
                        "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                        "state": "active",
                        "updated_at": "2021-12-31 23:59:59+00:00"
                      },
                      "ld_proof": {
                        "created_at": "2021-12-31 23:59:59+00:00",
                        "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "cred_ex_ld_proof_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                        "state": "active",
                        "updated_at": "2021-12-31 23:59:59+00:00"
                      }
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_cred_ex_record",
          "originalEndpointId": "issue-credential v2.0.get_cred_ex_record",
          "name": "Fetch a single credential exchange record",
          "path": {
            "pathParameters": [
              {
                "description": "Credential exchange identifier",
                "key": "cred_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential-2.0/records/"
              },
              {
                "type": "pathParameter",
                "value": "cred_ex_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20CredExRecordDetail"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential-2.0/records/",
              "pathParameters": {
                "cred_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "indy": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_ex_indy_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_request_metadata": {},
                    "cred_rev_id": "12345",
                    "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "state": "active",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  },
                  "ld_proof": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_ex_ld_proof_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "state": "active",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "indy": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_ex_indy_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_request_metadata": {},
                    "cred_rev_id": "12345",
                    "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "state": "active",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  },
                  "ld_proof": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_ex_ld_proof_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "state": "active",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "DELETE",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "delete_cred_ex_record",
          "originalEndpointId": "issue-credential v2.0.delete_cred_ex_record",
          "name": "Remove an existing credential exchange record",
          "path": {
            "pathParameters": [
              {
                "description": "Credential exchange identifier",
                "key": "cred_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential-2.0/records/"
              },
              {
                "type": "pathParameter",
                "value": "cred_ex_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20IssueCredentialModuleResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential-2.0/records/",
              "pathParameters": {
                "cred_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "issue_credential_to_holder",
          "originalEndpointId": "issue-credential v2.0.issue_credential_to_holder",
          "name": "Send holder a credential",
          "path": {
            "pathParameters": [
              {
                "description": "Credential exchange identifier",
                "key": "cred_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential-2.0/records/"
              },
              {
                "type": "pathParameter",
                "value": "cred_ex_id"
              },
              {
                "type": "literal",
                "value": "/issue"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V20CredIssueRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20CredExRecordDetail"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential-2.0/records/",
              "pathParameters": {
                "cred_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "comment": "comment"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "comment": "comment"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "indy": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_ex_indy_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_request_metadata": {},
                    "cred_rev_id": "12345",
                    "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "state": "active",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  },
                  "ld_proof": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_ex_ld_proof_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "state": "active",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "indy": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_ex_indy_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_request_metadata": {},
                    "cred_rev_id": "12345",
                    "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "state": "active",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  },
                  "ld_proof": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_ex_ld_proof_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "state": "active",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "report_cred_ex_problem",
          "originalEndpointId": "issue-credential v2.0.report_cred_ex_problem",
          "name": "Send a problem report for credential exchange",
          "path": {
            "pathParameters": [
              {
                "description": "Credential exchange identifier",
                "key": "cred_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential-2.0/records/"
              },
              {
                "type": "pathParameter",
                "value": "cred_ex_id"
              },
              {
                "type": "literal",
                "value": "/problem-report"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V20CredIssueProblemReportRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20IssueCredentialModuleResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential-2.0/records/",
              "pathParameters": {
                "cred_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "description": "description"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "description": "description"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_credential_offer",
          "originalEndpointId": "issue-credential v2.0.send_credential_offer",
          "name": "Send holder a credential offer in reference to a proposal with preview",
          "path": {
            "pathParameters": [
              {
                "description": "Credential exchange identifier",
                "key": "cred_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential-2.0/records/"
              },
              {
                "type": "pathParameter",
                "value": "cred_ex_id"
              },
              {
                "type": "literal",
                "value": "/send-offer"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V20CredBoundOfferRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20CredExRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential-2.0/records/",
              "pathParameters": {
                "cred_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "error_msg": "The front fell off",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "issuer",
                  "state": "done",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "error_msg": "The front fell off",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "issuer",
                  "state": "done",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_credential_request",
          "originalEndpointId": "issue-credential v2.0.send_credential_request",
          "name": "Send issuer a credential request",
          "path": {
            "pathParameters": [
              {
                "description": "Credential exchange identifier",
                "key": "cred_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential-2.0/records/"
              },
              {
                "type": "pathParameter",
                "value": "cred_ex_id"
              },
              {
                "type": "literal",
                "value": "/send-request"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V20CredRequestRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20CredExRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential-2.0/records/",
              "pathParameters": {
                "cred_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "holder_did": "did:key:ahsdkjahsdkjhaskjdhakjshdkajhsdkjahs"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "holder_did": "did:key:ahsdkjahsdkjhaskjdhakjshdkajhsdkjahs"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "error_msg": "The front fell off",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "issuer",
                  "state": "done",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "error_msg": "The front fell off",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "issuer",
                  "state": "done",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "store_received_credential",
          "originalEndpointId": "issue-credential v2.0.store_received_credential",
          "name": "Store a received credential",
          "path": {
            "pathParameters": [
              {
                "description": "Credential exchange identifier",
                "key": "cred_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential-2.0/records/"
              },
              {
                "type": "pathParameter",
                "value": "cred_ex_id"
              },
              {
                "type": "literal",
                "value": "/store"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V20CredStoreRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20CredExRecordDetail"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential-2.0/records/",
              "pathParameters": {
                "cred_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "credential_id": "credential_id"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "credential_id": "credential_id"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "indy": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_ex_indy_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_request_metadata": {},
                    "cred_rev_id": "12345",
                    "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "state": "active",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  },
                  "ld_proof": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_ex_ld_proof_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "state": "active",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "indy": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_ex_indy_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_request_metadata": {},
                    "cred_rev_id": "12345",
                    "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "state": "active",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  },
                  "ld_proof": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_ex_ld_proof_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_id_stored": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "state": "active",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_free_credential",
          "originalEndpointId": "issue-credential v2.0.send_free_credential",
          "name": "Send holder a credential, automating entire flow",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential-2.0/send"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V20CredExFree"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20CredExRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential-2.0/send",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "auto_remove": true,
                "comment": "comment",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "credential_preview": {
                  "@type": "issue-credential/2.0/credential-preview",
                  "attributes": [
                    {
                      "mime-type": "image/jpeg",
                      "name": "favourite_drink",
                      "value": "martini"
                    },
                    {
                      "mime-type": "image/jpeg",
                      "name": "favourite_drink",
                      "value": "martini"
                    }
                  ]
                },
                "filter": {},
                "trace": true,
                "verification_method": "verification_method"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "auto_remove": true,
                  "comment": "comment",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_preview": {
                    "@type": "issue-credential/2.0/credential-preview",
                    "attributes": [
                      {
                        "mime-type": "image/jpeg",
                        "name": "favourite_drink",
                        "value": "martini"
                      },
                      {
                        "mime-type": "image/jpeg",
                        "name": "favourite_drink",
                        "value": "martini"
                      }
                    ]
                  },
                  "filter": {},
                  "trace": true,
                  "verification_method": "verification_method"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "error_msg": "The front fell off",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "issuer",
                  "state": "done",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "error_msg": "The front fell off",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "issuer",
                  "state": "done",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_free_credential_offer",
          "originalEndpointId": "issue-credential v2.0.send_free_credential_offer",
          "name": "Send holder a credential offer, independent of any proposal",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential-2.0/send-offer"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V20CredOfferRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20CredExRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential-2.0/send-offer",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "auto_issue": true,
                "auto_remove": true,
                "comment": "comment",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "credential_preview": {
                  "@type": "issue-credential/2.0/credential-preview",
                  "attributes": [
                    {
                      "mime-type": "image/jpeg",
                      "name": "favourite_drink",
                      "value": "martini"
                    },
                    {
                      "mime-type": "image/jpeg",
                      "name": "favourite_drink",
                      "value": "martini"
                    }
                  ]
                },
                "filter": {},
                "trace": true
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "auto_issue": true,
                  "auto_remove": true,
                  "comment": "comment",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_preview": {
                    "@type": "issue-credential/2.0/credential-preview",
                    "attributes": [
                      {
                        "mime-type": "image/jpeg",
                        "name": "favourite_drink",
                        "value": "martini"
                      },
                      {
                        "mime-type": "image/jpeg",
                        "name": "favourite_drink",
                        "value": "martini"
                      }
                    ]
                  },
                  "filter": {},
                  "trace": true
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "error_msg": "The front fell off",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "issuer",
                  "state": "done",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "error_msg": "The front fell off",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "issuer",
                  "state": "done",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_free_credential_proposal",
          "originalEndpointId": "issue-credential v2.0.send_free_credential_proposal",
          "name": "Send issuer a credential proposal",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential-2.0/send-proposal"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V20CredExFree"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20CredExRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential-2.0/send-proposal",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "auto_remove": true,
                "comment": "comment",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "credential_preview": {
                  "@type": "issue-credential/2.0/credential-preview",
                  "attributes": [
                    {
                      "mime-type": "image/jpeg",
                      "name": "favourite_drink",
                      "value": "martini"
                    },
                    {
                      "mime-type": "image/jpeg",
                      "name": "favourite_drink",
                      "value": "martini"
                    }
                  ]
                },
                "filter": {},
                "trace": true,
                "verification_method": "verification_method"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "auto_remove": true,
                  "comment": "comment",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_preview": {
                    "@type": "issue-credential/2.0/credential-preview",
                    "attributes": [
                      {
                        "mime-type": "image/jpeg",
                        "name": "favourite_drink",
                        "value": "martini"
                      },
                      {
                        "mime-type": "image/jpeg",
                        "name": "favourite_drink",
                        "value": "martini"
                      }
                    ]
                  },
                  "filter": {},
                  "trace": true,
                  "verification_method": "verification_method"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "error_msg": "The front fell off",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "issuer",
                  "state": "done",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "error_msg": "The front fell off",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "issuer",
                  "state": "done",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_free_credential_request",
          "originalEndpointId": "issue-credential v2.0.send_free_credential_request",
          "name": "Send issuer a credential request not bound to an existing thread. Indy credentials cannot start at a request",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential-2.0/send-request"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V20CredRequestFree"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20CredExRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential-2.0/send-request",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "auto_remove": true,
                "comment": "comment",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "filter": {},
                "holder_did": "did:key:ahsdkjahsdkjhaskjdhakjshdkajhsdkjahs",
                "trace": false
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "auto_remove": true,
                  "comment": "comment",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "filter": {},
                  "holder_did": "did:key:ahsdkjahsdkjhaskjdhakjshdkajhsdkjahs",
                  "trace": false
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "error_msg": "The front fell off",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "issuer",
                  "state": "done",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "error_msg": "The front fell off",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "issuer",
                  "state": "done",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "issue-credential v1.0": {
      "subpackageId": "issue-credential v1.0",
      "name": "issue-credential v1.0",
      "endpoints": [
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "create_credential_record",
          "originalEndpointId": "issue-credential v1.0.create_credential_record",
          "name": "Create a credential record without sending (generally for use with Out-Of-Band)",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential/create"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V10CredentialCreate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10CredentialExchange"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential/create",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "auto_remove": true,
                "comment": "comment",
                "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                "credential_proposal": {
                  "@type": "issue-credential/1.0/credential-preview",
                  "attributes": [
                    {
                      "mime-type": "image/jpeg",
                      "name": "favourite_drink",
                      "value": "martini"
                    },
                    {
                      "mime-type": "image/jpeg",
                      "name": "favourite_drink",
                      "value": "martini"
                    }
                  ]
                },
                "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                "schema_issuer_did": "WgWxqztrNooG92RXvxSTWv",
                "schema_name": "preferences",
                "schema_version": "1.0",
                "trace": true
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "auto_remove": true,
                  "comment": "comment",
                  "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_proposal": {
                    "@type": "issue-credential/1.0/credential-preview",
                    "attributes": [
                      {
                        "mime-type": "image/jpeg",
                        "name": "favourite_drink",
                        "value": "martini"
                      },
                      {
                        "mime-type": "image/jpeg",
                        "name": "favourite_drink",
                        "value": "martini"
                      }
                    ]
                  },
                  "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "schema_issuer_did": "WgWxqztrNooG92RXvxSTWv",
                  "schema_name": "preferences",
                  "schema_version": "1.0",
                  "trace": true
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_request_metadata": {},
                  "error_msg": "Credential definition identifier is not set in proposal",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "revoc_reg_id": "revoc_reg_id",
                  "revocation_id": "revocation_id",
                  "role": "issuer",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "state": "credential_acked",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_request_metadata": {},
                  "error_msg": "Credential definition identifier is not set in proposal",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "revoc_reg_id": "revoc_reg_id",
                  "revocation_id": "revocation_id",
                  "role": "issuer",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "state": "credential_acked",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "create_free_credential_offer",
          "originalEndpointId": "issue-credential v1.0.create_free_credential_offer",
          "name": "Create a credential offer, independent of any proposal or connection",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential/create-offer"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V10CredentialConnFreeOfferRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10CredentialExchange"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential/create-offer",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "auto_issue": true,
                "auto_remove": true,
                "comment": "comment",
                "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                "credential_preview": {
                  "@type": "issue-credential/1.0/credential-preview",
                  "attributes": [
                    {
                      "mime-type": "image/jpeg",
                      "name": "favourite_drink",
                      "value": "martini"
                    },
                    {
                      "mime-type": "image/jpeg",
                      "name": "favourite_drink",
                      "value": "martini"
                    }
                  ]
                },
                "trace": true
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "auto_issue": true,
                  "auto_remove": true,
                  "comment": "comment",
                  "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_preview": {
                    "@type": "issue-credential/1.0/credential-preview",
                    "attributes": [
                      {
                        "mime-type": "image/jpeg",
                        "name": "favourite_drink",
                        "value": "martini"
                      },
                      {
                        "mime-type": "image/jpeg",
                        "name": "favourite_drink",
                        "value": "martini"
                      }
                    ]
                  },
                  "trace": true
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_request_metadata": {},
                  "error_msg": "Credential definition identifier is not set in proposal",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "revoc_reg_id": "revoc_reg_id",
                  "revocation_id": "revocation_id",
                  "role": "issuer",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "state": "credential_acked",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_request_metadata": {},
                  "error_msg": "Credential definition identifier is not set in proposal",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "revoc_reg_id": "revoc_reg_id",
                  "revocation_id": "revocation_id",
                  "role": "issuer",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "state": "credential_acked",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_matching_cred_ex_records",
          "originalEndpointId": "issue-credential v1.0.get_matching_cred_ex_records",
          "name": "Fetch all credential exchange records",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential/records"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Connection identifier",
              "key": "connection_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            },
            {
              "description": "Role assigned in credential exchange",
              "key": "role",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssueCredentialRecordsGetParametersSchema"
                }
              }
            },
            {
              "description": "Credential exchange state",
              "key": "state",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "IssueCredentialRecordsGetParametersSchema"
                }
              }
            },
            {
              "description": "Thread identifier",
              "key": "thread_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10CredentialExchangeListResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential/records",
              "pathParameters": {},
              "queryParameters": {
                "connection_id": "foo",
                "role": "issuer",
                "state": "proposal_sent",
                "thread_id": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "auto_issue": false,
                      "auto_offer": false,
                      "auto_remove": false,
                      "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                      "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "credential_request_metadata": {},
                      "error_msg": "Credential definition identifier is not set in proposal",
                      "initiator": "self",
                      "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "revoc_reg_id": "revoc_reg_id",
                      "revocation_id": "revocation_id",
                      "role": "issuer",
                      "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                      "state": "credential_acked",
                      "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "trace": true,
                      "updated_at": "2021-12-31 23:59:59+00:00"
                    },
                    {
                      "auto_issue": false,
                      "auto_offer": false,
                      "auto_remove": false,
                      "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                      "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "credential_request_metadata": {},
                      "error_msg": "Credential definition identifier is not set in proposal",
                      "initiator": "self",
                      "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "revoc_reg_id": "revoc_reg_id",
                      "revocation_id": "revocation_id",
                      "role": "issuer",
                      "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                      "state": "credential_acked",
                      "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "trace": true,
                      "updated_at": "2021-12-31 23:59:59+00:00"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "auto_issue": false,
                      "auto_offer": false,
                      "auto_remove": false,
                      "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                      "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "credential_request_metadata": {},
                      "error_msg": "Credential definition identifier is not set in proposal",
                      "initiator": "self",
                      "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "revoc_reg_id": "revoc_reg_id",
                      "revocation_id": "revocation_id",
                      "role": "issuer",
                      "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                      "state": "credential_acked",
                      "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "trace": true,
                      "updated_at": "2021-12-31 23:59:59+00:00"
                    },
                    {
                      "auto_issue": false,
                      "auto_offer": false,
                      "auto_remove": false,
                      "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                      "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "credential_request_metadata": {},
                      "error_msg": "Credential definition identifier is not set in proposal",
                      "initiator": "self",
                      "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "revoc_reg_id": "revoc_reg_id",
                      "revocation_id": "revocation_id",
                      "role": "issuer",
                      "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                      "state": "credential_acked",
                      "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "trace": true,
                      "updated_at": "2021-12-31 23:59:59+00:00"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_cred_ex_record",
          "originalEndpointId": "issue-credential v1.0.get_cred_ex_record",
          "name": "Fetch a single credential exchange record",
          "path": {
            "pathParameters": [
              {
                "description": "Credential exchange identifier",
                "key": "cred_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential/records/"
              },
              {
                "type": "pathParameter",
                "value": "cred_ex_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10CredentialExchange"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential/records/",
              "pathParameters": {
                "cred_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_request_metadata": {},
                  "error_msg": "Credential definition identifier is not set in proposal",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "revoc_reg_id": "revoc_reg_id",
                  "revocation_id": "revocation_id",
                  "role": "issuer",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "state": "credential_acked",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_request_metadata": {},
                  "error_msg": "Credential definition identifier is not set in proposal",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "revoc_reg_id": "revoc_reg_id",
                  "revocation_id": "revocation_id",
                  "role": "issuer",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "state": "credential_acked",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "DELETE",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "delete_cred_ex_record",
          "originalEndpointId": "issue-credential v1.0.delete_cred_ex_record",
          "name": "Remove an existing credential exchange record",
          "path": {
            "pathParameters": [
              {
                "description": "Credential exchange identifier",
                "key": "cred_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential/records/"
              },
              {
                "type": "pathParameter",
                "value": "cred_ex_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "IssueCredentialModuleResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential/records/",
              "pathParameters": {
                "cred_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "issue_credential_to_holder",
          "originalEndpointId": "issue-credential v1.0.issue_credential_to_holder",
          "name": "Send holder a credential",
          "path": {
            "pathParameters": [
              {
                "description": "Credential exchange identifier",
                "key": "cred_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential/records/"
              },
              {
                "type": "pathParameter",
                "value": "cred_ex_id"
              },
              {
                "type": "literal",
                "value": "/issue"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V10CredentialIssueRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10CredentialExchange"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential/records/",
              "pathParameters": {
                "cred_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "comment": "comment"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "comment": "comment"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_request_metadata": {},
                  "error_msg": "Credential definition identifier is not set in proposal",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "revoc_reg_id": "revoc_reg_id",
                  "revocation_id": "revocation_id",
                  "role": "issuer",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "state": "credential_acked",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_request_metadata": {},
                  "error_msg": "Credential definition identifier is not set in proposal",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "revoc_reg_id": "revoc_reg_id",
                  "revocation_id": "revocation_id",
                  "role": "issuer",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "state": "credential_acked",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "report_cred_ex_problem",
          "originalEndpointId": "issue-credential v1.0.report_cred_ex_problem",
          "name": "Send a problem report for credential exchange",
          "path": {
            "pathParameters": [
              {
                "description": "Credential exchange identifier",
                "key": "cred_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential/records/"
              },
              {
                "type": "pathParameter",
                "value": "cred_ex_id"
              },
              {
                "type": "literal",
                "value": "/problem-report"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V10CredentialProblemReportRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "IssueCredentialModuleResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential/records/",
              "pathParameters": {
                "cred_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "description": "description"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "description": "description"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_credential_offer",
          "originalEndpointId": "issue-credential v1.0.send_credential_offer",
          "name": "Send holder a credential offer in reference to a proposal with preview",
          "path": {
            "pathParameters": [
              {
                "description": "Credential exchange identifier",
                "key": "cred_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential/records/"
              },
              {
                "type": "pathParameter",
                "value": "cred_ex_id"
              },
              {
                "type": "literal",
                "value": "/send-offer"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V10CredentialBoundOfferRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10CredentialExchange"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential/records/",
              "pathParameters": {
                "cred_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_request_metadata": {},
                  "error_msg": "Credential definition identifier is not set in proposal",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "revoc_reg_id": "revoc_reg_id",
                  "revocation_id": "revocation_id",
                  "role": "issuer",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "state": "credential_acked",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_request_metadata": {},
                  "error_msg": "Credential definition identifier is not set in proposal",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "revoc_reg_id": "revoc_reg_id",
                  "revocation_id": "revocation_id",
                  "role": "issuer",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "state": "credential_acked",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_credential_request",
          "originalEndpointId": "issue-credential v1.0.send_credential_request",
          "name": "Send issuer a credential request",
          "path": {
            "pathParameters": [
              {
                "description": "Credential exchange identifier",
                "key": "cred_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential/records/"
              },
              {
                "type": "pathParameter",
                "value": "cred_ex_id"
              },
              {
                "type": "literal",
                "value": "/send-request"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10CredentialExchange"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential/records/",
              "pathParameters": {
                "cred_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_request_metadata": {},
                  "error_msg": "Credential definition identifier is not set in proposal",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "revoc_reg_id": "revoc_reg_id",
                  "revocation_id": "revocation_id",
                  "role": "issuer",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "state": "credential_acked",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_request_metadata": {},
                  "error_msg": "Credential definition identifier is not set in proposal",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "revoc_reg_id": "revoc_reg_id",
                  "revocation_id": "revocation_id",
                  "role": "issuer",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "state": "credential_acked",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "store_received_credential",
          "originalEndpointId": "issue-credential v1.0.store_received_credential",
          "name": "Store a received credential",
          "path": {
            "pathParameters": [
              {
                "description": "Credential exchange identifier",
                "key": "cred_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential/records/"
              },
              {
                "type": "pathParameter",
                "value": "cred_ex_id"
              },
              {
                "type": "literal",
                "value": "/store"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V10CredentialStoreRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10CredentialExchange"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential/records/",
              "pathParameters": {
                "cred_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "credential_id": "credential_id"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "credential_id": "credential_id"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_request_metadata": {},
                  "error_msg": "Credential definition identifier is not set in proposal",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "revoc_reg_id": "revoc_reg_id",
                  "revocation_id": "revocation_id",
                  "role": "issuer",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "state": "credential_acked",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_request_metadata": {},
                  "error_msg": "Credential definition identifier is not set in proposal",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "revoc_reg_id": "revoc_reg_id",
                  "revocation_id": "revocation_id",
                  "role": "issuer",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "state": "credential_acked",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_free_credential",
          "originalEndpointId": "issue-credential v1.0.send_free_credential",
          "name": "Send holder a credential, automating entire flow",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential/send"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V10CredentialProposalRequestMand"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10CredentialExchange"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential/send",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "auto_remove": true,
                "comment": "comment",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                "credential_proposal": {
                  "@type": "issue-credential/1.0/credential-preview",
                  "attributes": [
                    {
                      "mime-type": "image/jpeg",
                      "name": "favourite_drink",
                      "value": "martini"
                    },
                    {
                      "mime-type": "image/jpeg",
                      "name": "favourite_drink",
                      "value": "martini"
                    }
                  ]
                },
                "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                "schema_issuer_did": "WgWxqztrNooG92RXvxSTWv",
                "schema_name": "preferences",
                "schema_version": "1.0",
                "trace": true
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "auto_remove": true,
                  "comment": "comment",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_proposal": {
                    "@type": "issue-credential/1.0/credential-preview",
                    "attributes": [
                      {
                        "mime-type": "image/jpeg",
                        "name": "favourite_drink",
                        "value": "martini"
                      },
                      {
                        "mime-type": "image/jpeg",
                        "name": "favourite_drink",
                        "value": "martini"
                      }
                    ]
                  },
                  "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "schema_issuer_did": "WgWxqztrNooG92RXvxSTWv",
                  "schema_name": "preferences",
                  "schema_version": "1.0",
                  "trace": true
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_request_metadata": {},
                  "error_msg": "Credential definition identifier is not set in proposal",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "revoc_reg_id": "revoc_reg_id",
                  "revocation_id": "revocation_id",
                  "role": "issuer",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "state": "credential_acked",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_request_metadata": {},
                  "error_msg": "Credential definition identifier is not set in proposal",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "revoc_reg_id": "revoc_reg_id",
                  "revocation_id": "revocation_id",
                  "role": "issuer",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "state": "credential_acked",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_free_credential_offer",
          "originalEndpointId": "issue-credential v1.0.send_free_credential_offer",
          "name": "Send holder a credential offer, independent of any proposal",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential/send-offer"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V10CredentialFreeOfferRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10CredentialExchange"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential/send-offer",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "auto_issue": true,
                "auto_remove": true,
                "comment": "comment",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                "credential_preview": {
                  "@type": "issue-credential/1.0/credential-preview",
                  "attributes": [
                    {
                      "mime-type": "image/jpeg",
                      "name": "favourite_drink",
                      "value": "martini"
                    },
                    {
                      "mime-type": "image/jpeg",
                      "name": "favourite_drink",
                      "value": "martini"
                    }
                  ]
                },
                "trace": true
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "auto_issue": true,
                  "auto_remove": true,
                  "comment": "comment",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_preview": {
                    "@type": "issue-credential/1.0/credential-preview",
                    "attributes": [
                      {
                        "mime-type": "image/jpeg",
                        "name": "favourite_drink",
                        "value": "martini"
                      },
                      {
                        "mime-type": "image/jpeg",
                        "name": "favourite_drink",
                        "value": "martini"
                      }
                    ]
                  },
                  "trace": true
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_request_metadata": {},
                  "error_msg": "Credential definition identifier is not set in proposal",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "revoc_reg_id": "revoc_reg_id",
                  "revocation_id": "revocation_id",
                  "role": "issuer",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "state": "credential_acked",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_request_metadata": {},
                  "error_msg": "Credential definition identifier is not set in proposal",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "revoc_reg_id": "revoc_reg_id",
                  "revocation_id": "revocation_id",
                  "role": "issuer",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "state": "credential_acked",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_free_credential_proposal",
          "originalEndpointId": "issue-credential v1.0.send_free_credential_proposal",
          "name": "Send issuer a credential proposal",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/issue-credential/send-proposal"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V10CredentialProposalRequestOpt"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10CredentialExchange"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/issue-credential/send-proposal",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "auto_remove": true,
                "comment": "comment",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                "credential_proposal": {
                  "@type": "issue-credential/1.0/credential-preview",
                  "attributes": [
                    {
                      "mime-type": "image/jpeg",
                      "name": "favourite_drink",
                      "value": "martini"
                    },
                    {
                      "mime-type": "image/jpeg",
                      "name": "favourite_drink",
                      "value": "martini"
                    }
                  ]
                },
                "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                "schema_issuer_did": "WgWxqztrNooG92RXvxSTWv",
                "schema_name": "preferences",
                "schema_version": "1.0",
                "trace": true
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "auto_remove": true,
                  "comment": "comment",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_proposal": {
                    "@type": "issue-credential/1.0/credential-preview",
                    "attributes": [
                      {
                        "mime-type": "image/jpeg",
                        "name": "favourite_drink",
                        "value": "martini"
                      },
                      {
                        "mime-type": "image/jpeg",
                        "name": "favourite_drink",
                        "value": "martini"
                      }
                    ]
                  },
                  "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "schema_issuer_did": "WgWxqztrNooG92RXvxSTWv",
                  "schema_name": "preferences",
                  "schema_version": "1.0",
                  "trace": true
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_request_metadata": {},
                  "error_msg": "Credential definition identifier is not set in proposal",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "revoc_reg_id": "revoc_reg_id",
                  "revocation_id": "revocation_id",
                  "role": "issuer",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "state": "credential_acked",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_issue": false,
                  "auto_offer": false,
                  "auto_remove": false,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "credential_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "credential_request_metadata": {},
                  "error_msg": "Credential definition identifier is not set in proposal",
                  "initiator": "self",
                  "parent_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "revoc_reg_id": "revoc_reg_id",
                  "revocation_id": "revocation_id",
                  "role": "issuer",
                  "schema_id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                  "state": "credential_acked",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "jsonld": {
      "subpackageId": "jsonld",
      "name": "jsonld",
      "endpoints": [
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "sign",
          "originalEndpointId": "jsonld.sign",
          "name": "Sign a JSON-LD structure and return it",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/jsonld/sign"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "SignRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "SignResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/jsonld/sign",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "doc": {
                  "credential": {},
                  "options": {}
                },
                "verkey": "verkey"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "doc": {
                    "credential": {},
                    "options": {}
                  },
                  "verkey": "verkey"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "error": "error",
                  "signed_doc": {}
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "error": "error",
                  "signed_doc": {}
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "verify",
          "originalEndpointId": "jsonld.verify",
          "name": "Verify a JSON-LD structure.",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/jsonld/verify"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "VerifyRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "VerifyResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/jsonld/verify",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "doc": {},
                "verkey": "verkey"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "doc": {},
                  "verkey": "verkey"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "error": "error",
                  "valid": true
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "error": "error",
                  "valid": true
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "ledger": {
      "subpackageId": "ledger",
      "name": "ledger",
      "endpoints": [
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_published_did_endpoint",
          "originalEndpointId": "ledger.get_published_did_endpoint",
          "name": "Get the endpoint for a DID from the ledger.",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/ledger/did-endpoint"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "DID of interest",
              "key": "did",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            },
            {
              "description": "Endpoint type of interest (default 'Endpoint')",
              "key": "endpoint_type",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "LedgerDidEndpointGetParametersSchema"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "GetDIDEndpointResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/ledger/did-endpoint",
              "pathParameters": {},
              "queryParameters": {
                "did": "foo",
                "endpoint_type": "Endpoint"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "endpoint": "https://myhost:8021"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "endpoint": "https://myhost:8021"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_did_verkey",
          "originalEndpointId": "ledger.get_did_verkey",
          "name": "Get the verkey for a DID from the ledger.",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/ledger/did-verkey"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "DID of interest",
              "key": "did",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "GetDIDVerkeyResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/ledger/did-verkey",
              "pathParameters": {},
              "queryParameters": {
                "did": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "verkey": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "verkey": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_did_nym_role",
          "originalEndpointId": "ledger.get_did_nym_role",
          "name": "Get the role from the NYM registration of a public DID.",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/ledger/get-nym-role"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "DID of interest",
              "key": "did",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "GetNymRoleResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/ledger/get-nym-role",
              "pathParameters": {},
              "queryParameters": {
                "did": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "role": "ENDORSER"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "role": "ENDORSER"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_multiple_ledger_config",
          "originalEndpointId": "ledger.get_multiple_ledger_config",
          "name": "Fetch the multiple ledger configuration currently in use",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/ledger/multiple/config"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "LedgerConfigList"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/ledger/multiple/config",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "ledger_config_list": [
                    {
                      "genesis_file": "genesis_file",
                      "genesis_transactions": "genesis_transactions",
                      "genesis_url": "genesis_url",
                      "id": "id",
                      "is_production": true
                    },
                    {
                      "genesis_file": "genesis_file",
                      "genesis_transactions": "genesis_transactions",
                      "genesis_url": "genesis_url",
                      "id": "id",
                      "is_production": true
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "ledger_config_list": [
                    {
                      "genesis_file": "genesis_file",
                      "genesis_transactions": "genesis_transactions",
                      "genesis_url": "genesis_url",
                      "id": "id",
                      "is_production": true
                    },
                    {
                      "genesis_file": "genesis_file",
                      "genesis_transactions": "genesis_transactions",
                      "genesis_url": "genesis_url",
                      "id": "id",
                      "is_production": true
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_write_ledger",
          "originalEndpointId": "ledger.get_write_ledger",
          "name": "Fetch the current write ledger",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/ledger/multiple/get-write-ledger"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "WriteLedgerRequest"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/ledger/multiple/get-write-ledger",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "ledger_id": "ledger_id"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "ledger_id": "ledger_id"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "register_nym",
          "originalEndpointId": "ledger.register_nym",
          "name": "Send a NYM registration to the ledger.",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/ledger/register-nym"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "DID to register",
              "key": "did",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            },
            {
              "description": "Verification key",
              "key": "verkey",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
                }
              }
            },
            {
              "description": "Alias",
              "key": "alias",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Connection identifier",
              "key": "conn_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Create Transaction For Endorser's signature",
              "key": "create_transaction_for_endorser",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "description": "Role",
              "key": "role",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "LedgerRegisterNymPostParametersSchema"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TxnOrRegisterLedgerNymResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/ledger/register-nym",
              "pathParameters": {},
              "queryParameters": {
                "did": "foo",
                "verkey": "foo",
                "alias": "foo",
                "conn_id": "foo",
                "create_transaction_for_endorser": true,
                "role": "STEWARD"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "success": true
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "success": true
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "PATCH",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "rotate_public_did_keypair",
          "originalEndpointId": "ledger.rotate_public_did_keypair",
          "name": "Rotate key pair for public DID.",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/ledger/rotate-public-did-keypair"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "LedgerModulesResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/ledger/rotate-public-did-keypair",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_taa",
          "originalEndpointId": "ledger.get_taa",
          "name": "Fetch the current transaction author agreement, if any",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/ledger/taa"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TAAResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/ledger/taa",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "result": {
                    "aml_record": {
                      "aml": {
                        "key": "aml"
                      },
                      "amlContext": "amlContext",
                      "version": "version"
                    },
                    "taa_accepted": {
                      "mechanism": "mechanism",
                      "time": 1640995199
                    },
                    "taa_record": {
                      "digest": "digest",
                      "text": "text",
                      "version": "version"
                    },
                    "taa_required": true
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "result": {
                    "aml_record": {
                      "aml": {
                        "key": "aml"
                      },
                      "amlContext": "amlContext",
                      "version": "version"
                    },
                    "taa_accepted": {
                      "mechanism": "mechanism",
                      "time": 1640995199
                    },
                    "taa_record": {
                      "digest": "digest",
                      "text": "text",
                      "version": "version"
                    },
                    "taa_required": true
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "accept_taa",
          "originalEndpointId": "ledger.accept_taa",
          "name": "Accept the transaction author agreement",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/ledger/taa/accept"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "TAAAccept"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "LedgerModulesResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/ledger/taa/accept",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "mechanism": "mechanism",
                "text": "text",
                "version": "version"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "mechanism": "mechanism",
                  "text": "text",
                  "version": "version"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "mediation": {
      "subpackageId": "mediation",
      "name": "mediation",
      "endpoints": [
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_default_mediator",
          "originalEndpointId": "mediation.get_default_mediator",
          "name": "Get default mediator",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/mediation/default-mediator"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "MediationRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/mediation/default-mediator",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "connection_id": "connection_id",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endpoint": "endpoint",
                  "mediation_id": "mediation_id",
                  "mediator_terms": [
                    "mediator_terms",
                    "mediator_terms"
                  ],
                  "recipient_terms": [
                    "recipient_terms",
                    "recipient_terms"
                  ],
                  "role": "role",
                  "routing_keys": [
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH",
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                  ],
                  "state": "active",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "connection_id": "connection_id",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endpoint": "endpoint",
                  "mediation_id": "mediation_id",
                  "mediator_terms": [
                    "mediator_terms",
                    "mediator_terms"
                  ],
                  "recipient_terms": [
                    "recipient_terms",
                    "recipient_terms"
                  ],
                  "role": "role",
                  "routing_keys": [
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH",
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                  ],
                  "state": "active",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "DELETE",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "clear_default_mediator",
          "originalEndpointId": "mediation.clear_default_mediator",
          "name": "Clear default mediator",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/mediation/default-mediator"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "MediationRecord"
              }
            },
            "statusCode": 201,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/mediation/default-mediator",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 201,
              "responseBody": {
                "type": "json",
                "value": {
                  "connection_id": "connection_id",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endpoint": "endpoint",
                  "mediation_id": "mediation_id",
                  "mediator_terms": [
                    "mediator_terms",
                    "mediator_terms"
                  ],
                  "recipient_terms": [
                    "recipient_terms",
                    "recipient_terms"
                  ],
                  "role": "role",
                  "routing_keys": [
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH",
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                  ],
                  "state": "active",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "connection_id": "connection_id",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endpoint": "endpoint",
                  "mediation_id": "mediation_id",
                  "mediator_terms": [
                    "mediator_terms",
                    "mediator_terms"
                  ],
                  "recipient_terms": [
                    "recipient_terms",
                    "recipient_terms"
                  ],
                  "role": "role",
                  "routing_keys": [
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH",
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                  ],
                  "state": "active",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_keylists",
          "originalEndpointId": "mediation.get_keylists",
          "name": "Retrieve keylists by connection or role",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/mediation/keylists"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Connection identifier (optional)",
              "key": "conn_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            },
            {
              "description": "Filer on role, 'client' for keys         mediated by other agents, 'server' for keys         mediated by this agent",
              "key": "role",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "MediationKeylistsGetParametersSchema"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Keylist"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/mediation/keylists",
              "pathParameters": {},
              "queryParameters": {
                "conn_id": "foo",
                "role": "client"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "connection_id": "connection_id",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "recipient_key": "recipient_key",
                      "record_id": "record_id",
                      "role": "role",
                      "state": "active",
                      "updated_at": "2021-12-31 23:59:59+00:00",
                      "wallet_id": "wallet_id"
                    },
                    {
                      "connection_id": "connection_id",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "recipient_key": "recipient_key",
                      "record_id": "record_id",
                      "role": "role",
                      "state": "active",
                      "updated_at": "2021-12-31 23:59:59+00:00",
                      "wallet_id": "wallet_id"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "connection_id": "connection_id",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "recipient_key": "recipient_key",
                      "record_id": "record_id",
                      "role": "role",
                      "state": "active",
                      "updated_at": "2021-12-31 23:59:59+00:00",
                      "wallet_id": "wallet_id"
                    },
                    {
                      "connection_id": "connection_id",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "recipient_key": "recipient_key",
                      "record_id": "record_id",
                      "role": "role",
                      "state": "active",
                      "updated_at": "2021-12-31 23:59:59+00:00",
                      "wallet_id": "wallet_id"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_keylist_query_to_mediator",
          "originalEndpointId": "mediation.send_keylist_query_to_mediator",
          "name": "Send keylist query to mediator",
          "path": {
            "pathParameters": [
              {
                "description": "Mediation record identifier",
                "key": "mediation_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/mediation/keylists/"
              },
              {
                "type": "pathParameter",
                "value": "mediation_id"
              },
              {
                "type": "literal",
                "value": "/send-keylist-query"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "limit number of results",
              "key": "paginate_limit",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "default": -1
                  }
                }
              }
            },
            {
              "description": "offset to use in pagination",
              "key": "paginate_offset",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "default": 0
                  }
                }
              }
            }
          ],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "KeylistQueryFilterRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "KeylistQuery"
              }
            },
            "statusCode": 201,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/mediation/keylists/",
              "pathParameters": {
                "mediation_id": "foo"
              },
              "queryParameters": {
                "paginate_limit": 42,
                "paginate_offset": 42
              },
              "headers": {},
              "requestBody": {
                "filter": {}
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "filter": {}
                }
              },
              "responseStatusCode": 201,
              "responseBody": {
                "type": "json",
                "value": {
                  "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "@type": "https://didcomm.org/my-family/1.0/my-message-type",
                  "filter": {}
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "@type": "https://didcomm.org/my-family/1.0/my-message-type",
                  "filter": {}
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_keylist_update_to_mediator",
          "originalEndpointId": "mediation.send_keylist_update_to_mediator",
          "name": "Send keylist update to mediator",
          "path": {
            "pathParameters": [
              {
                "description": "Mediation record identifier",
                "key": "mediation_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/mediation/keylists/"
              },
              {
                "type": "pathParameter",
                "value": "mediation_id"
              },
              {
                "type": "literal",
                "value": "/send-keylist-update"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "KeylistUpdateRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "KeylistUpdate"
              }
            },
            "statusCode": 201,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/mediation/keylists/",
              "pathParameters": {
                "mediation_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "updates": [
                  {
                    "action": "add",
                    "recipient_key": "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                  },
                  {
                    "action": "add",
                    "recipient_key": "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                  }
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "updates": [
                    {
                      "action": "add",
                      "recipient_key": "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                    },
                    {
                      "action": "add",
                      "recipient_key": "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                    }
                  ]
                }
              },
              "responseStatusCode": 201,
              "responseBody": {
                "type": "json",
                "value": {
                  "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "@type": "https://didcomm.org/my-family/1.0/my-message-type",
                  "updates": [
                    {
                      "action": "add",
                      "recipient_key": "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                    },
                    {
                      "action": "add",
                      "recipient_key": "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "@type": "https://didcomm.org/my-family/1.0/my-message-type",
                  "updates": [
                    {
                      "action": "add",
                      "recipient_key": "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                    },
                    {
                      "action": "add",
                      "recipient_key": "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "request_mediation_for_connection",
          "originalEndpointId": "mediation.request_mediation_for_connection",
          "name": "Request mediation from connection",
          "path": {
            "pathParameters": [
              {
                "description": "Connection identifier",
                "key": "conn_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/mediation/request/"
              },
              {
                "type": "pathParameter",
                "value": "conn_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "MediationCreateRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "MediationRecord"
              }
            },
            "statusCode": 201,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/mediation/request/",
              "pathParameters": {
                "conn_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "mediator_terms": [
                  "mediator_terms",
                  "mediator_terms"
                ],
                "recipient_terms": [
                  "recipient_terms",
                  "recipient_terms"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "mediator_terms": [
                    "mediator_terms",
                    "mediator_terms"
                  ],
                  "recipient_terms": [
                    "recipient_terms",
                    "recipient_terms"
                  ]
                }
              },
              "responseStatusCode": 201,
              "responseBody": {
                "type": "json",
                "value": {
                  "connection_id": "connection_id",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endpoint": "endpoint",
                  "mediation_id": "mediation_id",
                  "mediator_terms": [
                    "mediator_terms",
                    "mediator_terms"
                  ],
                  "recipient_terms": [
                    "recipient_terms",
                    "recipient_terms"
                  ],
                  "role": "role",
                  "routing_keys": [
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH",
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                  ],
                  "state": "active",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "connection_id": "connection_id",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endpoint": "endpoint",
                  "mediation_id": "mediation_id",
                  "mediator_terms": [
                    "mediator_terms",
                    "mediator_terms"
                  ],
                  "recipient_terms": [
                    "recipient_terms",
                    "recipient_terms"
                  ],
                  "role": "role",
                  "routing_keys": [
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH",
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                  ],
                  "state": "active",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_matching_mediation_records",
          "originalEndpointId": "mediation.get_matching_mediation_records",
          "name": "Query mediation requests, returns list of all mediation records",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/mediation/requests"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Connection identifier (optional)",
              "key": "conn_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            },
            {
              "description": "List of mediator rules for recipient",
              "key": "mediator_terms",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "List of recipient rules for mediation",
              "key": "recipient_terms",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "description": "Mediation state (optional)",
              "key": "state",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "MediationRequestsGetParametersSchema"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "MediationList"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/mediation/requests",
              "pathParameters": {},
              "queryParameters": {
                "conn_id": "foo",
                "mediator_terms": [
                  "foo"
                ],
                "recipient_terms": [
                  "foo"
                ],
                "state": "request"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "connection_id": "connection_id",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "endpoint": "endpoint",
                      "mediation_id": "mediation_id",
                      "mediator_terms": [
                        "mediator_terms",
                        "mediator_terms"
                      ],
                      "recipient_terms": [
                        "recipient_terms",
                        "recipient_terms"
                      ],
                      "role": "role",
                      "routing_keys": [
                        "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH",
                        "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                      ],
                      "state": "active",
                      "updated_at": "2021-12-31 23:59:59+00:00"
                    },
                    {
                      "connection_id": "connection_id",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "endpoint": "endpoint",
                      "mediation_id": "mediation_id",
                      "mediator_terms": [
                        "mediator_terms",
                        "mediator_terms"
                      ],
                      "recipient_terms": [
                        "recipient_terms",
                        "recipient_terms"
                      ],
                      "role": "role",
                      "routing_keys": [
                        "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH",
                        "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                      ],
                      "state": "active",
                      "updated_at": "2021-12-31 23:59:59+00:00"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "connection_id": "connection_id",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "endpoint": "endpoint",
                      "mediation_id": "mediation_id",
                      "mediator_terms": [
                        "mediator_terms",
                        "mediator_terms"
                      ],
                      "recipient_terms": [
                        "recipient_terms",
                        "recipient_terms"
                      ],
                      "role": "role",
                      "routing_keys": [
                        "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH",
                        "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                      ],
                      "state": "active",
                      "updated_at": "2021-12-31 23:59:59+00:00"
                    },
                    {
                      "connection_id": "connection_id",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "endpoint": "endpoint",
                      "mediation_id": "mediation_id",
                      "mediator_terms": [
                        "mediator_terms",
                        "mediator_terms"
                      ],
                      "recipient_terms": [
                        "recipient_terms",
                        "recipient_terms"
                      ],
                      "role": "role",
                      "routing_keys": [
                        "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH",
                        "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                      ],
                      "state": "active",
                      "updated_at": "2021-12-31 23:59:59+00:00"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_mediation_record",
          "originalEndpointId": "mediation.get_mediation_record",
          "name": "Retrieve mediation request record",
          "path": {
            "pathParameters": [
              {
                "description": "Mediation record identifier",
                "key": "mediation_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/mediation/requests/"
              },
              {
                "type": "pathParameter",
                "value": "mediation_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "MediationRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/mediation/requests/",
              "pathParameters": {
                "mediation_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "connection_id": "connection_id",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endpoint": "endpoint",
                  "mediation_id": "mediation_id",
                  "mediator_terms": [
                    "mediator_terms",
                    "mediator_terms"
                  ],
                  "recipient_terms": [
                    "recipient_terms",
                    "recipient_terms"
                  ],
                  "role": "role",
                  "routing_keys": [
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH",
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                  ],
                  "state": "active",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "connection_id": "connection_id",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endpoint": "endpoint",
                  "mediation_id": "mediation_id",
                  "mediator_terms": [
                    "mediator_terms",
                    "mediator_terms"
                  ],
                  "recipient_terms": [
                    "recipient_terms",
                    "recipient_terms"
                  ],
                  "role": "role",
                  "routing_keys": [
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH",
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                  ],
                  "state": "active",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "DELETE",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "delete_mediation_record",
          "originalEndpointId": "mediation.delete_mediation_record",
          "name": "Delete mediation request by ID",
          "path": {
            "pathParameters": [
              {
                "description": "Mediation record identifier",
                "key": "mediation_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/mediation/requests/"
              },
              {
                "type": "pathParameter",
                "value": "mediation_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "MediationRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/mediation/requests/",
              "pathParameters": {
                "mediation_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "connection_id": "connection_id",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endpoint": "endpoint",
                  "mediation_id": "mediation_id",
                  "mediator_terms": [
                    "mediator_terms",
                    "mediator_terms"
                  ],
                  "recipient_terms": [
                    "recipient_terms",
                    "recipient_terms"
                  ],
                  "role": "role",
                  "routing_keys": [
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH",
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                  ],
                  "state": "active",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "connection_id": "connection_id",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endpoint": "endpoint",
                  "mediation_id": "mediation_id",
                  "mediator_terms": [
                    "mediator_terms",
                    "mediator_terms"
                  ],
                  "recipient_terms": [
                    "recipient_terms",
                    "recipient_terms"
                  ],
                  "role": "role",
                  "routing_keys": [
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH",
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                  ],
                  "state": "active",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "deny_mediation_request",
          "originalEndpointId": "mediation.deny_mediation_request",
          "name": "Deny a stored mediation request",
          "path": {
            "pathParameters": [
              {
                "description": "Mediation record identifier",
                "key": "mediation_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/mediation/requests/"
              },
              {
                "type": "pathParameter",
                "value": "mediation_id"
              },
              {
                "type": "literal",
                "value": "/deny"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "AdminMediationDeny"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "MediationDeny"
              }
            },
            "statusCode": 201,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/mediation/requests/",
              "pathParameters": {
                "mediation_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "mediator_terms": [
                  "mediator_terms",
                  "mediator_terms"
                ],
                "recipient_terms": [
                  "recipient_terms",
                  "recipient_terms"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "mediator_terms": [
                    "mediator_terms",
                    "mediator_terms"
                  ],
                  "recipient_terms": [
                    "recipient_terms",
                    "recipient_terms"
                  ]
                }
              },
              "responseStatusCode": 201,
              "responseBody": {
                "type": "json",
                "value": {
                  "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "@type": "https://didcomm.org/my-family/1.0/my-message-type",
                  "mediator_terms": [
                    "mediator_terms",
                    "mediator_terms"
                  ],
                  "recipient_terms": [
                    "recipient_terms",
                    "recipient_terms"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "@type": "https://didcomm.org/my-family/1.0/my-message-type",
                  "mediator_terms": [
                    "mediator_terms",
                    "mediator_terms"
                  ],
                  "recipient_terms": [
                    "recipient_terms",
                    "recipient_terms"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "grant_mediation_request",
          "originalEndpointId": "mediation.grant_mediation_request",
          "name": "Grant received mediation",
          "path": {
            "pathParameters": [
              {
                "description": "Mediation record identifier",
                "key": "mediation_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/mediation/requests/"
              },
              {
                "type": "pathParameter",
                "value": "mediation_id"
              },
              {
                "type": "literal",
                "value": "/grant"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "MediationGrant"
              }
            },
            "statusCode": 201,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/mediation/requests/",
              "pathParameters": {
                "mediation_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 201,
              "responseBody": {
                "type": "json",
                "value": {
                  "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "@type": "https://didcomm.org/my-family/1.0/my-message-type",
                  "endpoint": "http://192.168.56.102:8020/",
                  "routing_keys": [
                    "routing_keys",
                    "routing_keys"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "@type": "https://didcomm.org/my-family/1.0/my-message-type",
                  "endpoint": "http://192.168.56.102:8020/",
                  "routing_keys": [
                    "routing_keys",
                    "routing_keys"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "update_keylist_for_conn_id",
          "originalEndpointId": "mediation.update_keylist_for_conn_id",
          "name": "Update keylist for a connection",
          "path": {
            "pathParameters": [
              {
                "description": "Connection identifier",
                "key": "conn_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/mediation/update-keylist/"
              },
              {
                "type": "pathParameter",
                "value": "conn_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "MediationIdMatchInfo"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "KeylistUpdate"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/mediation/update-keylist/",
              "pathParameters": {
                "conn_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "mediation_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "mediation_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "@type": "https://didcomm.org/my-family/1.0/my-message-type",
                  "updates": [
                    {
                      "action": "add",
                      "recipient_key": "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                    },
                    {
                      "action": "add",
                      "recipient_key": "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "@type": "https://didcomm.org/my-family/1.0/my-message-type",
                  "updates": [
                    {
                      "action": "add",
                      "recipient_key": "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                    },
                    {
                      "action": "add",
                      "recipient_key": "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "PUT",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "set_default_mediator",
          "originalEndpointId": "mediation.set_default_mediator",
          "name": "Set default mediator",
          "path": {
            "pathParameters": [
              {
                "description": "Mediation record identifier",
                "key": "mediation_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/mediation/"
              },
              {
                "type": "pathParameter",
                "value": "mediation_id"
              },
              {
                "type": "literal",
                "value": "/default-mediator"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "MediationRecord"
              }
            },
            "statusCode": 201,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/mediation/",
              "pathParameters": {
                "mediation_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 201,
              "responseBody": {
                "type": "json",
                "value": {
                  "connection_id": "connection_id",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endpoint": "endpoint",
                  "mediation_id": "mediation_id",
                  "mediator_terms": [
                    "mediator_terms",
                    "mediator_terms"
                  ],
                  "recipient_terms": [
                    "recipient_terms",
                    "recipient_terms"
                  ],
                  "role": "role",
                  "routing_keys": [
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH",
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                  ],
                  "state": "active",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "connection_id": "connection_id",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endpoint": "endpoint",
                  "mediation_id": "mediation_id",
                  "mediator_terms": [
                    "mediator_terms",
                    "mediator_terms"
                  ],
                  "recipient_terms": [
                    "recipient_terms",
                    "recipient_terms"
                  ],
                  "role": "role",
                  "routing_keys": [
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH",
                    "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                  ],
                  "state": "active",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "multitenancy": {
      "subpackageId": "multitenancy",
      "name": "multitenancy",
      "endpoints": [
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "create_wallet",
          "originalEndpointId": "multitenancy.create_wallet",
          "name": "Create a subwallet",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/multitenancy/wallet"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "CreateWalletRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "CreateWalletResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/multitenancy/wallet",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "image_url": "https://aries.ca/images/sample.png",
                "key_management_mode": "managed",
                "label": "Alice",
                "wallet_dispatch_type": "default",
                "wallet_key": "MySecretKey123",
                "wallet_key_derivation": "RAW",
                "wallet_name": "MyNewWallet",
                "wallet_type": "indy",
                "wallet_webhook_urls": [
                  "http://localhost:8022/webhooks",
                  "http://localhost:8022/webhooks"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "image_url": "https://aries.ca/images/sample.png",
                  "key_management_mode": "managed",
                  "label": "Alice",
                  "wallet_dispatch_type": "default",
                  "wallet_key": "MySecretKey123",
                  "wallet_key_derivation": "RAW",
                  "wallet_name": "MyNewWallet",
                  "wallet_type": "indy",
                  "wallet_webhook_urls": [
                    "http://localhost:8022/webhooks",
                    "http://localhost:8022/webhooks"
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "key_management_mode": "managed",
                  "settings": {},
                  "state": "active",
                  "token": "eyJhbGciOiJFZERTQSJ9.eyJhIjogIjAifQ.dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk",
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "wallet_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "key_management_mode": "managed",
                  "settings": {},
                  "state": "active",
                  "token": "eyJhbGciOiJFZERTQSJ9.eyJhIjogIjAifQ.dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk",
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "wallet_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_wallet_record",
          "originalEndpointId": "multitenancy.get_wallet_record",
          "name": "Get a single subwallet",
          "path": {
            "pathParameters": [
              {
                "description": "Subwallet identifier",
                "key": "wallet_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/multitenancy/wallet/"
              },
              {
                "type": "pathParameter",
                "value": "wallet_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "WalletRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/multitenancy/wallet/",
              "pathParameters": {
                "wallet_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "key_management_mode": "managed",
                  "settings": {},
                  "state": "active",
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "wallet_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "key_management_mode": "managed",
                  "settings": {},
                  "state": "active",
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "wallet_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "PUT",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "update_wallet",
          "originalEndpointId": "multitenancy.update_wallet",
          "name": "Update a subwallet",
          "path": {
            "pathParameters": [
              {
                "description": "Subwallet identifier",
                "key": "wallet_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/multitenancy/wallet/"
              },
              {
                "type": "pathParameter",
                "value": "wallet_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "UpdateWalletRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "WalletRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/multitenancy/wallet/",
              "pathParameters": {
                "wallet_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "image_url": "https://aries.ca/images/sample.png",
                "label": "Alice",
                "wallet_dispatch_type": "default",
                "wallet_webhook_urls": [
                  "http://localhost:8022/webhooks",
                  "http://localhost:8022/webhooks"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "image_url": "https://aries.ca/images/sample.png",
                  "label": "Alice",
                  "wallet_dispatch_type": "default",
                  "wallet_webhook_urls": [
                    "http://localhost:8022/webhooks",
                    "http://localhost:8022/webhooks"
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "key_management_mode": "managed",
                  "settings": {},
                  "state": "active",
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "wallet_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "key_management_mode": "managed",
                  "settings": {},
                  "state": "active",
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "wallet_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "delete_wallet",
          "originalEndpointId": "multitenancy.delete_wallet",
          "name": "Remove a subwallet",
          "path": {
            "pathParameters": [
              {
                "description": "Subwallet identifier",
                "key": "wallet_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/multitenancy/wallet/"
              },
              {
                "type": "pathParameter",
                "value": "wallet_id"
              },
              {
                "type": "literal",
                "value": "/remove"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "RemoveWalletRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "MultitenantModuleResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/multitenancy/wallet/",
              "pathParameters": {
                "wallet_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "wallet_key": "MySecretKey123"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "wallet_key": "MySecretKey123"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_auth_token",
          "originalEndpointId": "multitenancy.get_auth_token",
          "name": "Get auth token for a subwallet",
          "path": {
            "pathParameters": [
              {
                "key": "wallet_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/multitenancy/wallet/"
              },
              {
                "type": "pathParameter",
                "value": "wallet_id"
              },
              {
                "type": "literal",
                "value": "/token"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "CreateWalletTokenRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "CreateWalletTokenResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/multitenancy/wallet/",
              "pathParameters": {
                "wallet_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "wallet_key": "MySecretKey123"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "wallet_key": "MySecretKey123"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "token": "eyJhbGciOiJFZERTQSJ9.eyJhIjogIjAifQ.dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "token": "eyJhbGciOiJFZERTQSJ9.eyJhIjogIjAifQ.dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_matching_wallets",
          "originalEndpointId": "multitenancy.get_matching_wallets",
          "name": "Query subwallets",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/multitenancy/wallets"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Wallet name",
              "key": "wallet_name",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "WalletList"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/multitenancy/wallets",
              "pathParameters": {},
              "queryParameters": {
                "wallet_name": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "key_management_mode": "managed",
                      "settings": {},
                      "state": "active",
                      "updated_at": "2021-12-31 23:59:59+00:00",
                      "wallet_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                    },
                    {
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "key_management_mode": "managed",
                      "settings": {},
                      "state": "active",
                      "updated_at": "2021-12-31 23:59:59+00:00",
                      "wallet_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "key_management_mode": "managed",
                      "settings": {},
                      "state": "active",
                      "updated_at": "2021-12-31 23:59:59+00:00",
                      "wallet_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                    },
                    {
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "key_management_mode": "managed",
                      "settings": {},
                      "state": "active",
                      "updated_at": "2021-12-31 23:59:59+00:00",
                      "wallet_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "out-of-band": {
      "subpackageId": "out-of-band",
      "name": "out-of-band",
      "endpoints": [
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "create_oob_invitation",
          "originalEndpointId": "out-of-band.create_oob_invitation",
          "name": "Create a new connection invitation",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/out-of-band/create-invitation"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Auto-accept connection (defaults to configuration)",
              "key": "auto_accept",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "description": "Create invitation for multiple use (default false)",
              "key": "multi_use",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          ],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "InvitationCreateRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "InvitationRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/out-of-band/create-invitation",
              "pathParameters": {},
              "queryParameters": {
                "auto_accept": true,
                "multi_use": true
              },
              "headers": {},
              "requestBody": {
                "accept": [
                  "didcomm/aip1",
                  "didcomm/aip2;env=rfc19"
                ],
                "alias": "Barry",
                "attachments": [
                  {
                    "id": "attachment-0",
                    "type": "present-proof"
                  },
                  {
                    "id": "attachment-0",
                    "type": "present-proof"
                  }
                ],
                "handshake_protocols": [
                  "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/didexchange/1.0",
                  "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/didexchange/1.0"
                ],
                "mediation_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "metadata": {},
                "my_label": "Invitation to Barry",
                "protocol_version": "1.1",
                "use_public_did": false
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "accept": [
                    "didcomm/aip1",
                    "didcomm/aip2;env=rfc19"
                  ],
                  "alias": "Barry",
                  "attachments": [
                    {
                      "id": "attachment-0",
                      "type": "present-proof"
                    },
                    {
                      "id": "attachment-0",
                      "type": "present-proof"
                    }
                  ],
                  "handshake_protocols": [
                    "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/didexchange/1.0",
                    "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/didexchange/1.0"
                  ],
                  "mediation_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "metadata": {},
                  "my_label": "Invitation to Barry",
                  "protocol_version": "1.1",
                  "use_public_did": false
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "invi_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation_url": "https://example.com/endpoint?c_i=eyJAdHlwZSI6ICIuLi4iLCAiLi4uIjogIi4uLiJ9XX0=",
                  "oob_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "state": "await_response",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "invi_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation_url": "https://example.com/endpoint?c_i=eyJAdHlwZSI6ICIuLi4iLCAiLi4uIjogIi4uLiJ9XX0=",
                  "oob_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "state": "await_response",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "receive_oob_invitation",
          "originalEndpointId": "out-of-band.receive_oob_invitation",
          "name": "Receive a new connection invitation",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/out-of-band/receive-invitation"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Alias for connection",
              "key": "alias",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Auto-accept connection (defaults to configuration)",
              "key": "auto_accept",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "description": "Identifier for active mediation record to be used",
              "key": "mediation_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            },
            {
              "description": "Use an existing connection, if possible",
              "key": "use_existing_connection",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          ],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "InvitationMessage"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "OobRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/out-of-band/receive-invitation",
              "pathParameters": {},
              "queryParameters": {
                "alias": "foo",
                "auto_accept": true,
                "mediation_id": "foo",
                "use_existing_connection": true
              },
              "headers": {},
              "requestBody": {
                "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "@type": "https://didcomm.org/my-family/1.0/my-message-type",
                "accept": [
                  "didcomm/aip1",
                  "didcomm/aip2;env=rfc19"
                ],
                "handshake_protocols": [
                  "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/didexchange/1.0",
                  "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/didexchange/1.0"
                ],
                "imageUrl": "http://192.168.56.101/img/logo.jpg",
                "label": "Bob",
                "requests~attach": [
                  {
                    "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "byte_count": 1234,
                    "data": {
                      "base64": "ey4uLn0=",
                      "json": "{\"sample\": \"content\"}",
                      "links": [
                        "https://link.to/data",
                        "https://link.to/data"
                      ],
                      "sha256": "617a48c7c8afe0521efdc03e5bb0ad9e655893e6b4b51f0e794d70fba132aacb"
                    },
                    "description": "view from doorway, facing east, with lights off",
                    "filename": "IMG1092348.png",
                    "lastmod_time": "2021-12-31 23:59:59+00:00",
                    "mime-type": "image/png"
                  },
                  {
                    "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "byte_count": 1234,
                    "data": {
                      "base64": "ey4uLn0=",
                      "json": "{\"sample\": \"content\"}",
                      "links": [
                        "https://link.to/data",
                        "https://link.to/data"
                      ],
                      "sha256": "617a48c7c8afe0521efdc03e5bb0ad9e655893e6b4b51f0e794d70fba132aacb"
                    },
                    "description": "view from doorway, facing east, with lights off",
                    "filename": "IMG1092348.png",
                    "lastmod_time": "2021-12-31 23:59:59+00:00",
                    "mime-type": "image/png"
                  }
                ],
                "services": [
                  {
                    "did": "WgWxqztrNooG92RXvxSTWv",
                    "id": "string",
                    "recipientKeys": [
                      "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                    ],
                    "routingKeys": [
                      "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                    ],
                    "serviceEndpoint": "http://192.168.56.101:8020",
                    "type": "string"
                  },
                  "did:sov:WgWxqztrNooG92RXvxSTWv"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "@type": "https://didcomm.org/my-family/1.0/my-message-type",
                  "accept": [
                    "didcomm/aip1",
                    "didcomm/aip2;env=rfc19"
                  ],
                  "handshake_protocols": [
                    "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/didexchange/1.0",
                    "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/didexchange/1.0"
                  ],
                  "imageUrl": "http://192.168.56.101/img/logo.jpg",
                  "label": "Bob",
                  "requests~attach": [
                    {
                      "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "byte_count": 1234,
                      "data": {
                        "base64": "ey4uLn0=",
                        "json": "{\"sample\": \"content\"}",
                        "links": [
                          "https://link.to/data",
                          "https://link.to/data"
                        ],
                        "sha256": "617a48c7c8afe0521efdc03e5bb0ad9e655893e6b4b51f0e794d70fba132aacb"
                      },
                      "description": "view from doorway, facing east, with lights off",
                      "filename": "IMG1092348.png",
                      "lastmod_time": "2021-12-31 23:59:59+00:00",
                      "mime-type": "image/png"
                    },
                    {
                      "@id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "byte_count": 1234,
                      "data": {
                        "base64": "ey4uLn0=",
                        "json": "{\"sample\": \"content\"}",
                        "links": [
                          "https://link.to/data",
                          "https://link.to/data"
                        ],
                        "sha256": "617a48c7c8afe0521efdc03e5bb0ad9e655893e6b4b51f0e794d70fba132aacb"
                      },
                      "description": "view from doorway, facing east, with lights off",
                      "filename": "IMG1092348.png",
                      "lastmod_time": "2021-12-31 23:59:59+00:00",
                      "mime-type": "image/png"
                    }
                  ],
                  "services": [
                    {
                      "did": "WgWxqztrNooG92RXvxSTWv",
                      "id": "string",
                      "recipientKeys": [
                        "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                      ],
                      "routingKeys": [
                        "did:key:z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH"
                      ],
                      "serviceEndpoint": "http://192.168.56.101:8020",
                      "type": "string"
                    },
                    "did:sov:WgWxqztrNooG92RXvxSTWv"
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "attach_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "invi_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation": {},
                  "oob_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "our_recipient_key": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "receiver",
                  "state": "await-response",
                  "their_service": {
                    "recipientKeys": [
                      "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                      "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                    ],
                    "routingKeys": [
                      "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                      "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                    ],
                    "serviceEndpoint": "http://192.168.56.101:8020"
                  },
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "attach_thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "invi_msg_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "invitation": {},
                  "oob_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "our_recipient_key": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "receiver",
                  "state": "await-response",
                  "their_service": {
                    "recipientKeys": [
                      "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                      "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                    ],
                    "routingKeys": [
                      "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                      "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                    ],
                    "serviceEndpoint": "http://192.168.56.101:8020"
                  },
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "server": {
      "subpackageId": "server",
      "name": "server",
      "endpoints": [
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_loaded_plugins",
          "originalEndpointId": "server.get_loaded_plugins",
          "name": "Fetch the list of loaded plugins",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/plugins"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "AdminModules"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/plugins",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "result": [
                    "result",
                    "result"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "result": [
                    "result",
                    "result"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "shutdown_server",
          "originalEndpointId": "server.shutdown_server",
          "name": "Shut down server",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/shutdown"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "AdminShutdown"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/shutdown",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_status",
          "originalEndpointId": "server.get_status",
          "name": "Fetch the server status",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/status"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "AdminStatus"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/status",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "conductor": {},
                  "label": "label",
                  "timing": {},
                  "version": "version"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "conductor": {},
                  "label": "label",
                  "timing": {},
                  "version": "version"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_config",
          "originalEndpointId": "server.get_config",
          "name": "Fetch the server configuration",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/status/config"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "AdminConfig"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/status/config",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "config": {}
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "config": {}
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_liveliness",
          "originalEndpointId": "server.get_liveliness",
          "name": "Liveliness check",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/status/live"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "AdminStatusLiveliness"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/status/live",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "alive": true
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "alive": true
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_readiness",
          "originalEndpointId": "server.get_readiness",
          "name": "Readiness check",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/status/ready"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "AdminStatusReadiness"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/status/ready",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "ready": true
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "ready": true
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "reset_statistics",
          "originalEndpointId": "server.reset_statistics",
          "name": "Reset statistics",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/status/reset"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "AdminReset"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/status/reset",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "present-proof v2.0": {
      "subpackageId": "present-proof v2.0",
      "name": "present-proof v2.0",
      "endpoints": [
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "create_proof_request",
          "originalEndpointId": "present-proof v2.0.create_proof_request",
          "name": "Creates a presentation request not bound to any proposal or connection",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/present-proof-2.0/create-request"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V20PresCreateRequestRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20PresExRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/present-proof-2.0/create-request",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "auto_verify": false,
                "comment": "comment",
                "presentation_request": {},
                "trace": false
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "auto_verify": false,
                  "comment": "comment",
                  "presentation_request": {},
                  "trace": false
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "proposal-sent",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "proposal-sent",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_matching_pres_ex_records-v2",
          "originalEndpointId": "present-proof v2.0.get_matching_pres_ex_records-v2",
          "name": "Fetch all present-proof exchange records",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/present-proof-2.0/records"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Connection identifier",
              "key": "connection_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            },
            {
              "description": "Role assigned in presentation exchange",
              "key": "role",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "PresentProof20RecordsGetParametersSchema"
                }
              }
            },
            {
              "description": "Presentation exchange state",
              "key": "state",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "PresentProof20RecordsGetParametersSchema"
                }
              }
            },
            {
              "description": "Thread identifier",
              "key": "thread_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20PresExRecordList"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/present-proof-2.0/records",
              "pathParameters": {},
              "queryParameters": {
                "connection_id": "foo",
                "role": "prover",
                "state": "proposal-sent",
                "thread_id": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "auto_present": false,
                      "auto_verify": true,
                      "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "error_msg": "Invalid structure",
                      "initiator": "self",
                      "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "role": "prover",
                      "state": "proposal-sent",
                      "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "trace": true,
                      "updated_at": "2021-12-31 23:59:59+00:00",
                      "verified": "true",
                      "verified_msgs": [
                        "verified_msgs",
                        "verified_msgs"
                      ]
                    },
                    {
                      "auto_present": false,
                      "auto_verify": true,
                      "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "error_msg": "Invalid structure",
                      "initiator": "self",
                      "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "role": "prover",
                      "state": "proposal-sent",
                      "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "trace": true,
                      "updated_at": "2021-12-31 23:59:59+00:00",
                      "verified": "true",
                      "verified_msgs": [
                        "verified_msgs",
                        "verified_msgs"
                      ]
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "auto_present": false,
                      "auto_verify": true,
                      "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "error_msg": "Invalid structure",
                      "initiator": "self",
                      "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "role": "prover",
                      "state": "proposal-sent",
                      "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "trace": true,
                      "updated_at": "2021-12-31 23:59:59+00:00",
                      "verified": "true",
                      "verified_msgs": [
                        "verified_msgs",
                        "verified_msgs"
                      ]
                    },
                    {
                      "auto_present": false,
                      "auto_verify": true,
                      "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "error_msg": "Invalid structure",
                      "initiator": "self",
                      "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "role": "prover",
                      "state": "proposal-sent",
                      "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "trace": true,
                      "updated_at": "2021-12-31 23:59:59+00:00",
                      "verified": "true",
                      "verified_msgs": [
                        "verified_msgs",
                        "verified_msgs"
                      ]
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_pres_ex_record",
          "originalEndpointId": "present-proof v2.0.get_pres_ex_record",
          "name": "Fetch a single presentation exchange record",
          "path": {
            "pathParameters": [
              {
                "description": "Presentation exchange identifier",
                "key": "pres_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/present-proof-2.0/records/"
              },
              {
                "type": "pathParameter",
                "value": "pres_ex_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20PresExRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/present-proof-2.0/records/",
              "pathParameters": {
                "pres_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "proposal-sent",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "proposal-sent",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "DELETE",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "delete_pres_ex_record",
          "originalEndpointId": "present-proof v2.0.delete_pres_ex_record",
          "name": "Remove an existing presentation exchange record",
          "path": {
            "pathParameters": [
              {
                "description": "Presentation exchange identifier",
                "key": "pres_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/present-proof-2.0/records/"
              },
              {
                "type": "pathParameter",
                "value": "pres_ex_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20PresentProofModuleResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/present-proof-2.0/records/",
              "pathParameters": {
                "pres_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_pres_ex_credentials-v2",
          "originalEndpointId": "present-proof v2.0.get_pres_ex_credentials-v2",
          "name": "Fetch credentials from wallet for presentation request",
          "path": {
            "pathParameters": [
              {
                "description": "Presentation exchange identifier",
                "key": "pres_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/present-proof-2.0/records/"
              },
              {
                "type": "pathParameter",
                "value": "pres_ex_id"
              },
              {
                "type": "literal",
                "value": "/credentials"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Maximum number to retrieve",
              "key": "count",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[1-9][0-9]*$"
                  }
                }
              }
            },
            {
              "description": "(JSON) object mapping referents to extra WQL queries",
              "key": "extra_query",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^{\\s*\".*?\"\\s*:\\s*{.*?}\\s*(,\\s*\".*?\"\\s*:\\s*{.*?}\\s*)*\\s*}$"
                  }
                }
              }
            },
            {
              "description": "Proof request referents of interest, comma-separated",
              "key": "referent",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Start index",
              "key": "start",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[0-9]*$"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "IndyCredPrecis"
                }
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/present-proof-2.0/records/",
              "pathParameters": {
                "pres_ex_id": "foo"
              },
              "queryParameters": {
                "count": "foo",
                "extra_query": "foo",
                "referent": "foo",
                "start": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {}
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {}
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "report_pres_ex_problem",
          "originalEndpointId": "present-proof v2.0.report_pres_ex_problem",
          "name": "Send a problem report for presentation exchange",
          "path": {
            "pathParameters": [
              {
                "description": "Presentation exchange identifier",
                "key": "pres_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/present-proof-2.0/records/"
              },
              {
                "type": "pathParameter",
                "value": "pres_ex_id"
              },
              {
                "type": "literal",
                "value": "/problem-report"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V20PresProblemReportRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20PresentProofModuleResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/present-proof-2.0/records/",
              "pathParameters": {
                "pres_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "description": "description"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "description": "description"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_proof_presentation",
          "originalEndpointId": "present-proof v2.0.send_proof_presentation",
          "name": "Sends a proof presentation",
          "path": {
            "pathParameters": [
              {
                "description": "Presentation exchange identifier",
                "key": "pres_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/present-proof-2.0/records/"
              },
              {
                "type": "pathParameter",
                "value": "pres_ex_id"
              },
              {
                "type": "literal",
                "value": "/send-presentation"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V20PresSpecByFormatRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20PresExRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/present-proof-2.0/records/",
              "pathParameters": {
                "pres_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "trace": true
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "trace": true
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "proposal-sent",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "proposal-sent",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_proof_presentation_request",
          "originalEndpointId": "present-proof v2.0.send_proof_presentation_request",
          "name": "Sends a presentation request in reference to a proposal",
          "path": {
            "pathParameters": [
              {
                "description": "Presentation exchange identifier",
                "key": "pres_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/present-proof-2.0/records/"
              },
              {
                "type": "pathParameter",
                "value": "pres_ex_id"
              },
              {
                "type": "literal",
                "value": "/send-request"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V20PresentationSendRequestToProposal"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20PresExRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/present-proof-2.0/records/",
              "pathParameters": {
                "pres_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "auto_verify": false,
                "trace": false
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "auto_verify": false,
                  "trace": false
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "proposal-sent",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "proposal-sent",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "verify_received_presentation",
          "originalEndpointId": "present-proof v2.0.verify_received_presentation",
          "name": "Verify a received presentation",
          "path": {
            "pathParameters": [
              {
                "description": "Presentation exchange identifier",
                "key": "pres_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/present-proof-2.0/records/"
              },
              {
                "type": "pathParameter",
                "value": "pres_ex_id"
              },
              {
                "type": "literal",
                "value": "/verify-presentation"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20PresExRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/present-proof-2.0/records/",
              "pathParameters": {
                "pres_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "proposal-sent",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "proposal-sent",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_presentation_proposal",
          "originalEndpointId": "present-proof v2.0.send_presentation_proposal",
          "name": "Sends a presentation proposal",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/present-proof-2.0/send-proposal"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V20PresProposalRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20PresExRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/present-proof-2.0/send-proposal",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "auto_present": true,
                "comment": "comment",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "presentation_proposal": {},
                "trace": false
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "auto_present": true,
                  "comment": "comment",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "presentation_proposal": {},
                  "trace": false
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "proposal-sent",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "proposal-sent",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_free_presentation_request",
          "originalEndpointId": "present-proof v2.0.send_free_presentation_request",
          "name": "Sends a free presentation request not bound to any proposal",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/present-proof-2.0/send-request"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V20PresSendRequestRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V20PresExRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/present-proof-2.0/send-request",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "auto_verify": false,
                "comment": "comment",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "presentation_request": {},
                "trace": false
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "auto_verify": false,
                  "comment": "comment",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "presentation_request": {},
                  "trace": false
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "proposal-sent",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "pres_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "proposal-sent",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "present-proof v1.0": {
      "subpackageId": "present-proof v1.0",
      "name": "present-proof v1.0",
      "endpoints": [
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "create_free_proof_request",
          "originalEndpointId": "present-proof v1.0.create_free_proof_request",
          "name": "Creates a presentation request not bound to any proposal or connection",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/present-proof/create-request"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V10PresentationCreateRequestRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10PresentationExchange"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/present-proof/create-request",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "auto_verify": false,
                "comment": "comment",
                "proof_request": {
                  "name": "Proof request",
                  "nonce": "1",
                  "requested_attributes": {
                    "key": {
                      "names": [
                        "age",
                        "age"
                      ],
                      "name": "favouriteDrink",
                      "restrictions": [
                        {
                          "key": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                        },
                        {
                          "key": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                        }
                      ],
                      "non_revoked": null
                    }
                  },
                  "requested_predicates": {
                    "key": {
                      "p_value": 0,
                      "name": "index",
                      "p_type": ">=",
                      "restrictions": [
                        {
                          "key": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                        },
                        {
                          "key": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                        }
                      ],
                      "non_revoked": null
                    }
                  },
                  "version": "1.0"
                },
                "trace": false
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "auto_verify": false,
                  "comment": "comment",
                  "proof_request": {
                    "name": "Proof request",
                    "nonce": "1",
                    "requested_attributes": {
                      "key": {
                        "names": [
                          "age",
                          "age"
                        ],
                        "name": "favouriteDrink",
                        "restrictions": [
                          {
                            "key": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                          },
                          {
                            "key": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                          }
                        ],
                        "non_revoked": null
                      }
                    },
                    "requested_predicates": {
                      "key": {
                        "p_value": 0,
                        "name": "index",
                        "p_type": ">=",
                        "restrictions": [
                          {
                            "key": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                          },
                          {
                            "key": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                          }
                        ],
                        "non_revoked": null
                      }
                    },
                    "version": "1.0"
                  },
                  "trace": false
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "verified",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "verified",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_matching_pres_ex_records",
          "originalEndpointId": "present-proof v1.0.get_matching_pres_ex_records",
          "name": "Fetch all present-proof exchange records",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/present-proof/records"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Connection identifier",
              "key": "connection_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            },
            {
              "description": "Role assigned in presentation exchange",
              "key": "role",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "PresentProofRecordsGetParametersSchema"
                }
              }
            },
            {
              "description": "Presentation exchange state",
              "key": "state",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "PresentProofRecordsGetParametersSchema"
                }
              }
            },
            {
              "description": "Thread identifier",
              "key": "thread_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10PresentationExchangeList"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/present-proof/records",
              "pathParameters": {},
              "queryParameters": {
                "connection_id": "foo",
                "role": "prover",
                "state": "proposal_sent",
                "thread_id": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "auto_present": false,
                      "auto_verify": true,
                      "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "error_msg": "Invalid structure",
                      "initiator": "self",
                      "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "role": "prover",
                      "state": "verified",
                      "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "trace": true,
                      "updated_at": "2021-12-31 23:59:59+00:00",
                      "verified": "true",
                      "verified_msgs": [
                        "verified_msgs",
                        "verified_msgs"
                      ]
                    },
                    {
                      "auto_present": false,
                      "auto_verify": true,
                      "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "error_msg": "Invalid structure",
                      "initiator": "self",
                      "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "role": "prover",
                      "state": "verified",
                      "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "trace": true,
                      "updated_at": "2021-12-31 23:59:59+00:00",
                      "verified": "true",
                      "verified_msgs": [
                        "verified_msgs",
                        "verified_msgs"
                      ]
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "auto_present": false,
                      "auto_verify": true,
                      "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "error_msg": "Invalid structure",
                      "initiator": "self",
                      "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "role": "prover",
                      "state": "verified",
                      "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "trace": true,
                      "updated_at": "2021-12-31 23:59:59+00:00",
                      "verified": "true",
                      "verified_msgs": [
                        "verified_msgs",
                        "verified_msgs"
                      ]
                    },
                    {
                      "auto_present": false,
                      "auto_verify": true,
                      "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "error_msg": "Invalid structure",
                      "initiator": "self",
                      "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "role": "prover",
                      "state": "verified",
                      "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "trace": true,
                      "updated_at": "2021-12-31 23:59:59+00:00",
                      "verified": "true",
                      "verified_msgs": [
                        "verified_msgs",
                        "verified_msgs"
                      ]
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_pres_ex_record",
          "originalEndpointId": "present-proof v1.0.get_pres_ex_record",
          "name": "Fetch a single presentation exchange record",
          "path": {
            "pathParameters": [
              {
                "description": "Presentation exchange identifier",
                "key": "pres_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/present-proof/records/"
              },
              {
                "type": "pathParameter",
                "value": "pres_ex_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10PresentationExchange"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/present-proof/records/",
              "pathParameters": {
                "pres_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "verified",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "verified",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "DELETE",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "delete_pres_ex_record",
          "originalEndpointId": "present-proof v1.0.delete_pres_ex_record",
          "name": "Remove an existing presentation exchange record",
          "path": {
            "pathParameters": [
              {
                "description": "Presentation exchange identifier",
                "key": "pres_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/present-proof/records/"
              },
              {
                "type": "pathParameter",
                "value": "pres_ex_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10PresentProofModuleResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/present-proof/records/",
              "pathParameters": {
                "pres_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_pres_ex_credentials",
          "originalEndpointId": "present-proof v1.0.get_pres_ex_credentials",
          "name": "Fetch credentials for a presentation request from wallet",
          "path": {
            "pathParameters": [
              {
                "description": "Presentation exchange identifier",
                "key": "pres_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/present-proof/records/"
              },
              {
                "type": "pathParameter",
                "value": "pres_ex_id"
              },
              {
                "type": "literal",
                "value": "/credentials"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Maximum number to retrieve",
              "key": "count",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[1-9][0-9]*$"
                  }
                }
              }
            },
            {
              "description": "(JSON) object mapping referents to extra WQL queries",
              "key": "extra_query",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^{\\s*\".*?\"\\s*:\\s*{.*?}\\s*(,\\s*\".*?\"\\s*:\\s*{.*?}\\s*)*\\s*}$"
                  }
                }
              }
            },
            {
              "description": "Proof request referents of interest, comma-separated",
              "key": "referent",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Start index",
              "key": "start",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[0-9]*$"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "IndyCredPrecis"
                }
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/present-proof/records/",
              "pathParameters": {
                "pres_ex_id": "foo"
              },
              "queryParameters": {
                "count": "foo",
                "extra_query": "foo",
                "referent": "foo",
                "start": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {}
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {}
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "report_pres_ex_problem",
          "originalEndpointId": "present-proof v1.0.report_pres_ex_problem",
          "name": "Send a problem report for presentation exchange",
          "path": {
            "pathParameters": [
              {
                "description": "Presentation exchange identifier",
                "key": "pres_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/present-proof/records/"
              },
              {
                "type": "pathParameter",
                "value": "pres_ex_id"
              },
              {
                "type": "literal",
                "value": "/problem-report"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V10PresentationProblemReportRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10PresentProofModuleResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/present-proof/records/",
              "pathParameters": {
                "pres_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "description": "description"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "description": "description"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_proof_presentation",
          "originalEndpointId": "present-proof v1.0.send_proof_presentation",
          "name": "Sends a proof presentation",
          "path": {
            "pathParameters": [
              {
                "description": "Presentation exchange identifier",
                "key": "pres_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/present-proof/records/"
              },
              {
                "type": "pathParameter",
                "value": "pres_ex_id"
              },
              {
                "type": "literal",
                "value": "/send-presentation"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "IndyPresSpec"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10PresentationExchange"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/present-proof/records/",
              "pathParameters": {
                "pres_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "requested_attributes": {
                  "key": {
                    "cred_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "revealed": true
                  }
                },
                "requested_predicates": {
                  "key": {
                    "cred_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "timestamp": 1640995199
                  }
                },
                "self_attested_attributes": {
                  "key": "self_attested_value"
                },
                "trace": false
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "requested_attributes": {
                    "key": {
                      "cred_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "revealed": true
                    }
                  },
                  "requested_predicates": {
                    "key": {
                      "cred_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "timestamp": 1640995199
                    }
                  },
                  "self_attested_attributes": {
                    "key": "self_attested_value"
                  },
                  "trace": false
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "verified",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "verified",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_proof_presentation_request",
          "originalEndpointId": "present-proof v1.0.send_proof_presentation_request",
          "name": "Sends a presentation request in reference to a proposal",
          "path": {
            "pathParameters": [
              {
                "description": "Presentation exchange identifier",
                "key": "pres_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/present-proof/records/"
              },
              {
                "type": "pathParameter",
                "value": "pres_ex_id"
              },
              {
                "type": "literal",
                "value": "/send-request"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V10PresentationSendRequestToProposal"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10PresentationExchange"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/present-proof/records/",
              "pathParameters": {
                "pres_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "auto_verify": false,
                "trace": false
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "auto_verify": false,
                  "trace": false
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "verified",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "verified",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "verify_received_presentation",
          "originalEndpointId": "present-proof v1.0.verify_received_presentation",
          "name": "Verify a received presentation",
          "path": {
            "pathParameters": [
              {
                "description": "Presentation exchange identifier",
                "key": "pres_ex_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/present-proof/records/"
              },
              {
                "type": "pathParameter",
                "value": "pres_ex_id"
              },
              {
                "type": "literal",
                "value": "/verify-presentation"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10PresentationExchange"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/present-proof/records/",
              "pathParameters": {
                "pres_ex_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "verified",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "verified",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_presentation_proposal",
          "originalEndpointId": "present-proof v1.0.send_presentation_proposal",
          "name": "Sends a presentation proposal",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/present-proof/send-proposal"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V10PresentationProposalRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10PresentationExchange"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/present-proof/send-proposal",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "auto_present": true,
                "comment": "comment",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "presentation_proposal": {
                  "@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/present-proof/1.0/presentation-preview",
                  "attributes": [
                    {
                      "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                      "mime-type": "image/jpeg",
                      "name": "favourite_drink",
                      "referent": "0",
                      "value": "martini"
                    },
                    {
                      "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                      "mime-type": "image/jpeg",
                      "name": "favourite_drink",
                      "referent": "0",
                      "value": "martini"
                    }
                  ],
                  "predicates": [
                    {
                      "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                      "name": "high_score",
                      "predicate": ">=",
                      "threshold": 0
                    },
                    {
                      "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                      "name": "high_score",
                      "predicate": ">=",
                      "threshold": 0
                    }
                  ]
                },
                "trace": false
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "auto_present": true,
                  "comment": "comment",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "presentation_proposal": {
                    "@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/present-proof/1.0/presentation-preview",
                    "attributes": [
                      {
                        "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                        "mime-type": "image/jpeg",
                        "name": "favourite_drink",
                        "referent": "0",
                        "value": "martini"
                      },
                      {
                        "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                        "mime-type": "image/jpeg",
                        "name": "favourite_drink",
                        "referent": "0",
                        "value": "martini"
                      }
                    ],
                    "predicates": [
                      {
                        "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                        "name": "high_score",
                        "predicate": ">=",
                        "threshold": 0
                      },
                      {
                        "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                        "name": "high_score",
                        "predicate": ">=",
                        "threshold": 0
                      }
                    ]
                  },
                  "trace": false
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "verified",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "verified",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "send_free_presentation_request",
          "originalEndpointId": "present-proof v1.0.send_free_presentation_request",
          "name": "Sends a free presentation request not bound to any proposal",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/present-proof/send-request"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "V10PresentationSendRequestRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "V10PresentationExchange"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/present-proof/send-request",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "auto_verify": false,
                "comment": "comment",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "proof_request": {
                  "name": "Proof request",
                  "nonce": "1",
                  "requested_attributes": {
                    "key": {
                      "names": [
                        "age",
                        "age"
                      ],
                      "name": "favouriteDrink",
                      "restrictions": [
                        {
                          "key": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                        },
                        {
                          "key": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                        }
                      ],
                      "non_revoked": null
                    }
                  },
                  "requested_predicates": {
                    "key": {
                      "p_value": 0,
                      "name": "index",
                      "p_type": ">=",
                      "restrictions": [
                        {
                          "key": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                        },
                        {
                          "key": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                        }
                      ],
                      "non_revoked": null
                    }
                  },
                  "version": "1.0"
                },
                "trace": false
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "auto_verify": false,
                  "comment": "comment",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "proof_request": {
                    "name": "Proof request",
                    "nonce": "1",
                    "requested_attributes": {
                      "key": {
                        "names": [
                          "age",
                          "age"
                        ],
                        "name": "favouriteDrink",
                        "restrictions": [
                          {
                            "key": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                          },
                          {
                            "key": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                          }
                        ],
                        "non_revoked": null
                      }
                    },
                    "requested_predicates": {
                      "key": {
                        "p_value": 0,
                        "name": "index",
                        "p_type": ">=",
                        "restrictions": [
                          {
                            "key": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                          },
                          {
                            "key": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
                          }
                        ],
                        "non_revoked": null
                      }
                    },
                    "version": "1.0"
                  },
                  "trace": false
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "verified",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "auto_present": false,
                  "auto_verify": true,
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "error_msg": "Invalid structure",
                  "initiator": "self",
                  "presentation_exchange_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "role": "prover",
                  "state": "verified",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "trace": true,
                  "updated_at": "2021-12-31 23:59:59+00:00",
                  "verified": "true",
                  "verified_msgs": [
                    "verified_msgs",
                    "verified_msgs"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "resolver": {
      "subpackageId": "resolver",
      "name": "resolver",
      "endpoints": [
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_did_document",
          "originalEndpointId": "resolver.get_did_document",
          "name": "Retrieve doc for requested did",
          "path": {
            "pathParameters": [
              {
                "description": "DID",
                "key": "did",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^did:([a-z0-9]+):((?:[a-zA-Z0-9._%-]*:)*[a-zA-Z0-9._%-]+)$"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/resolver/resolve/"
              },
              {
                "type": "pathParameter",
                "value": "did"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResolutionResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/resolver/resolve/",
              "pathParameters": {
                "did": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "did_document": {},
                  "metadata": {}
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "did_document": {},
                  "metadata": {}
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "revocation": {
      "subpackageId": "revocation",
      "name": "revocation",
      "endpoints": [
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_active_registry_for_cred_def_id",
          "originalEndpointId": "revocation.get_active_registry_for_cred_def_id",
          "name": "Get current active revocation registry by credential definition id",
          "path": {
            "pathParameters": [
              {
                "description": "Credential definition identifier",
                "key": "cred_def_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/revocation/active-registry/"
              },
              {
                "type": "pathParameter",
                "value": "cred_def_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RevRegResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/revocation/active-registry/",
              "pathParameters": {
                "cred_def_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "result": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                    "error_msg": "Revocation registry undefined",
                    "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                    "max_cred_num": 1000,
                    "pending_pub": [
                      "23",
                      "23"
                    ],
                    "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "revoc_def_type": "CL_ACCUM",
                    "revoc_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "state": "active",
                    "tag": "tag",
                    "tails_hash": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                    "tails_local_path": "tails_local_path",
                    "tails_public_uri": "tails_public_uri",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "result": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                    "error_msg": "Revocation registry undefined",
                    "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                    "max_cred_num": 1000,
                    "pending_pub": [
                      "23",
                      "23"
                    ],
                    "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "revoc_def_type": "CL_ACCUM",
                    "revoc_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "state": "active",
                    "tag": "tag",
                    "tails_hash": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                    "tails_local_path": "tails_local_path",
                    "tails_public_uri": "tails_public_uri",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "clear_pending_revocations",
          "originalEndpointId": "revocation.clear_pending_revocations",
          "name": "Clear pending revocations",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/revocation/clear-pending-revocations"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ClearPendingRevocationsRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "PublishRevocations"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/revocation/clear-pending-revocations",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "purge": {
                  "key": [
                    "12345",
                    "12345"
                  ]
                }
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "purge": {
                    "key": [
                      "12345",
                      "12345"
                    ]
                  }
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "rrid2crid": {
                    "key": [
                      "12345",
                      "12345"
                    ]
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "rrid2crid": {
                    "key": [
                      "12345",
                      "12345"
                    ]
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "create_revocation_registry",
          "originalEndpointId": "revocation.create_revocation_registry",
          "name": "Creates a new revocation registry",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/revocation/create-registry"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "RevRegCreateRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RevRegResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/revocation/create-registry",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                "max_cred_num": 1000
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "credential_definition_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                  "max_cred_num": 1000
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "result": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                    "error_msg": "Revocation registry undefined",
                    "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                    "max_cred_num": 1000,
                    "pending_pub": [
                      "23",
                      "23"
                    ],
                    "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "revoc_def_type": "CL_ACCUM",
                    "revoc_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "state": "active",
                    "tag": "tag",
                    "tails_hash": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                    "tails_local_path": "tails_local_path",
                    "tails_public_uri": "tails_public_uri",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "result": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                    "error_msg": "Revocation registry undefined",
                    "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                    "max_cred_num": 1000,
                    "pending_pub": [
                      "23",
                      "23"
                    ],
                    "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "revoc_def_type": "CL_ACCUM",
                    "revoc_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "state": "active",
                    "tag": "tag",
                    "tails_hash": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                    "tails_local_path": "tails_local_path",
                    "tails_public_uri": "tails_public_uri",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_credential_revocation_record",
          "originalEndpointId": "revocation.get_credential_revocation_record",
          "name": "Get credential revocation status",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/revocation/credential-record"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Credential exchange identifier",
              "key": "cred_ex_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                  }
                }
              }
            },
            {
              "description": "Credential revocation identifier",
              "key": "cred_rev_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[1-9][0-9]*$"
                  }
                }
              }
            },
            {
              "description": "Revocation registry identifier",
              "key": "rev_reg_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "CredRevRecordResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/revocation/credential-record",
              "pathParameters": {},
              "queryParameters": {
                "cred_ex_id": "foo",
                "cred_rev_id": "foo",
                "rev_reg_id": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "result": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                    "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_ex_version": "cred_ex_version",
                    "cred_rev_id": "12345",
                    "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "state": "issued",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "result": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                    "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "cred_ex_version": "cred_ex_version",
                    "cred_rev_id": "12345",
                    "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "state": "issued",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "publish_revocations",
          "originalEndpointId": "revocation.publish_revocations",
          "name": "Publish pending revocations to ledger",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/revocation/publish-revocations"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "PublishRevocations"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TxnOrPublishRevocationsResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/revocation/publish-revocations",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "rrid2crid": {
                  "key": [
                    "12345",
                    "12345"
                  ]
                }
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "rrid2crid": {
                    "key": [
                      "12345",
                      "12345"
                    ]
                  }
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "sent": {
                    "rrid2crid": {
                      "key": [
                        "12345",
                        "12345"
                      ]
                    }
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "sent": {
                    "rrid2crid": {
                      "key": [
                        "12345",
                        "12345"
                      ]
                    }
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_created_registries",
          "originalEndpointId": "revocation.get_created_registries",
          "name": "Search for matching revocation registries that current agent created",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/revocation/registries/created"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Credential definition identifier",
              "key": "cred_def_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                  }
                }
              }
            },
            {
              "description": "Revocation registry state",
              "key": "state",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "RevocationRegistriesCreatedGetParametersSchema"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RevRegsCreated"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/revocation/registries/created",
              "pathParameters": {},
              "queryParameters": {
                "cred_def_id": "foo",
                "state": "init"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "rev_reg_ids": [
                    "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "rev_reg_ids": [
                    "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "DELETE",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "delete_tails_file",
          "originalEndpointId": "revocation.delete_tails_file",
          "name": "Delete the tail files",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/revocation/registry/delete-tails-file"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Credential definition identifier",
              "key": "cred_def_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+)):(.+)?$"
                  }
                }
              }
            },
            {
              "description": "Revocation registry identifier",
              "key": "rev_reg_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TailsDeleteResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/revocation/registry/delete-tails-file",
              "pathParameters": {},
              "queryParameters": {
                "cred_def_id": "foo",
                "rev_reg_id": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "message": "message"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "message": "message"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_revocation_registry",
          "originalEndpointId": "revocation.get_revocation_registry",
          "name": "Get revocation registry by revocation registry id",
          "path": {
            "pathParameters": [
              {
                "description": "Revocation Registry identifier",
                "key": "rev_reg_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/revocation/registry/"
              },
              {
                "type": "pathParameter",
                "value": "rev_reg_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RevRegResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/revocation/registry/",
              "pathParameters": {
                "rev_reg_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "result": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                    "error_msg": "Revocation registry undefined",
                    "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                    "max_cred_num": 1000,
                    "pending_pub": [
                      "23",
                      "23"
                    ],
                    "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "revoc_def_type": "CL_ACCUM",
                    "revoc_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "state": "active",
                    "tag": "tag",
                    "tails_hash": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                    "tails_local_path": "tails_local_path",
                    "tails_public_uri": "tails_public_uri",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "result": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                    "error_msg": "Revocation registry undefined",
                    "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                    "max_cred_num": 1000,
                    "pending_pub": [
                      "23",
                      "23"
                    ],
                    "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "revoc_def_type": "CL_ACCUM",
                    "revoc_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "state": "active",
                    "tag": "tag",
                    "tails_hash": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                    "tails_local_path": "tails_local_path",
                    "tails_public_uri": "tails_public_uri",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "PATCH",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "update_revocation_registry",
          "originalEndpointId": "revocation.update_revocation_registry",
          "name": "Update revocation registry with new public URI to its tails file",
          "path": {
            "pathParameters": [
              {
                "description": "Revocation Registry identifier",
                "key": "rev_reg_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/revocation/registry/"
              },
              {
                "type": "pathParameter",
                "value": "rev_reg_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "RevRegUpdateTailsFileUri"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RevRegResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/revocation/registry/",
              "pathParameters": {
                "rev_reg_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "tails_public_uri": "http://192.168.56.133:6543/revocation/registry/WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0/tails-file"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "tails_public_uri": "http://192.168.56.133:6543/revocation/registry/WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0/tails-file"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "result": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                    "error_msg": "Revocation registry undefined",
                    "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                    "max_cred_num": 1000,
                    "pending_pub": [
                      "23",
                      "23"
                    ],
                    "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "revoc_def_type": "CL_ACCUM",
                    "revoc_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "state": "active",
                    "tag": "tag",
                    "tails_hash": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                    "tails_local_path": "tails_local_path",
                    "tails_public_uri": "tails_public_uri",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "result": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                    "error_msg": "Revocation registry undefined",
                    "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                    "max_cred_num": 1000,
                    "pending_pub": [
                      "23",
                      "23"
                    ],
                    "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "revoc_def_type": "CL_ACCUM",
                    "revoc_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "state": "active",
                    "tag": "tag",
                    "tails_hash": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                    "tails_local_path": "tails_local_path",
                    "tails_public_uri": "tails_public_uri",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "publish_revocation_registry_definition",
          "originalEndpointId": "revocation.publish_revocation_registry_definition",
          "name": "Send revocation registry definition to ledger",
          "path": {
            "pathParameters": [
              {
                "description": "Revocation Registry identifier",
                "key": "rev_reg_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/revocation/registry/"
              },
              {
                "type": "pathParameter",
                "value": "rev_reg_id"
              },
              {
                "type": "literal",
                "value": "/definition"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Connection identifier",
              "key": "conn_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Create Transaction For Endorser's signature",
              "key": "create_transaction_for_endorser",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TxnOrRevRegResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/revocation/registry/",
              "pathParameters": {
                "rev_reg_id": "foo"
              },
              "queryParameters": {
                "conn_id": "foo",
                "create_transaction_for_endorser": true
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "sent": {
                    "result": {
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                      "error_msg": "Revocation registry undefined",
                      "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                      "max_cred_num": 1000,
                      "pending_pub": [
                        "23",
                        "23"
                      ],
                      "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "revoc_def_type": "CL_ACCUM",
                      "revoc_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                      "state": "active",
                      "tag": "tag",
                      "tails_hash": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                      "tails_local_path": "tails_local_path",
                      "tails_public_uri": "tails_public_uri",
                      "updated_at": "2021-12-31 23:59:59+00:00"
                    }
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "sent": {
                    "result": {
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                      "error_msg": "Revocation registry undefined",
                      "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                      "max_cred_num": 1000,
                      "pending_pub": [
                        "23",
                        "23"
                      ],
                      "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "revoc_def_type": "CL_ACCUM",
                      "revoc_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                      "state": "active",
                      "tag": "tag",
                      "tails_hash": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                      "tails_local_path": "tails_local_path",
                      "tails_public_uri": "tails_public_uri",
                      "updated_at": "2021-12-31 23:59:59+00:00"
                    }
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "publish_revocation_registry_entry",
          "originalEndpointId": "revocation.publish_revocation_registry_entry",
          "name": "Send revocation registry entry to ledger",
          "path": {
            "pathParameters": [
              {
                "description": "Revocation Registry identifier",
                "key": "rev_reg_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/revocation/registry/"
              },
              {
                "type": "pathParameter",
                "value": "rev_reg_id"
              },
              {
                "type": "literal",
                "value": "/entry"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Connection identifier",
              "key": "conn_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Create Transaction For Endorser's signature",
              "key": "create_transaction_for_endorser",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RevRegResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/revocation/registry/",
              "pathParameters": {
                "rev_reg_id": "foo"
              },
              "queryParameters": {
                "conn_id": "foo",
                "create_transaction_for_endorser": true
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "result": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                    "error_msg": "Revocation registry undefined",
                    "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                    "max_cred_num": 1000,
                    "pending_pub": [
                      "23",
                      "23"
                    ],
                    "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "revoc_def_type": "CL_ACCUM",
                    "revoc_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "state": "active",
                    "tag": "tag",
                    "tails_hash": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                    "tails_local_path": "tails_local_path",
                    "tails_public_uri": "tails_public_uri",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "result": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                    "error_msg": "Revocation registry undefined",
                    "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                    "max_cred_num": 1000,
                    "pending_pub": [
                      "23",
                      "23"
                    ],
                    "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "revoc_def_type": "CL_ACCUM",
                    "revoc_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "state": "active",
                    "tag": "tag",
                    "tails_hash": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                    "tails_local_path": "tails_local_path",
                    "tails_public_uri": "tails_public_uri",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "PUT",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "update_revocation_entry_state",
          "originalEndpointId": "revocation.update_revocation_entry_state",
          "name": "Fix revocation state in wallet and return number of updated entries",
          "path": {
            "pathParameters": [
              {
                "description": "Revocation Registry identifier",
                "key": "rev_reg_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/revocation/registry/"
              },
              {
                "type": "pathParameter",
                "value": "rev_reg_id"
              },
              {
                "type": "literal",
                "value": "/fix-revocation-entry-state"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Apply updated accumulator transaction to ledger",
              "key": "apply_ledger_update",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RevRegWalletUpdatedResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/revocation/registry/",
              "pathParameters": {
                "rev_reg_id": "foo"
              },
              "queryParameters": {
                "apply_ledger_update": true
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "accum_calculated": {},
                  "accum_fixed": {},
                  "rev_reg_delta": {}
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "accum_calculated": {},
                  "accum_fixed": {},
                  "rev_reg_delta": {}
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_issued_credentials_count",
          "originalEndpointId": "revocation.get_issued_credentials_count",
          "name": "Get number of credentials issued against revocation registry",
          "path": {
            "pathParameters": [
              {
                "description": "Revocation Registry identifier",
                "key": "rev_reg_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/revocation/registry/"
              },
              {
                "type": "pathParameter",
                "value": "rev_reg_id"
              },
              {
                "type": "literal",
                "value": "/issued"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RevRegIssuedResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/revocation/registry/",
              "pathParameters": {
                "rev_reg_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "result": 0
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "result": 0
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_issued_credential_details",
          "originalEndpointId": "revocation.get_issued_credential_details",
          "name": "Get details of credentials issued against revocation registry",
          "path": {
            "pathParameters": [
              {
                "description": "Revocation Registry identifier",
                "key": "rev_reg_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/revocation/registry/"
              },
              {
                "type": "pathParameter",
                "value": "rev_reg_id"
              },
              {
                "type": "literal",
                "value": "/issued/details"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "CredRevRecordDetailsResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/revocation/registry/",
              "pathParameters": {
                "rev_reg_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                      "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "cred_ex_version": "cred_ex_version",
                      "cred_rev_id": "12345",
                      "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                      "state": "issued",
                      "updated_at": "2021-12-31 23:59:59+00:00"
                    },
                    {
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                      "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "cred_ex_version": "cred_ex_version",
                      "cred_rev_id": "12345",
                      "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                      "state": "issued",
                      "updated_at": "2021-12-31 23:59:59+00:00"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                      "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "cred_ex_version": "cred_ex_version",
                      "cred_rev_id": "12345",
                      "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                      "state": "issued",
                      "updated_at": "2021-12-31 23:59:59+00:00"
                    },
                    {
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                      "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "cred_ex_version": "cred_ex_version",
                      "cred_rev_id": "12345",
                      "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                      "state": "issued",
                      "updated_at": "2021-12-31 23:59:59+00:00"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_published_credential_details",
          "originalEndpointId": "revocation.get_published_credential_details",
          "name": "Get details of revoked credentials from ledger",
          "path": {
            "pathParameters": [
              {
                "description": "Revocation Registry identifier",
                "key": "rev_reg_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/revocation/registry/"
              },
              {
                "type": "pathParameter",
                "value": "rev_reg_id"
              },
              {
                "type": "literal",
                "value": "/issued/indy_recs"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "CredRevIndyRecordsResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/revocation/registry/",
              "pathParameters": {
                "rev_reg_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "rev_reg_delta": {}
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "rev_reg_delta": {}
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "PATCH",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "set_revocation_registry_state",
          "originalEndpointId": "revocation.set_revocation_registry_state",
          "name": "Set revocation registry state manually",
          "path": {
            "pathParameters": [
              {
                "description": "Revocation Registry identifier",
                "key": "rev_reg_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/revocation/registry/"
              },
              {
                "type": "pathParameter",
                "value": "rev_reg_id"
              },
              {
                "type": "literal",
                "value": "/set-state"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Revocation registry state to set",
              "key": "state",
              "type": {
                "type": "id",
                "value": "RevocationRegistryRevRegIdSetStatePatchParametersSchema"
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RevRegResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/revocation/registry/",
              "pathParameters": {
                "rev_reg_id": "foo"
              },
              "queryParameters": {
                "state": "init"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "result": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                    "error_msg": "Revocation registry undefined",
                    "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                    "max_cred_num": 1000,
                    "pending_pub": [
                      "23",
                      "23"
                    ],
                    "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "revoc_def_type": "CL_ACCUM",
                    "revoc_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "state": "active",
                    "tag": "tag",
                    "tails_hash": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                    "tails_local_path": "tails_local_path",
                    "tails_public_uri": "tails_public_uri",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "result": {
                    "created_at": "2021-12-31 23:59:59+00:00",
                    "cred_def_id": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag",
                    "error_msg": "Revocation registry undefined",
                    "issuer_did": "WgWxqztrNooG92RXvxSTWv",
                    "max_cred_num": 1000,
                    "pending_pub": [
                      "23",
                      "23"
                    ],
                    "record_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "revoc_def_type": "CL_ACCUM",
                    "revoc_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                    "state": "active",
                    "tag": "tag",
                    "tails_hash": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV",
                    "tails_local_path": "tails_local_path",
                    "tails_public_uri": "tails_public_uri",
                    "updated_at": "2021-12-31 23:59:59+00:00"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "download_tails_file_sparse",
          "originalEndpointId": "revocation.download_tails_file_sparse",
          "name": "Download tails file",
          "path": {
            "pathParameters": [
              {
                "description": "Revocation Registry identifier",
                "key": "rev_reg_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/revocation/registry/"
              },
              {
                "type": "pathParameter",
                "value": "rev_reg_id"
              },
              {
                "type": "literal",
                "value": "/tails-file-less-deets"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/revocation/registry/",
              "pathParameters": {
                "rev_reg_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "download_tails_file",
          "originalEndpointId": "revocation.download_tails_file",
          "name": "Download tails file",
          "path": {
            "pathParameters": [
              {
                "description": "Revocation Registry identifier",
                "key": "rev_reg_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/revocation/registry/"
              },
              {
                "type": "pathParameter",
                "value": "rev_reg_id"
              },
              {
                "type": "literal",
                "value": "/tails-file"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "fileDownload"
            },
            "statusCode": 200,
            "description": "tails file"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/revocation/registry/",
              "pathParameters": {
                "rev_reg_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "PUT",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "upload_tails_file",
          "originalEndpointId": "revocation.upload_tails_file",
          "name": "Upload local tails file to server",
          "path": {
            "pathParameters": [
              {
                "description": "Revocation Registry identifier",
                "key": "rev_reg_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:(.+$)"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/revocation/registry/"
              },
              {
                "type": "pathParameter",
                "value": "rev_reg_id"
              },
              {
                "type": "literal",
                "value": "/tails-file"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RevocationModuleResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/revocation/registry/",
              "pathParameters": {
                "rev_reg_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "revoke_issued_credential",
          "originalEndpointId": "revocation.revoke_issued_credential",
          "name": "Revoke an issued credential",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/revocation/revoke"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "RevokeRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RevocationModuleResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/revocation/revoke",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "comment": "comment",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "cred_rev_id": "12345",
                "notify": true,
                "notify_version": "v1_0",
                "publish": true,
                "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                "thread_id": "thread_id"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "comment": "comment",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "cred_ex_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "cred_rev_id": "12345",
                  "notify": true,
                  "notify_version": "v1_0",
                  "publish": true,
                  "rev_reg_id": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0",
                  "thread_id": "thread_id"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "schema": {
      "subpackageId": "schema",
      "name": "schema",
      "endpoints": [
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "publish_schema",
          "originalEndpointId": "schema.publish_schema",
          "name": "Sends a schema to the ledger",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/schemas"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Connection identifier",
              "key": "conn_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Create Transaction For Endorser's signature",
              "key": "create_transaction_for_endorser",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          ],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "SchemaSendRequest"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TxnOrSchemaSendResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/schemas",
              "pathParameters": {},
              "queryParameters": {
                "conn_id": "foo",
                "create_transaction_for_endorser": true
              },
              "headers": {},
              "requestBody": {
                "attributes": [
                  "score",
                  "score"
                ],
                "schema_name": "prefs",
                "schema_version": "1.0"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "attributes": [
                    "score",
                    "score"
                  ],
                  "schema_name": "prefs",
                  "schema_version": "1.0"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_matching_created_schemas",
          "originalEndpointId": "schema.get_matching_created_schemas",
          "name": "Search for matching schema that agent originated",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/schemas/created"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Schema identifier",
              "key": "schema_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
                  }
                }
              }
            },
            {
              "description": "Schema issuer DID",
              "key": "schema_issuer_did",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                  }
                }
              }
            },
            {
              "description": "Schema name",
              "key": "schema_name",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Schema version",
              "key": "schema_version",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[0-9.]+$"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "SchemasCreatedResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/schemas/created",
              "pathParameters": {},
              "queryParameters": {
                "schema_id": "foo",
                "schema_issuer_did": "foo",
                "schema_name": "foo",
                "schema_version": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "schema_ids": [
                    "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                    "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "schema_ids": [
                    "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                    "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_schema",
          "originalEndpointId": "schema.get_schema",
          "name": "Gets a schema from the ledger",
          "path": {
            "pathParameters": [
              {
                "description": "Schema identifier",
                "key": "schema_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[1-9][0-9]*|[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/schemas/"
              },
              {
                "type": "pathParameter",
                "value": "schema_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "SchemaGetResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/schemas/",
              "pathParameters": {
                "schema_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "schema": {
                    "attrNames": [
                      "score",
                      "score"
                    ],
                    "id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                    "name": "schema_name",
                    "seqNo": 10,
                    "ver": "1.0",
                    "version": "1.0"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "schema": {
                    "attrNames": [
                      "score",
                      "score"
                    ],
                    "id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                    "name": "schema_name",
                    "seqNo": 10,
                    "ver": "1.0",
                    "version": "1.0"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "write_schema_record_to_wallet",
          "originalEndpointId": "schema.write_schema_record_to_wallet",
          "name": "Writes a schema non-secret record to the wallet",
          "path": {
            "pathParameters": [
              {
                "description": "Schema identifier",
                "key": "schema_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[1-9][0-9]*|[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/schemas/"
              },
              {
                "type": "pathParameter",
                "value": "schema_id"
              },
              {
                "type": "literal",
                "value": "/write_record"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "SchemaGetResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/schemas/",
              "pathParameters": {
                "schema_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "schema": {
                    "attrNames": [
                      "score",
                      "score"
                    ],
                    "id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                    "name": "schema_name",
                    "seqNo": 10,
                    "ver": "1.0",
                    "version": "1.0"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "schema": {
                    "attrNames": [
                      "score",
                      "score"
                    ],
                    "id": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0",
                    "name": "schema_name",
                    "seqNo": 10,
                    "ver": "1.0",
                    "version": "1.0"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "endorse-transaction": {
      "subpackageId": "endorse-transaction",
      "name": "endorse-transaction",
      "endpoints": [
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "resend_transaction_request",
          "originalEndpointId": "endorse-transaction.resend_transaction_request",
          "name": "For Author to resend a particular transaction request",
          "path": {
            "pathParameters": [
              {
                "description": "Transaction identifier",
                "key": "tran_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transaction/"
              },
              {
                "type": "pathParameter",
                "value": "tran_id"
              },
              {
                "type": "literal",
                "value": "/resend"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TransactionRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/transaction/",
              "pathParameters": {
                "tran_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "_type": "101",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endorser_write_txn": true,
                  "formats": [
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    },
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    }
                  ],
                  "messages_attach": [
                    {},
                    {}
                  ],
                  "meta_data": {},
                  "signature_request": [
                    {},
                    {}
                  ],
                  "signature_response": [
                    {},
                    {}
                  ],
                  "state": "active",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "timing": {},
                  "trace": true,
                  "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "_type": "101",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endorser_write_txn": true,
                  "formats": [
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    },
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    }
                  ],
                  "messages_attach": [
                    {},
                    {}
                  ],
                  "meta_data": {},
                  "signature_request": [
                    {},
                    {}
                  ],
                  "signature_response": [
                    {},
                    {}
                  ],
                  "state": "active",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "timing": {},
                  "trace": true,
                  "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_transaction_list",
          "originalEndpointId": "endorse-transaction.get_transaction_list",
          "name": "Query transactions",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transactions"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TransactionList"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/transactions",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "_type": "101",
                      "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "endorser_write_txn": true,
                      "formats": [
                        {
                          "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                          "format": "dif/endorse-transaction/request@v1.0"
                        },
                        {
                          "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                          "format": "dif/endorse-transaction/request@v1.0"
                        }
                      ],
                      "messages_attach": [
                        {},
                        {}
                      ],
                      "meta_data": {},
                      "signature_request": [
                        {},
                        {}
                      ],
                      "signature_response": [
                        {},
                        {}
                      ],
                      "state": "active",
                      "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "timing": {},
                      "trace": true,
                      "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "updated_at": "2021-12-31 23:59:59+00:00"
                    },
                    {
                      "_type": "101",
                      "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "endorser_write_txn": true,
                      "formats": [
                        {
                          "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                          "format": "dif/endorse-transaction/request@v1.0"
                        },
                        {
                          "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                          "format": "dif/endorse-transaction/request@v1.0"
                        }
                      ],
                      "messages_attach": [
                        {},
                        {}
                      ],
                      "meta_data": {},
                      "signature_request": [
                        {},
                        {}
                      ],
                      "signature_response": [
                        {},
                        {}
                      ],
                      "state": "active",
                      "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "timing": {},
                      "trace": true,
                      "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "updated_at": "2021-12-31 23:59:59+00:00"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "_type": "101",
                      "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "endorser_write_txn": true,
                      "formats": [
                        {
                          "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                          "format": "dif/endorse-transaction/request@v1.0"
                        },
                        {
                          "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                          "format": "dif/endorse-transaction/request@v1.0"
                        }
                      ],
                      "messages_attach": [
                        {},
                        {}
                      ],
                      "meta_data": {},
                      "signature_request": [
                        {},
                        {}
                      ],
                      "signature_response": [
                        {},
                        {}
                      ],
                      "state": "active",
                      "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "timing": {},
                      "trace": true,
                      "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "updated_at": "2021-12-31 23:59:59+00:00"
                    },
                    {
                      "_type": "101",
                      "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "created_at": "2021-12-31 23:59:59+00:00",
                      "endorser_write_txn": true,
                      "formats": [
                        {
                          "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                          "format": "dif/endorse-transaction/request@v1.0"
                        },
                        {
                          "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                          "format": "dif/endorse-transaction/request@v1.0"
                        }
                      ],
                      "messages_attach": [
                        {},
                        {}
                      ],
                      "meta_data": {},
                      "signature_request": [
                        {},
                        {}
                      ],
                      "signature_response": [
                        {},
                        {}
                      ],
                      "state": "active",
                      "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "timing": {},
                      "trace": true,
                      "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "updated_at": "2021-12-31 23:59:59+00:00"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "create_transaction_request",
          "originalEndpointId": "endorse-transaction.create_transaction_request",
          "name": "For author to send a transaction request",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transactions/create-request"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Transaction identifier",
              "key": "tran_id",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "description": "Endorser will write the transaction after endorsing it",
              "key": "endorser_write_txn",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          ],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "Date"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TransactionRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/transactions/create-request",
              "pathParameters": {},
              "queryParameters": {
                "tran_id": "foo",
                "endorser_write_txn": true
              },
              "headers": {},
              "requestBody": {
                "expires_time": "2021-03-29 05:22:19+00:00"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "expires_time": "2021-03-29 05:22:19+00:00"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "_type": "101",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endorser_write_txn": true,
                  "formats": [
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    },
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    }
                  ],
                  "messages_attach": [
                    {},
                    {}
                  ],
                  "meta_data": {},
                  "signature_request": [
                    {},
                    {}
                  ],
                  "signature_response": [
                    {},
                    {}
                  ],
                  "state": "active",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "timing": {},
                  "trace": true,
                  "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "_type": "101",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endorser_write_txn": true,
                  "formats": [
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    },
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    }
                  ],
                  "messages_attach": [
                    {},
                    {}
                  ],
                  "meta_data": {},
                  "signature_request": [
                    {},
                    {}
                  ],
                  "signature_response": [
                    {},
                    {}
                  ],
                  "state": "active",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "timing": {},
                  "trace": true,
                  "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "set_endorser_info_for_conn_id",
          "originalEndpointId": "endorse-transaction.set_endorser_info_for_conn_id",
          "name": "Set Endorser Info",
          "path": {
            "pathParameters": [
              {
                "description": "Connection identifier",
                "key": "conn_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transactions/"
              },
              {
                "type": "pathParameter",
                "value": "conn_id"
              },
              {
                "type": "literal",
                "value": "/set-endorser-info"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Endorser DID",
              "key": "endorser_did",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "description": "Endorser Name",
              "key": "endorser_name",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "EndorserInfo"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/transactions/",
              "pathParameters": {
                "conn_id": "foo"
              },
              "queryParameters": {
                "endorser_did": "foo",
                "endorser_name": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "endorser_did": "endorser_did",
                  "endorser_name": "endorser_name"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "endorser_did": "endorser_did",
                  "endorser_name": "endorser_name"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "set_endorser_role_for_conn_id",
          "originalEndpointId": "endorse-transaction.set_endorser_role_for_conn_id",
          "name": "Set transaction jobs",
          "path": {
            "pathParameters": [
              {
                "description": "Connection identifier",
                "key": "conn_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transactions/"
              },
              {
                "type": "pathParameter",
                "value": "conn_id"
              },
              {
                "type": "literal",
                "value": "/set-endorser-role"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Transaction related jobs",
              "key": "transaction_my_job",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "TransactionsConnIdSetEndorserRolePostParametersSchema"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TransactionJobs"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/transactions/",
              "pathParameters": {
                "conn_id": "foo"
              },
              "queryParameters": {
                "transaction_my_job": "TRANSACTION_AUTHOR"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "transaction_my_job": "TRANSACTION_AUTHOR",
                  "transaction_their_job": "TRANSACTION_AUTHOR"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "transaction_my_job": "TRANSACTION_AUTHOR",
                  "transaction_their_job": "TRANSACTION_AUTHOR"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_transaction_record",
          "originalEndpointId": "endorse-transaction.get_transaction_record",
          "name": "Fetch a single transaction record",
          "path": {
            "pathParameters": [
              {
                "description": "Transaction identifier",
                "key": "tran_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transactions/"
              },
              {
                "type": "pathParameter",
                "value": "tran_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TransactionRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/transactions/",
              "pathParameters": {
                "tran_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "_type": "101",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endorser_write_txn": true,
                  "formats": [
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    },
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    }
                  ],
                  "messages_attach": [
                    {},
                    {}
                  ],
                  "meta_data": {},
                  "signature_request": [
                    {},
                    {}
                  ],
                  "signature_response": [
                    {},
                    {}
                  ],
                  "state": "active",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "timing": {},
                  "trace": true,
                  "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "_type": "101",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endorser_write_txn": true,
                  "formats": [
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    },
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    }
                  ],
                  "messages_attach": [
                    {},
                    {}
                  ],
                  "meta_data": {},
                  "signature_request": [
                    {},
                    {}
                  ],
                  "signature_response": [
                    {},
                    {}
                  ],
                  "state": "active",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "timing": {},
                  "trace": true,
                  "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "cancel_transaction_request",
          "originalEndpointId": "endorse-transaction.cancel_transaction_request",
          "name": "For Author to cancel a particular transaction request",
          "path": {
            "pathParameters": [
              {
                "description": "Transaction identifier",
                "key": "tran_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transactions/"
              },
              {
                "type": "pathParameter",
                "value": "tran_id"
              },
              {
                "type": "literal",
                "value": "/cancel"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TransactionRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/transactions/",
              "pathParameters": {
                "tran_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "_type": "101",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endorser_write_txn": true,
                  "formats": [
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    },
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    }
                  ],
                  "messages_attach": [
                    {},
                    {}
                  ],
                  "meta_data": {},
                  "signature_request": [
                    {},
                    {}
                  ],
                  "signature_response": [
                    {},
                    {}
                  ],
                  "state": "active",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "timing": {},
                  "trace": true,
                  "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "_type": "101",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endorser_write_txn": true,
                  "formats": [
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    },
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    }
                  ],
                  "messages_attach": [
                    {},
                    {}
                  ],
                  "meta_data": {},
                  "signature_request": [
                    {},
                    {}
                  ],
                  "signature_response": [
                    {},
                    {}
                  ],
                  "state": "active",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "timing": {},
                  "trace": true,
                  "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "refuse_transaction",
          "originalEndpointId": "endorse-transaction.refuse_transaction",
          "name": "For Endorser to refuse a particular transaction record",
          "path": {
            "pathParameters": [
              {
                "description": "Transaction identifier",
                "key": "tran_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transactions/"
              },
              {
                "type": "pathParameter",
                "value": "tran_id"
              },
              {
                "type": "literal",
                "value": "/refuse"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TransactionRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/transactions/",
              "pathParameters": {
                "tran_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "_type": "101",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endorser_write_txn": true,
                  "formats": [
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    },
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    }
                  ],
                  "messages_attach": [
                    {},
                    {}
                  ],
                  "meta_data": {},
                  "signature_request": [
                    {},
                    {}
                  ],
                  "signature_response": [
                    {},
                    {}
                  ],
                  "state": "active",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "timing": {},
                  "trace": true,
                  "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "_type": "101",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endorser_write_txn": true,
                  "formats": [
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    },
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    }
                  ],
                  "messages_attach": [
                    {},
                    {}
                  ],
                  "meta_data": {},
                  "signature_request": [
                    {},
                    {}
                  ],
                  "signature_response": [
                    {},
                    {}
                  ],
                  "state": "active",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "timing": {},
                  "trace": true,
                  "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "publish_endorsed_transaction",
          "originalEndpointId": "endorse-transaction.publish_endorsed_transaction",
          "name": "For Author / Endorser to write an endorsed transaction to the ledger",
          "path": {
            "pathParameters": [
              {
                "description": "Transaction identifier",
                "key": "tran_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/transactions/"
              },
              {
                "type": "pathParameter",
                "value": "tran_id"
              },
              {
                "type": "literal",
                "value": "/write"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TransactionRecord"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/transactions/",
              "pathParameters": {
                "tran_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "_type": "101",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endorser_write_txn": true,
                  "formats": [
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    },
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    }
                  ],
                  "messages_attach": [
                    {},
                    {}
                  ],
                  "meta_data": {},
                  "signature_request": [
                    {},
                    {}
                  ],
                  "signature_response": [
                    {},
                    {}
                  ],
                  "state": "active",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "timing": {},
                  "trace": true,
                  "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "_type": "101",
                  "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "created_at": "2021-12-31 23:59:59+00:00",
                  "endorser_write_txn": true,
                  "formats": [
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    },
                    {
                      "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "format": "dif/endorse-transaction/request@v1.0"
                    }
                  ],
                  "messages_attach": [
                    {},
                    {}
                  ],
                  "meta_data": {},
                  "signature_request": [
                    {},
                    {}
                  ],
                  "signature_response": [
                    {},
                    {}
                  ],
                  "state": "active",
                  "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "timing": {},
                  "trace": true,
                  "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "updated_at": "2021-12-31 23:59:59+00:00"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "wallet": {
      "subpackageId": "wallet",
      "name": "wallet",
      "endpoints": [
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_dids",
          "originalEndpointId": "wallet.get_dids",
          "name": "List wallet DIDs",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/wallet/did"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "DID of interest",
              "key": "did",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$|^did:([a-zA-Z0-9_]+):([a-zA-Z0-9_.%-]+(:[a-zA-Z0-9_.%-]+)*)((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(\\/[^#?]*)?([?][^#]*)?(\\#.*)?$$"
                  }
                }
              }
            },
            {
              "description": "Key type to query for.",
              "key": "key_type",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "WalletDidGetParametersSchema"
                }
              }
            },
            {
              "description": "DID method to query for. e.g. sov to only fetch indy/sov DIDs",
              "key": "method",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "WalletDidGetParametersSchema"
                }
              }
            },
            {
              "description": "Whether DID is current public DID, posted to ledger but current public DID, or local to the wallet",
              "key": "posture",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "WalletDidGetParametersSchema"
                }
              }
            },
            {
              "description": "Verification key of interest",
              "key": "verkey",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "regex": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "DIDList"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/wallet/did",
              "pathParameters": {},
              "queryParameters": {
                "did": "foo",
                "key_type": "ed25519",
                "method": "key",
                "posture": "public",
                "verkey": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "did": "did:peer:WgWxqztrNooG92RXvxSTWv",
                      "key_type": "ed25519",
                      "method": "sov",
                      "posture": "wallet_only",
                      "verkey": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                    },
                    {
                      "did": "did:peer:WgWxqztrNooG92RXvxSTWv",
                      "key_type": "ed25519",
                      "method": "sov",
                      "posture": "wallet_only",
                      "verkey": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "did": "did:peer:WgWxqztrNooG92RXvxSTWv",
                      "key_type": "ed25519",
                      "method": "sov",
                      "posture": "wallet_only",
                      "verkey": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                    },
                    {
                      "did": "did:peer:WgWxqztrNooG92RXvxSTWv",
                      "key_type": "ed25519",
                      "method": "sov",
                      "posture": "wallet_only",
                      "verkey": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "create_local_did",
          "originalEndpointId": "wallet.create_local_did",
          "name": "Create a local DID",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/wallet/did/create"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "DIDCreate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "DIDResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/wallet/did/create",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "method": "sov",
                "seed": "000000000000000000000000Trustee1"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "method": "sov",
                  "seed": "000000000000000000000000Trustee1"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "result": {
                    "did": "did:peer:WgWxqztrNooG92RXvxSTWv",
                    "key_type": "ed25519",
                    "method": "sov",
                    "posture": "wallet_only",
                    "verkey": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "result": {
                    "did": "did:peer:WgWxqztrNooG92RXvxSTWv",
                    "key_type": "ed25519",
                    "method": "sov",
                    "posture": "wallet_only",
                    "verkey": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "PATCH",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "rotate_keypair",
          "originalEndpointId": "wallet.rotate_keypair",
          "name": "Rotate keypair for a DID not posted to the ledger",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/wallet/did/local/rotate-keypair"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "DID of interest",
              "key": "did",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "WalletModuleResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/wallet/did/local/rotate-keypair",
              "pathParameters": {},
              "queryParameters": {
                "did": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_public_did",
          "originalEndpointId": "wallet.get_public_did",
          "name": "Fetch the current public DID",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/wallet/did/public"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "DIDResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/wallet/did/public",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "result": {
                    "did": "did:peer:WgWxqztrNooG92RXvxSTWv",
                    "key_type": "ed25519",
                    "method": "sov",
                    "posture": "wallet_only",
                    "verkey": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "result": {
                    "did": "did:peer:WgWxqztrNooG92RXvxSTWv",
                    "key_type": "ed25519",
                    "method": "sov",
                    "posture": "wallet_only",
                    "verkey": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "set_public_did",
          "originalEndpointId": "wallet.set_public_did",
          "name": "Assign the current public DID",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/wallet/did/public"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "DID of interest",
              "key": "did",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            },
            {
              "description": "Connection identifier",
              "key": "conn_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Create Transaction For Endorser's signature",
              "key": "create_transaction_for_endorser",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "description": "Mediation identifier",
              "key": "mediation_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "DIDResult"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/wallet/did/public",
              "pathParameters": {},
              "queryParameters": {
                "did": "foo",
                "conn_id": "foo",
                "create_transaction_for_endorser": true,
                "mediation_id": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "result": {
                    "did": "did:peer:WgWxqztrNooG92RXvxSTWv",
                    "key_type": "ed25519",
                    "method": "sov",
                    "posture": "wallet_only",
                    "verkey": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "result": {
                    "did": "did:peer:WgWxqztrNooG92RXvxSTWv",
                    "key_type": "ed25519",
                    "method": "sov",
                    "posture": "wallet_only",
                    "verkey": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "get_did_endpoint",
          "originalEndpointId": "wallet.get_did_endpoint",
          "name": "Query DID endpoint in wallet",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/wallet/get-did-endpoint"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "DID of interest",
              "key": "did",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "DIDEndpoint"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/wallet/get-did-endpoint",
              "pathParameters": {},
              "queryParameters": {
                "did": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "did": "WgWxqztrNooG92RXvxSTWv",
                  "endpoint": "https://myhost:8021"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "did": "WgWxqztrNooG92RXvxSTWv",
                  "endpoint": "https://myhost:8021"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "/",
          "environments": [
            {
              "id": "/",
              "baseUrl": "/"
            }
          ],
          "id": "set_did_endpoint",
          "originalEndpointId": "wallet.set_did_endpoint",
          "name": "Update endpoint in wallet and on ledger if posted to it",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/wallet/set-did-endpoint"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Connection identifier",
              "key": "conn_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Create Transaction For Endorser's signature",
              "key": "create_transaction_for_endorser",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          ],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "DIDEndpointWithType"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "WalletModuleResponse"
              }
            },
            "statusCode": 200,
            "description": ""
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/wallet/set-did-endpoint",
              "pathParameters": {},
              "queryParameters": {
                "conn_id": "foo",
                "create_transaction_for_endorser": true
              },
              "headers": {},
              "requestBody": {
                "did": "WgWxqztrNooG92RXvxSTWv",
                "endpoint": "https://myhost:8021",
                "endpoint_type": "Endpoint"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "did": "WgWxqztrNooG92RXvxSTWv",
                  "endpoint": "https://myhost:8021",
                  "endpoint_type": "Endpoint"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    }
  },
  "rootPackage": {
    "endpoints": [
      {
        "auth": true,
        "method": "POST",
        "defaultEnvironment": "/",
        "environments": [
          {
            "id": "/",
            "baseUrl": "/"
          }
        ],
        "id": "endorse-transaction",
        "originalEndpointId": "endorse-transaction",
        "name": "For Endorser to endorse a particular transaction record",
        "path": {
          "pathParameters": [
            {
              "description": "Transaction identifier",
              "key": "tran_id",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          ],
          "parts": [
            {
              "type": "literal",
              "value": ""
            },
            {
              "type": "literal",
              "value": "/transactions/"
            },
            {
              "type": "pathParameter",
              "value": "tran_id"
            },
            {
              "type": "literal",
              "value": "/endorse"
            }
          ]
        },
        "queryParameters": [
          {
            "description": "Endorser DID",
            "key": "endorser_did",
            "type": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "headers": [],
        "response": {
          "type": {
            "type": "reference",
            "value": {
              "type": "id",
              "value": "TransactionRecord"
            }
          },
          "statusCode": 200,
          "description": ""
        },
        "errorsV2": [],
        "examples": [
          {
            "name": "",
            "description": "",
            "path": "/transactions/",
            "pathParameters": {
              "tran_id": "foo"
            },
            "queryParameters": {
              "endorser_did": "foo"
            },
            "headers": {},
            "responseStatusCode": 200,
            "responseBody": {
              "type": "json",
              "value": {
                "_type": "101",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "created_at": "2021-12-31 23:59:59+00:00",
                "endorser_write_txn": true,
                "formats": [
                  {
                    "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "format": "dif/endorse-transaction/request@v1.0"
                  },
                  {
                    "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "format": "dif/endorse-transaction/request@v1.0"
                  }
                ],
                "messages_attach": [
                  {},
                  {}
                ],
                "meta_data": {},
                "signature_request": [
                  {},
                  {}
                ],
                "signature_response": [
                  {},
                  {}
                ],
                "state": "active",
                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "timing": {},
                "trace": true,
                "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "updated_at": "2021-12-31 23:59:59+00:00"
              }
            },
            "responseBodyV3": {
              "type": "json",
              "value": {
                "_type": "101",
                "connection_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "created_at": "2021-12-31 23:59:59+00:00",
                "endorser_write_txn": true,
                "formats": [
                  {
                    "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "format": "dif/endorse-transaction/request@v1.0"
                  },
                  {
                    "attach_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "format": "dif/endorse-transaction/request@v1.0"
                  }
                ],
                "messages_attach": [
                  {},
                  {}
                ],
                "meta_data": {},
                "signature_request": [
                  {},
                  {}
                ],
                "signature_response": [
                  {},
                  {}
                ],
                "state": "active",
                "thread_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "timing": {},
                "trace": true,
                "transaction_id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "updated_at": "2021-12-31 23:59:59+00:00"
              }
            }
          }
        ],
        "protocol": {
          "type": "rest"
        }
      }
    ],
    "webhooks": [],
    "websockets": [],
    "types": [
      "AMLRecord",
      "ActionMenuFetchResult",
      "ActionMenuModulesResult",
      "AdminConfig",
      "AdminMediationDeny",
      "AdminModules",
      "AdminReset",
      "AdminShutdown",
      "AdminStatus",
      "AdminStatusLiveliness",
      "AdminStatusReadiness",
      "AttachDecorator",
      "AttachDecoratorData",
      "AttachDecoratorData1JWS",
      "AttachDecoratorDataJWS",
      "AttachDecoratorDataJWSHeader",
      "AttachmentDef",
      "AttributeMimeTypesResult",
      "BasicMessageModuleResponse",
      "ClaimFormat",
      "ClearPendingRevocationsRequest",
      "ConnRecord",
      "ConnectionInvitation",
      "ConnectionList",
      "ConnectionMetadata",
      "ConnectionMetadataSetRequest",
      "ConnectionModuleResponse",
      "ConnectionStaticRequest",
      "ConnectionStaticResult",
      "Constraints",
      "CreateInvitationRequest",
      "CreateWalletRequest",
      "CreateWalletResponse",
      "CreateWalletTokenRequest",
      "CreateWalletTokenResponse",
      "CredAttrSpec",
      "CredDefValue",
      "CredDefValuePrimary",
      "CredDefValueRevocation",
      "CredInfoList",
      "CredRevIndyRecordsResult",
      "CredRevRecordDetailsResult",
      "CredRevRecordResult",
      "CredRevokedResult",
      "Credential",
      "CredentialDefinition",
      "CredentialDefinitionGetResult",
      "CredentialDefinitionSendRequest",
      "CredentialDefinitionSendResult",
      "CredentialDefinitionsCreatedResult",
      "CredentialOffer",
      "CredentialPreview",
      "CredentialProposal",
      "CredentialStatusOptions",
      "DID",
      "DIDCreate",
      "DIDCreateOptions",
      "DIDEndpoint",
      "DIDEndpointWithType",
      "DIDList",
      "DIDResult",
      "DIDXRequest",
      "DIFField",
      "DIFHolder",
      "DIFOptions",
      "DIFPresSpec",
      "DIFProofProposal",
      "DIFProofRequest",
      "Date",
      "Disclose",
      "Disclosures",
      "Doc",
      "EndorserInfo",
      "EndpointsResult",
      "Filter",
      "Generated",
      "GetDIDEndpointResponse",
      "GetDIDVerkeyResponse",
      "GetNymRoleResponse",
      "HolderModuleResponse",
      "IndyAttrValue",
      "IndyCredAbstract",
      "IndyCredInfo",
      "IndyCredPrecis",
      "IndyCredRequest",
      "IndyCredential",
      "IndyEQProof",
      "IndyGEProof",
      "IndyGEProofPred",
      "IndyKeyCorrectnessProof",
      "IndyNonRevocProof",
      "IndyNonRevocationInterval",
      "IndyPresAttrSpec",
      "IndyPresPredSpec",
      "IndyPresPreview",
      "IndyPresSpec",
      "IndyPrimaryProof",
      "IndyProof",
      "IndyProofIdentifier",
      "IndyProofProof",
      "IndyProofProofAggregatedProof",
      "IndyProofProofProofsProof",
      "IndyProofReqAttrSpec",
      "IndyProofReqAttrSpecNonRevoked",
      "IndyProofReqPredSpec",
      "IndyProofReqPredSpecNonRevoked",
      "IndyProofRequest",
      "IndyProofRequestNonRevoked",
      "IndyProofRequestedProof",
      "IndyProofRequestedProofPredicate",
      "IndyProofRequestedProofRevealedAttr",
      "IndyProofRequestedProofRevealedAttrGroup",
      "IndyRequestedCredsRequestedAttr",
      "IndyRequestedCredsRequestedPred",
      "IndyRevRegDef",
      "IndyRevRegDefValue",
      "IndyRevRegDefValuePublicKeys",
      "IndyRevRegDefValuePublicKeysAccumKey",
      "IndyRevRegEntry",
      "IndyRevRegEntryValue",
      "InputDescriptors",
      "IntroModuleResponse",
      "InvitationCreateRequest",
      "InvitationMessage",
      "InvitationRecord",
      "InvitationResult",
      "IssueCredentialModuleResponse",
      "IssuerCredRevRecord",
      "IssuerRevRegRecord",
      "Keylist",
      "KeylistQuery",
      "KeylistQueryFilterRequest",
      "KeylistQueryPaginate",
      "KeylistUpdate",
      "KeylistUpdateRequest",
      "KeylistUpdateRule",
      "LDProofVCDetail",
      "LDProofVCDetailOptions",
      "LedgerConfigInstance",
      "LedgerConfigList",
      "LedgerModulesResult",
      "LinkedDataProof",
      "MediationCreateRequest",
      "MediationDeny",
      "MediationGrant",
      "MediationIdMatchInfo",
      "MediationList",
      "MediationRecord",
      "Menu",
      "MenuForm",
      "MenuFormParam",
      "MenuJson",
      "MenuOption",
      "MultitenantModuleResponse",
      "OobRecord",
      "PerformRequest",
      "PingRequest",
      "PingRequestResponse",
      "PresentationDefinition",
      "PresentationProposal",
      "PresentationRequest",
      "ProtocolDescriptor",
      "PublishRevocations",
      "Queries",
      "Query",
      "QueryItem",
      "RawEncoded",
      "ReceiveInvitationRequest",
      "RemoveWalletRequest",
      "ResolutionResult",
      "RevRegCreateRequest",
      "RevRegIssuedResult",
      "RevRegResult",
      "RevRegUpdateTailsFileUri",
      "RevRegWalletUpdatedResult",
      "RevRegsCreated",
      "RevocationModuleResponse",
      "RevokeRequest",
      "RouteRecord",
      "Schema",
      "SchemaGetResult",
      "SchemaInputDescriptor",
      "SchemaSendRequest",
      "SchemaSendResult",
      "SchemasCreatedResult",
      "SchemasInputDescriptorFilter",
      "SendMenu",
      "SendMessage",
      "ServiceDecorator",
      "SignRequest",
      "SignResponse",
      "SignatureOptions",
      "SignedDoc",
      "SubmissionRequirements",
      "TAAAccept",
      "TAAAcceptance",
      "TAAInfo",
      "TAARecord",
      "TAAResult",
      "TailsDeleteResponse",
      "TransactionJobs",
      "TransactionList",
      "TransactionRecord",
      "TxnOrCredentialDefinitionSendResult",
      "TxnOrPublishRevocationsResult",
      "TxnOrRegisterLedgerNymResponse",
      "TxnOrRevRegResult",
      "TxnOrSchemaSendResult",
      "UpdateWalletRequest",
      "V10CredentialBoundOfferRequest",
      "V10CredentialConnFreeOfferRequest",
      "V10CredentialCreate",
      "V10CredentialExchange",
      "V10CredentialExchangeListResult",
      "V10CredentialFreeOfferRequest",
      "V10CredentialIssueRequest",
      "V10CredentialProblemReportRequest",
      "V10CredentialProposalRequestMand",
      "V10CredentialProposalRequestOpt",
      "V10CredentialStoreRequest",
      "V10DiscoveryExchangeListResult",
      "V10DiscoveryRecord",
      "V10PresentProofModuleResponse",
      "V10PresentationCreateRequestRequest",
      "V10PresentationExchange",
      "V10PresentationExchangeList",
      "V10PresentationProblemReportRequest",
      "V10PresentationProposalRequest",
      "V10PresentationSendRequestRequest",
      "V10PresentationSendRequestToProposal",
      "V20CredAttrSpec",
      "V20CredBoundOfferRequest",
      "V20CredExFree",
      "V20CredExRecord",
      "V20CredExRecordByFormat",
      "V20CredExRecordDetail",
      "V20CredExRecordIndy",
      "V20CredExRecordLDProof",
      "V20CredExRecordListResult",
      "V20CredFilter",
      "V20CredFilterIndy",
      "V20CredFilterLDProof",
      "V20CredFormat",
      "V20CredIssue",
      "V20CredIssueProblemReportRequest",
      "V20CredIssueRequest",
      "V20CredOffer",
      "V20CredOfferConnFreeRequest",
      "V20CredOfferRequest",
      "V20CredPreview",
      "V20CredProposal",
      "V20CredRequest",
      "V20CredRequestFree",
      "V20CredRequestRequest",
      "V20CredStoreRequest",
      "V20DiscoveryExchangeListResult",
      "V20DiscoveryExchangeResult",
      "V20DiscoveryRecord",
      "V20IssueCredSchemaCore",
      "V20IssueCredentialModuleResponse",
      "V20Pres",
      "V20PresCreateRequestRequest",
      "V20PresExRecord",
      "V20PresExRecordByFormat",
      "V20PresExRecordList",
      "V20PresFormat",
      "V20PresProblemReportRequest",
      "V20PresProposal",
      "V20PresProposalByFormat",
      "V20PresProposalRequest",
      "V20PresRequest",
      "V20PresRequestByFormat",
      "V20PresSendRequestRequest",
      "V20PresSpecByFormatRequest",
      "V20PresentProofModuleResponse",
      "V20PresentationSendRequestToProposal",
      "VCRecord",
      "VCRecordList",
      "VerifyRequest",
      "VerifyResponse",
      "W3CCredentialsListRequest",
      "WalletList",
      "WalletModuleResponse",
      "WalletRecord",
      "WriteLedgerRequest",
      "ActionMenuFetchResult_result",
      "AttachDecoratorData_jws",
      "CredDefValue_primary",
      "CredDefValue_revocation",
      "Credential_proof",
      "CredentialDefinition_value",
      "DIDCreate_options",
      "DIDXRequest_did_doc_attach",
      "Doc_options",
      "IndyCredAbstract_key_correctness_proof",
      "IndyCredPrecis_cred_info",
      "IndyCredPrecis_interval",
      "IndyCredential_values_value",
      "IndyPrimaryProof_eq_proof",
      "IndyProof_proof",
      "IndyProof_requested_proof",
      "IndyProofProof_aggregated_proof",
      "IndyProofProofProofsProof_non_revoc_proof",
      "IndyProofProofProofsProof_primary_proof",
      "IndyProofReqAttrSpec_non_revoked",
      "IndyProofReqPredSpec_non_revoked",
      "IndyProofRequest_non_revoked",
      "IndyRevRegDef_value",
      "IndyRevRegDefValue_publicKeys",
      "IndyRevRegEntry_value",
      "InputDescriptors_schema",
      "InvitationRecord_invitation",
      "IssuerRevRegRecord_revoc_reg_def",
      "IssuerRevRegRecord_revoc_reg_entry",
      "KeylistQuery_paginate",
      "LDProofVCDetail_credential",
      "LDProofVCDetail_options",
      "LDProofVCDetailOptions_credentialStatus",
      "SchemaSendResult_schema",
      "SendMenu_menu",
      "SignedDoc_proof",
      "TxnOrCredentialDefinitionSendResult_txn",
      "TxnOrPublishRevocationsResult_txn",
      "TxnOrRegisterLedgerNymResponse_txn",
      "TxnOrRevRegResult_txn",
      "TxnOrSchemaSendResult_sent",
      "TxnOrSchemaSendResult_txn",
      "V10CredentialBoundOfferRequest_counter_proposal",
      "V10CredentialExchange_credential",
      "V10CredentialExchange_credential_offer",
      "V10CredentialExchange_credential_offer_dict",
      "V10CredentialExchange_credential_proposal_dict",
      "V10CredentialExchange_credential_request",
      "V10CredentialExchange_raw_credential",
      "V10DiscoveryExchangeListResult_results_inner",
      "V10DiscoveryRecord_disclose",
      "V10DiscoveryRecord_query_msg",
      "V10PresentationExchange_presentation",
      "V10PresentationExchange_presentation_proposal_dict",
      "V10PresentationExchange_presentation_request",
      "V10PresentationExchange_presentation_request_dict",
      "V20CredBoundOfferRequest_counter_preview",
      "V20CredBoundOfferRequest_filter",
      "V20CredExRecord_by_format",
      "V20CredExRecord_cred_issue",
      "V20CredExRecord_cred_offer",
      "V20CredExRecord_cred_preview",
      "V20CredExRecord_cred_proposal",
      "V20CredExRecord_cred_request",
      "V20CredExRecordDetail_cred_ex_record",
      "V20CredFilter_indy",
      "V20CredFilter_ld_proof",
      "V20CredProposal_credential_preview",
      "V20CredRequestFree_filter",
      "V20DiscoveryExchangeListResult_results_inner",
      "V20DiscoveryRecord_disclosures",
      "V20DiscoveryRecord_queries_msg",
      "V20PresExRecord_by_format",
      "V20PresExRecord_pres",
      "V20PresExRecord_pres_proposal",
      "V20PresExRecord_pres_request",
      "V20PresProposalByFormat_dif",
      "V20PresProposalByFormat_indy",
      "V20PresRequestByFormat_dif",
      "V20PresRequestByFormat_indy",
      "V20PresSpecByFormatRequest_dif",
      "V20PresSpecByFormatRequest_indy",
      "VerifyRequest_doc"
    ],
    "subpackages": [
      "action-menu",
      "connection",
      "basicmessage",
      "trustping",
      "introduction",
      "credential-definition",
      "credentials",
      "did-exchange",
      "discover-features v2.0",
      "discover-features",
      "issue-credential v2.0",
      "issue-credential v1.0",
      "jsonld",
      "ledger",
      "mediation",
      "multitenancy",
      "out-of-band",
      "server",
      "present-proof v2.0",
      "present-proof v1.0",
      "resolver",
      "revocation",
      "schema",
      "endorse-transaction",
      "wallet"
    ]
  },
  "auth": {
    "type": "header",
    "headerWireValue": "Authorization",
    "nameOverride": "Authorization"
  },
  "snippetsConfiguration": {},
  "globalHeaders": []
}