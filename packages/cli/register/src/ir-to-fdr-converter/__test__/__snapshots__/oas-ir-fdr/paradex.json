{
  "types": {
    "requests.AccountMarginRequest": {
      "name": "requests.AccountMarginRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Leverage value (1 up to market's maximum leverage)",
            "key": "leverage",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Margin type (CROSS or ISOLATED)",
            "key": "margin_type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Specify sub-account ID to set margin for, if not provided, it will be the main account itself",
            "key": "on_behalf_of_account",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "RequestsAlgoOrderRequestSide": {
      "name": "RequestsAlgoOrderRequestSide",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "BUY"
          },
          {
            "value": "SELL"
          }
        ]
      }
    },
    "RequestsAlgoOrderRequestType": {
      "name": "RequestsAlgoOrderRequestType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "MARKET"
          },
          {
            "value": "LIMIT"
          },
          {
            "value": "STOP_LIMIT"
          },
          {
            "value": "STOP_MARKET"
          },
          {
            "value": "TAKE_PROFIT_LIMIT"
          },
          {
            "value": "TAKE_PROFIT_MARKET"
          },
          {
            "value": "STOP_LOSS_MARKET"
          },
          {
            "value": "STOP_LOSS_LIMIT"
          }
        ]
      }
    },
    "requests.AlgoOrderRequest": {
      "name": "requests.AlgoOrderRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Algo type, required for algo orders creation",
            "key": "algo_type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Duration in seconds for which the algo order will be running, required for algo orders creation",
            "key": "duration_seconds",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Market for which order is created",
            "key": "market",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Algo order side",
            "key": "side",
            "valueType": {
              "type": "id",
              "value": "RequestsAlgoOrderRequestSide"
            }
          },
          {
            "description": "Order Payload signed with STARK Private Key",
            "key": "signature",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Timestamp of order creation, used for signature verification",
            "key": "signature_timestamp",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Size of the algo order",
            "key": "size",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Algo order type, only MARKET is supported",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "RequestsAlgoOrderRequestType"
            }
          }
        ]
      }
    },
    "requests.CancelOrderBatchRequest": {
      "name": "requests.CancelOrderBatchRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of client order IDs to cancel",
            "key": "client_order_ids",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "List of order IDs to cancel",
            "key": "order_ids",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "requests.CreateVault": {
      "name": "requests.CreateVault",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Initial deposit transfer by vault owner",
            "key": "deposit_tx_signature",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Description for the vault",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "User's deposits lockup period in days",
            "key": "lockup_period",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Max TVL locked by the Vault, if any. 0 for unlimited",
            "key": "max_tvl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Unique name for the vault",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Vault owner profit share (percentage)",
            "key": "profit_share",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Public key of vault operator",
            "key": "public_key",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "requests.ModifyOrderRequest": {
      "name": "requests.ModifyOrderRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Order ID to be modified",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Market for which order is modified",
            "key": "market",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID corresponding to the configured isolated margin account.  Only for isolated margin orders",
            "key": "on_behalf_of_account",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Existing or modified price of the order",
            "key": "price",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Existing side of the order",
            "key": "side",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Order Payload signed with STARK Private Key",
            "key": "signature",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Timestamp of order creation, used for signature verification",
            "key": "signature_timestamp",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Existing or modified size of the order",
            "key": "size",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Existing type of the order",
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "requests.Onboarding": {
      "name": "requests.Onboarding",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Public key of the user being onboarded.",
            "key": "public_key",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Referral code of the user who referred the user being onboarded.",
            "key": "referral_code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "RequestsOrderRequestSide": {
      "name": "RequestsOrderRequestSide",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "BUY"
          },
          {
            "value": "SELL"
          }
        ]
      }
    },
    "RequestsOrderRequestType": {
      "name": "RequestsOrderRequestType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "MARKET"
          },
          {
            "value": "LIMIT"
          },
          {
            "value": "STOP_LIMIT"
          },
          {
            "value": "STOP_MARKET"
          },
          {
            "value": "TAKE_PROFIT_LIMIT"
          },
          {
            "value": "TAKE_PROFIT_MARKET"
          },
          {
            "value": "STOP_LOSS_MARKET"
          },
          {
            "value": "STOP_LOSS_LIMIT"
          }
        ]
      }
    },
    "requests.OrderRequest": {
      "name": "requests.OrderRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Unique client assigned ID for the order",
            "key": "client_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "maxLength": 64
                }
              }
            }
          },
          {
            "description": "Order flags, allow flag: REDUCE_ONLY",
            "key": "flags",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.OrderFlag"
                }
              }
            }
          },
          {
            "description": "Order Instruction, GTC, IOC or POST_ONLY if empty GTC",
            "key": "instruction",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Market for which order is created",
            "key": "market",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "ID corresponding to the configured isolated margin account.  Only for isolated margin orders",
            "key": "on_behalf_of_account",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Order price",
            "key": "price",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Order will be created if it is received by API within RecvWindow milliseconds from signature timestamp, minimum is 10 milliseconds",
            "key": "recv_window",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Order side",
            "key": "side",
            "valueType": {
              "type": "id",
              "value": "RequestsOrderRequestSide"
            }
          },
          {
            "description": "Order Payload signed with STARK Private Key",
            "key": "signature",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Timestamp of order creation, used for signature verification",
            "key": "signature_timestamp",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Size of the order",
            "key": "size",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Self Trade Prevention, EXPIRE_MAKER, EXPIRE_TAKER or EXPIRE_BOTH, if empty EXPIRE_TAKER",
            "key": "stp",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Trigger price for stop order",
            "key": "trigger_price",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Order type",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "RequestsOrderRequestType"
            }
          }
        ]
      }
    },
    "requests.PriceKind": {
      "name": "requests.PriceKind",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "last"
          },
          {
            "value": "mark"
          },
          {
            "value": "underlying"
          }
        ]
      }
    },
    "requests.UpdateAccountMaxSlippageRequest": {
      "name": "requests.UpdateAccountMaxSlippageRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "max_slippage",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "requests.UpdateTradingValueDisplayRequest": {
      "name": "requests.UpdateTradingValueDisplayRequest",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "trading_value_display",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "ResponsesApiResultsResultsItems": {
      "name": "ResponsesApiResultsResultsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "responses.APIResults": {
      "name": "responses.APIResults",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Array of results",
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ResponsesApiResultsResultsItems"
                }
              }
            }
          }
        ]
      }
    },
    "responses.AccountHistoricalDataResp": {
      "name": "responses.AccountHistoricalDataResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Ordered list of datapoints",
            "key": "data",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "description": "Ordered list of timestamps",
            "key": "timestamps",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "ResponsesAccountInfoResponseKind": {
      "name": "ResponsesAccountInfoResponseKind",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": ""
          },
          {
            "value": "main"
          },
          {
            "value": "subaccount"
          },
          {
            "value": "vault_operator"
          },
          {
            "value": "vault_sub_operator"
          }
        ]
      }
    },
    "responses.AccountInfoResponse": {
      "name": "responses.AccountInfoResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Starknet address of the account",
            "key": "account",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Account creation time",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Account derivation path used to derive the account, if a sub-account",
            "key": "derivation_path",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "fees",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "responses.Fees"
              }
            }
          },
          {
            "description": "Isolated market for the account",
            "key": "isolated_market",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Account kind",
            "key": "kind",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesAccountInfoResponseKind"
              }
            }
          },
          {
            "description": "Starknet address of the parent account",
            "key": "parent_account",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Starknet public key",
            "key": "public_key",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Username of the account",
            "key": "username",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.AccountKind": {
      "name": "responses.AccountKind",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": ""
          },
          {
            "value": "main"
          },
          {
            "value": "subaccount"
          },
          {
            "value": "vault_operator"
          },
          {
            "value": "vault_sub_operator"
          }
        ]
      }
    },
    "responses.AccountMarginEntry": {
      "name": "responses.AccountMarginEntry",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Isolated margin leverage",
            "key": "isolated_margin_leverage",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Leverage value",
            "key": "leverage",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Margin type (CROSS/ISOLATED)",
            "key": "margin_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Market symbol",
            "key": "market",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.AccountProfileResp": {
      "name": "responses.AccountProfileResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "discord",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "responses.DiscordProfile"
              }
            }
          },
          {
            "key": "is_username_private",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          {
            "key": "market_max_slippage",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "key": "nfts",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.Nft"
                }
              }
            }
          },
          {
            "key": "programs_eligibility",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "responses.ProgramsEligibility"
              }
            }
          },
          {
            "key": "referral",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "responses.ReferralConfigResp"
              }
            }
          },
          {
            "key": "referral_code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "referred_by",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "twitter",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "responses.TwitterProfile"
              }
            }
          },
          {
            "key": "username",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.AccountSettingsResp": {
      "name": "responses.AccountSettingsResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "trading_value_display",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.AccountSummaryResponse": {
      "name": "responses.AccountSummaryResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "User's starknet account",
            "key": "account",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Current account value [with unrealized P&Ls]",
            "key": "account_value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Free collateral available (Account value in excess of Initial Margin required)",
            "key": "free_collateral",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Amount required to open trade for the existing positions",
            "key": "initial_margin_requirement",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Amount required to maintain exisiting positions",
            "key": "maintenance_margin_requirement",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Acc value in excess of maintenance margin required",
            "key": "margin_cushion",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Unique increasing number (non-sequential) that is assigned to this account update. Can be used to deduplicate multiple feeds",
            "key": "seq_no",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Settlement asset for the account",
            "key": "settlement_asset",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Status of the acc - like ACTIVE, LIQUIDATION",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "User's total collateral",
            "key": "total_collateral",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Account last updated time",
            "key": "updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "ResponsesAlgoOrderRespAlgoType": {
      "name": "ResponsesAlgoOrderRespAlgoType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": ""
          },
          {
            "value": "TWAP"
          }
        ]
      }
    },
    "ResponsesAlgoOrderRespSide": {
      "name": "ResponsesAlgoOrderRespSide",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "BUY"
          },
          {
            "value": "SELL"
          }
        ]
      }
    },
    "ResponsesAlgoOrderRespStatus": {
      "name": "ResponsesAlgoOrderRespStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "NEW"
          },
          {
            "value": "UNTRIGGERED"
          },
          {
            "value": "OPEN"
          },
          {
            "value": "CLOSED"
          }
        ]
      }
    },
    "responses.AlgoOrderResp": {
      "name": "responses.AlgoOrderResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Account identifier (user's account address)",
            "key": "account",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Algo type",
            "key": "algo_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesAlgoOrderRespAlgoType"
              }
            }
          },
          {
            "description": "Average fill price of the order",
            "key": "avg_fill_price",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Reason for algo cancellation if it was closed by cancel",
            "key": "cancel_reason",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Algo creation time",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Algo end time",
            "key": "end_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Unique algo identifier",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Algo last update time.  No changes once status=CLOSED",
            "key": "last_updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Market to which algo belongs",
            "key": "market",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Remaining size of the algo",
            "key": "remaining_size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Algo side",
            "key": "side",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesAlgoOrderRespSide"
              }
            }
          },
          {
            "description": "Algo size",
            "key": "size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Algo status",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesAlgoOrderRespStatus"
              }
            }
          }
        ]
      }
    },
    "responses.AlgoType": {
      "name": "responses.AlgoType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": ""
          },
          {
            "value": "TWAP"
          }
        ]
      }
    },
    "ResponsesApiErrorError": {
      "name": "ResponsesApiErrorError",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "VALIDATION_ERROR"
          },
          {
            "value": "BINDING_ERROR"
          },
          {
            "value": "INTERNAL_ERROR"
          },
          {
            "value": "NOT_FOUND"
          },
          {
            "value": "SERVICE_UNAVAILABLE"
          },
          {
            "value": "INVALID_REQUEST_PARAMETER"
          },
          {
            "value": "ORDER_ID_NOT_FOUND"
          },
          {
            "value": "ORDER_IS_CLOSED"
          },
          {
            "value": "ORDER_IS_NOT_OPEN"
          },
          {
            "value": "INVALID_ORDER_SIZE"
          },
          {
            "value": "CLIENT_ORDER_ID_NOT_FOUND"
          },
          {
            "value": "DUPLICATED_CLIENT_ID"
          },
          {
            "value": "INVALID_PRICE_PRECISION"
          },
          {
            "value": "INVALID_SYMBOL"
          },
          {
            "value": "INVALID_TOKEN"
          },
          {
            "value": "INVALID_ETHEREUM_ADDRESS"
          },
          {
            "value": "INVALID_ETHEREUM_SIGNATURE"
          },
          {
            "value": "INVALID_STARKNET_ADDRESS"
          },
          {
            "value": "INVALID_STARKNET_SIGNATURE"
          },
          {
            "value": "STARKNET_SIGNATURE_VERIFICATION_FAILED"
          },
          {
            "value": "BAD_STARKNET_REQUEST"
          },
          {
            "value": "ETHEREUM_SIGNER_MISMATCH"
          },
          {
            "value": "ETHEREUM_HASH_MISMATCH"
          },
          {
            "value": "NOT_ONBOARDED"
          },
          {
            "value": "INVALID_TIMESTAMP"
          },
          {
            "value": "INVALID_SIGNATURE_EXPIRATION"
          },
          {
            "value": "ACCOUNT_NOT_FOUND"
          },
          {
            "value": "INVALID_ORDER_SIGNATURE"
          },
          {
            "value": "PUBLIC_KEY_INVALID"
          },
          {
            "value": "UNAUTHORIZED_ETHEREUM_ADDRESS"
          },
          {
            "value": "UNAUTHORIZED_ERROR"
          },
          {
            "value": "ETHEREUM_ADDRESS_ALREADY_ONBOARDED"
          },
          {
            "value": "MARKET_NOT_FOUND"
          },
          {
            "value": "ALLOWLIST_ENTRY_NOT_FOUND"
          },
          {
            "value": "USERNAME_IN_USE"
          },
          {
            "value": "GEO_IP_BLOCK"
          },
          {
            "value": "ETHEREUM_ADDRESS_BLOCKED"
          },
          {
            "value": "PROGRAM_NOT_FOUND"
          },
          {
            "value": "PROGRAM_NOT_SUPPORTED"
          },
          {
            "value": "INVALID_DASHBOARD"
          },
          {
            "value": "MARKET_NOT_OPEN"
          },
          {
            "value": "INVALID_REFERRAL_CODE"
          },
          {
            "value": "REQUEST_NOT_ALLOWED"
          },
          {
            "value": "PARENT_ADDRESS_ALREADY_ONBOARDED"
          },
          {
            "value": "INVALID_PARENT_ACCOUNT"
          },
          {
            "value": "INVALID_VAULT_OPERATOR_CHAIN"
          },
          {
            "value": "VAULT_OPERATOR_ALREADY_ONBOARDED"
          },
          {
            "value": "VAULT_NAME_IN_USE"
          },
          {
            "value": "VAULT_NOT_FOUND"
          },
          {
            "value": "VAULT_STRATEGY_NOT_FOUND"
          },
          {
            "value": "VAULT_LIMIT_REACHED"
          },
          {
            "value": "BATCH_SIZE_OUT_OF_RANGE"
          },
          {
            "value": "ISOLATED_MARKET_ACCOUNT_MISMATCH"
          },
          {
            "value": "NO_ACCESS_TO_MARKET"
          },
          {
            "value": "POINTS_SUMMARY_NOT_FOUND"
          },
          {
            "value": "ALGO_ID_NOT_FOUND"
          },
          {
            "value": "INVALID_DERIVATION_PATH"
          },
          {
            "value": "PROFILE_STATS_NOT_FOUND"
          },
          {
            "value": "INVALID_CHAIN"
          },
          {
            "value": "INVALID_LAYERSWAP_SWAP"
          },
          {
            "value": "SOCIAL_USERNAME_IN_USE"
          },
          {
            "value": "INVALID_OAUTH_REQUEST"
          }
        ]
      }
    },
    "responses.ApiError": {
      "name": "responses.ApiError",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "unique immutable string identifier for specific error",
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesApiErrorError"
              }
            }
          },
          {
            "description": "detailed description of error and how to address it",
            "key": "message",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.AskBidArray": {
      "name": "responses.AskBidArray",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of Ask sizes and prices",
            "key": "asks",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "description": "List of Bid sizes and prices",
            "key": "bids",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "description": "Last update to the orderbook in milliseconds",
            "key": "last_updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Market name",
            "key": "market",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Sequence number of the orderbook",
            "key": "seq_no",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "responses.AuthResp": {
      "name": "responses.AuthResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Authentication token",
            "key": "jwt_token",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.BBOResp": {
      "name": "responses.BBOResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Best ask price",
            "key": "ask",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Best ask size",
            "key": "ask_size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Best bid price",
            "key": "bid",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Best bid size",
            "key": "bid_size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Last update to the orderbook in milliseconds",
            "key": "last_updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Symbol of the market",
            "key": "market",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Sequence number of the orderbook",
            "key": "seq_no",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "responses.BalanceResp": {
      "name": "responses.BalanceResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Balance last updated time",
            "key": "last_updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Balance amount of settlement token (includes deposits, withdrawals, realized PnL, realized funding, and fees)",
            "key": "size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Name of the token",
            "key": "token",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.BatchResponse": {
      "name": "responses.BatchResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "errors",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.ErrorResponse"
                }
              }
            }
          },
          {
            "key": "orders",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.OrderResp"
                }
              }
            }
          }
        ]
      }
    },
    "responses.BridgedToken": {
      "name": "responses.BridgedToken",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "decimals",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "key": "l1_bridge_address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "l1_token_address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "l2_bridge_address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "l2_token_address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.CancelOrderBatchResponse": {
      "name": "responses.CancelOrderBatchResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of cancellation results",
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.CancelOrderResult"
                }
              }
            }
          }
        ]
      }
    },
    "responses.CancelOrderResult": {
      "name": "responses.CancelOrderResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Account that owns the order",
            "key": "account",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Client order ID",
            "key": "client_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Order ID",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Market of the order",
            "key": "market",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Status of the cancellation: QUEUED_FOR_CANCELLATION, ALREADY_CLOSED, NOT_FOUND",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.Delta1CrossMarginParams": {
      "name": "responses.Delta1CrossMarginParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Initial Margin Base",
            "key": "imf_base",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Initial Margin Factor, always 0.",
            "key": "imf_factor",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Initial Margin Shift, unused, always 0.",
            "key": "imf_shift",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Maintenance Margin Factor",
            "key": "mmf_factor",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.DiscordProfile": {
      "name": "responses.DiscordProfile",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "image_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "username",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.ErrorCode": {
      "name": "responses.ErrorCode",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "VALIDATION_ERROR"
          },
          {
            "value": "BINDING_ERROR"
          },
          {
            "value": "INTERNAL_ERROR"
          },
          {
            "value": "NOT_FOUND"
          },
          {
            "value": "SERVICE_UNAVAILABLE"
          },
          {
            "value": "INVALID_REQUEST_PARAMETER"
          },
          {
            "value": "ORDER_ID_NOT_FOUND"
          },
          {
            "value": "ORDER_IS_CLOSED"
          },
          {
            "value": "ORDER_IS_NOT_OPEN"
          },
          {
            "value": "INVALID_ORDER_SIZE"
          },
          {
            "value": "CLIENT_ORDER_ID_NOT_FOUND"
          },
          {
            "value": "DUPLICATED_CLIENT_ID"
          },
          {
            "value": "INVALID_PRICE_PRECISION"
          },
          {
            "value": "INVALID_SYMBOL"
          },
          {
            "value": "INVALID_TOKEN"
          },
          {
            "value": "INVALID_ETHEREUM_ADDRESS"
          },
          {
            "value": "INVALID_ETHEREUM_SIGNATURE"
          },
          {
            "value": "INVALID_STARKNET_ADDRESS"
          },
          {
            "value": "INVALID_STARKNET_SIGNATURE"
          },
          {
            "value": "STARKNET_SIGNATURE_VERIFICATION_FAILED"
          },
          {
            "value": "BAD_STARKNET_REQUEST"
          },
          {
            "value": "ETHEREUM_SIGNER_MISMATCH"
          },
          {
            "value": "ETHEREUM_HASH_MISMATCH"
          },
          {
            "value": "NOT_ONBOARDED"
          },
          {
            "value": "INVALID_TIMESTAMP"
          },
          {
            "value": "INVALID_SIGNATURE_EXPIRATION"
          },
          {
            "value": "ACCOUNT_NOT_FOUND"
          },
          {
            "value": "INVALID_ORDER_SIGNATURE"
          },
          {
            "value": "PUBLIC_KEY_INVALID"
          },
          {
            "value": "UNAUTHORIZED_ETHEREUM_ADDRESS"
          },
          {
            "value": "UNAUTHORIZED_ERROR"
          },
          {
            "value": "ETHEREUM_ADDRESS_ALREADY_ONBOARDED"
          },
          {
            "value": "MARKET_NOT_FOUND"
          },
          {
            "value": "ALLOWLIST_ENTRY_NOT_FOUND"
          },
          {
            "value": "USERNAME_IN_USE"
          },
          {
            "value": "GEO_IP_BLOCK"
          },
          {
            "value": "ETHEREUM_ADDRESS_BLOCKED"
          },
          {
            "value": "PROGRAM_NOT_FOUND"
          },
          {
            "value": "PROGRAM_NOT_SUPPORTED"
          },
          {
            "value": "INVALID_DASHBOARD"
          },
          {
            "value": "MARKET_NOT_OPEN"
          },
          {
            "value": "INVALID_REFERRAL_CODE"
          },
          {
            "value": "REQUEST_NOT_ALLOWED"
          },
          {
            "value": "PARENT_ADDRESS_ALREADY_ONBOARDED"
          },
          {
            "value": "INVALID_PARENT_ACCOUNT"
          },
          {
            "value": "INVALID_VAULT_OPERATOR_CHAIN"
          },
          {
            "value": "VAULT_OPERATOR_ALREADY_ONBOARDED"
          },
          {
            "value": "VAULT_NAME_IN_USE"
          },
          {
            "value": "VAULT_NOT_FOUND"
          },
          {
            "value": "VAULT_STRATEGY_NOT_FOUND"
          },
          {
            "value": "VAULT_LIMIT_REACHED"
          },
          {
            "value": "BATCH_SIZE_OUT_OF_RANGE"
          },
          {
            "value": "ISOLATED_MARKET_ACCOUNT_MISMATCH"
          },
          {
            "value": "NO_ACCESS_TO_MARKET"
          },
          {
            "value": "POINTS_SUMMARY_NOT_FOUND"
          },
          {
            "value": "ALGO_ID_NOT_FOUND"
          },
          {
            "value": "INVALID_DERIVATION_PATH"
          },
          {
            "value": "PROFILE_STATS_NOT_FOUND"
          },
          {
            "value": "INVALID_CHAIN"
          },
          {
            "value": "INVALID_LAYERSWAP_SWAP"
          },
          {
            "value": "SOCIAL_USERNAME_IN_USE"
          },
          {
            "value": "INVALID_OAUTH_REQUEST"
          }
        ]
      }
    },
    "responses.ErrorResponse": {
      "name": "responses.ErrorResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "error",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "responses.ErrorCode"
              }
            }
          },
          {
            "key": "message",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.Fees": {
      "name": "responses.Fees",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "multiplier used to calculate the commission amount from fee",
            "key": "commission_rate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "multiplier used to calculate the fee rate after discount, if discount is 10%, then discount_rate is 0.9",
            "key": "discount_rate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "maker_rate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "option_maker_rate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "option_taker_rate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "taker_rate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ResponsesFillResultFillType": {
      "name": "ResponsesFillResultFillType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "LIQUIDATION"
          },
          {
            "value": "TRANSFER"
          },
          {
            "value": "FILL"
          },
          {
            "value": "SETTLE_MARKET"
          }
        ]
      }
    },
    "ResponsesFillResultLiquidity": {
      "description": "Maker or Taker",
      "name": "ResponsesFillResultLiquidity",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "TAKER"
          },
          {
            "value": "MAKER"
          }
        ]
      }
    },
    "ResponsesFillResultSide": {
      "description": "Taker side",
      "name": "ResponsesFillResultSide",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "BUY"
          },
          {
            "value": "SELL"
          }
        ]
      }
    },
    "responses.FillResult": {
      "name": "responses.FillResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Account that made the fill",
            "key": "account",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Unique client assigned ID for the order",
            "key": "client_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Fill time",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Fee paid by the user",
            "key": "fee",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Asset that fee is charged in",
            "key": "fee_currency",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Fill type, can be FILL, LIQUIDATION or TRANSFER",
            "key": "fill_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesFillResultFillType"
              }
            }
          },
          {
            "description": "Unique string ID of fill per FillType",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Maker or Taker",
            "key": "liquidity",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesFillResultLiquidity"
              }
            }
          },
          {
            "description": "Market name",
            "key": "market",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Order ID",
            "key": "order_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Price at which order was filled",
            "key": "price",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Realized funding of the fill",
            "key": "realized_funding",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Realized PnL of the fill",
            "key": "realized_pnl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Remaining size of the order",
            "key": "remaining_size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Taker side",
            "key": "side",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesFillResultSide"
              }
            }
          },
          {
            "description": "Size of the fill",
            "key": "size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Underlying asset price of the fill (spot price)",
            "key": "underlying_price",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.FillType": {
      "name": "responses.FillType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "LIQUIDATION"
          },
          {
            "value": "TRANSFER"
          },
          {
            "value": "FILL"
          },
          {
            "value": "SETTLE_MARKET"
          }
        ]
      }
    },
    "responses.FundingDataResult": {
      "name": "responses.FundingDataResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Timestamp in milliseconds when the funding data was created",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Current funding index value as a decimal string",
            "key": "funding_index",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Current funding premium as a decimal string",
            "key": "funding_premium",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Current funding rate as a decimal string",
            "key": "funding_rate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Market represents the market identifier",
            "key": "market",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.FundingPayment": {
      "name": "responses.FundingPayment",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Account that made the payment",
            "key": "account",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Funding payment time",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Fill id that triggered the payment (if any)",
            "key": "fill_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Unique string ID to identify the payment",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Value of the funding index at the time of payment",
            "key": "index",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Market against which payment is made",
            "key": "market",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Payment amount in settlement asset",
            "key": "payment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.GetAccountMarginConfigsResp": {
      "name": "responses.GetAccountMarginConfigsResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Account ID",
            "key": "account",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "List of margin configurations per market",
            "key": "configs",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.AccountMarginEntry"
                }
              }
            }
          }
        ]
      }
    },
    "responses.GetAccountsInfoResponse": {
      "name": "responses.GetAccountsInfoResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.AccountInfoResponse"
                }
              }
            }
          }
        ]
      }
    },
    "responses.GetSubAccountsResponse": {
      "name": "responses.GetSubAccountsResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.AccountInfoResponse"
                }
              }
            }
          }
        ]
      }
    },
    "responses.Greeks": {
      "name": "responses.Greeks",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Market Delta",
            "key": "delta",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Market Gamma",
            "key": "gamma",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Market Rho",
            "key": "rho",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Market Vanna",
            "key": "vanna",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Market Vega",
            "key": "vega",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Market Volga",
            "key": "volga",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.InsuranceAccountResp": {
      "name": "responses.InsuranceAccountResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Starknet address of the Insurance fund",
            "key": "account",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Total account value of insurance fund",
            "key": "account_value",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Settlement Asset for the account",
            "key": "settlement_asset",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Account last updated time",
            "key": "updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "responses.LiquidationResp": {
      "name": "responses.LiquidationResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Liquidation created at timestamp",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Liquidation transaction hash",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.MarketChainDetails": {
      "name": "responses.MarketChainDetails",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Collateral address",
            "key": "collateral_address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Contract address",
            "key": "contract_address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Fee account address",
            "key": "fee_account_address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Maker fee",
            "key": "fee_maker",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Taker fee",
            "key": "fee_taker",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Insurance fund address",
            "key": "insurance_fund_address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Liquidation fee",
            "key": "liquidation_fee",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Oracle address",
            "key": "oracle_address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Market symbol",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.MarketKind": {
      "name": "responses.MarketKind",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": ""
          },
          {
            "value": "cross"
          },
          {
            "value": "isolated"
          }
        ]
      }
    },
    "ResponsesMarketRespAssetKind": {
      "description": "Type of asset",
      "name": "ResponsesMarketRespAssetKind",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "PERP"
          },
          {
            "value": "PERP_OPTION"
          }
        ]
      }
    },
    "ResponsesMarketRespChainDetails": {
      "description": "Chain details",
      "name": "ResponsesMarketRespChainDetails",
      "shape": {
        "type": "object",
        "extends": [
          "responses.MarketChainDetails"
        ],
        "properties": []
      }
    },
    "ResponsesMarketRespDelta1CrossMarginParams": {
      "description": "Delta1 Cross margin parameters",
      "name": "ResponsesMarketRespDelta1CrossMarginParams",
      "shape": {
        "type": "object",
        "extends": [
          "responses.Delta1CrossMarginParams"
        ],
        "properties": []
      }
    },
    "ResponsesMarketRespMarketKind": {
      "description": "Market's margin mode",
      "name": "ResponsesMarketRespMarketKind",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "cross"
          },
          {
            "value": "isolated"
          }
        ]
      }
    },
    "ResponsesMarketRespOptionCrossMarginParams": {
      "description": "Option Cross margin parameters",
      "name": "ResponsesMarketRespOptionCrossMarginParams",
      "shape": {
        "type": "object",
        "extends": [
          "responses.PerpetualOptionCrossMarginParams"
        ],
        "properties": []
      }
    },
    "ResponsesMarketRespOptionType": {
      "description": "Type of option",
      "name": "ResponsesMarketRespOptionType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "PUT"
          },
          {
            "value": "CALL"
          }
        ]
      }
    },
    "responses.MarketResp": {
      "name": "responses.MarketResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Type of asset",
            "key": "asset_kind",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesMarketRespAssetKind"
              }
            }
          },
          {
            "description": "Base currency of the market",
            "key": "base_currency",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Chain details",
            "key": "chain_details",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesMarketRespChainDetails"
              }
            }
          },
          {
            "description": "Clamp rate",
            "key": "clamp_rate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Delta1 Cross margin parameters",
            "key": "delta1_cross_margin_params",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesMarketRespDelta1CrossMarginParams"
              }
            }
          },
          {
            "description": "Market expiry time",
            "key": "expiry_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Funding period in hours",
            "key": "funding_period_hours",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Interest rate",
            "key": "interest_rate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "IV Bands Width",
            "key": "iv_bands_width",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Market's margin mode",
            "key": "market_kind",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesMarketRespMarketKind"
              }
            }
          },
          {
            "description": "Max funding rate",
            "key": "max_funding_rate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Max funding rate change",
            "key": "max_funding_rate_change",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Max open orders",
            "key": "max_open_orders",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Maximum order size in base currency",
            "key": "max_order_size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The maximum TOB spread allowed to apply funding rate changes",
            "key": "max_tob_spread",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Minimum order notional in USD. For futures: size*mark_price, for options: size*spot_price",
            "key": "min_notional",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Market open time in milliseconds",
            "key": "open_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Option Cross margin parameters",
            "key": "option_cross_margin_params",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesMarketRespOptionCrossMarginParams"
              }
            }
          },
          {
            "description": "Type of option",
            "key": "option_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesMarketRespOptionType"
              }
            }
          },
          {
            "description": "Oracle EWMA factor",
            "key": "oracle_ewma_factor",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Minimum size increment for base currency",
            "key": "order_size_increment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Position limit in base currency",
            "key": "position_limit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Price Bands Width, 0.05 means 5% price deviation allowed from mark price",
            "key": "price_bands_width",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Price feed id. Pyth price account used to price underlying asset",
            "key": "price_feed_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Minimum price increment of the market in USD",
            "key": "price_tick_size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Quote currency of the market",
            "key": "quote_currency",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Settlement currency of the market",
            "key": "settlement_currency",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Strike price for option market",
            "key": "strike_price",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Market symbol",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Market tags",
            "key": "tags",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "ResponsesMarketSummaryRespGreeks": {
      "description": "Greeks",
      "name": "ResponsesMarketSummaryRespGreeks",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Market Delta",
            "key": "delta",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Market Gamma",
            "key": "gamma",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Market Vega",
            "key": "vega",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "responses.MarketSummaryResp": {
      "name": "responses.MarketSummaryResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Best ask price",
            "key": "ask",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Ask implied volatility, for options",
            "key": "ask_iv",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Best bid price",
            "key": "bid",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Bid implied volatility, for options",
            "key": "bid_iv",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Market summary creation time",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Deprecated: Use greeks.delta instead",
            "key": "delta",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "[8 hour funding rate](https://docs.paradex.trade/risk-system/funding-mechanism#funding-rate)",
            "key": "funding_rate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Future funding rate, for options",
            "key": "future_funding_rate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Greeks (delta, gamma, vega). Partial for perpetual futures.",
            "key": "greeks",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesMarketSummaryRespGreeks"
              }
            }
          },
          {
            "description": "Last traded price implied volatility, for options",
            "key": "last_iv",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Last traded price",
            "key": "last_traded_price",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Mark implied volatility, for options",
            "key": "mark_iv",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "[Mark price](https://docs.paradex.trade/risk-system/mark-price-calculation)",
            "key": "mark_price",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Open interest in base currency",
            "key": "open_interest",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Price change rate in the last 24 hours",
            "key": "price_change_rate_24h",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Market symbol",
            "key": "symbol",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Lifetime total traded volume in USD",
            "key": "total_volume",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Underlying asset price (spot price)",
            "key": "underlying_price",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "24 hour volume in USD",
            "key": "volume_24h",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.Nft": {
      "name": "responses.Nft",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "collection_address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "collection_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "image_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.OrderFlag": {
      "name": "responses.OrderFlag",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "REDUCE_ONLY"
          },
          {
            "value": "STOP_CONDITION_BELOW_TRIGGER"
          },
          {
            "value": "STOP_CONDITION_ABOVE_TRIGGER"
          }
        ]
      }
    },
    "responses.OrderInstruction": {
      "name": "responses.OrderInstruction",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "GTC"
          },
          {
            "value": "POST_ONLY"
          },
          {
            "value": "IOC"
          }
        ]
      }
    },
    "ResponsesOrderRespInstruction": {
      "description": "OrderInstruction (GTC, IOC, POST_ONLY)",
      "name": "ResponsesOrderRespInstruction",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "GTC"
          },
          {
            "value": "POST_ONLY"
          },
          {
            "value": "IOC"
          }
        ]
      }
    },
    "ResponsesOrderRespRequestInfo": {
      "description": "Request info for modify order",
      "name": "ResponsesOrderRespRequestInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Request id",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Error message for failed requests",
            "key": "message",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Type of request (MODIFY_ORDER)",
            "key": "request_type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Status of modify order request",
            "key": "status",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "ResponsesOrderRespSide": {
      "description": "Order side",
      "name": "ResponsesOrderRespSide",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "BUY"
          },
          {
            "value": "SELL"
          }
        ]
      }
    },
    "ResponsesOrderRespStatus": {
      "description": "Order status",
      "name": "ResponsesOrderRespStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "NEW"
          },
          {
            "value": "UNTRIGGERED"
          },
          {
            "value": "OPEN"
          },
          {
            "value": "CLOSED"
          }
        ]
      }
    },
    "ResponsesOrderRespStp": {
      "description": "Self Trade Prevention mode (EXEPIRE_MAKER, EXPIRE_TAKER, EXPIRE_BOTH)",
      "name": "ResponsesOrderRespStp",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "EXPIRE_MAKER"
          },
          {
            "value": "EXPIRE_TAKER"
          },
          {
            "value": "EXPIRE_BOTH"
          }
        ]
      }
    },
    "ResponsesOrderRespType": {
      "description": "Order type",
      "name": "ResponsesOrderRespType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "MARKET"
          },
          {
            "value": "LIMIT"
          },
          {
            "value": "STOP_LIMIT"
          },
          {
            "value": "STOP_MARKET"
          },
          {
            "value": "TAKE_PROFIT_LIMIT"
          },
          {
            "value": "TAKE_PROFIT_MARKET"
          },
          {
            "value": "STOP_LOSS_MARKET"
          },
          {
            "value": "STOP_LOSS_LIMIT"
          }
        ]
      }
    },
    "responses.OrderResp": {
      "name": "responses.OrderResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Paradex Account",
            "key": "account",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Average fill price of the order",
            "key": "avg_fill_price",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Reason for order cancellation if it was closed by cancel",
            "key": "cancel_reason",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Client order id provided by the client at order creation",
            "key": "client_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Order creation time",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Order flags, allow flag: REDUCE_ONLY",
            "key": "flags",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.OrderFlag"
                }
              }
            }
          },
          {
            "description": "Unique order identifier generated by Paradex",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Execution instruction for order matching",
            "key": "instruction",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesOrderRespInstruction"
              }
            }
          },
          {
            "description": "Order last update time.  No changes once status=CLOSED",
            "key": "last_updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Market",
            "key": "market",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Order price. 0 for MARKET orders",
            "key": "price",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Timestamp in milliseconds when order was sent to the client",
            "key": "published_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Timestamp in milliseconds when order was received by API service",
            "key": "received_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Remaining size of the order",
            "key": "remaining_size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Additional request information for orders",
            "key": "request_info",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesOrderRespRequestInfo"
              }
            }
          },
          {
            "description": "Unique increasing number (non-sequential) that is assigned to this order update and changes on every order update. Can be used to deduplicate multiple feeds. WebSocket and REST responses use independently generated seq_no per event.",
            "key": "seq_no",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Order side",
            "key": "side",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesOrderRespSide"
              }
            }
          },
          {
            "description": "Order size",
            "key": "size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Order status",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesOrderRespStatus"
              }
            }
          },
          {
            "description": "Self Trade Prevention mode",
            "key": "stp",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesOrderRespStp"
              }
            }
          },
          {
            "description": "Order signature timestamp",
            "key": "timestamp",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Trigger price for stop order",
            "key": "trigger_price",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Order type",
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesOrderRespType"
              }
            }
          }
        ]
      }
    },
    "responses.OrderSide": {
      "name": "responses.OrderSide",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "BUY"
          },
          {
            "value": "SELL"
          }
        ]
      }
    },
    "responses.OrderStatus": {
      "name": "responses.OrderStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "NEW"
          },
          {
            "value": "UNTRIGGERED"
          },
          {
            "value": "OPEN"
          },
          {
            "value": "CLOSED"
          }
        ]
      }
    },
    "responses.OrderType": {
      "name": "responses.OrderType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "MARKET"
          },
          {
            "value": "LIMIT"
          },
          {
            "value": "STOP_LIMIT"
          },
          {
            "value": "STOP_MARKET"
          },
          {
            "value": "TAKE_PROFIT_LIMIT"
          },
          {
            "value": "TAKE_PROFIT_MARKET"
          },
          {
            "value": "STOP_LOSS_MARKET"
          },
          {
            "value": "STOP_LOSS_LIMIT"
          }
        ]
      }
    },
    "ResponsesPaginatedApiResultsResultsItems": {
      "name": "ResponsesPaginatedApiResultsResultsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "responses.PaginatedAPIResults": {
      "name": "responses.PaginatedAPIResults",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The pointer to fetch next set of records (null if there are no records left)",
            "key": "next",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The pointer to fetch previous set of records (null if there are no records left)",
            "key": "prev",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Array of paginated results",
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ResponsesPaginatedApiResultsResultsItems"
                }
              }
            }
          }
        ]
      }
    },
    "responses.PerpetualOptionCrossMarginParams": {
      "name": "responses.PerpetualOptionCrossMarginParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "imf",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "responses.PerpetualOptionMarginParams"
              }
            }
          },
          {
            "key": "mmf",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "responses.PerpetualOptionMarginParams"
              }
            }
          }
        ]
      }
    },
    "responses.PerpetualOptionMarginParams": {
      "name": "responses.PerpetualOptionMarginParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Margin fraction for long ITM options",
            "key": "long_itm",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Multiplier for margin fraction for premium",
            "key": "premium_multiplier",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Margin fraction for short ITM options",
            "key": "short_itm",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Margin fraction for short OTM options",
            "key": "short_otm",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Cap for margin fraction for short put options",
            "key": "short_put_cap",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ResponsesPositionRespSide": {
      "description": "Position Side : Long or Short",
      "name": "ResponsesPositionRespSide",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "SHORT"
          },
          {
            "value": "LONG"
          }
        ]
      }
    },
    "ResponsesPositionRespStatus": {
      "description": "Status of Position : Open or Closed",
      "name": "ResponsesPositionRespStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "OPEN"
          },
          {
            "value": "CLOSED"
          }
        ]
      }
    },
    "responses.PositionResp": {
      "name": "responses.PositionResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Account ID of the position",
            "key": "account",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Average entry price",
            "key": "average_entry_price",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Average entry price in USD",
            "key": "average_entry_price_usd",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Average exit price",
            "key": "average_exit_price",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Position cached funding index",
            "key": "cached_funding_index",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Position closed time",
            "key": "closed_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Position cost",
            "key": "cost",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Position cost in USD",
            "key": "cost_usd",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Position creation time",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Unique string ID for the position",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Last fill ID to which the position is referring",
            "key": "last_fill_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Position last update time",
            "key": "last_updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Leverage of the position",
            "key": "leverage",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Liquidation price of the position",
            "key": "liquidation_price",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Market for position",
            "key": "market",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Realized Funding PnL for the position. Reset to 0 when position is closed or flipped.",
            "key": "realized_positional_funding_pnl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Realized PnL including both positional PnL and funding payments. Reset to 0 when position is closed or flipped.",
            "key": "realized_positional_pnl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Unique increasing number (non-sequential) that is assigned to this position update. Can be used to deduplicate multiple feeds",
            "key": "seq_no",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Position Side : Long or Short",
            "key": "side",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesPositionRespSide"
              }
            }
          },
          {
            "description": "Size of the position with sign (positive if long or negative if short)",
            "key": "size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Status of Position : Open or Closed",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesPositionRespStatus"
              }
            }
          },
          {
            "description": "Unrealized running funding P&L for the position",
            "key": "unrealized_funding_pnl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Unrealized P&L of the position in the quote asset. Includes the unrealized running funding P&L.",
            "key": "unrealized_pnl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.ProgramsEligibility": {
      "name": "responses.ProgramsEligibility",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "affiliate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "fee",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "maker",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "referral",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.ReferralConfigResp": {
      "name": "responses.ReferralConfigResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Commission rate for the referer",
            "key": "commission_rate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Volume cap for commission",
            "key": "commission_volume_cap",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Discount rate for the referee",
            "key": "discount_rate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Volume cap for discount",
            "key": "discount_volume_cap",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Minimum volume required to be eligible for Program",
            "key": "minimum_volume",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Referral name",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Points bonus rate for the referee",
            "key": "points_bonus_rate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Volume cap for points bonus",
            "key": "points_bonus_volume_cap",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Referral type",
            "key": "referral_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.ReferralsResp": {
      "name": "responses.ReferralsResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "referee address",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Joined at timestamp in milliseconds",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Referral code used to onboard the referee",
            "key": "referral_code",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Total referral commission earned from the fee of referee",
            "key": "referral_rewards",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Total volume traded by referee",
            "key": "volume_traded",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.RequestInfo": {
      "name": "responses.RequestInfo",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Request id",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Error message for failed requests",
            "key": "message",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Type of request (MODIFY_ORDER)",
            "key": "request_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Status of modify order request",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.STPMode": {
      "name": "responses.STPMode",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "EXPIRE_MAKER"
          },
          {
            "value": "EXPIRE_TAKER"
          },
          {
            "value": "EXPIRE_BOTH"
          }
        ]
      }
    },
    "responses.Strategy": {
      "name": "responses.Strategy",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Contract address of the sub-operator",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Strategy name",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.SystemConfigResponse": {
      "name": "responses.SystemConfigResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Block explorer URL for the current SN Instance",
            "key": "block_explorer_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "bridged tokens config\nhttps://github.com/starknet-io/starknet-addresses/blob/master/bridged_tokens/goerli.json",
            "key": "bridged_tokens",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.BridgedToken"
                }
              }
            }
          },
          {
            "description": "Environment of the Paradex Instance",
            "key": "environment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "L1 chain ID value",
            "key": "l1_chain_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Address of Starknet L1 core contract",
            "key": "l1_core_contract_address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Address of Starknet L1 operator",
            "key": "l1_operator_address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Address of L1 Withdraw Relayer",
            "key": "l1_withdraw_relayer_address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Address of L2 Withdraw Relayer",
            "key": "l2_withdraw_relayer_address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Liquidation fee",
            "key": "liquidation_fee",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Oracle contract address",
            "key": "oracle_address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Class hash of the account contract",
            "key": "paraclear_account_hash",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Proxy hash of the account contract",
            "key": "paraclear_account_proxy_hash",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Paraclear contract address",
            "key": "paraclear_address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "paraclear_decimals",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Partial liquidation buffer. Account value is supposed to be at least this much above the MMR after partial liquidation",
            "key": "partial_liquidation_buffer",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Minimum granularity of partial liquidation share. The share is rounded up to the nearest multiple of this value",
            "key": "partial_liquidation_share_increment",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Chain ID for the Starknet Instance",
            "key": "starknet_chain_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Full node RPC URL from Starknet",
            "key": "starknet_fullnode_rpc_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Feeder Gateway URL from Starknet",
            "key": "starknet_gateway_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Universal deployer address",
            "key": "universal_deployer_address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ResponsesSystemStateResponseStatus": {
      "name": "ResponsesSystemStateResponseStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ok"
          },
          {
            "value": "maintenance"
          },
          {
            "value": "cancel_only"
          }
        ]
      }
    },
    "responses.SystemStateResponse": {
      "name": "responses.SystemStateResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Status of the system",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesSystemStateResponseStatus"
              }
            }
          }
        ]
      }
    },
    "responses.SystemStatus": {
      "name": "responses.SystemStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ok"
          },
          {
            "value": "maintenance"
          },
          {
            "value": "cancel_only"
          }
        ]
      }
    },
    "responses.SystemTimeResponse": {
      "name": "responses.SystemTimeResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Paradex Server time",
            "key": "server_time",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ResponsesTradeResultSide": {
      "description": "Taker side",
      "name": "ResponsesTradeResultSide",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "BUY"
          },
          {
            "value": "SELL"
          }
        ]
      }
    },
    "ResponsesTradeResultTradeType": {
      "name": "ResponsesTradeResultTradeType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "LIQUIDATION"
          },
          {
            "value": "TRANSFER"
          },
          {
            "value": "FILL"
          },
          {
            "value": "SETTLE_MARKET"
          }
        ]
      }
    },
    "responses.TradeResult": {
      "name": "responses.TradeResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Unix Millisecond timestamp at which trade was done",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Unique Trade ID per TradeType",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Market for which trade was done",
            "key": "market",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Trade price",
            "key": "price",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Taker side",
            "key": "side",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesTradeResultSide"
              }
            }
          },
          {
            "description": "Trade size",
            "key": "size",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Trade type, can be FILL or LIQUIDATION",
            "key": "trade_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesTradeResultTradeType"
              }
            }
          }
        ]
      }
    },
    "responses.TradebustResult": {
      "name": "responses.TradebustResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Paradex Account",
            "key": "account",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Unique ID of the busted fill",
            "key": "busted_fill_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Unix timestamp in milliseconds when bust was created",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ]
      }
    },
    "responses.TraderRole": {
      "name": "responses.TraderRole",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "TAKER"
          },
          {
            "value": "MAKER"
          }
        ]
      }
    },
    "ResponsesTransactionResponseState": {
      "description": "Status of the transaction on Starknet",
      "name": "ResponsesTransactionResponseState",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "ACCEPTED_ON_L1"
          },
          {
            "value": "ACCEPTED_ON_L2"
          },
          {
            "value": "NOT_RECEIVED"
          },
          {
            "value": "RECEIVED"
          },
          {
            "value": "REJECTED"
          },
          {
            "value": "REVERTED"
          }
        ]
      }
    },
    "ResponsesTransactionResponseType": {
      "description": "Event that triggered the transaction",
      "name": "ResponsesTransactionResponseType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "TRANSACTION_FILL"
          },
          {
            "value": "TRANSACTION_LIQUIDATE"
          },
          {
            "value": "TRANSACTION_SETTLE_MARKET"
          }
        ]
      }
    },
    "responses.TransactionResponse": {
      "name": "responses.TransactionResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Timestamp from when the transaction was completed",
            "key": "completed_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Timestamp from when the transaction was sent to blockchain gateway",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Tx Hash of the settled trade                                                // Hash of the transaction",
            "key": "hash",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Unique string ID of the event that triggered the transaction. For example, fill ID or liquidation ID",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Status of the transaction on Starknet",
            "key": "state",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesTransactionResponseState"
              }
            }
          },
          {
            "description": "Event that triggered the transaction",
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesTransactionResponseType"
              }
            }
          }
        ]
      }
    },
    "responses.TransferBridge": {
      "name": "responses.TransferBridge",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": ""
          },
          {
            "value": "STARKGATE"
          },
          {
            "value": "LAYERSWAP"
          },
          {
            "value": "RHINOFI"
          }
        ]
      }
    },
    "responses.TransferDirection": {
      "name": "responses.TransferDirection",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "IN"
          },
          {
            "value": "OUT"
          }
        ]
      }
    },
    "responses.TransferKind": {
      "name": "responses.TransferKind",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "DEPOSIT"
          },
          {
            "value": "WITHDRAWAL"
          },
          {
            "value": "UNWINDING"
          },
          {
            "value": "VAULT_DEPOSIT"
          },
          {
            "value": "VAULT_WITHDRAWAL"
          },
          {
            "value": "AUTO_WITHDRAWAL"
          }
        ]
      }
    },
    "ResponsesTransferResultBridge": {
      "description": "Bridge used for the transfer",
      "name": "ResponsesTransferResultBridge",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": ""
          },
          {
            "value": "STARKGATE"
          },
          {
            "value": "LAYERSWAP"
          },
          {
            "value": "RHINOFI"
          }
        ]
      }
    },
    "ResponsesTransferResultDirection": {
      "description": "Transfer direction (IN, OUT)",
      "name": "ResponsesTransferResultDirection",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "IN"
          },
          {
            "value": "OUT"
          }
        ]
      }
    },
    "ResponsesTransferResultKind": {
      "description": "Transfer Kind (DEPOSIT, WITHDRAWAL)",
      "name": "ResponsesTransferResultKind",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "DEPOSIT"
          },
          {
            "value": "WITHDRAWAL"
          },
          {
            "value": "UNWINDING"
          },
          {
            "value": "VAULT_DEPOSIT"
          },
          {
            "value": "VAULT_WITHDRAWAL"
          },
          {
            "value": "AUTO_WITHDRAWAL"
          }
        ]
      }
    },
    "ResponsesTransferResultStatus": {
      "description": "Transfer External State (PENDING, AVAILABLE, COMPLETED, FAILED)",
      "name": "ResponsesTransferResultStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "PENDING"
          },
          {
            "value": "AVAILABLE"
          },
          {
            "value": "COMPLETED"
          },
          {
            "value": "FAILED"
          }
        ]
      }
    },
    "responses.TransferResult": {
      "description": "TransferResult",
      "name": "responses.TransferResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Starknet Account address",
            "key": "account",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Transferred amount",
            "key": "amount",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Fee for auto withdrawal in USDC",
            "key": "auto_withdrawal_fee",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Bridge used for the transfer",
            "key": "bridge",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesTransferResultBridge"
              }
            }
          },
          {
            "description": "Counterparty address",
            "key": "counterparty",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Unix Millis timestamp transfer was created on L2",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Transfer direction (IN, OUT)",
            "key": "direction",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesTransferResultDirection"
              }
            }
          },
          {
            "description": "External chain account address",
            "key": "external_account",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "External chain used for the transfer",
            "key": "external_chain",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Transaction hash on the external chain",
            "key": "external_txn_hash",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Reason for transfer failure",
            "key": "failure_reason",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Transfer auto-generated ID",
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Transfer Kind (DEPOSIT, WITHDRAWAL)",
            "key": "kind",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesTransferResultKind"
              }
            }
          },
          {
            "description": "Unix Millis timestamp transfer was last updated on L2",
            "key": "last_updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Withdrawal's socialized loss factor",
            "key": "socialized_loss_factor",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Transfer External State (PENDING, AVAILABLE, COMPLETED, FAILED)",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesTransferResultStatus"
              }
            }
          },
          {
            "description": "Transferred token name",
            "key": "token",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Transaction hash on Paradex chain",
            "key": "txn_hash",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Vault address",
            "key": "vault_address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Vault unwind completion percentage",
            "key": "vault_unwind_completion_percentage",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.TransferStatus": {
      "name": "responses.TransferStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "PENDING"
          },
          {
            "value": "AVAILABLE"
          },
          {
            "value": "COMPLETED"
          },
          {
            "value": "FAILED"
          }
        ]
      }
    },
    "responses.TwitterProfile": {
      "name": "responses.TwitterProfile",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "image_url",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "username",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.UpdateAccountMarginConfigResp": {
      "name": "responses.UpdateAccountMarginConfigResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Account ID",
            "key": "account",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Leverage value",
            "key": "leverage",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Margin type (CROSS/ISOLATED)",
            "key": "margin_type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Market symbol",
            "key": "market",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.VaultAccountSummaryResp": {
      "name": "responses.VaultAccountSummaryResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Contract address of the vault",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Unix timestamp in milliseconds of when the user joined the vault.",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Amount deposited on the vault by the user in USDC",
            "key": "deposited_amount",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Total P&L realized by the user in USD.",
            "key": "total_pnl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Total ROI realized by the user in percentage, i.e. 0.1 means 10%.",
            "key": "total_roi",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Amount of vault tokens owned by the user",
            "key": "vtoken_amount",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.VaultHistoricalDataResp": {
      "name": "responses.VaultHistoricalDataResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Contract address of the vault",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Ordered list of datapoints",
            "key": "data",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          {
            "description": "Ordered list of timestamps",
            "key": "timestamps",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "responses.VaultKind": {
      "name": "responses.VaultKind",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "user"
          },
          {
            "value": "protocol"
          }
        ]
      }
    },
    "ResponsesVaultRespKind": {
      "name": "ResponsesVaultRespKind",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "user"
          },
          {
            "value": "protocol"
          }
        ]
      }
    },
    "ResponsesVaultRespStatus": {
      "name": "ResponsesVaultRespStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "INITIALIZING"
          },
          {
            "value": "ACTIVE"
          },
          {
            "value": "CLOSED"
          },
          {
            "value": "FAILED"
          }
        ]
      }
    },
    "responses.VaultResp": {
      "name": "responses.VaultResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Contract address of the vault",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Unix timestamp in milliseconds of when the vault has been created",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Description of the vault",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Kind of the vault: 'user' for user-defined vaults, 'protocol' for vaults controlled by Paradex",
            "key": "kind",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesVaultRespKind"
              }
            }
          },
          {
            "description": "Unix timestamp in milliseconds of when the vault was last updated",
            "key": "last_updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Lockup period of the vault in days",
            "key": "lockup_period",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Maximum amount of assets the vault can hold in USDC",
            "key": "max_tvl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Name of the vault",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Operator account of the vault",
            "key": "operator_account",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Owner account of the vault",
            "key": "owner_account",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Profit share of the vault in percentage, i.e. 10 means 10%",
            "key": "profit_share",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Status of the vault",
            "key": "status",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesVaultRespStatus"
              }
            }
          },
          {
            "description": "Strategies of the vault",
            "key": "strategies",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.Strategy"
                }
              }
            }
          },
          {
            "description": "LP token address",
            "key": "token_address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.VaultStatus": {
      "name": "responses.VaultStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "INITIALIZING"
          },
          {
            "value": "ACTIVE"
          },
          {
            "value": "CLOSED"
          },
          {
            "value": "FAILED"
          }
        ]
      }
    },
    "responses.VaultSummaryResp": {
      "name": "responses.VaultSummaryResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Contract address of the vault",
            "key": "address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "APR return of the vault in the last trailing month in percentage, i.e. 0.1 means 10%",
            "key": "last_month_return",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Max all time drawdown realized by the vault in percentage, i.e. 0.1 means 10%",
            "key": "max_drawdown",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Max drawdown realized by the vault in the last 24 hours in percentage, i.e. 0.1 means 10%",
            "key": "max_drawdown_24h",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Max drawdown realized by the vault in the last 30 days in percentage, i.e. 0.1 means 10%",
            "key": "max_drawdown_30d",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Max drawdown realized by the vault in the last 7 days in percentage, i.e. 0.1 means 10%",
            "key": "max_drawdown_7d",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Net deposits of the vault in USDC",
            "key": "net_deposits",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Number of depositors on the vault",
            "key": "num_depositors",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Vault equity of the owner (% of ownership) in percentage, i.e. 0.1 means 10%",
            "key": "owner_equity",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "P&L of the vault in the last 24 hours in USD",
            "key": "pnl_24h",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "P&L of the vault in the last 30 days in USD",
            "key": "pnl_30d",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "P&L of the vault in the last 7 days in USD",
            "key": "pnl_7d",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Return of the vault in the last 24 hours in percentage, i.e. 0.1 means 10%",
            "key": "roi_24h",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Return of the vault in the last 30 days in percentage, i.e. 0.1 means 10%",
            "key": "roi_30d",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Return of the vault in the last 7 days in percentage, i.e. 0.1 means 10%",
            "key": "roi_7d",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Total P&L of the vault in USD",
            "key": "total_pnl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Total ROI of the vault in percentage, i.e. 0.1 means 10%",
            "key": "total_roi",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Net deposits of the vault in USDC (deprecated; use net_deposits instead)",
            "key": "tvl",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "All time volume traded by the vault in USD",
            "key": "volume",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Volume traded by the vault in the last 24 hours in USD",
            "key": "volume_24h",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Volume traded by the vault in the last 30 days in USD",
            "key": "volume_30d",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Volume traded by the vault in the last 7 days in USD",
            "key": "volume_7d",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Current value of vault token price in USD",
            "key": "vtoken_price",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Total amount of available vault tokens",
            "key": "vtoken_supply",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "responses.VaultsConfigResponse": {
      "name": "responses.VaultsConfigResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Maximum lockup period in days an owner can configure for a vault",
            "key": "max_lockup_period_days",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Maximum profit share percentage (0-100) an owner can configure for a vault",
            "key": "max_profit_share_percentage",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Minimum initial collateral deposit (in currency units) at vault creation. Only applies to the owner",
            "key": "min_initial_deposit",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Minimum lockup period in days an owner can configure for a vault",
            "key": "min_lockup_period_days",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Minimum share percentage (0-100) the vault owner must maintain on the vault",
            "key": "min_owner_share_percentage",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Address of the vault factory contract",
            "key": "vault_factory_address",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "AccountHistoryGetParametersSchema": {
      "name": "AccountHistoryGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "pnl"
          },
          {
            "value": "value"
          },
          {
            "value": "volume"
          }
        ]
      }
    },
    "Algos_get-open-algo-orders_Response_200": {
      "name": "Algos_get-open-algo-orders_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.APIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.AlgoOrderResp"
                }
              }
            }
          }
        ]
      }
    },
    "AlgoOrdersHistoryGetParametersSchema": {
      "name": "AlgoOrdersHistoryGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "LIMIT"
          },
          {
            "value": "MARKET"
          },
          {
            "value": "STOP_LIMIT"
          },
          {
            "value": "STOP_MARKET"
          },
          {
            "value": "STOP_LOSS_LIMIT"
          },
          {
            "value": "STOP_LOSS_MARKET"
          },
          {
            "value": "TAKE_PROFIT_LIMIT"
          },
          {
            "value": "TAKE_PROFIT_MARKET"
          }
        ]
      }
    },
    "Algos_get-algo-orders-history_Response_200": {
      "name": "Algos_get-algo-orders-history_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.PaginatedAPIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.AlgoOrderResp"
                }
              }
            }
          }
        ]
      }
    },
    "Account_get-balance_Response_200": {
      "name": "Account_get-balance_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.APIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.BalanceResp"
                }
              }
            }
          }
        ]
      }
    },
    "Account_listFills_Response_200": {
      "name": "Account_listFills_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.PaginatedAPIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.FillResult"
                }
              }
            }
          }
        ]
      }
    },
    "Markets_get-funding-data_Response_200": {
      "name": "Markets_get-funding-data_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.PaginatedAPIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.FundingDataResult"
                }
              }
            }
          }
        ]
      }
    },
    "Account_get-funding_Response_200": {
      "name": "Account_get-funding_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.PaginatedAPIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.FundingPayment"
                }
              }
            }
          }
        ]
      }
    },
    "Liquidations_get-liquidations_Response_200": {
      "name": "Liquidations_get-liquidations_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.APIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.LiquidationResp"
                }
              }
            }
          }
        ]
      }
    },
    "Markets_get-markets_Response_200": {
      "name": "Markets_get-markets_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.APIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.MarketResp"
                }
              }
            }
          }
        ]
      }
    },
    "MarketsKlinesGetParametersSchema": {
      "name": "MarketsKlinesGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "last"
          },
          {
            "value": "mark"
          },
          {
            "value": "underlying"
          }
        ]
      }
    },
    "Markets_get-markets-summary_Response_200": {
      "name": "Markets_get-markets-summary_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.APIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.MarketSummaryResp"
                }
              }
            }
          }
        ]
      }
    },
    "Orders_get-open-orders_Response_200": {
      "name": "Orders_get-open-orders_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.APIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.OrderResp"
                }
              }
            }
          }
        ]
      }
    },
    "OrdersHistoryGetParametersSchema": {
      "name": "OrdersHistoryGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "LIMIT"
          },
          {
            "value": "MARKET"
          },
          {
            "value": "STOP_LIMIT"
          },
          {
            "value": "STOP_MARKET"
          },
          {
            "value": "STOP_LOSS_LIMIT"
          },
          {
            "value": "STOP_LOSS_MARKET"
          },
          {
            "value": "TAKE_PROFIT_LIMIT"
          },
          {
            "value": "TAKE_PROFIT_MARKET"
          }
        ]
      }
    },
    "Orders_get-orders_Response_200": {
      "name": "Orders_get-orders_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.PaginatedAPIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.OrderResp"
                }
              }
            }
          }
        ]
      }
    },
    "Account_get-positions_Response_200": {
      "name": "Account_get-positions_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.APIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.PositionResp"
                }
              }
            }
          }
        ]
      }
    },
    "Referrals_get-referrals-summary_Response_200": {
      "name": "Referrals_get-referrals-summary_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.APIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.ReferralsResp"
                }
              }
            }
          }
        ]
      }
    },
    "Account_tradebusts_Response_200": {
      "name": "Account_tradebusts_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.PaginatedAPIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.TradebustResult"
                }
              }
            }
          }
        ]
      }
    },
    "Trades_Response_200": {
      "name": "Trades_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.PaginatedAPIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.TradeResult"
                }
              }
            }
          }
        ]
      }
    },
    "Account_transactions_Response_200": {
      "name": "Account_transactions_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.PaginatedAPIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.TransactionResponse"
                }
              }
            }
          }
        ]
      }
    },
    "TransfersGetParametersSchema": {
      "name": "TransfersGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "PENDING"
          },
          {
            "value": "AVAILABLE"
          },
          {
            "value": "COMPLETED"
          },
          {
            "value": "FAILED"
          }
        ]
      }
    },
    "Transfers_get-transfers_Response_200": {
      "name": "Transfers_get-transfers_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.PaginatedAPIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.TransferResult"
                }
              }
            }
          }
        ]
      }
    },
    "Vaults_get_Response_200": {
      "name": "Vaults_get_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.APIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.VaultResp"
                }
              }
            }
          }
        ]
      }
    },
    "Vaults_getAccountSummary_Response_200": {
      "name": "Vaults_getAccountSummary_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.APIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.VaultAccountSummaryResp"
                }
              }
            }
          }
        ]
      }
    },
    "Vaults_getBalance_Response_200": {
      "name": "Vaults_getBalance_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.APIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.BalanceResp"
                }
              }
            }
          }
        ]
      }
    },
    "VaultsHistoryGetParametersSchema": {
      "name": "VaultsHistoryGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "alltime"
          },
          {
            "value": "1h"
          },
          {
            "value": "8h"
          }
        ]
      }
    },
    "Vaults_getHistoricalData_Response_200": {
      "name": "Vaults_getHistoricalData_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.APIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.VaultHistoricalDataResp"
                }
              }
            }
          }
        ]
      }
    },
    "Vaults_getPositions_Response_200": {
      "name": "Vaults_getPositions_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.APIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.PositionResp"
                }
              }
            }
          }
        ]
      }
    },
    "Vaults_getSummary_Response_200": {
      "name": "Vaults_getSummary_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.APIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.VaultSummaryResp"
                }
              }
            }
          }
        ]
      }
    },
    "Vaults_getTransfers_Response_200": {
      "name": "Vaults_getTransfers_Response_200",
      "shape": {
        "type": "object",
        "extends": [
          "responses.APIResults"
        ],
        "properties": [
          {
            "key": "results",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "responses.TransferResult"
                }
              }
            }
          }
        ]
      }
    },
    "ResponsesAccountSummaryResponse": {
      "name": "ResponsesAccountSummaryResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "User's starknet account",
            "key": "account",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Current account value [with unrealized P&Ls]",
            "key": "account_value",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Free collateral available (Account value in excess of Initial Margin required)",
            "key": "free_collateral",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Amount required to open trade for the existing positions",
            "key": "initial_margin_requirement",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Amount required to maintain exisiting positions",
            "key": "maintenance_margin_requirement",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Acc value in excess of maintenance margin required",
            "key": "margin_cushion",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique increasing number (non-sequential) that is assigned to this account update. Can be used to deduplicate multiple feeds",
            "key": "seq_no",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Settlement asset for the account",
            "key": "settlement_asset",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Status of the acc - like ACTIVE, LIQUIDATION",
            "key": "status",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "User's total collateral",
            "key": "total_collateral",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Account last updated time",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "ResponsesBBOResp": {
      "name": "ResponsesBBOResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Best ask price",
            "key": "ask",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Best ask size",
            "key": "ask_size",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Best bid price",
            "key": "bid",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Best bid size",
            "key": "bid_size",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Last update to the orderbook in milliseconds",
            "key": "last_updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Symbol of the market",
            "key": "market",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Sequence number of the orderbook",
            "key": "seq_no",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "ResponsesBalanceEventResponse": {
      "name": "ResponsesBalanceEventResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Unix Millisecond timestamp at which the event occurred",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Fees in USDC",
            "key": "fees",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique string ID for the fill",
            "key": "fill_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Funding index used for the fill",
            "key": "funding_index",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Name of the market the update is referring to",
            "key": "market",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Fill’s Realized Funding in USDC",
            "key": "realized_funding",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Fill’s realized PnL (excluding funding) in USDC",
            "key": "realized_pnl",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Settlement asset balance after the fill",
            "key": "settlement_asset_balance_after",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Settlement asset balance before the fill",
            "key": "settlement_asset_balance_before",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Settlement asset price",
            "key": "settlement_asset_price",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Status of the fill",
            "key": "status",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Type of the event",
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "ResponsesFillResult": {
      "name": "ResponsesFillResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Unique client assigned ID for the order",
            "key": "client_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Fill time",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Fee paid by the user",
            "key": "fee",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Asset that fee is charged in",
            "key": "fee_currency",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Fill type, can be FILL, LIQUIDATION or TRANSFER",
            "key": "fill_type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique string ID of fill per FillType",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Maker or Taker",
            "key": "liquidity",
            "valueType": {
              "type": "id",
              "value": "ResponsesFillResultLiquidity"
            }
          },
          {
            "description": "Market name",
            "key": "market",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Order ID",
            "key": "order_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Price at which order was filled",
            "key": "price",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Realized funding of the fill",
            "key": "realized_funding",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Realized PnL of the fill",
            "key": "realized_pnl",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Remaining size of the order",
            "key": "remaining_size",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Taker side",
            "key": "side",
            "valueType": {
              "type": "id",
              "value": "ResponsesFillResultSide"
            }
          },
          {
            "description": "Size of the fill",
            "key": "size",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "ResponsesFundingDataResult": {
      "name": "ResponsesFundingDataResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "funding_index",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "funding_premium",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "funding_rate",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "market",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "ResponsesFundingResp": {
      "name": "ResponsesFundingResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Funding payments time",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Unique string ID for the fill that triggered the payment (if any)",
            "key": "fill_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique string ID to identify the payment",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Value of the funding index at the time of payment",
            "key": "index",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Perpetual market against which payment is made",
            "key": "market",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Payment amount in settlement asset",
            "key": "payment",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "ResponsesFundingRateComparisonResp": {
      "name": "ResponsesFundingRateComparisonResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Asset kind",
            "key": "asset_kind",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Hourly funding rate",
            "key": "hourly_funding_rate",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Last updated timestamp in milliseconds",
            "key": "last_updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Source of the funding rate",
            "key": "source",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Market symbol",
            "key": "symbol",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "ResponsesMarketSummaryResp": {
      "name": "ResponsesMarketSummaryResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Best ask price",
            "key": "ask",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Ask implied volatility, for options",
            "key": "ask_iv",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Best bid price",
            "key": "bid",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Bid implied volatility, for options",
            "key": "bid_iv",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Market summary creation time",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Deprecated: Use greeks.delta instead",
            "key": "delta",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "[8 hour funding rate](https://docs.paradex.trade/risk-system/funding-mechanism#funding-rate)",
            "key": "funding_rate",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Future funding rate, for options",
            "key": "future_funding_rate",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Greeks",
            "key": "greeks",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesMarketSummaryRespGreeks"
              }
            }
          },
          {
            "description": "Last traded price implied volatility, for options",
            "key": "last_iv",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Last traded price",
            "key": "last_traded_price",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Mark implied volatility, for options",
            "key": "mark_iv",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "[Mark price](https://docs.paradex.trade/risk-system/mark-price-calculation)",
            "key": "mark_price",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Open interest in base currency",
            "key": "open_interest",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Price change rate in the last 24 hours",
            "key": "price_change_rate_24h",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Market symbol",
            "key": "symbol",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Lifetime total traded volume in USD",
            "key": "total_volume",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Underlying asset price (spot oracle price)",
            "key": "underlying_price",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "24 hour volume in USD",
            "key": "volume_24h",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "ResponsesOrderResp": {
      "name": "ResponsesOrderResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Account identifier (user's account address)",
            "key": "account",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Average fill price of the order",
            "key": "avg_fill_price",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Reason for order cancellation if it was closed by cancel",
            "key": "cancel_reason",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Client id passed on order creation",
            "key": "client_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Order creation time",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Order flags, allow flag: REDUCE_ONLY",
            "key": "flags",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Unique order identifier",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "OrderInstruction (GTC, IOC, POST_ONLY)",
            "key": "instruction",
            "valueType": {
              "type": "id",
              "value": "ResponsesOrderRespInstruction"
            }
          },
          {
            "description": "Order last update time.  No changes once status=CLOSED",
            "key": "last_updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Market to which order belongs",
            "key": "market",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Order price. 0 for MARKET orders",
            "key": "price",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Order published to the client time",
            "key": "published_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Order received from the client time",
            "key": "received_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Remaining size of the order",
            "key": "remaining_size",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Request info for modify order",
            "key": "request_info",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResponsesOrderRespRequestInfo"
              }
            }
          },
          {
            "description": "Unique increasing number (non-sequential) that is assigned to this order update and changes on every order update. Can be used to deduplicate multiple feeds. WebSocket and REST responses use independently generated seq_no per event.",
            "key": "seq_no",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Order side",
            "key": "side",
            "valueType": {
              "type": "id",
              "value": "ResponsesOrderRespSide"
            }
          },
          {
            "description": "Order size",
            "key": "size",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Order status",
            "key": "status",
            "valueType": {
              "type": "id",
              "value": "ResponsesOrderRespStatus"
            }
          },
          {
            "description": "Self Trade Prevention mode (EXEPIRE_MAKER, EXPIRE_TAKER, EXPIRE_BOTH)",
            "key": "stp",
            "valueType": {
              "type": "id",
              "value": "ResponsesOrderRespStp"
            }
          },
          {
            "description": "Order signature timestamp",
            "key": "timestamp",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Trigger price for stop order",
            "key": "trigger_price",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Order type",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "ResponsesOrderRespType"
            }
          }
        ]
      }
    },
    "ResponsesPositionResp": {
      "name": "ResponsesPositionResp",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Average entry price",
            "key": "average_entry_price",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Average entry price in USD",
            "key": "average_entry_price_usd",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Average exit price",
            "key": "average_exit_price",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Position cached funding index",
            "key": "cached_funding_index",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Position closed time",
            "key": "closed_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Position cost",
            "key": "cost",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Position cost in USD",
            "key": "cost_usd",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Position creation time",
            "key": "created_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Unique string ID for the position",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Last fill ID to which the position is referring",
            "key": "last_fill_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Position last update time",
            "key": "last_updated_at",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Leverage of the position",
            "key": "leverage",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Liquidation price of the position",
            "key": "liquidation_price",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Market for position",
            "key": "market",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Realized Funding PnL for the position. Reset to 0 when position is closed or flipped.",
            "key": "realized_positional_funding_pnl",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Realized PnL including both positional PnL and funding payments. Reset to 0 when position is closed or flipped.",
            "key": "realized_positional_pnl",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique increasing number (non-sequential) that is assigned to this position update. Can be used to deduplicate multiple feeds",
            "key": "seq_no",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Position Side : Long or Short",
            "key": "side",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Size of the position with sign (positive if long or negative if short)",
            "key": "size",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Status of Position : Open or Closed",
            "key": "status",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unrealized running funding P&L for the position",
            "key": "unrealized_funding_pnl",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unrealized P&L of the position in the quote asset",
            "key": "unrealized_pnl",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "ResponsesPriceBookUpdateDeletesItemsSide": {
      "name": "ResponsesPriceBookUpdateDeletesItemsSide",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "BUY"
          },
          {
            "value": "SELL"
          }
        ]
      }
    },
    "ResponsesPriceBookUpdateDeletesItems": {
      "name": "ResponsesPriceBookUpdateDeletesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "price",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "side",
            "valueType": {
              "type": "id",
              "value": "ResponsesPriceBookUpdateDeletesItemsSide"
            }
          },
          {
            "key": "size",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "ResponsesPriceBookUpdateInsertsItemsSide": {
      "name": "ResponsesPriceBookUpdateInsertsItemsSide",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "BUY"
          },
          {
            "value": "SELL"
          }
        ]
      }
    },
    "ResponsesPriceBookUpdateInsertsItems": {
      "name": "ResponsesPriceBookUpdateInsertsItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "price",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "side",
            "valueType": {
              "type": "id",
              "value": "ResponsesPriceBookUpdateInsertsItemsSide"
            }
          },
          {
            "key": "size",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "ResponsesPriceBookUpdateUpdateType": {
      "name": "ResponsesPriceBookUpdateUpdateType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "s"
          },
          {
            "value": "d"
          }
        ]
      }
    },
    "ResponsesPriceBookUpdateUpdatesItemsSide": {
      "name": "ResponsesPriceBookUpdateUpdatesItemsSide",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "BUY"
          },
          {
            "value": "SELL"
          }
        ]
      }
    },
    "ResponsesPriceBookUpdateUpdatesItems": {
      "name": "ResponsesPriceBookUpdateUpdatesItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "price",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "side",
            "valueType": {
              "type": "id",
              "value": "ResponsesPriceBookUpdateUpdatesItemsSide"
            }
          },
          {
            "key": "size",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "ResponsesPriceBookUpdate": {
      "name": "ResponsesPriceBookUpdate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "deletes",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "ResponsesPriceBookUpdateDeletesItems"
              }
            }
          },
          {
            "key": "inserts",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "ResponsesPriceBookUpdateInsertsItems"
              }
            }
          },
          {
            "description": "in milliseconds",
            "key": "last_updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "market",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "seq_no",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "key": "update_type",
            "valueType": {
              "type": "id",
              "value": "ResponsesPriceBookUpdateUpdateType"
            }
          },
          {
            "key": "updates",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "ResponsesPriceBookUpdateUpdatesItems"
              }
            }
          }
        ]
      }
    },
    "ResponsesTradeResult": {
      "name": "ResponsesTradeResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Unix Millisecond timestamp at which trade was done",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Unique Trade ID per TradeType",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Market for which trade was done",
            "key": "market",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Trade price",
            "key": "price",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Taker side",
            "key": "side",
            "valueType": {
              "type": "id",
              "value": "ResponsesTradeResultSide"
            }
          },
          {
            "description": "Trade size",
            "key": "size",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Trade type, can be FILL or LIQUIDATION",
            "key": "trade_type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "ResponsesTradebustResult": {
      "name": "ResponsesTradebustResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Starknet Account from which fill was created",
            "key": "account",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique string ID of the busted fill",
            "key": "busted_fill_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unix Millis timestamp when bust was created",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "ResponsesTransactionResponse": {
      "name": "ResponsesTransactionResponse",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Timestamp from when the transaction was completed",
            "key": "completed_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Timestamp from when the transaction was sent to blockchain gateway",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Tx Hash of the settled trade",
            "key": "hash",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique string ID of the event that triggered the transaction. For example, fill ID or liquidation ID",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Status of the transaction on Starknet",
            "key": "state",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Event that triggered the transaction",
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "ResponsesTransferResult": {
      "name": "ResponsesTransferResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Starknet Account address",
            "key": "account",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Transferred amount",
            "key": "amount",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Fee for auto withdrawal in USDC",
            "key": "auto_withdrawal_fee",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Bridge used for the transfer",
            "key": "bridge",
            "valueType": {
              "type": "id",
              "value": "ResponsesTransferResultBridge"
            }
          },
          {
            "description": "Counterparty address",
            "key": "counterparty",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unix Millis timestamp transfer was created on L2",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Transfer direction (IN, OUT)",
            "key": "direction",
            "valueType": {
              "type": "id",
              "value": "ResponsesTransferResultDirection"
            }
          },
          {
            "description": "External chain account address",
            "key": "external_account",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "External chain used for the transfer",
            "key": "external_chain",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Transaction hash on the external chain",
            "key": "external_txn_hash",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Reason for transfer failure",
            "key": "failure_reason",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Transfer auto-generated ID",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Transfer Kind (DEPOSIT, WITHDRAWAL)",
            "key": "kind",
            "valueType": {
              "type": "id",
              "value": "ResponsesTransferResultKind"
            }
          },
          {
            "description": "Unix Millis timestamp transfer was last updated on L2",
            "key": "last_updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          },
          {
            "description": "Withdrawal's socialized loss factor",
            "key": "socialized_loss_factor",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Transfer External State (PENDING, AVAILABLE, COMPLETED, FAILED)",
            "key": "status",
            "valueType": {
              "type": "id",
              "value": "ResponsesTransferResultStatus"
            }
          },
          {
            "description": "Transferred token name",
            "key": "token",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Transaction hash on Paradex chain",
            "key": "txn_hash",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Vault address",
            "key": "vault_address",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Vault unwind completion percentage",
            "key": "vault_unwind_completion_percentage",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "ChannelsAccountSubscribeJsonrpc": {
      "name": "ChannelsAccountSubscribeJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsAccountSubscribeMethod": {
      "name": "ChannelsAccountSubscribeMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscription"
          }
        ]
      }
    },
    "ChannelsAccountSubscribeParams": {
      "name": "ChannelsAccountSubscribeParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "account"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "ResponsesAccountSummaryResponse"
            }
          }
        ]
      }
    },
    "AccountSubscribe": {
      "name": "AccountSubscribe",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsAccountSubscribeJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsAccountSubscribeMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsAccountSubscribeParams"
            }
          }
        ]
      }
    },
    "ChannelsAccountPublishJsonrpc": {
      "name": "ChannelsAccountPublishJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsAccountPublishMethod": {
      "name": "ChannelsAccountPublishMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscribe"
          }
        ]
      }
    },
    "ChannelsAccountPublishParams": {
      "name": "ChannelsAccountPublishParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "account"
              }
            }
          }
        ]
      }
    },
    "AccountPublish": {
      "name": "AccountPublish",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsAccountPublishJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsAccountPublishMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsAccountPublishParams"
            }
          },
          {
            "description": "Client-generated request identifier",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "ChannelsBalanceEventsSubscribeJsonrpc": {
      "name": "ChannelsBalanceEventsSubscribeJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsBalanceEventsSubscribeMethod": {
      "name": "ChannelsBalanceEventsSubscribeMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscription"
          }
        ]
      }
    },
    "ChannelsBalanceEventsSubscribeParams": {
      "name": "ChannelsBalanceEventsSubscribeParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "balance_events"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "ResponsesBalanceEventResponse"
            }
          }
        ]
      }
    },
    "BalanceEventsSubscribe": {
      "name": "BalanceEventsSubscribe",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsBalanceEventsSubscribeJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsBalanceEventsSubscribeMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsBalanceEventsSubscribeParams"
            }
          }
        ]
      }
    },
    "ChannelsBalanceEventsPublishJsonrpc": {
      "name": "ChannelsBalanceEventsPublishJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsBalanceEventsPublishMethod": {
      "name": "ChannelsBalanceEventsPublishMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscribe"
          }
        ]
      }
    },
    "ChannelsBalanceEventsPublishParams": {
      "name": "ChannelsBalanceEventsPublishParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "balance_events"
              }
            }
          }
        ]
      }
    },
    "BalanceEventsPublish": {
      "name": "BalanceEventsPublish",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsBalanceEventsPublishJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsBalanceEventsPublishMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsBalanceEventsPublishParams"
            }
          },
          {
            "description": "Client-generated request identifier",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "ChannelsBboSubscribeJsonrpc": {
      "name": "ChannelsBboSubscribeJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsBboSubscribeMethod": {
      "name": "ChannelsBboSubscribeMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscription"
          }
        ]
      }
    },
    "ChannelsBboSubscribeParams": {
      "name": "ChannelsBboSubscribeParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^bbo\\.[A-Z0-9]+-[A-Z0-9]+$"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "ResponsesBBOResp"
            }
          }
        ]
      }
    },
    "BboSubscribe": {
      "name": "BboSubscribe",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsBboSubscribeJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsBboSubscribeMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsBboSubscribeParams"
            }
          }
        ]
      }
    },
    "ChannelsBboPublishJsonrpc": {
      "name": "ChannelsBboPublishJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsBboPublishMethod": {
      "name": "ChannelsBboPublishMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscribe"
          }
        ]
      }
    },
    "ChannelsBboPublishParams": {
      "name": "ChannelsBboPublishParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Channel name including market symbol, e.g., \"bbo.{market_symbol}\"",
            "key": "channel",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^bbo\\.[A-Z0-9]+-[A-Z0-9]+$"
              }
            }
          }
        ]
      }
    },
    "BboPublish": {
      "name": "BboPublish",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsBboPublishJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsBboPublishMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsBboPublishParams"
            }
          },
          {
            "description": "Client-generated request identifier",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "ChannelsFillsSubscribeJsonrpc": {
      "name": "ChannelsFillsSubscribeJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsFillsSubscribeMethod": {
      "name": "ChannelsFillsSubscribeMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscription"
          }
        ]
      }
    },
    "ChannelsFillsSubscribeParams": {
      "name": "ChannelsFillsSubscribeParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^fills\\.([A-Z0-9]+-[A-Z0-9]+|ALL)$"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "ResponsesFillResult"
            }
          }
        ]
      }
    },
    "FillsSubscribe": {
      "name": "FillsSubscribe",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsFillsSubscribeJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsFillsSubscribeMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsFillsSubscribeParams"
            }
          }
        ]
      }
    },
    "ChannelsFillsPublishJsonrpc": {
      "name": "ChannelsFillsPublishJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsFillsPublishMethod": {
      "name": "ChannelsFillsPublishMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscribe"
          }
        ]
      }
    },
    "ChannelsFillsPublishParams": {
      "name": "ChannelsFillsPublishParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Channel name including market symbol, e.g., \"fills.{market_symbol}\"",
            "key": "channel",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^fills\\.([A-Z0-9]+-[A-Z0-9]+|ALL)$"
              }
            }
          }
        ]
      }
    },
    "FillsPublish": {
      "name": "FillsPublish",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsFillsPublishJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsFillsPublishMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsFillsPublishParams"
            }
          },
          {
            "description": "Client-generated request identifier",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "ChannelsFundingDataSubscribeJsonrpc": {
      "name": "ChannelsFundingDataSubscribeJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsFundingDataSubscribeMethod": {
      "name": "ChannelsFundingDataSubscribeMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscription"
          }
        ]
      }
    },
    "ChannelsFundingDataSubscribeParams": {
      "name": "ChannelsFundingDataSubscribeParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^funding_data\\.([A-Z0-9]+-[A-Z0-9]+|ALL)$"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "ResponsesFundingDataResult"
            }
          }
        ]
      }
    },
    "FundingDataSubscribe": {
      "name": "FundingDataSubscribe",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsFundingDataSubscribeJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsFundingDataSubscribeMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsFundingDataSubscribeParams"
            }
          }
        ]
      }
    },
    "ChannelsFundingDataPublishJsonrpc": {
      "name": "ChannelsFundingDataPublishJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsFundingDataPublishMethod": {
      "name": "ChannelsFundingDataPublishMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscribe"
          }
        ]
      }
    },
    "ChannelsFundingDataPublishParams": {
      "name": "ChannelsFundingDataPublishParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Channel name including market symbol, e.g., \"funding_data.{market_symbol}\"",
            "key": "channel",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^funding_data\\.([A-Z0-9]+-[A-Z0-9]+|ALL)$"
              }
            }
          }
        ]
      }
    },
    "FundingDataPublish": {
      "name": "FundingDataPublish",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsFundingDataPublishJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsFundingDataPublishMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsFundingDataPublishParams"
            }
          },
          {
            "description": "Client-generated request identifier",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "ChannelsFundingPaymentsSubscribeJsonrpc": {
      "name": "ChannelsFundingPaymentsSubscribeJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsFundingPaymentsSubscribeMethod": {
      "name": "ChannelsFundingPaymentsSubscribeMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscription"
          }
        ]
      }
    },
    "ChannelsFundingPaymentsSubscribeParams": {
      "name": "ChannelsFundingPaymentsSubscribeParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^funding_payments\\.([A-Z0-9]+-[A-Z0-9]+|ALL)$"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "ResponsesFundingResp"
            }
          }
        ]
      }
    },
    "FundingPaymentsSubscribe": {
      "name": "FundingPaymentsSubscribe",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsFundingPaymentsSubscribeJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsFundingPaymentsSubscribeMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsFundingPaymentsSubscribeParams"
            }
          }
        ]
      }
    },
    "ChannelsFundingPaymentsPublishJsonrpc": {
      "name": "ChannelsFundingPaymentsPublishJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsFundingPaymentsPublishMethod": {
      "name": "ChannelsFundingPaymentsPublishMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscribe"
          }
        ]
      }
    },
    "ChannelsFundingPaymentsPublishParams": {
      "name": "ChannelsFundingPaymentsPublishParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Channel name including market symbol, e.g., \"funding_payments.{market_symbol}\"",
            "key": "channel",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^funding_payments\\.([A-Z0-9]+-[A-Z0-9]+|ALL)$"
              }
            }
          }
        ]
      }
    },
    "FundingPaymentsPublish": {
      "name": "FundingPaymentsPublish",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsFundingPaymentsPublishJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsFundingPaymentsPublishMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsFundingPaymentsPublishParams"
            }
          },
          {
            "description": "Client-generated request identifier",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "refresh_rate": {
      "name": "refresh_rate",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "50ms"
          },
          {
            "value": "100ms"
          }
        ]
      }
    },
    "ChannelsFundingRateComparisonSubscribeJsonrpc": {
      "name": "ChannelsFundingRateComparisonSubscribeJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsFundingRateComparisonSubscribeMethod": {
      "name": "ChannelsFundingRateComparisonSubscribeMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscription"
          }
        ]
      }
    },
    "ChannelsFundingRateComparisonSubscribeParams": {
      "name": "ChannelsFundingRateComparisonSubscribeParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^funding_rate_comparison\\.(?:[A-Z0-9]+-[A-Z0-9]+-[A-Z0-9]+|ALL)$"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "ResponsesFundingRateComparisonResp"
            }
          }
        ]
      }
    },
    "FundingRateComparisonSubscribe": {
      "name": "FundingRateComparisonSubscribe",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsFundingRateComparisonSubscribeJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsFundingRateComparisonSubscribeMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsFundingRateComparisonSubscribeParams"
            }
          }
        ]
      }
    },
    "ChannelsFundingRateComparisonPublishJsonrpc": {
      "name": "ChannelsFundingRateComparisonPublishJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsFundingRateComparisonPublishMethod": {
      "name": "ChannelsFundingRateComparisonPublishMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscribe"
          }
        ]
      }
    },
    "ChannelsFundingRateComparisonPublishParams": {
      "name": "ChannelsFundingRateComparisonPublishParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^funding_rate_comparison@(500ms|1000ms)$"
              }
            }
          }
        ]
      }
    },
    "FundingRateComparisonPublish": {
      "name": "FundingRateComparisonPublish",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsFundingRateComparisonPublishJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsFundingRateComparisonPublishMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsFundingRateComparisonPublishParams"
            }
          },
          {
            "description": "Client-generated request identifier",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "ChannelsMarketsSummarySubscribeJsonrpc": {
      "name": "ChannelsMarketsSummarySubscribeJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsMarketsSummarySubscribeMethod": {
      "name": "ChannelsMarketsSummarySubscribeMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscription"
          }
        ]
      }
    },
    "ChannelsMarketsSummarySubscribeParams": {
      "name": "ChannelsMarketsSummarySubscribeParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "markets_summary"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "ResponsesMarketSummaryResp"
            }
          }
        ]
      }
    },
    "MarketsSummarySubscribe": {
      "name": "MarketsSummarySubscribe",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsMarketsSummarySubscribeJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsMarketsSummarySubscribeMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsMarketsSummarySubscribeParams"
            }
          }
        ]
      }
    },
    "ChannelsMarketsSummaryPublishJsonrpc": {
      "name": "ChannelsMarketsSummaryPublishJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsMarketsSummaryPublishMethod": {
      "name": "ChannelsMarketsSummaryPublishMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscribe"
          }
        ]
      }
    },
    "ChannelsMarketsSummaryPublishParams": {
      "name": "ChannelsMarketsSummaryPublishParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "markets_summary"
              }
            }
          }
        ]
      }
    },
    "MarketsSummaryPublish": {
      "name": "MarketsSummaryPublish",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsMarketsSummaryPublishJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsMarketsSummaryPublishMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsMarketsSummaryPublishParams"
            }
          },
          {
            "description": "Client-generated request identifier",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "price_tick": {
      "name": "price_tick",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "0_0000001"
          },
          {
            "value": "0_0000005"
          },
          {
            "value": "0_000001"
          },
          {
            "value": "0_000005"
          },
          {
            "value": "0_00001"
          },
          {
            "value": "0_00005"
          },
          {
            "value": "0_0001"
          },
          {
            "value": "0_0005"
          },
          {
            "value": "0_001"
          },
          {
            "value": "0_005"
          },
          {
            "value": "0_01"
          },
          {
            "value": "0_05"
          },
          {
            "value": "0_1"
          },
          {
            "value": "0_5"
          },
          {
            "value": "1"
          },
          {
            "value": "5"
          },
          {
            "value": "10"
          },
          {
            "value": "50"
          },
          {
            "value": "100"
          }
        ]
      }
    },
    "ChannelsOrderBookSubscribeJsonrpc": {
      "name": "ChannelsOrderBookSubscribeJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsOrderBookSubscribeMethod": {
      "name": "ChannelsOrderBookSubscribeMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscription"
          }
        ]
      }
    },
    "ChannelsOrderBookSubscribeParams": {
      "name": "ChannelsOrderBookSubscribeParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "order_book"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "ResponsesPriceBookUpdate"
            }
          }
        ]
      }
    },
    "OrderBookSubscribe": {
      "name": "OrderBookSubscribe",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsOrderBookSubscribeJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsOrderBookSubscribeMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsOrderBookSubscribeParams"
            }
          }
        ]
      }
    },
    "ChannelsOrderBookPublishJsonrpc": {
      "name": "ChannelsOrderBookPublishJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsOrderBookPublishMethod": {
      "name": "ChannelsOrderBookPublishMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscribe"
          }
        ]
      }
    },
    "ChannelsOrderBookPublishParams": {
      "name": "ChannelsOrderBookPublishParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Channel name including market symbol, price tick, and refresh rate, e.g., \"order_book.{market_symbol}.{price_tick}.{refresh_rate}\"",
            "key": "channel",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^order_book\\.[A-Z0-9]+-[A-Z0-9]+\\.(0_0000001|0_0000005|0_000001|0_000005|0_00001|0_00005|0_0001|0_0005|0_001|0_005|0_01|0_05|0_1|0_5|1|5|10|50|100)\\.(50ms|100ms)$"
              }
            }
          }
        ]
      }
    },
    "OrderBookPublish": {
      "name": "OrderBookPublish",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsOrderBookPublishJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsOrderBookPublishMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsOrderBookPublishParams"
            }
          },
          {
            "description": "Client-generated request identifier",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "ChannelsOrdersSubscribeJsonrpc": {
      "name": "ChannelsOrdersSubscribeJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsOrdersSubscribeMethod": {
      "name": "ChannelsOrdersSubscribeMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscription"
          }
        ]
      }
    },
    "ChannelsOrdersSubscribeParams": {
      "name": "ChannelsOrdersSubscribeParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^orders\\.([A-Z0-9]+-[A-Z0-9]+|ALL)$"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "ResponsesOrderResp"
            }
          }
        ]
      }
    },
    "OrdersSubscribe": {
      "name": "OrdersSubscribe",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsOrdersSubscribeJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsOrdersSubscribeMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsOrdersSubscribeParams"
            }
          }
        ]
      }
    },
    "ChannelsOrdersPublishJsonrpc": {
      "name": "ChannelsOrdersPublishJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsOrdersPublishMethod": {
      "name": "ChannelsOrdersPublishMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscribe"
          }
        ]
      }
    },
    "ChannelsOrdersPublishParams": {
      "name": "ChannelsOrdersPublishParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Channel name including market symbol, e.g., \"orders.{market_symbol}\"",
            "key": "channel",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^orders\\.([A-Z0-9]+-[A-Z0-9]+|ALL)$"
              }
            }
          }
        ]
      }
    },
    "OrdersPublish": {
      "name": "OrdersPublish",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsOrdersPublishJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsOrdersPublishMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsOrdersPublishParams"
            }
          },
          {
            "description": "Client-generated request identifier",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "ChannelsPositionsSubscribeJsonrpc": {
      "name": "ChannelsPositionsSubscribeJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsPositionsSubscribeMethod": {
      "name": "ChannelsPositionsSubscribeMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscription"
          }
        ]
      }
    },
    "ChannelsPositionsSubscribeParams": {
      "name": "ChannelsPositionsSubscribeParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "positions"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "ResponsesPositionResp"
            }
          }
        ]
      }
    },
    "PositionsSubscribe": {
      "name": "PositionsSubscribe",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsPositionsSubscribeJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsPositionsSubscribeMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsPositionsSubscribeParams"
            }
          }
        ]
      }
    },
    "ChannelsPositionsPublishJsonrpc": {
      "name": "ChannelsPositionsPublishJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsPositionsPublishMethod": {
      "name": "ChannelsPositionsPublishMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscribe"
          }
        ]
      }
    },
    "ChannelsPositionsPublishParams": {
      "name": "ChannelsPositionsPublishParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "positions"
              }
            }
          }
        ]
      }
    },
    "PositionsPublish": {
      "name": "PositionsPublish",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsPositionsPublishJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsPositionsPublishMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsPositionsPublishParams"
            }
          },
          {
            "description": "Client-generated request identifier",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "ChannelsTradebustsSubscribeJsonrpc": {
      "name": "ChannelsTradebustsSubscribeJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsTradebustsSubscribeMethod": {
      "name": "ChannelsTradebustsSubscribeMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscription"
          }
        ]
      }
    },
    "ChannelsTradebustsSubscribeParams": {
      "name": "ChannelsTradebustsSubscribeParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "tradebusts"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "ResponsesTradebustResult"
            }
          }
        ]
      }
    },
    "TradebustsSubscribe": {
      "name": "TradebustsSubscribe",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsTradebustsSubscribeJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsTradebustsSubscribeMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsTradebustsSubscribeParams"
            }
          }
        ]
      }
    },
    "ChannelsTradebustsPublishJsonrpc": {
      "name": "ChannelsTradebustsPublishJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsTradebustsPublishMethod": {
      "name": "ChannelsTradebustsPublishMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscribe"
          }
        ]
      }
    },
    "ChannelsTradebustsPublishParams": {
      "name": "ChannelsTradebustsPublishParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "tradebusts"
              }
            }
          }
        ]
      }
    },
    "TradebustsPublish": {
      "name": "TradebustsPublish",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsTradebustsPublishJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsTradebustsPublishMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsTradebustsPublishParams"
            }
          },
          {
            "description": "Client-generated request identifier",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "ChannelsTradesSubscribeJsonrpc": {
      "name": "ChannelsTradesSubscribeJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsTradesSubscribeMethod": {
      "name": "ChannelsTradesSubscribeMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscription"
          }
        ]
      }
    },
    "ChannelsTradesSubscribeParams": {
      "name": "ChannelsTradesSubscribeParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^trades\\.([A-Z0-9]+-[A-Z0-9]+|ALL)$"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "ResponsesTradeResult"
            }
          }
        ]
      }
    },
    "TradesSubscribe": {
      "name": "TradesSubscribe",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsTradesSubscribeJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsTradesSubscribeMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsTradesSubscribeParams"
            }
          }
        ]
      }
    },
    "ChannelsTradesPublishJsonrpc": {
      "name": "ChannelsTradesPublishJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsTradesPublishMethod": {
      "name": "ChannelsTradesPublishMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscribe"
          }
        ]
      }
    },
    "ChannelsTradesPublishParams": {
      "name": "ChannelsTradesPublishParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Channel name including market symbol, e.g., \"trades.{market_symbol}\"",
            "key": "channel",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^trades\\.([A-Z0-9]+-[A-Z0-9]+|ALL)$"
              }
            }
          }
        ]
      }
    },
    "TradesPublish": {
      "name": "TradesPublish",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsTradesPublishJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsTradesPublishMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsTradesPublishParams"
            }
          },
          {
            "description": "Client-generated request identifier",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "ChannelsTransactionSubscribeJsonrpc": {
      "name": "ChannelsTransactionSubscribeJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsTransactionSubscribeMethod": {
      "name": "ChannelsTransactionSubscribeMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscription"
          }
        ]
      }
    },
    "ChannelsTransactionSubscribeParams": {
      "name": "ChannelsTransactionSubscribeParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "transaction"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "ResponsesTransactionResponse"
            }
          }
        ]
      }
    },
    "TransactionSubscribe": {
      "name": "TransactionSubscribe",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsTransactionSubscribeJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsTransactionSubscribeMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsTransactionSubscribeParams"
            }
          }
        ]
      }
    },
    "ChannelsTransactionPublishJsonrpc": {
      "name": "ChannelsTransactionPublishJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsTransactionPublishMethod": {
      "name": "ChannelsTransactionPublishMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscribe"
          }
        ]
      }
    },
    "ChannelsTransactionPublishParams": {
      "name": "ChannelsTransactionPublishParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "transaction"
              }
            }
          }
        ]
      }
    },
    "TransactionPublish": {
      "name": "TransactionPublish",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsTransactionPublishJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsTransactionPublishMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsTransactionPublishParams"
            }
          },
          {
            "description": "Client-generated request identifier",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "ChannelsTransfersSubscribeJsonrpc": {
      "name": "ChannelsTransfersSubscribeJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsTransfersSubscribeMethod": {
      "name": "ChannelsTransfersSubscribeMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscription"
          }
        ]
      }
    },
    "ChannelsTransfersSubscribeParams": {
      "name": "ChannelsTransfersSubscribeParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "transfers"
              }
            }
          },
          {
            "key": "data",
            "valueType": {
              "type": "id",
              "value": "ResponsesTransferResult"
            }
          }
        ]
      }
    },
    "TransfersSubscribe": {
      "name": "TransfersSubscribe",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsTransfersSubscribeJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsTransfersSubscribeMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsTransfersSubscribeParams"
            }
          }
        ]
      }
    },
    "ChannelsTransfersPublishJsonrpc": {
      "name": "ChannelsTransfersPublishJsonrpc",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "2.0"
          }
        ]
      }
    },
    "ChannelsTransfersPublishMethod": {
      "name": "ChannelsTransfersPublishMethod",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "subscribe"
          }
        ]
      }
    },
    "ChannelsTransfersPublishParams": {
      "name": "ChannelsTransfersPublishParams",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "channel",
            "valueType": {
              "type": "literal",
              "value": {
                "type": "stringLiteral",
                "value": "transfers"
              }
            }
          }
        ]
      }
    },
    "TransfersPublish": {
      "name": "TransfersPublish",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "jsonrpc",
            "valueType": {
              "type": "id",
              "value": "ChannelsTransfersPublishJsonrpc"
            }
          },
          {
            "key": "method",
            "valueType": {
              "type": "id",
              "value": "ChannelsTransfersPublishMethod"
            }
          },
          {
            "key": "params",
            "valueType": {
              "type": "id",
              "value": "ChannelsTransfersPublishParams"
            }
          },
          {
            "description": "Client-generated request identifier",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        ]
      }
    }
  },
  "subpackages": {
    "subpackage_account": {
      "subpackageId": "subpackage_account",
      "name": "account",
      "endpoints": [],
      "webhooks": [],
      "websockets": [
        {
          "auth": false,
          "description": "Private websocket channel for receiving updates of account status",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "wss://ws.api.prod.paradex.trade/v1?"
            }
          ],
          "id": "account",
          "name": "SUB account",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "headers": [],
          "queryParameters": [],
          "messages": [
            {
              "type": "subscribe",
              "displayName": "subscribe",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "AccountSubscribe"
                }
              }
            },
            {
              "type": "publish",
              "displayName": "publish",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "AccountPublish"
                }
              }
            }
          ],
          "examples": [
            {
              "path": "",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "messages": [
                {
                  "type": "publish",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscribe",
                    "params": {
                      "channel": "account"
                    },
                    "id": 1
                  }
                },
                {
                  "type": "subscribe",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscription",
                    "params": {
                      "channel": "account",
                      "data": {
                        "account": "account",
                        "account_value": "account_value",
                        "free_collateral": "free_collateral",
                        "initial_margin_requirement": "initial_margin_requirement",
                        "maintenance_margin_requirement": "maintenance_margin_requirement",
                        "margin_cushion": "margin_cushion",
                        "seq_no": 1,
                        "settlement_asset": "settlement_asset",
                        "status": "status",
                        "total_collateral": "total_collateral",
                        "updated_at": 1
                      }
                    }
                  }
                }
              ]
            }
          ]
        }
      ],
      "types": [],
      "subpackages": []
    },
    "subpackage_algos": {
      "subpackageId": "subpackage_algos",
      "name": "algos",
      "endpoints": [
        {
          "auth": true,
          "description": "Get current user all open algo orders\n",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "get-open-algo-orders",
          "originalEndpointId": "Algos.get-open-algo-orders",
          "name": "Get open algo orders",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/algo/orders"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Algos_get-open-algo-orders_Response_200"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/algo/orders",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "account": "0x4638e3041366aa71720be63e32e53e1223316c7f0d56f7aa617542ed1e7512",
                      "algo_type": "",
                      "avg_fill_price": "26000",
                      "cancel_reason": "NOT_ENOUGH_MARGIN",
                      "created_at": 1681493746016,
                      "end_at": 1681493746016,
                      "id": "123456",
                      "last_updated_at": 1681493746016,
                      "market": "BTC-USD-PERP",
                      "remaining_size": "0",
                      "side": "BUY",
                      "size": "0.05",
                      "status": "NEW"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "account": "0x4638e3041366aa71720be63e32e53e1223316c7f0d56f7aa617542ed1e7512",
                      "algo_type": "",
                      "avg_fill_price": "26000",
                      "cancel_reason": "NOT_ENOUGH_MARGIN",
                      "created_at": 1681493746016,
                      "end_at": 1681493746016,
                      "id": "123456",
                      "last_updated_at": 1681493746016,
                      "market": "BTC-USD-PERP",
                      "remaining_size": "0",
                      "side": "BUY",
                      "size": "0.05",
                      "status": "NEW"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Create a new algo order\n\n### TWAP\n\nTWAP orders break a large trade into smaller ones over time to reduce market impact:\n- Sub-orders are placed every 30 seconds.\n- Order duration is between 30 and 86,400 seconds, in multiples of 30.\n- Supported sub order type: MARKET\n",
          "method": "POST",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "create-algo-order",
          "originalEndpointId": "Algos.create-algo-order",
          "name": "Create algo order",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/algo/orders"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "requests.AlgoOrderRequest"
                }
              },
              "description": "Algo order content"
            },
            "description": "Algo order content"
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "responses.AlgoOrderResp"
              }
            },
            "statusCode": 201,
            "description": "Created"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/algo/orders",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "algo_type": "TWAP",
                "duration_seconds": 3600,
                "market": "BTC-USD-PERP",
                "side": "BUY",
                "signature": "foo",
                "signature_timestamp": 42,
                "size": "1.213",
                "type": "MARKET"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "algo_type": "TWAP",
                  "duration_seconds": 3600,
                  "market": "BTC-USD-PERP",
                  "side": "BUY",
                  "signature": "foo",
                  "signature_timestamp": 42,
                  "size": "1.213",
                  "type": "MARKET"
                }
              },
              "responseStatusCode": 201,
              "responseBody": {
                "type": "json",
                "value": {
                  "account": "0x4638e3041366aa71720be63e32e53e1223316c7f0d56f7aa617542ed1e7512",
                  "algo_type": "",
                  "avg_fill_price": "26000",
                  "cancel_reason": "NOT_ENOUGH_MARGIN",
                  "created_at": 1681493746016,
                  "end_at": 1681493746016,
                  "id": "123456",
                  "last_updated_at": 1681493746016,
                  "market": "BTC-USD-PERP",
                  "remaining_size": "0",
                  "side": "BUY",
                  "size": "0.05",
                  "status": "NEW"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "account": "0x4638e3041366aa71720be63e32e53e1223316c7f0d56f7aa617542ed1e7512",
                  "algo_type": "",
                  "avg_fill_price": "26000",
                  "cancel_reason": "NOT_ENOUGH_MARGIN",
                  "created_at": 1681493746016,
                  "end_at": 1681493746016,
                  "id": "123456",
                  "last_updated_at": 1681493746016,
                  "market": "BTC-USD-PERP",
                  "remaining_size": "0",
                  "side": "BUY",
                  "size": "0.05",
                  "status": "NEW"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Get current user algo orders filtered on attributes\n",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "get-algo-orders-history",
          "originalEndpointId": "Algos.get-algo-orders-history",
          "name": "Get algo orders history",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/algo/orders-history"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Unique ID of client generating the order",
              "key": "client_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Returns the ‘next’ paginated page.",
              "key": "cursor",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "End Time (unix time millisecond)",
              "key": "end_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "Market for the order",
              "key": "market",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Limit the number of responses in the page",
              "key": "page_size",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5000,
                    "default": 100
                  }
                }
              }
            },
            {
              "description": "Order side",
              "key": "side",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "AlgoOrdersHistoryGetParametersSchema"
                }
              }
            },
            {
              "description": "Start Time (unix time millisecond)",
              "key": "start_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "Order status",
              "key": "status",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "AlgoOrdersHistoryGetParametersSchema"
                }
              }
            },
            {
              "description": "Order type",
              "key": "type",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "AlgoOrdersHistoryGetParametersSchema"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Algos_get-algo-orders-history_Response_200"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/algo/orders-history",
              "pathParameters": {},
              "queryParameters": {
                "client_id": "client-id",
                "market": "BTC-USD-PERP"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "next": "eyJmaWx0ZXIiMsIm1hcmtlciI6eyJtYXJrZXIiOiIxNjc1NjUwMDE3NDMxMTAxNjk5N=",
                  "prev": "eyJmaWx0ZXIiOnsiTGltaXQiOjkwfSwidGltZSI6MTY4MTY3OTgzNzk3MTMwOTk1MywibWFya2VyIjp7Im1zMjExMD==",
                  "results": [
                    {
                      "account": "0x4638e3041366aa71720be63e32e53e1223316c7f0d56f7aa617542ed1e7512",
                      "algo_type": "",
                      "avg_fill_price": "26000",
                      "cancel_reason": "NOT_ENOUGH_MARGIN",
                      "created_at": 1681493746016,
                      "end_at": 1681493746016,
                      "id": "123456",
                      "last_updated_at": 1681493746016,
                      "market": "BTC-USD-PERP",
                      "remaining_size": "0",
                      "side": "BUY",
                      "size": "0.05",
                      "status": "NEW"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "next": "eyJmaWx0ZXIiMsIm1hcmtlciI6eyJtYXJrZXIiOiIxNjc1NjUwMDE3NDMxMTAxNjk5N=",
                  "prev": "eyJmaWx0ZXIiOnsiTGltaXQiOjkwfSwidGltZSI6MTY4MTY3OTgzNzk3MTMwOTk1MywibWFya2VyIjp7Im1zMjExMD==",
                  "results": [
                    {
                      "account": "0x4638e3041366aa71720be63e32e53e1223316c7f0d56f7aa617542ed1e7512",
                      "algo_type": "",
                      "avg_fill_price": "26000",
                      "cancel_reason": "NOT_ENOUGH_MARGIN",
                      "created_at": 1681493746016,
                      "end_at": 1681493746016,
                      "id": "123456",
                      "last_updated_at": 1681493746016,
                      "market": "BTC-USD-PERP",
                      "remaining_size": "0",
                      "side": "BUY",
                      "size": "0.05",
                      "status": "NEW"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Get an algo order by id. Only return algo order in `OPEN` or `NEW` status.\n",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "get-algo-order-by-id",
          "originalEndpointId": "Algos.get-algo-order-by-id",
          "name": "Get algo order by id",
          "path": {
            "pathParameters": [
              {
                "description": "Algo ID",
                "key": "algo_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/algo/orders/"
              },
              {
                "type": "pathParameter",
                "value": "algo_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "responses.AlgoOrderResp"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/algo/orders/",
              "pathParameters": {
                "algo_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "account": "0x4638e3041366aa71720be63e32e53e1223316c7f0d56f7aa617542ed1e7512",
                  "algo_type": "",
                  "avg_fill_price": "26000",
                  "cancel_reason": "NOT_ENOUGH_MARGIN",
                  "created_at": 1681493746016,
                  "end_at": 1681493746016,
                  "id": "123456",
                  "last_updated_at": 1681493746016,
                  "market": "BTC-USD-PERP",
                  "remaining_size": "0",
                  "side": "BUY",
                  "size": "0.05",
                  "status": "NEW"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "account": "0x4638e3041366aa71720be63e32e53e1223316c7f0d56f7aa617542ed1e7512",
                  "algo_type": "",
                  "avg_fill_price": "26000",
                  "cancel_reason": "NOT_ENOUGH_MARGIN",
                  "created_at": 1681493746016,
                  "end_at": 1681493746016,
                  "id": "123456",
                  "last_updated_at": 1681493746016,
                  "market": "BTC-USD-PERP",
                  "remaining_size": "0",
                  "side": "BUY",
                  "size": "0.05",
                  "status": "NEW"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Cancel an existing algo order by id\n",
          "method": "DELETE",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "cancel-algo-order",
          "originalEndpointId": "Algos.cancel-algo-order",
          "name": "Cancel algo order by id",
          "path": {
            "pathParameters": [
              {
                "description": "Algo ID",
                "key": "algo_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/algo/orders/"
              },
              {
                "type": "pathParameter",
                "value": "algo_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/algo/orders/",
              "pathParameters": {
                "algo_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_authentication": {
      "subpackageId": "subpackage_authentication",
      "name": "authentication",
      "endpoints": [
        {
          "auth": false,
          "description": "Authenticate using signed payload to get a JWT for usage in other endpoints\n\nThere are multiple valid headers required to be sent as part of this request.\n\nFor onboarding examples, refer to `go`, `java` and `python` code in [code-samples](https://github.com/tradeparadex/code-samples).\n\n#### StarkNet Message Hash and Signature\n\nInspired by [EIP-712](https://eips.ethereum.org/EIPS/eip-712),\n(a standard for hashing and signing typed structured data)\nthe encoding of an off-chain message is defined as:\n\n`signed_data = Enc[PREFIX_MESSAGE, domain_separator, account, hash_struct(message)]`\n\nwhere:\n\n- `PREFIX_MESSAGE = \"StarkNet Message\"`\n- `domain_separator` is defined as the `hash_struct` of the StarkNetDomain struct:\n  * Struct contains: `name`, `chainId` and `version`\n  * `chainId` is can be obtained calling `GET /system/config`\n- `account` is the StarkNet account address\n- The message to be hashed is represented as a struct\n  * `hash_struct(message) = Enc[type_hash(MyStruct), Enc[param1], ..., Enc[paramN]]`\n  * where `type_hash` is defined as in EIP-712 (but using `selector` instead of `keccak`)\n  * More details on StarkNet - [Hash Functions](https://docs.starknet.io/architecture-and-concepts/cryptography/#hash_functions)\n\nIn case of more complex structure of object, you have to work in the spirit of EIP-712.\nThis json structure has 4 mandatory items: `types`, `primaryType`, `domain` and `message`.\nThese items are designed to be able to be an interface with a wallet.\nAt sign request, the wallet will display:\n\n- `message` will be displayed at the bottom of the wallet display,\nshowing clearly (not in hex) the message to sign.\nIts structure has to be in accordance with the type listed in primaryType,\ndefined in types.\n- `domain` will be shown above the message.\nIts structure has to be in accordance with `StarkNetDomain`.\n\nThe predefined types that you can use :\n\n- `felt` : for an integer on 251 bits.\n- `felt*` : for an array of felt.\n- `string` : for a shortString of 31 ASCII characters max.\n- `selector` : for a name of a smart contract function.\n- `merkletree` : for a Root of a Merkle tree, calculated with the provided data.\n\nSpecification details: [Signing transactions and off-chain messages](https://github.com/argentlabs/argent-x/discussions/14)\n\n#### Message Hash Sample Code\n\nFor a complete `message_hash` example, refer to `python` code in [code-samples](https://github.com/tradeparadex/code-samples).\n\n> Examples:\n\n```json\n{\n  \"paradex-signature-expiration\": 1682364556,\n  \"paradex-starknet-account\": \"0x129f3dc1b8962d8a87abc692424c78fda963ade0e1cd17bf3d1c26f8d41ee7a\",\n  \"paradex-starknet-signature\": [\n    \"1381323390094460587764867648394252677239485992175346764030313478865763678671\",\n    \"396490140510115262427678549757564216013606350105112805717359873954984880589\"\n  ],\n  \"paradex-timestamp\": 1681759756\n}\n```\n",
          "method": "POST",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "auth",
          "originalEndpointId": "Authentication.auth",
          "name": "Get JWT",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/auth"
              }
            ]
          },
          "queryParameters": [],
          "headers": [
            {
              "description": "Starknet account",
              "key": "PARADEX-STARKNET-ACCOUNT",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "description": "Starknet signature",
              "key": "PARADEX-STARKNET-SIGNATURE",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "description": "Timestamp when the signature was created",
              "key": "PARADEX-TIMESTAMP",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "description": "Timestamp when signature expires (default 30 min | Max 1 week)",
              "key": "PARADEX-SIGNATURE-EXPIRATION",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Optional flag to authorize all isolated market accounts linked to the main account. When set to true, the returned JWT will grant trading access to all isolated accounts. Defaults to false if not specified",
              "key": "PARADEX-AUTHORIZE-ISOLATED-MARKETS",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "responses.AuthResp"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/auth",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {
                "PARADEX-STARKNET-ACCOUNT": "foo",
                "PARADEX-STARKNET-SIGNATURE": "foo",
                "PARADEX-TIMESTAMP": "foo"
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "jwt_token": "eyJhbGciOiJFUzM4NCIsInR5cCI6IkpXVCJ9.eyJ0eXAiOiJhdCtKV1QiLCJleHAiOjE2ODE0NTI5MDcsImlhdCI6MTY4MTQ1MjYwNywiaXNzIjoiUGFyYWRleCBzdGFnaW5nIiwic3ViIjoiMHg0OTVkMmViNTIzNmExMmI4YjRhZDdkMzg0OWNlNmEyMDNjZTIxYzQzZjQ3M2MyNDhkZmQ1Y2U3MGQ5NDU0ZmEifQ.BPihIbGhnnsuPlReqC9x12JFXldpswg5EdA6tTiDQm-_UHaRz_8RfVBqWc2fPN6CzFsXTq7GowZu-2qMxPvZK_fGcxEhTp2k1r8MUxowlUIT4vPu2scCwrsyIujlCAwS"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "jwt_token": "eyJhbGciOiJFUzM4NCIsInR5cCI6IkpXVCJ9.eyJ0eXAiOiJhdCtKV1QiLCJleHAiOjE2ODE0NTI5MDcsImlhdCI6MTY4MTQ1MjYwNywiaXNzIjoiUGFyYWRleCBzdGFnaW5nIiwic3ViIjoiMHg0OTVkMmViNTIzNmExMmI4YjRhZDdkMzg0OWNlNmEyMDNjZTIxYzQzZjQ3M2MyNDhkZmQ1Y2U3MGQ5NDU0ZmEifQ.BPihIbGhnnsuPlReqC9x12JFXldpswg5EdA6tTiDQm-_UHaRz_8RfVBqWc2fPN6CzFsXTq7GowZu-2qMxPvZK_fGcxEhTp2k1r8MUxowlUIT4vPu2scCwrsyIujlCAwS"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Onboarding verifies that the caller owns the StarkNet address and enters them\ninto the database. This call is idempotent.\n",
          "method": "POST",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "onboarding",
          "originalEndpointId": "Authentication.onboarding",
          "name": "Onboarding",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/onboarding"
              }
            ]
          },
          "queryParameters": [],
          "headers": [
            {
              "description": "Ethereum account used to onboard",
              "key": "PARADEX-ETHEREUM-ACCOUNT",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "description": "Starknet address",
              "key": "PARADEX-STARKNET-ACCOUNT",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "description": "Starknet signature",
              "key": "PARADEX-STARKNET-SIGNATURE",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          ],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "requests.Onboarding"
                }
              },
              "description": "Onboarding user public_key"
            },
            "description": "Onboarding user public_key"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/onboarding",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {
                "PARADEX-ETHEREUM-ACCOUNT": "foo",
                "PARADEX-STARKNET-ACCOUNT": "foo",
                "PARADEX-STARKNET-SIGNATURE": "foo"
              },
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_markets": {
      "subpackageId": "subpackage_markets",
      "name": "markets",
      "endpoints": [
        {
          "auth": false,
          "description": "Get the best bid/ask for the given market\n",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "get-bbo",
          "originalEndpointId": "Markets.get-bbo",
          "name": "Get market bbo",
          "path": {
            "pathParameters": [
              {
                "description": "Market symbol - ex: BTC-USD-PERP",
                "key": "market",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/bbo/"
              },
              {
                "type": "pathParameter",
                "value": "market"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "responses.BBOResp"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/bbo/",
              "pathParameters": {
                "market": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "ask": "30130.15",
                  "ask_size": "0.05",
                  "bid": "30112.22",
                  "bid_size": "0.04",
                  "last_updated_at": 1681493939981,
                  "market": "BTC-USD-PERP",
                  "seq_no": 20784
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "ask": "30130.15",
                  "ask_size": "0.05",
                  "bid": "30112.22",
                  "bid_size": "0.04",
                  "last_updated_at": 1681493939981,
                  "market": "BTC-USD-PERP",
                  "seq_no": 20784
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "List historical funding data by market\n",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "get-funding-data",
          "originalEndpointId": "Markets.get-funding-data",
          "name": "Funding data history",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/funding/data"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Returns the ‘next’ paginated page.",
              "key": "cursor",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "End Time (unix time millisecond)",
              "key": "end_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "Market for which funding payments are queried",
              "key": "market",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "description": "Limit the number of responses in the page",
              "key": "page_size",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5000,
                    "default": 100
                  }
                }
              }
            },
            {
              "description": "Start Time (unix time millisecond)",
              "key": "start_at",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Markets_get-funding-data_Response_200"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/funding/data",
              "pathParameters": {},
              "queryParameters": {
                "market": "BTC-USD-PERP"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "next": "eyJmaWx0ZXIiMsIm1hcmtlciI6eyJtYXJrZXIiOiIxNjc1NjUwMDE3NDMxMTAxNjk5N=",
                  "prev": "eyJmaWx0ZXIiOnsiTGltaXQiOjkwfSwidGltZSI6MTY4MTY3OTgzNzk3MTMwOTk1MywibWFya2VyIjp7Im1zMjExMD==",
                  "results": [
                    {
                      "created_at": 42,
                      "funding_index": "foo",
                      "funding_premium": "foo",
                      "funding_rate": "foo",
                      "market": "foo"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "next": "eyJmaWx0ZXIiMsIm1hcmtlciI6eyJtYXJrZXIiOiIxNjc1NjUwMDE3NDMxMTAxNjk5N=",
                  "prev": "eyJmaWx0ZXIiOnsiTGltaXQiOjkwfSwidGltZSI6MTY4MTY3OTgzNzk3MTMwOTk1MywibWFya2VyIjp7Im1zMjExMD==",
                  "results": [
                    {
                      "created_at": 42,
                      "funding_index": "foo",
                      "funding_premium": "foo",
                      "funding_rate": "foo",
                      "market": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Get markets static data component\n",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "get-markets",
          "originalEndpointId": "Markets.get-markets",
          "name": "List available markets",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/markets"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Market Name - example: BTC-USD-PERP",
              "key": "market",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Markets_get-markets_Response_200"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/markets",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "asset_kind": "PERP",
                      "base_currency": "ETH",
                      "chain_details": {
                        "collateral_address": "0x1234567890",
                        "contract_address": "0x1234567890",
                        "fee_account_address": "0x1234567890",
                        "fee_maker": "0.01",
                        "fee_taker": "0.01",
                        "insurance_fund_address": "0x1234567890",
                        "liquidation_fee": "0.01",
                        "oracle_address": "0x1234567890",
                        "symbol": "ETH-USD-PERP"
                      },
                      "clamp_rate": "0.05",
                      "delta1_cross_margin_params": {
                        "imf_base": "0.11",
                        "imf_factor": "0",
                        "imf_shift": "0",
                        "mmf_factor": "0.51"
                      },
                      "expiry_at": 0,
                      "funding_period_hours": 8,
                      "interest_rate": "0.01",
                      "iv_bands_width": "0.05",
                      "market_kind": "cross",
                      "max_funding_rate": "0.05",
                      "max_funding_rate_change": "0.0005",
                      "max_open_orders": 100,
                      "max_order_size": "100",
                      "max_tob_spread": "0.2",
                      "min_notional": "3",
                      "open_at": 0,
                      "option_cross_margin_params": {
                        "imf": {
                          "long_itm": "0.2",
                          "premium_multiplier": "1.2",
                          "short_itm": "0.4",
                          "short_otm": "0.25",
                          "short_put_cap": "0.5"
                        },
                        "mmf": {
                          "long_itm": "0.2",
                          "premium_multiplier": "1.2",
                          "short_itm": "0.4",
                          "short_otm": "0.25",
                          "short_put_cap": "0.5"
                        }
                      },
                      "option_type": "PUT",
                      "oracle_ewma_factor": "0.2",
                      "order_size_increment": "0.001",
                      "position_limit": "500",
                      "price_bands_width": "0.05",
                      "price_feed_id": "GVXRSBjFk6e6J3NbVPXohDJetcTjaeeuykUpbQF8UoMU",
                      "price_tick_size": "0.01",
                      "quote_currency": "USD",
                      "settlement_currency": "USDC",
                      "strike_price": "66500",
                      "symbol": "ETH-USD-PERP",
                      "tags": [
                        "foo"
                      ]
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "asset_kind": "PERP",
                      "base_currency": "ETH",
                      "chain_details": {
                        "collateral_address": "0x1234567890",
                        "contract_address": "0x1234567890",
                        "fee_account_address": "0x1234567890",
                        "fee_maker": "0.01",
                        "fee_taker": "0.01",
                        "insurance_fund_address": "0x1234567890",
                        "liquidation_fee": "0.01",
                        "oracle_address": "0x1234567890",
                        "symbol": "ETH-USD-PERP"
                      },
                      "clamp_rate": "0.05",
                      "delta1_cross_margin_params": {
                        "imf_base": "0.11",
                        "imf_factor": "0",
                        "imf_shift": "0",
                        "mmf_factor": "0.51"
                      },
                      "expiry_at": 0,
                      "funding_period_hours": 8,
                      "interest_rate": "0.01",
                      "iv_bands_width": "0.05",
                      "market_kind": "cross",
                      "max_funding_rate": "0.05",
                      "max_funding_rate_change": "0.0005",
                      "max_open_orders": 100,
                      "max_order_size": "100",
                      "max_tob_spread": "0.2",
                      "min_notional": "3",
                      "open_at": 0,
                      "option_cross_margin_params": {
                        "imf": {
                          "long_itm": "0.2",
                          "premium_multiplier": "1.2",
                          "short_itm": "0.4",
                          "short_otm": "0.25",
                          "short_put_cap": "0.5"
                        },
                        "mmf": {
                          "long_itm": "0.2",
                          "premium_multiplier": "1.2",
                          "short_itm": "0.4",
                          "short_otm": "0.25",
                          "short_put_cap": "0.5"
                        }
                      },
                      "option_type": "PUT",
                      "oracle_ewma_factor": "0.2",
                      "order_size_increment": "0.001",
                      "position_limit": "500",
                      "price_bands_width": "0.05",
                      "price_feed_id": "GVXRSBjFk6e6J3NbVPXohDJetcTjaeeuykUpbQF8UoMU",
                      "price_tick_size": "0.01",
                      "quote_currency": "USD",
                      "settlement_currency": "USDC",
                      "strike_price": "66500",
                      "symbol": "ETH-USD-PERP",
                      "tags": [
                        "foo"
                      ]
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Klines for a symbol",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "klines",
          "originalEndpointId": "Markets.klines",
          "name": "OHLCV for a symbol",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/markets/klines"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "end time for klines in milliseconds",
              "key": "end_at",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            {
              "description": "Which price to use for the klines",
              "key": "price_kind",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "MarketsKlinesGetParametersSchema"
                }
              }
            },
            {
              "description": "resolution in minutes: 1, 3, 5, 15, 30, 60",
              "key": "resolution",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "description": "start time for klines in milliseconds",
              "key": "start_at",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            {
              "description": "Symbol of the market pair",
              "key": "symbol",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          ],
          "headers": [],
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/markets/klines",
              "pathParameters": {},
              "queryParameters": {
                "end_at": 42,
                "resolution": "foo",
                "start_at": 42,
                "symbol": "foo"
              },
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Get markets dynamic data component\n",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "get-markets-summary",
          "originalEndpointId": "Markets.get-markets-summary",
          "name": "List available markets summary",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/markets/summary"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "End Time (unix time millisecond)",
              "key": "end",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "Name of the market for which summary is requested (for all available markets use ALL)",
              "key": "market",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "description": "Start Time (unix time millisecond)",
              "key": "start",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Markets_get-markets-summary_Response_200"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/markets/summary",
              "pathParameters": {},
              "queryParameters": {
                "market": "BTC-USD-PERP"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "ask": "30130.15",
                      "ask_iv": "0.2",
                      "bid": "30112.22",
                      "bid_iv": "0.2",
                      "created_at": 42,
                      "delta": "1",
                      "funding_rate": "0.3",
                      "future_funding_rate": "0.3",
                      "greeks": {
                        "delta": "1",
                        "gamma": "0.2",
                        "rho": "0.2",
                        "vanna": "0.2",
                        "vega": "0.2",
                        "volga": "0.2"
                      },
                      "last_iv": "0.2",
                      "last_traded_price": "30109.53",
                      "mark_iv": "0.2",
                      "mark_price": "29799.70877478",
                      "open_interest": "6100048.3",
                      "price_change_rate_24h": "0.05",
                      "symbol": "BTC-USD-PERP",
                      "total_volume": "141341.0424",
                      "underlying_price": "29876.3",
                      "volume_24h": "47041.0424"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "ask": "30130.15",
                      "ask_iv": "0.2",
                      "bid": "30112.22",
                      "bid_iv": "0.2",
                      "created_at": 42,
                      "delta": "1",
                      "funding_rate": "0.3",
                      "future_funding_rate": "0.3",
                      "greeks": {
                        "delta": "1",
                        "gamma": "0.2",
                        "rho": "0.2",
                        "vanna": "0.2",
                        "vega": "0.2",
                        "volga": "0.2"
                      },
                      "last_iv": "0.2",
                      "last_traded_price": "30109.53",
                      "mark_iv": "0.2",
                      "mark_price": "29799.70877478",
                      "open_interest": "6100048.3",
                      "price_change_rate_24h": "0.05",
                      "symbol": "BTC-USD-PERP",
                      "total_volume": "141341.0424",
                      "underlying_price": "29876.3",
                      "volume_24h": "47041.0424"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Get snapshot of the orderbook for the given market\n",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "get-orderbook",
          "originalEndpointId": "Markets.get-orderbook",
          "name": "Get market orderbook",
          "path": {
            "pathParameters": [
              {
                "description": "Market symbol - ex: BTC-USD-PERP",
                "key": "market",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/orderbook/"
              },
              {
                "type": "pathParameter",
                "value": "market"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Depth",
              "key": "depth",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "default": 20
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "responses.AskBidArray"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/orderbook/",
              "pathParameters": {
                "market": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "asks": [
                    [
                      "foo"
                    ]
                  ],
                  "bids": [
                    [
                      "foo"
                    ]
                  ],
                  "last_updated_at": 1681462770114,
                  "market": "ETH-USD-PERP",
                  "seq_no": 20784
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "asks": [
                    [
                      "foo"
                    ]
                  ],
                  "bids": [
                    [
                      "foo"
                    ]
                  ],
                  "last_updated_at": 1681462770114,
                  "market": "ETH-USD-PERP",
                  "seq_no": 20784
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_insurance": {
      "subpackageId": "subpackage_insurance",
      "name": "insurance",
      "endpoints": [
        {
          "auth": false,
          "description": "Get insurance fund account's information\n",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "get-insurance-fund",
          "originalEndpointId": "Insurance.get-insurance-fund",
          "name": "Get insurance fund account information",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/insurance"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "responses.InsuranceAccountResp"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/insurance",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "account": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d9454fa",
                  "account_value": "136285.069",
                  "settlement_asset": "USDC",
                  "updated_at": 1681471234972
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "account": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d9454fa",
                  "account_value": "136285.069",
                  "settlement_asset": "USDC",
                  "updated_at": 1681471234972
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_liquidations": {
      "subpackageId": "subpackage_liquidations",
      "name": "liquidations",
      "endpoints": [
        {
          "auth": true,
          "description": "Retrieves a list of liquidations associated to the requester's account\n",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "get-liquidations",
          "originalEndpointId": "Liquidations.get-liquidations",
          "name": "List liquidations",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/liquidations"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Start Time (unix time millisecond)",
              "key": "from",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "description": "End Time (unix time millisecond)",
              "key": "to",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Liquidations_get-liquidations_Response_200"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/liquidations",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "created_at": 1697213130097,
                      "id": "0x123456789"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "created_at": 1697213130097,
                      "id": "0x123456789"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_orders": {
      "subpackageId": "subpackage_orders",
      "name": "orders",
      "endpoints": [],
      "webhooks": [],
      "websockets": [
        {
          "auth": false,
          "description": "Private websocket channel to receive order updates",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "wss://ws.api.prod.paradex.trade/v1?"
            }
          ],
          "id": "orders",
          "name": "SUB orders",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "headers": [],
          "queryParameters": [
            {
              "description": "Either the symbol of the market (any open market returned by GET /markets) or 'ALL' to subscribe for updates to all markets",
              "key": "market_symbol",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([A-Z0-9]+-[A-Z0-9]+|ALL)$"
                }
              }
            }
          ],
          "messages": [
            {
              "type": "subscribe",
              "displayName": "subscribe",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "OrdersSubscribe"
                }
              }
            },
            {
              "type": "publish",
              "displayName": "publish",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "OrdersPublish"
                }
              }
            }
          ],
          "examples": [
            {
              "path": "",
              "pathParameters": {},
              "queryParameters": {
                "market_symbol": "market_symbol"
              },
              "headers": {},
              "messages": [
                {
                  "type": "publish",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscribe",
                    "params": {
                      "channel": "channel"
                    },
                    "id": 1
                  }
                },
                {
                  "type": "subscribe",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscription",
                    "params": {
                      "channel": "channel",
                      "data": {
                        "account": "account",
                        "avg_fill_price": "avg_fill_price",
                        "cancel_reason": "cancel_reason",
                        "client_id": "client_id",
                        "created_at": 1,
                        "flags": [
                          "flags",
                          "flags"
                        ],
                        "id": "id",
                        "instruction": "GTC",
                        "last_updated_at": 1,
                        "market": "market",
                        "price": "price",
                        "published_at": 1,
                        "received_at": 1,
                        "remaining_size": "remaining_size",
                        "seq_no": 1,
                        "side": "BUY",
                        "size": "size",
                        "status": "NEW",
                        "stp": "EXPIRE_MAKER",
                        "timestamp": 1,
                        "trigger_price": "trigger_price",
                        "type": "MARKET"
                      }
                    }
                  }
                }
              ]
            }
          ]
        }
      ],
      "types": [],
      "subpackages": []
    },
    "subpackage_referrals": {
      "subpackageId": "subpackage_referrals",
      "name": "referrals",
      "endpoints": [
        {
          "auth": true,
          "description": "Returns a QR code image containing the user's referral link",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "get-referral-qr-code",
          "originalEndpointId": "Referrals.get-referral-qr-code",
          "name": "Get Referral QR Code",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/referrals/qr-code"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/referrals/qr-code",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Get latest referee data for requester's account\n",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "get-referrals-summary",
          "originalEndpointId": "Referrals.get-referrals-summary",
          "name": "Get account referral details",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/referrals/summary"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Referrals_get-referrals-summary_Response_200"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/referrals/summary",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "address": "foo",
                      "created_at": 1715592690488,
                      "referral_code": "maxdegen01",
                      "referral_rewards": "0.123",
                      "volume_traded": "0.123"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "address": "foo",
                      "created_at": 1715592690488,
                      "referral_code": "maxdegen01",
                      "referral_rewards": "0.123",
                      "volume_traded": "0.123"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_system": {
      "subpackageId": "subpackage_system",
      "name": "system",
      "endpoints": [
        {
          "auth": false,
          "description": "Get clearing and settlement layer config for Paradex\n",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "getSystemConfig",
          "originalEndpointId": "System.getSystemConfig",
          "name": "Get system config",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/system/config"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "responses.SystemConfigResponse"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/system/config",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "block_explorer_url": "https://voyager.testnet.paradex.trade/",
                  "bridged_tokens": [
                    {
                      "decimals": 42,
                      "l1_bridge_address": "foo",
                      "l1_token_address": "foo",
                      "l2_bridge_address": "foo",
                      "l2_token_address": "foo",
                      "name": "foo",
                      "symbol": "foo"
                    }
                  ],
                  "environment": "local",
                  "l1_chain_id": "5",
                  "l1_core_contract_address": "0x182FE62c57461d4c5Ab1aE6F04f1D51aA1607daf",
                  "l1_operator_address": "0x63e762538C70442758Fd622116d817761c94FD6A",
                  "l1_withdraw_relayer_address": "0x63e762538C70442758Fd622116d817761c94FD6A",
                  "l2_withdraw_relayer_address": "0x63e762538C70442758Fd622116d817761c94FD6A",
                  "liquidation_fee": "0.20",
                  "oracle_address": "0x47c622ce5f7ff7fa17725df596f4f506364e49be0621eb142a75b44ee3689c6",
                  "paraclear_account_hash": "0x033434ad846cdd5f23eb73ff09fe6fddd568284a0fb7d1be20ee482f044dabe2",
                  "paraclear_account_proxy_hash": "0x3530cc4759d78042f1b543bf797f5f3d647cde0388c33734cf91b7f7b9314a9",
                  "paraclear_address": "0x4638e3041366aa71720be63e32e53e1223316c7f0d56f7aa617542ed1e7554d",
                  "paraclear_decimals": 42,
                  "partial_liquidation_buffer": "0.2",
                  "partial_liquidation_share_increment": "0.05",
                  "starknet_chain_id": "SN_CHAIN_ID",
                  "starknet_fullnode_rpc_url": "https://pathfinder.api.testnet.paradex.trade/rpc/v0_7",
                  "starknet_gateway_url": "https://potc-testnet-02.starknet.io",
                  "universal_deployer_address": "0x1f3f9d3f1f0b7f3f9f3f9f3f9f3f9f3f9f3f9f3f"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "block_explorer_url": "https://voyager.testnet.paradex.trade/",
                  "bridged_tokens": [
                    {
                      "decimals": 42,
                      "l1_bridge_address": "foo",
                      "l1_token_address": "foo",
                      "l2_bridge_address": "foo",
                      "l2_token_address": "foo",
                      "name": "foo",
                      "symbol": "foo"
                    }
                  ],
                  "environment": "local",
                  "l1_chain_id": "5",
                  "l1_core_contract_address": "0x182FE62c57461d4c5Ab1aE6F04f1D51aA1607daf",
                  "l1_operator_address": "0x63e762538C70442758Fd622116d817761c94FD6A",
                  "l1_withdraw_relayer_address": "0x63e762538C70442758Fd622116d817761c94FD6A",
                  "l2_withdraw_relayer_address": "0x63e762538C70442758Fd622116d817761c94FD6A",
                  "liquidation_fee": "0.20",
                  "oracle_address": "0x47c622ce5f7ff7fa17725df596f4f506364e49be0621eb142a75b44ee3689c6",
                  "paraclear_account_hash": "0x033434ad846cdd5f23eb73ff09fe6fddd568284a0fb7d1be20ee482f044dabe2",
                  "paraclear_account_proxy_hash": "0x3530cc4759d78042f1b543bf797f5f3d647cde0388c33734cf91b7f7b9314a9",
                  "paraclear_address": "0x4638e3041366aa71720be63e32e53e1223316c7f0d56f7aa617542ed1e7554d",
                  "paraclear_decimals": 42,
                  "partial_liquidation_buffer": "0.2",
                  "partial_liquidation_share_increment": "0.05",
                  "starknet_chain_id": "SN_CHAIN_ID",
                  "starknet_fullnode_rpc_url": "https://pathfinder.api.testnet.paradex.trade/rpc/v0_7",
                  "starknet_gateway_url": "https://potc-testnet-02.starknet.io",
                  "universal_deployer_address": "0x1f3f9d3f1f0b7f3f9f3f9f3f9f3f9f3f9f3f9f3f"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Get the current state of the Paradex system\n\n## Response\n\n```json\n{\"status\": \"ok\"}\n```\n\n### Status Values\n\n- `ok`: Fully operational\n- `maintenance`: Trading unavailable\n- `cancel_only`: Only cancellations allowed\n\nCheck before trading operations.\n",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "getSystemState",
          "originalEndpointId": "System.getSystemState",
          "name": "Get system state",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/system/state"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "responses.SystemStateResponse"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/system/state",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "status": "ok"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "status": "ok"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Get the current time in the Paradex\n",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "getSystemTimeUnixMilliseconds",
          "originalEndpointId": "System.getSystemTimeUnixMilliseconds",
          "name": "Get system time (unix milliseconds)",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/system/time"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "responses.SystemTimeResponse"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/system/time",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "server_time": "1681493415023"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "server_time": "1681493415023"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_transfers": {
      "subpackageId": "subpackage_transfers",
      "name": "transfers",
      "endpoints": [],
      "webhooks": [],
      "websockets": [
        {
          "auth": false,
          "description": "Websocket channel for receiving transfer updates",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "wss://ws.api.prod.paradex.trade/v1?"
            }
          ],
          "id": "transfers",
          "name": "SUB transfers",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "headers": [],
          "queryParameters": [],
          "messages": [
            {
              "type": "subscribe",
              "displayName": "subscribe",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "TransfersSubscribe"
                }
              }
            },
            {
              "type": "publish",
              "displayName": "publish",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "TransfersPublish"
                }
              }
            }
          ],
          "examples": [
            {
              "path": "",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "messages": [
                {
                  "type": "publish",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscribe",
                    "params": {
                      "channel": "transfers"
                    },
                    "id": 1
                  }
                },
                {
                  "type": "subscribe",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscription",
                    "params": {
                      "channel": "transfers",
                      "data": {
                        "account": "account",
                        "amount": "amount",
                        "auto_withdrawal_fee": "auto_withdrawal_fee",
                        "bridge": "",
                        "counterparty": "counterparty",
                        "created_at": 1,
                        "direction": "IN",
                        "external_account": "external_account",
                        "external_chain": "external_chain",
                        "external_txn_hash": "external_txn_hash",
                        "failure_reason": "failure_reason",
                        "id": "id",
                        "kind": "DEPOSIT",
                        "last_updated_at": 1,
                        "socialized_loss_factor": "socialized_loss_factor",
                        "status": "PENDING",
                        "token": "token",
                        "txn_hash": "txn_hash",
                        "vault_address": "vault_address",
                        "vault_unwind_completion_percentage": "vault_unwind_completion_percentage"
                      }
                    }
                  }
                }
              ]
            }
          ]
        }
      ],
      "types": [],
      "subpackages": []
    },
    "subpackage_vaults": {
      "subpackageId": "subpackage_vaults",
      "name": "vaults",
      "endpoints": [
        {
          "auth": false,
          "description": "Get list of available vaults.\n",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "get",
          "originalEndpointId": "Vaults.get",
          "name": "Get vaults",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/vaults"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Vault Address",
              "key": "address",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Vaults_get_Response_200"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/vaults",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "address": "0x1234567890abcdef",
                      "created_at": 1517171717,
                      "description": "My description",
                      "kind": "user",
                      "last_updated_at": 1617171717,
                      "lockup_period": 1,
                      "max_tvl": 1000000,
                      "name": "MyVault",
                      "operator_account": "0x1234567890abcdef",
                      "owner_account": "0x0234567890abcdef",
                      "profit_share": 10,
                      "status": "INITIALIZING",
                      "strategies": [
                        {
                          "address": "0x29464b79b02543ed8746bba6e71c8a15401dd27b7279a5fa2f2fe8e8cdfabb",
                          "name": "Alpha Strategy"
                        }
                      ],
                      "token_address": "foo"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "address": "0x1234567890abcdef",
                      "created_at": 1517171717,
                      "description": "My description",
                      "kind": "user",
                      "last_updated_at": 1617171717,
                      "lockup_period": 1,
                      "max_tvl": 1000000,
                      "name": "MyVault",
                      "operator_account": "0x1234567890abcdef",
                      "owner_account": "0x0234567890abcdef",
                      "profit_share": 10,
                      "status": "INITIALIZING",
                      "strategies": [
                        {
                          "address": "0x29464b79b02543ed8746bba6e71c8a15401dd27b7279a5fa2f2fe8e8cdfabb",
                          "name": "Alpha Strategy"
                        }
                      ],
                      "token_address": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Create a new vault by providing deployment parameters.Current user will\nbe set as owner of the account and a new sub-account will be deployed as\nvault operator.\n",
          "method": "POST",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "create",
          "originalEndpointId": "Vaults.create",
          "name": "Create vault",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/vaults"
              }
            ]
          },
          "queryParameters": [],
          "headers": [
            {
              "description": "Onboarded by prdx:0xa123456789",
              "key": "PARADEX-PARENT-ACCOUNT",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "description": "Starknet signature",
              "key": "PARADEX-STARKNET-SIGNATURE",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "description": "Starknet address",
              "key": "PARADEX-STARKNET-ACCOUNT",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "description": "Account derivation path - m/44'/9004'/0'/0/1",
              "key": "PARADEX-STARKNET-ACCOUNT-DERIVATION-PATH",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          ],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "requests.CreateVault"
                }
              },
              "description": "Vault parameters"
            },
            "description": "Vault parameters"
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "responses.VaultResp"
              }
            },
            "statusCode": 201,
            "description": "Created"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/vaults",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {
                "PARADEX-PARENT-ACCOUNT": "foo",
                "PARADEX-STARKNET-SIGNATURE": "foo",
                "PARADEX-STARKNET-ACCOUNT": "foo",
                "PARADEX-STARKNET-ACCOUNT-DERIVATION-PATH": "foo"
              },
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 201,
              "responseBody": {
                "type": "json",
                "value": {
                  "address": "0x1234567890abcdef",
                  "created_at": 1517171717,
                  "description": "My description",
                  "kind": "user",
                  "last_updated_at": 1617171717,
                  "lockup_period": 1,
                  "max_tvl": 1000000,
                  "name": "MyVault",
                  "operator_account": "0x1234567890abcdef",
                  "owner_account": "0x0234567890abcdef",
                  "profit_share": 10,
                  "status": "INITIALIZING",
                  "strategies": [
                    {
                      "address": "0x29464b79b02543ed8746bba6e71c8a15401dd27b7279a5fa2f2fe8e8cdfabb",
                      "name": "Alpha Strategy"
                    }
                  ],
                  "token_address": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "address": "0x1234567890abcdef",
                  "created_at": 1517171717,
                  "description": "My description",
                  "kind": "user",
                  "last_updated_at": 1617171717,
                  "lockup_period": 1,
                  "max_tvl": 1000000,
                  "name": "MyVault",
                  "operator_account": "0x1234567890abcdef",
                  "owner_account": "0x0234567890abcdef",
                  "profit_share": 10,
                  "status": "INITIALIZING",
                  "strategies": [
                    {
                      "address": "0x29464b79b02543ed8746bba6e71c8a15401dd27b7279a5fa2f2fe8e8cdfabb",
                      "name": "Alpha Strategy"
                    }
                  ],
                  "token_address": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Get current user summary metrics for all vaults or for the single vault\nspecified by address. User metrics are only returned if the current user\nis a depositor for the vault.\n",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "getAccountSummary",
          "originalEndpointId": "Vaults.getAccountSummary",
          "name": "Get vault account summary",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/vaults/account-summary"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Vault Address",
              "key": "address",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Vaults_getAccountSummary_Response_200"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/vaults/account-summary",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "address": "0x1234567890abcdef",
                      "created_at": 1717171717,
                      "deposited_amount": "123.45",
                      "total_pnl": "149.12",
                      "total_roi": "0.724",
                      "vtoken_amount": "123.45"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "address": "0x1234567890abcdef",
                      "created_at": 1717171717,
                      "deposited_amount": "123.45",
                      "total_pnl": "149.12",
                      "total_roi": "0.724",
                      "vtoken_amount": "123.45"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Get spot balance of a vault\n",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "getBalance",
          "originalEndpointId": "Vaults.getBalance",
          "name": "Get vault balances",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/vaults/balance"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Vault Address",
              "key": "address",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "description": "Vault Strategy Address",
              "key": "strategy",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Vaults_getBalance_Response_200"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/vaults/balance",
              "pathParameters": {},
              "queryParameters": {
                "address": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "last_updated_at": 1681462770114,
                      "size": "123003.620",
                      "token": "USDC"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "last_updated_at": 1681462770114,
                      "size": "123003.620",
                      "token": "USDC"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Get vaults global configuration.\n",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "getConfig",
          "originalEndpointId": "Vaults.getConfig",
          "name": "Get vaults config",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/vaults/config"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "responses.VaultsConfigResponse"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/vaults/config",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "max_lockup_period_days": "4",
                  "max_profit_share_percentage": "50",
                  "min_initial_deposit": "1000",
                  "min_lockup_period_days": "1",
                  "min_owner_share_percentage": "5",
                  "vault_factory_address": "0x1234567890abcdef"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "max_lockup_period_days": "4",
                  "max_profit_share_percentage": "50",
                  "min_initial_deposit": "1000",
                  "min_lockup_period_days": "1",
                  "min_owner_share_percentage": "5",
                  "vault_factory_address": "0x1234567890abcdef"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Get PnL and Account value historical timeseries for the given vault.\n",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "getHistoricalData",
          "originalEndpointId": "Vaults.getHistoricalData",
          "name": "Get vault historical data",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/vaults/history"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Vault Address",
              "key": "address",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "description": "Vault Strategy Address",
              "key": "strategy",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Type of data",
              "key": "type",
              "type": {
                "type": "id",
                "value": "VaultsHistoryGetParametersSchema"
              }
            },
            {
              "description": "Resolution of data",
              "key": "resolution",
              "type": {
                "type": "id",
                "value": "VaultsHistoryGetParametersSchema"
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Vaults_getHistoricalData_Response_200"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/vaults/history",
              "pathParameters": {},
              "queryParameters": {
                "address": "foo",
                "type": "pnl",
                "resolution": "alltime"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "address": "0x1234567890abcdef",
                      "data": [
                        42
                      ],
                      "timestamps": [
                        42
                      ]
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "address": "0x1234567890abcdef",
                      "data": [
                        42
                      ],
                      "timestamps": [
                        42
                      ]
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Get positions opened by the given vault.\n",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "getPositions",
          "originalEndpointId": "Vaults.getPositions",
          "name": "Get vault positions",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/vaults/positions"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Vault Address",
              "key": "address",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "description": "Vault Strategy Address",
              "key": "strategy",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Vaults_getPositions_Response_200"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/vaults/positions",
              "pathParameters": {},
              "queryParameters": {
                "address": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "account": "foo",
                      "average_entry_price": "29001.34",
                      "average_entry_price_usd": "29001.34",
                      "average_exit_price": "29001.34",
                      "cached_funding_index": "1234.3",
                      "closed_at": 1681493939981,
                      "cost": "-10005.4623",
                      "cost_usd": "-10005.4623",
                      "created_at": 1681493939981,
                      "id": "1234234",
                      "last_fill_id": "1234234",
                      "last_updated_at": 1681493939981,
                      "leverage": "foo",
                      "liquidation_price": "foo",
                      "market": "BTC-USD-PERP",
                      "realized_positional_funding_pnl": "12.234",
                      "realized_positional_pnl": "-123.23",
                      "seq_no": 1681471234972000000,
                      "side": "SHORT",
                      "size": "-0.345",
                      "status": "OPEN",
                      "unrealized_funding_pnl": "12.234",
                      "unrealized_pnl": "-123.23"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "account": "foo",
                      "average_entry_price": "29001.34",
                      "average_entry_price_usd": "29001.34",
                      "average_exit_price": "29001.34",
                      "cached_funding_index": "1234.3",
                      "closed_at": 1681493939981,
                      "cost": "-10005.4623",
                      "cost_usd": "-10005.4623",
                      "created_at": 1681493939981,
                      "id": "1234234",
                      "last_fill_id": "1234234",
                      "last_updated_at": 1681493939981,
                      "leverage": "foo",
                      "liquidation_price": "foo",
                      "market": "BTC-USD-PERP",
                      "realized_positional_funding_pnl": "12.234",
                      "realized_positional_pnl": "-123.23",
                      "seq_no": 1681471234972000000,
                      "side": "SHORT",
                      "size": "-0.345",
                      "status": "OPEN",
                      "unrealized_funding_pnl": "12.234",
                      "unrealized_pnl": "-123.23"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Get vaults summary metrics for all vaults or for the single vault specified by address.\n",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "getSummary",
          "originalEndpointId": "Vaults.getSummary",
          "name": "Get vault summary",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/vaults/summary"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Vault Address",
              "key": "address",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Vaults_getSummary_Response_200"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/vaults/summary",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "address": "0x1234567890abcdef",
                      "last_month_return": "0.023",
                      "max_drawdown": "0.1916",
                      "max_drawdown_24h": "0.0138",
                      "max_drawdown_30d": "0.1821",
                      "max_drawdown_7d": "0.1124",
                      "net_deposits": "1000000",
                      "num_depositors": 100,
                      "owner_equity": "0.145",
                      "pnl_24h": "13.41",
                      "pnl_30d": "114.19",
                      "pnl_7d": "91.31",
                      "roi_24h": "0.034",
                      "roi_30d": "0.003",
                      "roi_7d": "0.123",
                      "total_pnl": "149.12",
                      "total_roi": "0.724",
                      "tvl": "1000000",
                      "volume": "12345678.16",
                      "volume_24h": "45678.16",
                      "volume_30d": "2345678.16",
                      "volume_7d": "345678.16",
                      "vtoken_price": "1.23",
                      "vtoken_supply": "1000000"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "address": "0x1234567890abcdef",
                      "last_month_return": "0.023",
                      "max_drawdown": "0.1916",
                      "max_drawdown_24h": "0.0138",
                      "max_drawdown_30d": "0.1821",
                      "max_drawdown_7d": "0.1124",
                      "net_deposits": "1000000",
                      "num_depositors": 100,
                      "owner_equity": "0.145",
                      "pnl_24h": "13.41",
                      "pnl_30d": "114.19",
                      "pnl_7d": "91.31",
                      "roi_24h": "0.034",
                      "roi_30d": "0.003",
                      "roi_7d": "0.123",
                      "total_pnl": "149.12",
                      "total_roi": "0.724",
                      "tvl": "1000000",
                      "volume": "12345678.16",
                      "volume_24h": "45678.16",
                      "volume_30d": "2345678.16",
                      "volume_7d": "345678.16",
                      "vtoken_price": "1.23",
                      "vtoken_supply": "1000000"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": false,
          "description": "Get deposits and withdrawals related to the given vault.\n",
          "method": "GET",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "https://api.prod.paradex.trade/v1"
            }
          ],
          "id": "getTransfers",
          "originalEndpointId": "Vaults.getTransfers",
          "name": "Get vault transfers",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/vaults/transfers"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Vault Address",
              "key": "address",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Vaults_getTransfers_Response_200"
              }
            },
            "statusCode": 200,
            "description": "OK"
          },
          "errorsV2": [],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/vaults/transfers",
              "pathParameters": {},
              "queryParameters": {
                "address": "foo"
              },
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "account": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d9454fa",
                      "amount": "100",
                      "auto_withdrawal_fee": "4.5",
                      "bridge": "",
                      "counterparty": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d9454fa",
                      "created_at": 1681497002041,
                      "direction": "IN",
                      "external_account": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d9454fa",
                      "external_chain": "ETHEREUM",
                      "external_txn_hash": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d9454fa",
                      "failure_reason": "Gas fee too low",
                      "id": "123456789",
                      "kind": "DEPOSIT",
                      "last_updated_at": 1681497002041,
                      "socialized_loss_factor": "0",
                      "status": "PENDING",
                      "token": "USDC",
                      "txn_hash": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d9454fa",
                      "vault_address": "0x7a3b1c8f9e2d4e6f8a0c2b4d6e8f0a2c4b6e8d0a",
                      "vault_unwind_completion_percentage": "0.35"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "results": [
                    {
                      "account": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d9454fa",
                      "amount": "100",
                      "auto_withdrawal_fee": "4.5",
                      "bridge": "",
                      "counterparty": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d9454fa",
                      "created_at": 1681497002041,
                      "direction": "IN",
                      "external_account": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d9454fa",
                      "external_chain": "ETHEREUM",
                      "external_txn_hash": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d9454fa",
                      "failure_reason": "Gas fee too low",
                      "id": "123456789",
                      "kind": "DEPOSIT",
                      "last_updated_at": 1681497002041,
                      "socialized_loss_factor": "0",
                      "status": "PENDING",
                      "token": "USDC",
                      "txn_hash": "0x495d2eb5236a12b8b4ad7d3849ce6a203ce21c43f473c248dfd5ce70d9454fa",
                      "vault_address": "0x7a3b1c8f9e2d4e6f8a0c2b4d6e8f0a2c4b6e8d0a",
                      "vault_unwind_completion_percentage": "0.35"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_balanceEvents": {
      "subpackageId": "subpackage_balanceEvents",
      "name": "balanceEvents",
      "endpoints": [],
      "webhooks": [],
      "websockets": [
        {
          "auth": false,
          "description": "Private websocket channel to receive PnL calculation data",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "wss://ws.api.prod.paradex.trade/v1?"
            }
          ],
          "id": "balanceEvents",
          "name": "SUB balance_events",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "headers": [],
          "queryParameters": [],
          "messages": [
            {
              "type": "subscribe",
              "displayName": "subscribe",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "BalanceEventsSubscribe"
                }
              }
            },
            {
              "type": "publish",
              "displayName": "publish",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "BalanceEventsPublish"
                }
              }
            }
          ],
          "examples": [
            {
              "path": "",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "messages": [
                {
                  "type": "publish",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscribe",
                    "params": {
                      "channel": "balance_events"
                    },
                    "id": 1
                  }
                },
                {
                  "type": "subscribe",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscription",
                    "params": {
                      "channel": "balance_events",
                      "data": {
                        "created_at": 1,
                        "fees": "fees",
                        "fill_id": "fill_id",
                        "funding_index": "funding_index",
                        "market": "market",
                        "realized_funding": "realized_funding",
                        "realized_pnl": "realized_pnl",
                        "settlement_asset_balance_after": "settlement_asset_balance_after",
                        "settlement_asset_balance_before": "settlement_asset_balance_before",
                        "settlement_asset_price": "settlement_asset_price",
                        "status": "status",
                        "type": "type"
                      }
                    }
                  }
                }
              ]
            }
          ]
        }
      ],
      "types": [],
      "subpackages": []
    },
    "subpackage_bbo": {
      "subpackageId": "subpackage_bbo",
      "name": "bbo",
      "endpoints": [],
      "webhooks": [],
      "websockets": [
        {
          "auth": false,
          "description": "Public websocket channel for tick updates of orderbook best bid/ask prices and amounts",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "wss://ws.api.prod.paradex.trade/v1?"
            }
          ],
          "id": "bbo",
          "name": "SUB bbo",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "headers": [],
          "queryParameters": [
            {
              "description": "Either the symbol of the market (any open market returned by GET /markets) or 'ALL' to subscribe for updates to all markets",
              "key": "market_symbol",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-Z0-9]+-[A-Z0-9]+$"
                }
              }
            }
          ],
          "messages": [
            {
              "type": "subscribe",
              "displayName": "subscribe",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "BboSubscribe"
                }
              }
            },
            {
              "type": "publish",
              "displayName": "publish",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "BboPublish"
                }
              }
            }
          ],
          "examples": [
            {
              "path": "",
              "pathParameters": {},
              "queryParameters": {
                "market_symbol": "market_symbol"
              },
              "headers": {},
              "messages": [
                {
                  "type": "publish",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscribe",
                    "params": {
                      "channel": "channel"
                    },
                    "id": 1
                  }
                },
                {
                  "type": "subscribe",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscription",
                    "params": {
                      "channel": "channel",
                      "data": {
                        "ask": "ask",
                        "ask_size": "ask_size",
                        "bid": "bid",
                        "bid_size": "bid_size",
                        "last_updated_at": 1,
                        "market": "market",
                        "seq_no": 1
                      }
                    }
                  }
                }
              ]
            }
          ]
        }
      ],
      "types": [],
      "subpackages": []
    },
    "subpackage_fills": {
      "subpackageId": "subpackage_fills",
      "name": "fills",
      "endpoints": [],
      "webhooks": [],
      "websockets": [
        {
          "auth": false,
          "description": "Private websocket channel to receive details of fills for specific account",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "wss://ws.api.prod.paradex.trade/v1?"
            }
          ],
          "id": "fills",
          "name": "SUB fills",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "headers": [],
          "queryParameters": [
            {
              "description": "Either the symbol of the market (any open market returned by GET /markets) or 'ALL' to subscribe for updates to all markets",
              "key": "market_symbol",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([A-Z0-9]+-[A-Z0-9]+|ALL)$"
                }
              }
            }
          ],
          "messages": [
            {
              "type": "subscribe",
              "displayName": "subscribe",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "FillsSubscribe"
                }
              }
            },
            {
              "type": "publish",
              "displayName": "publish",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "FillsPublish"
                }
              }
            }
          ],
          "examples": [
            {
              "path": "",
              "pathParameters": {},
              "queryParameters": {
                "market_symbol": "market_symbol"
              },
              "headers": {},
              "messages": [
                {
                  "type": "publish",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscribe",
                    "params": {
                      "channel": "channel"
                    },
                    "id": 1
                  }
                },
                {
                  "type": "subscribe",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscription",
                    "params": {
                      "channel": "channel",
                      "data": {
                        "client_id": "client_id",
                        "created_at": 1,
                        "fee": "fee",
                        "fee_currency": "fee_currency",
                        "fill_type": "fill_type",
                        "id": "id",
                        "liquidity": "TAKER",
                        "market": "market",
                        "order_id": "order_id",
                        "price": "price",
                        "realized_funding": "realized_funding",
                        "realized_pnl": "realized_pnl",
                        "remaining_size": "remaining_size",
                        "side": "BUY",
                        "size": "size"
                      }
                    }
                  }
                }
              ]
            }
          ]
        }
      ],
      "types": [],
      "subpackages": []
    },
    "subpackage_fundingData": {
      "subpackageId": "subpackage_fundingData",
      "name": "fundingData",
      "endpoints": [],
      "webhooks": [],
      "websockets": [
        {
          "auth": false,
          "description": "Public websocket channel to receive funding data updates",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "wss://ws.api.prod.paradex.trade/v1?"
            }
          ],
          "id": "fundingData",
          "name": "SUB funding_data",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "headers": [],
          "queryParameters": [
            {
              "description": "Either the symbol of the market (any open market returned by GET /markets) or 'ALL' to subscribe for updates to all markets",
              "key": "market_symbol",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([A-Z0-9]+-[A-Z0-9]+|ALL)$"
                }
              }
            }
          ],
          "messages": [
            {
              "type": "subscribe",
              "displayName": "subscribe",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "FundingDataSubscribe"
                }
              }
            },
            {
              "type": "publish",
              "displayName": "publish",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "FundingDataPublish"
                }
              }
            }
          ],
          "examples": [
            {
              "path": "",
              "pathParameters": {},
              "queryParameters": {
                "market_symbol": "market_symbol"
              },
              "headers": {},
              "messages": [
                {
                  "type": "publish",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscribe",
                    "params": {
                      "channel": "channel"
                    },
                    "id": 1
                  }
                },
                {
                  "type": "subscribe",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscription",
                    "params": {
                      "channel": "channel",
                      "data": {
                        "created_at": 1,
                        "funding_index": "funding_index",
                        "funding_premium": "funding_premium",
                        "funding_rate": "funding_rate",
                        "market": "market"
                      }
                    }
                  }
                }
              ]
            }
          ]
        }
      ],
      "types": [],
      "subpackages": []
    },
    "subpackage_fundingPayments": {
      "subpackageId": "subpackage_fundingPayments",
      "name": "fundingPayments",
      "endpoints": [],
      "webhooks": [],
      "websockets": [
        {
          "auth": false,
          "description": "Private websocket channel to receive funding payments of an account",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "wss://ws.api.prod.paradex.trade/v1?"
            }
          ],
          "id": "fundingPayments",
          "name": "SUB funding_payments",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "headers": [],
          "queryParameters": [
            {
              "description": "Either the symbol of the market (any open market returned by GET /markets) or 'ALL' to subscribe for updates to all markets",
              "key": "market_symbol",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([A-Z0-9]+-[A-Z0-9]+|ALL)$"
                }
              }
            }
          ],
          "messages": [
            {
              "type": "subscribe",
              "displayName": "subscribe",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "FundingPaymentsSubscribe"
                }
              }
            },
            {
              "type": "publish",
              "displayName": "publish",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "FundingPaymentsPublish"
                }
              }
            }
          ],
          "examples": [
            {
              "path": "",
              "pathParameters": {},
              "queryParameters": {
                "market_symbol": "market_symbol"
              },
              "headers": {},
              "messages": [
                {
                  "type": "publish",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscribe",
                    "params": {
                      "channel": "channel"
                    },
                    "id": 1
                  }
                },
                {
                  "type": "subscribe",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscription",
                    "params": {
                      "channel": "channel",
                      "data": {
                        "created_at": 1,
                        "fill_id": "fill_id",
                        "id": "id",
                        "index": "index",
                        "market": "market",
                        "payment": "payment"
                      }
                    }
                  }
                }
              ]
            }
          ]
        }
      ],
      "types": [],
      "subpackages": []
    },
    "subpackage_fundingRateComparison": {
      "subpackageId": "subpackage_fundingRateComparison",
      "name": "fundingRateComparison",
      "endpoints": [],
      "webhooks": [],
      "websockets": [
        {
          "auth": false,
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "wss://ws.api.prod.paradex.trade/v1?"
            }
          ],
          "id": "fundingRateComparison",
          "name": "/funding_rate_comparison",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": "/funding_rate_comparison"
              }
            ]
          },
          "headers": [],
          "queryParameters": [
            {
              "key": "refresh_rate",
              "type": {
                "type": "id",
                "value": "refresh_rate"
              }
            }
          ],
          "messages": [
            {
              "type": "subscribe",
              "displayName": "subscribe",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "FundingRateComparisonSubscribe"
                }
              }
            },
            {
              "type": "publish",
              "displayName": "publish",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "FundingRateComparisonPublish"
                }
              }
            }
          ],
          "examples": [
            {
              "path": "/funding_rate_comparison",
              "pathParameters": {},
              "queryParameters": {
                "refresh_rate": "50ms"
              },
              "headers": {},
              "messages": [
                {
                  "type": "publish",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscribe",
                    "params": {
                      "channel": "channel"
                    },
                    "id": 1
                  }
                },
                {
                  "type": "subscribe",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscription",
                    "params": {
                      "channel": "channel",
                      "data": {
                        "asset_kind": "asset_kind",
                        "hourly_funding_rate": "hourly_funding_rate",
                        "last_updated_at": 1,
                        "source": "source",
                        "symbol": "symbol"
                      }
                    }
                  }
                }
              ]
            }
          ]
        }
      ],
      "types": [],
      "subpackages": []
    },
    "subpackage_marketsSummary": {
      "subpackageId": "subpackage_marketsSummary",
      "name": "marketsSummary",
      "endpoints": [],
      "webhooks": [],
      "websockets": [
        {
          "auth": false,
          "description": "Public websocket channel for updates of available markets",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "wss://ws.api.prod.paradex.trade/v1?"
            }
          ],
          "id": "marketsSummary",
          "name": "SUB markets_summary",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "headers": [],
          "queryParameters": [],
          "messages": [
            {
              "type": "subscribe",
              "displayName": "subscribe",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "MarketsSummarySubscribe"
                }
              }
            },
            {
              "type": "publish",
              "displayName": "publish",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "MarketsSummaryPublish"
                }
              }
            }
          ],
          "examples": [
            {
              "path": "",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "messages": [
                {
                  "type": "publish",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscribe",
                    "params": {
                      "channel": "markets_summary"
                    },
                    "id": 1
                  }
                },
                {
                  "type": "subscribe",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscription",
                    "params": {
                      "channel": "markets_summary",
                      "data": {
                        "ask": "ask",
                        "bid": "bid",
                        "created_at": 1,
                        "funding_rate": "funding_rate",
                        "last_traded_price": "last_traded_price",
                        "mark_price": "mark_price",
                        "open_interest": "open_interest",
                        "price_change_rate_24h": "price_change_rate_24h",
                        "symbol": "symbol",
                        "total_volume": "total_volume",
                        "underlying_price": "underlying_price",
                        "volume_24h": "volume_24h"
                      }
                    }
                  }
                }
              ]
            }
          ]
        }
      ],
      "types": [],
      "subpackages": []
    },
    "subpackage_orderBook": {
      "subpackageId": "subpackage_orderBook",
      "name": "orderBook",
      "endpoints": [],
      "webhooks": [],
      "websockets": [
        {
          "auth": false,
          "description": "Public websocket channel for orderbook snapshot updates of depth 15 at most every 50ms or 100ms, optionally grouped by price tick",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "wss://ws.api.prod.paradex.trade/v1?"
            }
          ],
          "id": "orderBook",
          "name": "SUB order_book",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "headers": [],
          "queryParameters": [
            {
              "description": "Either the symbol of the market (any open market returned by GET /markets) or 'ALL' to subscribe for updates to all markets",
              "key": "market_symbol",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-Z0-9]+-[A-Z0-9]+$"
                }
              }
            },
            {
              "description": "Optional price tick parameter for grouping order book prices, valid values are below.",
              "key": "price_tick",
              "type": {
                "type": "id",
                "value": "price_tick"
              }
            },
            {
              "description": "Rate of sending updates",
              "key": "refresh_rate",
              "type": {
                "type": "id",
                "value": "refresh_rate"
              }
            }
          ],
          "messages": [
            {
              "type": "subscribe",
              "displayName": "subscribe",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "OrderBookSubscribe"
                }
              }
            },
            {
              "type": "publish",
              "displayName": "publish",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "OrderBookPublish"
                }
              }
            }
          ],
          "examples": [
            {
              "path": "",
              "pathParameters": {},
              "queryParameters": {
                "market_symbol": "market_symbol",
                "price_tick": "0_0000001",
                "refresh_rate": "50ms"
              },
              "headers": {},
              "messages": [
                {
                  "type": "publish",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscribe",
                    "params": {
                      "channel": "channel"
                    },
                    "id": 1
                  }
                },
                {
                  "type": "subscribe",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscription",
                    "params": {
                      "channel": "channel",
                      "data": {
                        "deletes": [
                          {
                            "price": "price",
                            "side": "BUY",
                            "size": "size"
                          },
                          {
                            "price": "price",
                            "side": "BUY",
                            "size": "size"
                          }
                        ],
                        "inserts": [
                          {
                            "price": "price",
                            "side": "BUY",
                            "size": "size"
                          },
                          {
                            "price": "price",
                            "side": "BUY",
                            "size": "size"
                          }
                        ],
                        "last_updated_at": 1,
                        "market": "market",
                        "seq_no": 1,
                        "update_type": "s",
                        "updates": [
                          {
                            "price": "price",
                            "side": "BUY",
                            "size": "size"
                          },
                          {
                            "price": "price",
                            "side": "BUY",
                            "size": "size"
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          ]
        }
      ],
      "types": [],
      "subpackages": []
    },
    "subpackage_positions": {
      "subpackageId": "subpackage_positions",
      "name": "positions",
      "endpoints": [],
      "webhooks": [],
      "websockets": [
        {
          "auth": false,
          "description": "Private websocket channel to receive updates when position is changed",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "wss://ws.api.prod.paradex.trade/v1?"
            }
          ],
          "id": "positions",
          "name": "SUB positions",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "headers": [],
          "queryParameters": [],
          "messages": [
            {
              "type": "subscribe",
              "displayName": "subscribe",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "PositionsSubscribe"
                }
              }
            },
            {
              "type": "publish",
              "displayName": "publish",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "PositionsPublish"
                }
              }
            }
          ],
          "examples": [
            {
              "path": "",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "messages": [
                {
                  "type": "publish",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscribe",
                    "params": {
                      "channel": "positions"
                    },
                    "id": 1
                  }
                },
                {
                  "type": "subscribe",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscription",
                    "params": {
                      "channel": "positions",
                      "data": {
                        "average_entry_price": "average_entry_price",
                        "average_entry_price_usd": "average_entry_price_usd",
                        "average_exit_price": "average_exit_price",
                        "cached_funding_index": "cached_funding_index",
                        "cost": "cost",
                        "cost_usd": "cost_usd",
                        "id": "id",
                        "last_fill_id": "last_fill_id",
                        "leverage": "leverage",
                        "liquidation_price": "liquidation_price",
                        "market": "market",
                        "realized_positional_funding_pnl": "realized_positional_funding_pnl",
                        "realized_positional_pnl": "realized_positional_pnl",
                        "seq_no": 1,
                        "side": "side",
                        "size": "size",
                        "status": "status",
                        "unrealized_funding_pnl": "unrealized_funding_pnl",
                        "unrealized_pnl": "unrealized_pnl"
                      }
                    }
                  }
                }
              ]
            }
          ]
        }
      ],
      "types": [],
      "subpackages": []
    },
    "subpackage_tradebusts": {
      "subpackageId": "subpackage_tradebusts",
      "name": "tradebusts",
      "endpoints": [],
      "webhooks": [],
      "websockets": [
        {
          "auth": false,
          "description": "Private websocket channel to receive fills that are busted by a blockchain",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "wss://ws.api.prod.paradex.trade/v1?"
            }
          ],
          "id": "tradebusts",
          "name": "SUB tradebusts",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "headers": [],
          "queryParameters": [],
          "messages": [
            {
              "type": "subscribe",
              "displayName": "subscribe",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "TradebustsSubscribe"
                }
              }
            },
            {
              "type": "publish",
              "displayName": "publish",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "TradebustsPublish"
                }
              }
            }
          ],
          "examples": [
            {
              "path": "",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "messages": [
                {
                  "type": "publish",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscribe",
                    "params": {
                      "channel": "tradebusts"
                    },
                    "id": 1
                  }
                },
                {
                  "type": "subscribe",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscription",
                    "params": {
                      "channel": "tradebusts",
                      "data": {
                        "account": "account",
                        "busted_fill_id": "busted_fill_id",
                        "created_at": 1
                      }
                    }
                  }
                }
              ]
            }
          ]
        }
      ],
      "types": [],
      "subpackages": []
    },
    "subpackage_trades": {
      "subpackageId": "subpackage_trades",
      "name": "trades",
      "endpoints": [],
      "webhooks": [],
      "websockets": [
        {
          "auth": false,
          "description": "Public websocket channel to receive updates on trades in particular market",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "wss://ws.api.prod.paradex.trade/v1?"
            }
          ],
          "id": "trades",
          "name": "SUB trades",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "headers": [],
          "queryParameters": [
            {
              "description": "Either the symbol of the market (any open market returned by GET /markets) or 'ALL' to subscribe for updates to all markets",
              "key": "market_symbol",
              "type": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^([A-Z0-9]+-[A-Z0-9]+|ALL)$"
                }
              }
            }
          ],
          "messages": [
            {
              "type": "subscribe",
              "displayName": "subscribe",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "TradesSubscribe"
                }
              }
            },
            {
              "type": "publish",
              "displayName": "publish",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "TradesPublish"
                }
              }
            }
          ],
          "examples": [
            {
              "path": "",
              "pathParameters": {},
              "queryParameters": {
                "market_symbol": "market_symbol"
              },
              "headers": {},
              "messages": [
                {
                  "type": "publish",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscribe",
                    "params": {
                      "channel": "channel"
                    },
                    "id": 1
                  }
                },
                {
                  "type": "subscribe",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscription",
                    "params": {
                      "channel": "channel",
                      "data": {
                        "created_at": 1,
                        "id": "id",
                        "market": "market",
                        "price": "price",
                        "side": "BUY",
                        "size": "size",
                        "trade_type": "trade_type"
                      }
                    }
                  }
                }
              ]
            }
          ]
        }
      ],
      "types": [],
      "subpackages": []
    },
    "subpackage_transaction": {
      "subpackageId": "subpackage_transaction",
      "name": "transaction",
      "endpoints": [],
      "webhooks": [],
      "websockets": [
        {
          "auth": false,
          "description": "Private websocket channel for receiving transaction details of fills",
          "defaultEnvironment": "https://api.prod.paradex.trade/v1",
          "environments": [
            {
              "id": "https://api.prod.paradex.trade/v1",
              "baseUrl": "wss://ws.api.prod.paradex.trade/v1?"
            }
          ],
          "id": "transaction",
          "name": "SUB transaction",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "headers": [],
          "queryParameters": [],
          "messages": [
            {
              "type": "subscribe",
              "displayName": "subscribe",
              "origin": "server",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "TransactionSubscribe"
                }
              }
            },
            {
              "type": "publish",
              "displayName": "publish",
              "origin": "client",
              "body": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "TransactionPublish"
                }
              }
            }
          ],
          "examples": [
            {
              "path": "",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "messages": [
                {
                  "type": "publish",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscribe",
                    "params": {
                      "channel": "transaction"
                    },
                    "id": 1
                  }
                },
                {
                  "type": "subscribe",
                  "body": {
                    "jsonrpc": "2.0",
                    "method": "subscription",
                    "params": {
                      "channel": "transaction",
                      "data": {
                        "completed_at": 1,
                        "created_at": 1,
                        "hash": "hash",
                        "id": "id",
                        "state": "state",
                        "type": "type"
                      }
                    }
                  }
                }
              ]
            }
          ]
        }
      ],
      "types": [],
      "subpackages": []
    }
  },
  "rootPackage": {
    "endpoints": [
      {
        "auth": false,
        "description": "Returns a paginated list of trades that have occurred on the exchange.\nDefault page size is 100, maxium is 5000.\n\nThe `side` field in the response indicates the taker side of the trade.\n\n### Example\n\n```http\nGET /trades?market=BTC-USD-PERP&page_size=100\n```\n\nThis endpoint supports cursor-based pagination for efficiently traversing large\nresult sets.\n",
        "method": "GET",
        "defaultEnvironment": "https://api.prod.paradex.trade/v1",
        "environments": [
          {
            "id": "https://api.prod.paradex.trade/v1",
            "baseUrl": "https://api.prod.paradex.trade/v1"
          }
        ],
        "id": "Trades",
        "originalEndpointId": "Trades",
        "name": "Trade tape",
        "path": {
          "pathParameters": [],
          "parts": [
            {
              "type": "literal",
              "value": ""
            },
            {
              "type": "literal",
              "value": "/trades"
            }
          ]
        },
        "queryParameters": [
          {
            "description": "Returns the ‘next’ paginated page.",
            "key": "cursor",
            "type": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "End Time (unix time millisecond)",
            "key": "end_at",
            "type": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          },
          {
            "description": "Market name",
            "key": "market",
            "type": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Limit the number of responses in the page",
            "key": "page_size",
            "type": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 5000,
                  "default": 100
                }
              }
            }
          },
          {
            "description": "Start Time (unix time millisecond)",
            "key": "start_at",
            "type": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            }
          }
        ],
        "headers": [],
        "response": {
          "type": {
            "type": "reference",
            "value": {
              "type": "id",
              "value": "Trades_Response_200"
            }
          },
          "statusCode": 200,
          "description": "OK"
        },
        "errorsV2": [],
        "examples": [
          {
            "name": "",
            "description": "",
            "path": "/trades",
            "pathParameters": {},
            "queryParameters": {
              "market": "BTC-USD-PERP"
            },
            "headers": {},
            "responseStatusCode": 200,
            "responseBody": {
              "type": "json",
              "value": {
                "next": "eyJmaWx0ZXIiMsIm1hcmtlciI6eyJtYXJrZXIiOiIxNjc1NjUwMDE3NDMxMTAxNjk5N=",
                "prev": "eyJmaWx0ZXIiOnsiTGltaXQiOjkwfSwidGltZSI6MTY4MTY3OTgzNzk3MTMwOTk1MywibWFya2VyIjp7Im1zMjExMD==",
                "results": [
                  {
                    "created_at": 1681497002041,
                    "id": "12345643",
                    "market": "BTC-USD-PERP",
                    "price": "30001.2",
                    "side": "BUY",
                    "size": "0.01",
                    "trade_type": "LIQUIDATION"
                  }
                ]
              }
            },
            "responseBodyV3": {
              "type": "json",
              "value": {
                "next": "eyJmaWx0ZXIiMsIm1hcmtlciI6eyJtYXJrZXIiOiIxNjc1NjUwMDE3NDMxMTAxNjk5N=",
                "prev": "eyJmaWx0ZXIiOnsiTGltaXQiOjkwfSwidGltZSI6MTY4MTY3OTgzNzk3MTMwOTk1MywibWFya2VyIjp7Im1zMjExMD==",
                "results": [
                  {
                    "created_at": 1681497002041,
                    "id": "12345643",
                    "market": "BTC-USD-PERP",
                    "price": "30001.2",
                    "side": "BUY",
                    "size": "0.01",
                    "trade_type": "LIQUIDATION"
                  }
                ]
              }
            }
          }
        ],
        "protocol": {
          "type": "rest"
        }
      }
    ],
    "webhooks": [],
    "websockets": [],
    "types": [
      "requests.AccountMarginRequest",
      "requests.AlgoOrderRequest",
      "requests.CancelOrderBatchRequest",
      "requests.CreateVault",
      "requests.ModifyOrderRequest",
      "requests.Onboarding",
      "requests.OrderRequest",
      "requests.PriceKind",
      "requests.UpdateAccountMaxSlippageRequest",
      "requests.UpdateTradingValueDisplayRequest",
      "responses.APIResults",
      "responses.AccountHistoricalDataResp",
      "responses.AccountInfoResponse",
      "responses.AccountKind",
      "responses.AccountMarginEntry",
      "responses.AccountProfileResp",
      "responses.AccountSettingsResp",
      "responses.AccountSummaryResponse",
      "responses.AlgoOrderResp",
      "responses.AlgoType",
      "responses.ApiError",
      "responses.AskBidArray",
      "responses.AuthResp",
      "responses.BBOResp",
      "responses.BalanceResp",
      "responses.BatchResponse",
      "responses.BridgedToken",
      "responses.CancelOrderBatchResponse",
      "responses.CancelOrderResult",
      "responses.Delta1CrossMarginParams",
      "responses.DiscordProfile",
      "responses.ErrorCode",
      "responses.ErrorResponse",
      "responses.Fees",
      "responses.FillResult",
      "responses.FillType",
      "responses.FundingDataResult",
      "responses.FundingPayment",
      "responses.GetAccountMarginConfigsResp",
      "responses.GetAccountsInfoResponse",
      "responses.GetSubAccountsResponse",
      "responses.Greeks",
      "responses.InsuranceAccountResp",
      "responses.LiquidationResp",
      "responses.MarketChainDetails",
      "responses.MarketKind",
      "responses.MarketResp",
      "responses.MarketSummaryResp",
      "responses.Nft",
      "responses.OrderFlag",
      "responses.OrderInstruction",
      "responses.OrderResp",
      "responses.OrderSide",
      "responses.OrderStatus",
      "responses.OrderType",
      "responses.PaginatedAPIResults",
      "responses.PerpetualOptionCrossMarginParams",
      "responses.PerpetualOptionMarginParams",
      "responses.PositionResp",
      "responses.ProgramsEligibility",
      "responses.ReferralConfigResp",
      "responses.ReferralsResp",
      "responses.RequestInfo",
      "responses.STPMode",
      "responses.Strategy",
      "responses.SystemConfigResponse",
      "responses.SystemStateResponse",
      "responses.SystemStatus",
      "responses.SystemTimeResponse",
      "responses.TradeResult",
      "responses.TradebustResult",
      "responses.TraderRole",
      "responses.TransactionResponse",
      "responses.TransferBridge",
      "responses.TransferDirection",
      "responses.TransferKind",
      "responses.TransferResult",
      "responses.TransferStatus",
      "responses.TwitterProfile",
      "responses.UpdateAccountMarginConfigResp",
      "responses.VaultAccountSummaryResp",
      "responses.VaultHistoricalDataResp",
      "responses.VaultKind",
      "responses.VaultResp",
      "responses.VaultStatus",
      "responses.VaultSummaryResp",
      "responses.VaultsConfigResponse",
      "ResponsesAccountSummaryResponse",
      "ResponsesBBOResp",
      "ResponsesBalanceEventResponse",
      "ResponsesFillResult",
      "ResponsesFundingDataResult",
      "ResponsesFundingResp",
      "ResponsesFundingRateComparisonResp",
      "ResponsesMarketSummaryResp",
      "ResponsesOrderResp",
      "ResponsesPositionResp",
      "ResponsesPriceBookUpdate",
      "ResponsesTradeResult",
      "ResponsesTradebustResult",
      "ResponsesTransactionResponse",
      "ResponsesTransferResult"
    ],
    "subpackages": [
      "subpackage_account",
      "subpackage_algos",
      "subpackage_authentication",
      "subpackage_markets",
      "subpackage_insurance",
      "subpackage_liquidations",
      "subpackage_orders",
      "subpackage_referrals",
      "subpackage_system",
      "subpackage_transfers",
      "subpackage_vaults",
      "subpackage_account",
      "subpackage_balanceEvents",
      "subpackage_bbo",
      "subpackage_fills",
      "subpackage_fundingData",
      "subpackage_fundingPayments",
      "subpackage_fundingRateComparison",
      "subpackage_marketsSummary",
      "subpackage_orderBook",
      "subpackage_orders",
      "subpackage_positions",
      "subpackage_tradebusts",
      "subpackage_trades",
      "subpackage_transaction",
      "subpackage_transfers"
    ]
  },
  "auth": {
    "type": "header",
    "headerWireValue": "Authorization",
    "nameOverride": "Authorization"
  },
  "snippetsConfiguration": {},
  "globalHeaders": []
}