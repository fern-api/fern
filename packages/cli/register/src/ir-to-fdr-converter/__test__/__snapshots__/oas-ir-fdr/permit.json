{
  "types": {
    "ActionBlockEditableAttributes": {
      "name": "ActionBlockEditableAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ActionBlockEditable": {
      "name": "ActionBlockEditable",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "a more descriptive name for the action",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "optional description string explaining what this action represents in your system",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ActionBlockEditableAttributes"
              }
            }
          }
        ]
      }
    },
    "ActionBlockReadAttributes": {
      "name": "ActionBlockReadAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ActionBlockRead": {
      "name": "ActionBlockRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "a more descriptive name for the action",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "optional description string explaining what this action represents in your system",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ActionBlockReadAttributes"
              }
            }
          },
          {
            "description": "Unique id of the action",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "action key",
            "key": "key",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "AddRolePermissions": {
      "name": "AddRolePermissions",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of permissions to assign to the role. If a permission is already granted to the role it is skipped. Each permission can be either a resource action id, or `{resource_key}:{action_key}`, i.e: the \"permission name\".",
            "key": "permissions",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "AttributeBlockEditableType": {
      "description": "supported attribute primitives",
      "name": "AttributeBlockEditableType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "bool"
          },
          {
            "value": "number"
          },
          {
            "value": "string"
          },
          {
            "value": "time"
          },
          {
            "value": "array"
          },
          {
            "value": "json"
          }
        ]
      }
    },
    "AttributeBlockEditable": {
      "name": "AttributeBlockEditable",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The type of the attribute, we currently support: `bool`, `number` (ints, floats), `time` (a timestamp), `string`, and `json`.",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "AttributeBlockEditableType"
            }
          },
          {
            "description": "optional description string explaining what data this attribute will store",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "AttributeBlockReadType": {
      "description": "supported attribute primitives",
      "name": "AttributeBlockReadType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "bool"
          },
          {
            "value": "number"
          },
          {
            "value": "string"
          },
          {
            "value": "time"
          },
          {
            "value": "array"
          },
          {
            "value": "json"
          }
        ]
      }
    },
    "AttributeBlockRead": {
      "name": "AttributeBlockRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The type of the attribute, we currently support: `bool`, `number` (ints, floats), `time` (a timestamp), `string`, and `json`.",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "AttributeBlockReadType"
            }
          },
          {
            "description": "optional description string explaining what data this attribute will store",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Unique id of the attribute",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "action key",
            "key": "key",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "AttributeType": {
      "description": "supported attribute primitives",
      "name": "AttributeType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "bool"
          },
          {
            "value": "number"
          },
          {
            "value": "string"
          },
          {
            "value": "time"
          },
          {
            "value": "array"
          },
          {
            "value": "json"
          }
        ]
      }
    },
    "BulkRoleAssignmentReport": {
      "name": "BulkRoleAssignmentReport",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "assignments_created",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "default": 0
                }
              }
            }
          }
        ]
      }
    },
    "BulkRoleUnAssignmentReport": {
      "name": "BulkRoleUnAssignmentReport",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "assignments_removed",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "default": 0
                }
              }
            }
          }
        ]
      }
    },
    "ConditionSetCreateType": {
      "description": "An enumeration.",
      "name": "ConditionSetCreateType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "userset"
          },
          {
            "value": "resourceset"
          }
        ]
      }
    },
    "ConditionSetCreateResourceId0": {
      "name": "ConditionSetCreateResourceId0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "ConditionSetCreateResourceId1": {
      "name": "ConditionSetCreateResourceId1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    "ConditionSetCreateResourceId": {
      "description": "For ResourceSets, the id of the base resource.",
      "name": "ConditionSetCreateResourceId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "ConditionSetCreateResourceId0",
            "type": {
              "type": "id",
              "value": "ConditionSetCreateResourceId0"
            }
          },
          {
            "typeName": "ConditionSetCreateResourceId1",
            "type": {
              "type": "id",
              "value": "ConditionSetCreateResourceId1"
            }
          }
        ]
      }
    },
    "ConditionSetCreateConditions": {
      "description": "a boolean expression that consists of multiple conditions, with and/or logic.",
      "name": "ConditionSetCreateConditions",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ConditionSetCreateParentId0": {
      "name": "ConditionSetCreateParentId0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "ConditionSetCreateParentId1": {
      "name": "ConditionSetCreateParentId1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    "ConditionSetCreateParentId": {
      "description": "Parent Condition Set",
      "name": "ConditionSetCreateParentId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "ConditionSetCreateParentId0",
            "type": {
              "type": "id",
              "value": "ConditionSetCreateParentId0"
            }
          },
          {
            "typeName": "ConditionSetCreateParentId1",
            "type": {
              "type": "id",
              "value": "ConditionSetCreateParentId1"
            }
          }
        ]
      }
    },
    "ConditionSetCreate": {
      "name": "ConditionSetCreate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A unique id by which Permit will identify the condition set. The key will be used as the generated rego rule name.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-Za-z0-9\\-_]+$",
                "minLength": 1
              }
            }
          },
          {
            "description": "the type of the set: UserSet or ResourceSet",
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConditionSetCreateType"
              }
            }
          },
          {
            "description": "whether the set was autogenerated by the system.",
            "key": "autogenerated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "default": false
                }
              }
            }
          },
          {
            "description": "For ResourceSets, the id of the base resource.",
            "key": "resource_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConditionSetCreateResourceId"
              }
            }
          },
          {
            "description": "A descriptive name for the set, i.e: 'US based employees' or 'Users behind VPN'",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "an optional longer description of the set",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "a boolean expression that consists of multiple conditions, with and/or logic.",
            "key": "conditions",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConditionSetCreateConditions"
              }
            }
          },
          {
            "description": "Parent Condition Set",
            "key": "parent_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConditionSetCreateParentId"
              }
            }
          }
        ]
      }
    },
    "ConditionSetReadType": {
      "description": "An enumeration.",
      "name": "ConditionSetReadType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "userset"
          },
          {
            "value": "resourceset"
          }
        ]
      }
    },
    "ConditionSetReadResourceId0": {
      "name": "ConditionSetReadResourceId0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "ConditionSetReadResourceId1": {
      "name": "ConditionSetReadResourceId1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    "ConditionSetReadResourceId": {
      "description": "For ResourceSets, the id of the base resource.",
      "name": "ConditionSetReadResourceId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "ConditionSetReadResourceId0",
            "type": {
              "type": "id",
              "value": "ConditionSetReadResourceId0"
            }
          },
          {
            "typeName": "ConditionSetReadResourceId1",
            "type": {
              "type": "id",
              "value": "ConditionSetReadResourceId1"
            }
          }
        ]
      }
    },
    "ConditionSetReadConditions": {
      "description": "a boolean expression that consists of multiple conditions, with and/or logic.",
      "name": "ConditionSetReadConditions",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ConditionSetReadParentId0": {
      "name": "ConditionSetReadParentId0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "ConditionSetReadParentId1": {
      "name": "ConditionSetReadParentId1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    "ConditionSetReadParentId": {
      "description": "Parent Condition Set",
      "name": "ConditionSetReadParentId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "ConditionSetReadParentId0",
            "type": {
              "type": "id",
              "value": "ConditionSetReadParentId0"
            }
          },
          {
            "typeName": "ConditionSetReadParentId1",
            "type": {
              "type": "id",
              "value": "ConditionSetReadParentId1"
            }
          }
        ]
      }
    },
    "ConditionSetRead": {
      "name": "ConditionSetRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A unique id by which Permit will identify the condition set. The key will be used as the generated rego rule name.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "the type of the set: UserSet or ResourceSet",
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConditionSetReadType"
              }
            }
          },
          {
            "description": "whether the set was autogenerated by the system.",
            "key": "autogenerated",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "default": false
                }
              }
            }
          },
          {
            "description": "For ResourceSets, the id of the base resource.",
            "key": "resource_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConditionSetReadResourceId"
              }
            }
          },
          {
            "description": "Unique id of the condition set",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the organization that the condition set belongs to.",
            "key": "organization_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the project that the condition set belongs to.",
            "key": "project_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the environment that the condition set belongs to.",
            "key": "environment_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Date and time when the condition set was created (ISO_8601 format).",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date and time when the condition set was last updated/modified (ISO_8601 format).",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "key": "resource",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResourceRead"
              }
            }
          },
          {
            "description": "A descriptive name for the set, i.e: 'US based employees' or 'Users behind VPN'",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "an optional longer description of the set",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "a boolean expression that consists of multiple conditions, with and/or logic.",
            "key": "conditions",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConditionSetReadConditions"
              }
            }
          },
          {
            "description": "Parent Condition Set",
            "key": "parent_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConditionSetReadParentId"
              }
            }
          }
        ]
      }
    },
    "ConditionSetRuleCreate": {
      "name": "ConditionSetRuleCreate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The userset that will be given permission, i.e: all the users matching this rule will be given the specified permission",
            "key": "user_set",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The permission that will be granted to the userset *on* the resourceset. The permission can be either a resource action id, or `{resource_key}:{action_key}`, i.e: the \"permission name\".",
            "key": "permission",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The resourceset that represents the resources that are granted for access, i.e: all the resources matching this rule can be accessed by the userset to perform the granted *permission*",
            "key": "resource_set",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "if True, will set the condition set rule to the role's autogen user-set.",
            "key": "is_role",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "default": false
                }
              }
            }
          },
          {
            "description": "if True, will set the condition set rule to the resource's autogen resource-set.",
            "key": "is_resource",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "default": false
                }
              }
            }
          }
        ]
      }
    },
    "ConditionSetRuleRead": {
      "name": "ConditionSetRuleRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Unique id of the condition set rule",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "A unique id by which Permit will identify this condition set rule.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "the userset that is currently granted permissions, i.e: all the users matching this rule are granted the permission on the resourceset",
            "key": "user_set",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "a permission that is currently granted to the userset *on* the resourceset.",
            "key": "permission",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "the resourceset that represents the resources that are currently granted for access, i.e: all the resources matching this rule can be accessed by the userset to perform the granted *permission*",
            "key": "resource_set",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique id of the organization that the condition set rule belongs to.",
            "key": "organization_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the project that the condition set rule belongs to.",
            "key": "project_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the environment that the condition set rule belongs to.",
            "key": "environment_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Date and time when the condition set rule was created (ISO_8601 format).",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date and time when the condition set rule was last updated/modified (ISO_8601 format).",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "ConditionSetRuleRemove": {
      "name": "ConditionSetRuleRemove",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The userset that will be unassigned these permission, i.e: all the users matching this rule will lose the specified permission",
            "key": "user_set",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The permission that will be removed from the userset *on* the resourceset. The permission can be either a resource action id, or `{resource_key}:{action_key}`, i.e: the \"permission name\".",
            "key": "permission",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The resourceset that represents the resources that are no longer granted for access, i.e: all the resources matching this rule can no longer be accessed by the userset, and will be revoked the specified *permission*",
            "key": "resource_set",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "if True, will set the condition set rule to the role's autogen user-set.",
            "key": "is_role",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "default": false
                }
              }
            }
          },
          {
            "description": "if True, will set the condition set rule to the resource's autogen resource-set.",
            "key": "is_resource",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "boolean",
                  "default": false
                }
              }
            }
          }
        ]
      }
    },
    "ConditionSetType": {
      "description": "An enumeration.",
      "name": "ConditionSetType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "userset"
          },
          {
            "value": "resourceset"
          }
        ]
      }
    },
    "ConditionSetUpdateConditions": {
      "description": "a boolean expression that consists of multiple conditions, with and/or logic.",
      "name": "ConditionSetUpdateConditions",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ConditionSetUpdateParentId0": {
      "name": "ConditionSetUpdateParentId0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "ConditionSetUpdateParentId1": {
      "name": "ConditionSetUpdateParentId1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    "ConditionSetUpdateParentId": {
      "description": "Parent Condition Set",
      "name": "ConditionSetUpdateParentId",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "ConditionSetUpdateParentId0",
            "type": {
              "type": "id",
              "value": "ConditionSetUpdateParentId0"
            }
          },
          {
            "typeName": "ConditionSetUpdateParentId1",
            "type": {
              "type": "id",
              "value": "ConditionSetUpdateParentId1"
            }
          }
        ]
      }
    },
    "ConditionSetUpdate": {
      "name": "ConditionSetUpdate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A descriptive name for the set, i.e: 'US based employees' or 'Users behind VPN'",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "an optional longer description of the set",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "a boolean expression that consists of multiple conditions, with and/or logic.",
            "key": "conditions",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConditionSetUpdateConditions"
              }
            }
          },
          {
            "description": "Parent Condition Set",
            "key": "parent_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ConditionSetUpdateParentId"
              }
            }
          }
        ]
      }
    },
    "EnvironmentCopyTargetEnv": {
      "description": "If copying a new environment, the environment configuration. If copying to an existing environment, the environment identifier",
      "name": "EnvironmentCopyTargetEnv",
      "shape": {
        "type": "object",
        "extends": [
          "EnvironmentCopyTarget"
        ],
        "properties": []
      }
    },
    "EnvironmentCopyConflictStrategy": {
      "description": "Action to take when detecting a conflict when copying. Only applies to copying into an existing environment",
      "name": "EnvironmentCopyConflictStrategy",
      "shape": {
        "type": "enum",
        "default": "fail",
        "values": [
          {
            "value": "fail"
          },
          {
            "value": "overwrite"
          }
        ]
      }
    },
    "EnvironmentCopyScope": {
      "name": "EnvironmentCopyScope",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Resources to copy",
            "key": "resources",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "EnvironmentCopyScopeResources"
              }
            }
          },
          {
            "description": "Roles to copy",
            "key": "roles",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "EnvironmentCopyScopeRoles"
              }
            }
          },
          {
            "description": "User sets to copy",
            "key": "user_sets",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "EnvironmentCopyScopeUserSets"
              }
            }
          },
          {
            "description": "Resource sets to copy",
            "key": "resource_sets",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "EnvironmentCopyScopeResourceSets"
              }
            }
          }
        ]
      }
    },
    "EnvironmentCopy": {
      "name": "EnvironmentCopy",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "If copying a new environment, the environment configuration. If copying to an existing environment, the environment identifier",
            "key": "target_env",
            "valueType": {
              "type": "id",
              "value": "EnvironmentCopyTargetEnv"
            }
          },
          {
            "description": "Action to take when detecting a conflict when copying. Only applies to copying into an existing environment",
            "key": "conflict_strategy",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "EnvironmentCopyConflictStrategy"
              }
            }
          },
          {
            "description": "Filters to include and exclude copied objects",
            "key": "scope",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "EnvironmentCopyScope"
              }
            }
          }
        ]
      }
    },
    "EnvironmentCopyScopeResources": {
      "description": "Resources to copy",
      "name": "EnvironmentCopyScopeResources",
      "shape": {
        "type": "object",
        "extends": [
          "EnvironmentCopyScopeFilters"
        ],
        "properties": []
      }
    },
    "EnvironmentCopyScopeRoles": {
      "description": "Roles to copy",
      "name": "EnvironmentCopyScopeRoles",
      "shape": {
        "type": "object",
        "extends": [
          "EnvironmentCopyScopeFilters"
        ],
        "properties": []
      }
    },
    "EnvironmentCopyScopeUserSets": {
      "description": "User sets to copy",
      "name": "EnvironmentCopyScopeUserSets",
      "shape": {
        "type": "object",
        "extends": [
          "EnvironmentCopyScopeFilters"
        ],
        "properties": []
      }
    },
    "EnvironmentCopyScopeResourceSets": {
      "description": "Resource sets to copy",
      "name": "EnvironmentCopyScopeResourceSets",
      "shape": {
        "type": "object",
        "extends": [
          "EnvironmentCopyScopeFilters"
        ],
        "properties": []
      }
    },
    "EnvironmentCopyScopeFilters": {
      "name": "EnvironmentCopyScopeFilters",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Objects to include (use * as wildcard)",
            "key": "include",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "Object to exclude (use * as wildcard)",
            "key": "exclude",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "EnvironmentCopyTargetNew": {
      "description": "Description of the environment to create. This environment must not already exist.",
      "name": "EnvironmentCopyTargetNew",
      "shape": {
        "type": "object",
        "extends": [
          "EnvironmentCreate"
        ],
        "properties": []
      }
    },
    "EnvironmentCopyTarget": {
      "name": "EnvironmentCopyTarget",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Identifier of an existing environment to copy into",
            "key": "existing",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Description of the environment to create. This environment must not already exist.",
            "key": "new",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "EnvironmentCopyTargetNew"
              }
            }
          }
        ]
      }
    },
    "EnvironmentCreateJwks": {
      "description": "jwks for element frontend only login",
      "name": "EnvironmentCreateJwks",
      "shape": {
        "type": "object",
        "extends": [
          "JwksObj"
        ],
        "properties": []
      }
    },
    "EnvironmentCreateSettings": {
      "description": "the settings for this environment",
      "name": "EnvironmentCreateSettings",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "EnvironmentCreate": {
      "name": "EnvironmentCreate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A URL-friendly name of the environment (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the environment.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-Za-z0-9\\-_]+$"
              }
            }
          },
          {
            "description": "The name of the environment",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "an optional longer description of the environment",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "when using gitops feature, an optional branch name for the environment",
            "key": "custom_branch_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "jwks for element frontend only login",
            "key": "jwks",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "EnvironmentCreateJwks"
              }
            }
          },
          {
            "description": "the settings for this environment",
            "key": "settings",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "EnvironmentCreateSettings"
              }
            }
          }
        ]
      }
    },
    "EnvironmentReadJwks": {
      "description": "jwks for element frontend only login",
      "name": "EnvironmentReadJwks",
      "shape": {
        "type": "object",
        "extends": [
          "JwksObj"
        ],
        "properties": []
      }
    },
    "EnvironmentReadSettings": {
      "description": "the settings for this environment",
      "name": "EnvironmentReadSettings",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "EnvironmentRead": {
      "name": "EnvironmentRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A URL-friendly name of the environment (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the environment.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique id of the environment",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the organization that the environment belongs to.",
            "key": "organization_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the project that the environment belongs to.",
            "key": "project_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Date and time when the environment was created (ISO_8601 format).",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date and time when the environment was last updated/modified (ISO_8601 format).",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "The name of the environment",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "an optional longer description of the environment",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "when using gitops feature, an optional branch name for the environment",
            "key": "custom_branch_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "jwks for element frontend only login",
            "key": "jwks",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "EnvironmentReadJwks"
              }
            }
          },
          {
            "description": "the settings for this environment",
            "key": "settings",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "EnvironmentReadSettings"
              }
            }
          }
        ]
      }
    },
    "EnvironmentStatsJwks": {
      "description": "jwks for element frontend only login",
      "name": "EnvironmentStatsJwks",
      "shape": {
        "type": "object",
        "extends": [
          "JwksObj"
        ],
        "properties": []
      }
    },
    "EnvironmentStatsSettings": {
      "description": "the settings for this environment",
      "name": "EnvironmentStatsSettings",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "EnvironmentStats": {
      "name": "EnvironmentStats",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A URL-friendly name of the environment (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the environment.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique id of the environment",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the organization that the environment belongs to.",
            "key": "organization_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the project that the environment belongs to.",
            "key": "project_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Date and time when the environment was created (ISO_8601 format).",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date and time when the environment was last updated/modified (ISO_8601 format).",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "The name of the environment",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "an optional longer description of the environment",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "when using gitops feature, an optional branch name for the environment",
            "key": "custom_branch_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "jwks for element frontend only login",
            "key": "jwks",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "EnvironmentStatsJwks"
              }
            }
          },
          {
            "description": "the settings for this environment",
            "key": "settings",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "EnvironmentStatsSettings"
              }
            }
          },
          {
            "key": "pdp_configs",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "PDPConfigRead"
              }
            }
          },
          {
            "key": "stats",
            "valueType": {
              "type": "id",
              "value": "Statistics"
            }
          }
        ]
      }
    },
    "EnvironmentUpdateJwks": {
      "description": "jwks for element frontend only login",
      "name": "EnvironmentUpdateJwks",
      "shape": {
        "type": "object",
        "extends": [
          "JwksObj"
        ],
        "properties": []
      }
    },
    "EnvironmentUpdateSettings": {
      "description": "the settings for this environment",
      "name": "EnvironmentUpdateSettings",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "EnvironmentUpdate": {
      "name": "EnvironmentUpdate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the environment",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "an optional longer description of the environment",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "when using gitops feature, an optional branch name for the environment",
            "key": "custom_branch_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "jwks for element frontend only login",
            "key": "jwks",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "EnvironmentUpdateJwks"
              }
            }
          },
          {
            "description": "the settings for this environment",
            "key": "settings",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "EnvironmentUpdateSettings"
              }
            }
          }
        ]
      }
    },
    "HTTPValidationError": {
      "name": "HTTPValidationError",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "detail",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ValidationError"
                }
              }
            }
          }
        ]
      }
    },
    "IdentityReadAuth0Info": {
      "description": "Raw user info json coming from our identity provider and matching a specific account identity",
      "name": "IdentityReadAuth0Info",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "IdentityRead": {
      "name": "IdentityRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Unique User Id of this identity in the identity provider (including the provider type)",
            "key": "user_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The identity provider type this identity came from",
            "key": "provider",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique User Id of this identity in the identity provider (NOT including the provider type)",
            "key": "sub",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Email connected to this account identity",
            "key": "email",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "email"
              }
            }
          },
          {
            "description": "Whether this email address connected to this account identity is verified or not. For social providers like 'Login with Google' this is done automatically, otherwise we will send the user a verification link in email.",
            "key": "email_verified",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "Raw user info json coming from our identity provider and matching a specific account identity",
            "key": "auth0_info",
            "valueType": {
              "type": "id",
              "value": "IdentityReadAuth0Info"
            }
          }
        ]
      }
    },
    "InviteReadRole": {
      "description": "An enumeration.",
      "name": "InviteReadRole",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "admin"
          },
          {
            "value": "write"
          },
          {
            "value": "read"
          },
          {
            "value": "no_access"
          }
        ]
      }
    },
    "InviteReadStatus": {
      "description": "An enumeration.",
      "name": "InviteReadStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "pending"
          },
          {
            "value": "accepted"
          },
          {
            "value": "failed"
          },
          {
            "value": "canceled"
          }
        ]
      }
    },
    "InviteRead": {
      "name": "InviteRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Unique id of the invite",
            "key": "member_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "description": "The invited member's email address",
            "key": "email",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "email"
              }
            }
          },
          {
            "description": "The role the member will be assigned with",
            "key": "role",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "InviteReadRole"
              }
            }
          },
          {
            "description": "Unique id of the invite",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the organization that the invite belongs to.",
            "key": "organization_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "The invite code that is sent to the member's email",
            "key": "invite_code",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Date and time when the invite was created (ISO_8601 format).",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "The status of the invite (pending, failed, etc)",
            "key": "status",
            "valueType": {
              "type": "id",
              "value": "InviteReadStatus"
            }
          },
          {
            "description": "if failed, the reason the invitation failed",
            "key": "failed_reason",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "InviteStatus": {
      "description": "An enumeration.",
      "name": "InviteStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "pending"
          },
          {
            "value": "accepted"
          },
          {
            "value": "failed"
          },
          {
            "value": "canceled"
          }
        ]
      }
    },
    "JwksObjKeysItems": {
      "name": "JwksObjKeysItems",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "JwksObj": {
      "name": "JwksObj",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The keys to match against the request headers",
            "key": "keys",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "JwksObjKeysItems"
              }
            }
          }
        ]
      }
    },
    "MemberAccessLevel": {
      "description": "An enumeration.",
      "name": "MemberAccessLevel",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "admin"
          },
          {
            "value": "write"
          },
          {
            "value": "read"
          },
          {
            "value": "no_access"
          }
        ]
      }
    },
    "MemberAccessObj": {
      "description": "An enumeration.",
      "name": "MemberAccessObj",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "org"
          },
          {
            "value": "project"
          },
          {
            "value": "env"
          }
        ]
      }
    },
    "OnboardingStep": {
      "description": "An enumeration.",
      "name": "OnboardingStep",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "create_organization"
          },
          {
            "value": "create_project"
          },
          {
            "value": "create_resource"
          },
          {
            "value": "create_actions"
          },
          {
            "value": "assign_permissions"
          },
          {
            "value": "assign_user_roles"
          },
          {
            "value": "connect_sdk"
          },
          {
            "value": "done"
          }
        ]
      }
    },
    "OrgMemberReadWithGrantsOnboardingStep": {
      "description": "An enumeration.",
      "name": "OrgMemberReadWithGrantsOnboardingStep",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "create_organization"
          },
          {
            "value": "create_project"
          },
          {
            "value": "create_resource"
          },
          {
            "value": "create_actions"
          },
          {
            "value": "assign_permissions"
          },
          {
            "value": "assign_user_roles"
          },
          {
            "value": "connect_sdk"
          },
          {
            "value": "done"
          }
        ]
      }
    },
    "OrgMemberReadWithGrantsSettings": {
      "description": "Custom permit.io dashboard settings, such as preferred theme, etc.",
      "name": "OrgMemberReadWithGrantsSettings",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "OrgMemberReadWithGrants": {
      "name": "OrgMemberReadWithGrants",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Unique id of the account member",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Email of the user controlling this account",
            "key": "email",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "email"
              }
            }
          },
          {
            "description": "Whether this email address is verified or not. For social providers like 'Login with Google' this is done automatically, otherwise we will send the user a verification link in email.",
            "key": "email_verified",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "Name of this user",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "First name of the user",
            "key": "given_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Last name of the user",
            "key": "family_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "URL to picture, photo, or avatar of the user that controls this account.",
            "key": "picture",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Whether or not this user has special access to permit.io organizations",
            "key": "is_superuser",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "Whether or not this user is currently onboarding, needs to be replaced by a user journey object",
            "key": "is_onboarding",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "the step the user is currently going through in onboarding",
            "key": "onboarding_step",
            "valueType": {
              "type": "id",
              "value": "OrgMemberReadWithGrantsOnboardingStep"
            }
          },
          {
            "description": "Date and time when the account member was created (ISO_8601 format).",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Last date and time this user logged in (ISO_8601 format).",
            "key": "last_login",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          {
            "description": "Last IP address from which this user logged in.",
            "key": "last_ip",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "default": "0.0.0.0"
                }
              }
            }
          },
          {
            "description": "Total number of logins this user has performed.",
            "key": "logins_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "default": 0
                }
              }
            }
          },
          {
            "key": "identities",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "IdentityRead"
              }
            }
          },
          {
            "key": "invite",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "InviteRead"
              }
            }
          },
          {
            "description": "Custom permit.io dashboard settings, such as preferred theme, etc.",
            "key": "settings",
            "valueType": {
              "type": "id",
              "value": "OrgMemberReadWithGrantsSettings"
            }
          },
          {
            "key": "grants",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "Permission"
              }
            }
          }
        ]
      }
    },
    "OrganizationCreateSettings": {
      "description": "the settings for this project",
      "name": "OrganizationCreateSettings",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "OrganizationCreate": {
      "name": "OrganizationCreate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A URL-friendly name of the organization (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the organization.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-Za-z0-9\\-_]+$"
              }
            }
          },
          {
            "description": "The name of the organization, usually it's your company's name.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-Za-z0-9\\.\\-\\_\\ ]+$"
              }
            }
          },
          {
            "description": "the settings for this project",
            "key": "settings",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OrganizationCreateSettings"
              }
            }
          }
        ]
      }
    },
    "OrganizationReadSettings": {
      "description": "the settings for this project",
      "name": "OrganizationReadSettings",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "OrganizationRead": {
      "name": "OrganizationRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A URL-friendly name of the organization (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the organization.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique id of the organization",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Is this an enterprise account?",
            "key": "is_enterprise",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "Date and time when the organization was created (ISO_8601 format).",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date and time when the organization was last updated/modified (ISO_8601 format).",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "The name of the organization, usually it's your company's name.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "the settings for this project",
            "key": "settings",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OrganizationReadSettings"
              }
            }
          }
        ]
      }
    },
    "OrganizationReadWithApiKeySettings": {
      "description": "the settings for this project",
      "name": "OrganizationReadWithApiKeySettings",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "OrganizationReadWithAPIKey": {
      "name": "OrganizationReadWithAPIKey",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A URL-friendly name of the organization (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the organization.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique id of the organization",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Is this an enterprise account?",
            "key": "is_enterprise",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "description": "Date and time when the organization was created (ISO_8601 format).",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date and time when the organization was last updated/modified (ISO_8601 format).",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "The name of the organization, usually it's your company's name.",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "the settings for this project",
            "key": "settings",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OrganizationReadWithApiKeySettings"
              }
            }
          },
          {
            "key": "api_key_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "key": "api_key_secret",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "OrganizationUpdateSettings": {
      "description": "the settings for this project",
      "name": "OrganizationUpdateSettings",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "OrganizationUpdate": {
      "name": "OrganizationUpdate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the organization, usually it's your company's name.",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "^[A-Za-z0-9\\.\\-\\_\\ ]+$"
                }
              }
            }
          },
          {
            "description": "the settings for this project",
            "key": "settings",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "OrganizationUpdateSettings"
              }
            }
          }
        ]
      }
    },
    "PDPConfigRead": {
      "name": "PDPConfigRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Unique id of the organization that the pdp_config belongs to.",
            "key": "organization_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the project that the pdp_config belongs to.",
            "key": "project_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the environment that the pdp_config belongs to.",
            "key": "environment_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "client_secret",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "PaginatedResult_ConditionSetRead_": {
      "name": "PaginatedResult_ConditionSetRead_",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of Condition Sets",
            "key": "data",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "ConditionSetRead"
              }
            }
          },
          {
            "key": "total_count",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "key": "page_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                }
              }
            }
          }
        ]
      }
    },
    "PaginatedResult_ResourceRead_": {
      "name": "PaginatedResult_ResourceRead_",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of Resources",
            "key": "data",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "ResourceRead"
              }
            }
          },
          {
            "key": "total_count",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "key": "page_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                }
              }
            }
          }
        ]
      }
    },
    "PaginatedResult_ResourceRoleRead_": {
      "name": "PaginatedResult_ResourceRoleRead_",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of Resource Roles",
            "key": "data",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "ResourceRoleRead"
              }
            }
          },
          {
            "key": "total_count",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "key": "page_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                }
              }
            }
          }
        ]
      }
    },
    "PaginatedResult_RoleRead_": {
      "name": "PaginatedResult_RoleRead_",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of Roles",
            "key": "data",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "RoleRead"
              }
            }
          },
          {
            "key": "total_count",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "key": "page_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                }
              }
            }
          }
        ]
      }
    },
    "PaginatedResult_TenantRead_": {
      "name": "PaginatedResult_TenantRead_",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of Tenants",
            "key": "data",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "TenantRead"
              }
            }
          },
          {
            "key": "total_count",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "key": "page_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                }
              }
            }
          }
        ]
      }
    },
    "PaginatedResult_UserRead_": {
      "name": "PaginatedResult_UserRead_",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of Users",
            "key": "data",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "UserRead"
              }
            }
          },
          {
            "key": "total_count",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "key": "page_count",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "default": 0
                }
              }
            }
          }
        ]
      }
    },
    "Permission": {
      "name": "Permission",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "organization_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "project_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "key": "environment_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "key": "object_type",
            "valueType": {
              "type": "id",
              "value": "MemberAccessObj"
            }
          },
          {
            "key": "access_level",
            "valueType": {
              "type": "id",
              "value": "MemberAccessLevel"
            }
          },
          {
            "key": "organization_key",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "project_key",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "environment_key",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "organization_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "project_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "environment_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ProjectCreateSettings": {
      "description": "the settings for this project",
      "name": "ProjectCreateSettings",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ProjectCreate": {
      "name": "ProjectCreate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A URL-friendly name of the project (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the project.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-Za-z0-9\\-_]+$"
              }
            }
          },
          {
            "description": "Optional namespace for URNs. If empty, URNs will be generated from project key.",
            "key": "urn_namespace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "[a-z0-9-]{2,}"
                }
              }
            }
          },
          {
            "description": "The name of the project",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "a longer description outlining the project objectives",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "the settings for this project",
            "key": "settings",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ProjectCreateSettings"
              }
            }
          },
          {
            "description": "the id of the policy repo to use for this project",
            "key": "active_policy_repo_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ]
      }
    },
    "ProjectReadSettings": {
      "description": "the settings for this project",
      "name": "ProjectReadSettings",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ProjectRead": {
      "name": "ProjectRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A URL-friendly name of the project (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the project.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Optional namespace for URNs. If empty, URNs will be generated from project key.",
            "key": "urn_namespace",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "regex": "[a-z0-9-]{2,}"
                }
              }
            }
          },
          {
            "description": "Unique id of the project",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the organization that the project belongs to.",
            "key": "organization_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Date and time when the project was created (ISO_8601 format).",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date and time when the project was last updated/modified (ISO_8601 format).",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "The name of the project",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "a longer description outlining the project objectives",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "the settings for this project",
            "key": "settings",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ProjectReadSettings"
              }
            }
          },
          {
            "description": "the id of the policy repo to use for this project",
            "key": "active_policy_repo_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ]
      }
    },
    "ProjectUpdateSettings": {
      "description": "the settings for this project",
      "name": "ProjectUpdateSettings",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ProjectUpdate": {
      "name": "ProjectUpdate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the project",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "a longer description outlining the project objectives",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "the settings for this project",
            "key": "settings",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ProjectUpdateSettings"
              }
            }
          },
          {
            "description": "the id of the policy repo to use for this project",
            "key": "active_policy_repo_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ]
      }
    },
    "RelationsBlock": {
      "description": "A actions definition block, typically contained within a resource type definition block.\nThe actions represents the ways you can interact with a protected resource.",
      "name": "RelationsBlock",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "RemoveRolePermissions": {
      "name": "RemoveRolePermissions",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "List of permissions to remove from the role. If a permission is not found it is skipped. Each permission can be either a resource action id, or `{resource_key}:{action_key}`,i.e: the \"permission name\".",
            "key": "permissions",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ResourceActionCreateAttributes": {
      "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action. This metadata can be used to filter actions using query parameters with attr_ prefix",
      "name": "ResourceActionCreateAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ResourceActionCreate": {
      "name": "ResourceActionCreate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A URL-friendly name of the action (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the action.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-Za-z0-9\\-_]+$"
              }
            }
          },
          {
            "description": "The name of the action",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "An optional longer description of what this action respresents in your system",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action. This metadata can be used to filter actions using query parameters with attr_ prefix",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResourceActionCreateAttributes"
              }
            }
          }
        ]
      }
    },
    "ResourceActionGroupCreateAttributes": {
      "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action group. This metadata can be used to filter action groups using query parameters with attr_ prefix",
      "name": "ResourceActionGroupCreateAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ResourceActionGroupCreate": {
      "name": "ResourceActionGroupCreate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A URL-friendly name of the action group (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the action group.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-Za-z0-9\\-_]+$"
              }
            }
          },
          {
            "description": "The name of the action group",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "An optional longer description of what this action group represents in your system",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action group. This metadata can be used to filter action groups using query parameters with attr_ prefix",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResourceActionGroupCreateAttributes"
              }
            }
          },
          {
            "key": "actions",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "ResourceActionGroupReadAttributes": {
      "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action group. This metadata can be used to filter action groups using query parameters with attr_ prefix",
      "name": "ResourceActionGroupReadAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ResourceActionGroupRead": {
      "name": "ResourceActionGroupRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the action group",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "An optional longer description of what this action group represents in your system",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action group. This metadata can be used to filter action groups using query parameters with attr_ prefix",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResourceActionGroupReadAttributes"
              }
            }
          },
          {
            "key": "actions",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "A URL-friendly name of the action group (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the action group.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-Za-z0-9\\-_]+$"
              }
            }
          },
          {
            "description": "Unique id of the action group",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the organization that the action group belongs to.",
            "key": "organization_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the project that the action group belongs to.",
            "key": "project_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the environment that the action group belongs to.",
            "key": "environment_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the resource that the action group belongs to.",
            "key": "resource_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Date and time when the action group was created (ISO_8601 format).",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date and time when the action group was last updated/modified (ISO_8601 format).",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "ResourceActionGroupUpdateAttributes": {
      "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action group. This metadata can be used to filter action groups using query parameters with attr_ prefix",
      "name": "ResourceActionGroupUpdateAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ResourceActionGroupUpdate": {
      "name": "ResourceActionGroupUpdate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the action group",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "An optional longer description of what this action group represents in your system",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action group. This metadata can be used to filter action groups using query parameters with attr_ prefix",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResourceActionGroupUpdateAttributes"
              }
            }
          },
          {
            "key": "actions",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "ResourceActionReadAttributes": {
      "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action. This metadata can be used to filter actions using query parameters with attr_ prefix",
      "name": "ResourceActionReadAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ResourceActionRead": {
      "name": "ResourceActionRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the action",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "An optional longer description of what this action respresents in your system",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action. This metadata can be used to filter actions using query parameters with attr_ prefix",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResourceActionReadAttributes"
              }
            }
          },
          {
            "description": "A URL-friendly name of the action (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the action.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique id of the action",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "The name of the action, prefixed by the resource the action is acting upon.",
            "key": "permission_name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique id of the organization that the action belongs to.",
            "key": "organization_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the project that the action belongs to.",
            "key": "project_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the environment that the action belongs to.",
            "key": "environment_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the resource that the action belongs to.",
            "key": "resource_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Date and time when the action was created (ISO_8601 format).",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date and time when the action was last updated/modified (ISO_8601 format).",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "ResourceActionUpdateAttributes": {
      "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action. This metadata can be used to filter actions using query parameters with attr_ prefix",
      "name": "ResourceActionUpdateAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ResourceActionUpdate": {
      "name": "ResourceActionUpdate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the action",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "An optional longer description of what this action respresents in your system",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this action. This metadata can be used to filter actions using query parameters with attr_ prefix",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResourceActionUpdateAttributes"
              }
            }
          }
        ]
      }
    },
    "ResourceAttributeCreateType": {
      "description": "supported attribute primitives",
      "name": "ResourceAttributeCreateType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "bool"
          },
          {
            "value": "number"
          },
          {
            "value": "string"
          },
          {
            "value": "time"
          },
          {
            "value": "array"
          },
          {
            "value": "json"
          }
        ]
      }
    },
    "ResourceAttributeCreate": {
      "name": "ResourceAttributeCreate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A URL-friendly name of the attribute (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the attribute.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-Za-z0-9\\-_]+$"
              }
            }
          },
          {
            "description": "The type of the attribute, we currently support: `bool`, `number` (ints, floats), `time` (a timestamp), `string`, and `json`.",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "ResourceAttributeCreateType"
            }
          },
          {
            "description": "An optional longer description of what this attribute respresents in your system",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ResourceAttributeReadType": {
      "description": "supported attribute primitives",
      "name": "ResourceAttributeReadType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "bool"
          },
          {
            "value": "number"
          },
          {
            "value": "string"
          },
          {
            "value": "time"
          },
          {
            "value": "array"
          },
          {
            "value": "json"
          }
        ]
      }
    },
    "ResourceAttributeRead": {
      "name": "ResourceAttributeRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The type of the attribute, we currently support: `bool`, `number` (ints, floats), `time` (a timestamp), `string`, and `json`.",
            "key": "type",
            "valueType": {
              "type": "id",
              "value": "ResourceAttributeReadType"
            }
          },
          {
            "description": "An optional longer description of what this attribute respresents in your system",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "A URL-friendly name of the attribute (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the attribute.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique id of the attribute",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the resource that the attribute belongs to.",
            "key": "resource_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "A URL-friendly name of the resource (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the resource.",
            "key": "resource_key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique id of the organization that the attribute belongs to.",
            "key": "organization_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the project that the attribute belongs to.",
            "key": "project_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the environment that the attribute belongs to.",
            "key": "environment_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Date and time when the attribute was created (ISO_8601 format).",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date and time when the attribute was last updated/modified (ISO_8601 format).",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Whether the attribute is built-in, and managed by the Permit system.",
            "key": "built_in",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          }
        ]
      }
    },
    "ResourceAttributeUpdateType": {
      "description": "supported attribute primitives",
      "name": "ResourceAttributeUpdateType",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "bool"
          },
          {
            "value": "number"
          },
          {
            "value": "string"
          },
          {
            "value": "time"
          },
          {
            "value": "array"
          },
          {
            "value": "json"
          }
        ]
      }
    },
    "ResourceAttributeUpdate": {
      "name": "ResourceAttributeUpdate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The type of the attribute, we currently support: `bool`, `number` (ints, floats), `time` (a timestamp), `string`, and `json`.",
            "key": "type",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResourceAttributeUpdateType"
              }
            }
          },
          {
            "description": "An optional longer description of what this attribute respresents in your system",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "ResourceCreate": {
      "name": "ResourceCreate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A URL-friendly name of the resource (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the resource.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-Za-z0-9\\-_]+$"
              }
            }
          },
          {
            "description": "The name of the resource",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name) (Uniform Resource Name) of the resource",
            "key": "urn",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "An optional longer description of what this resource respresents in your system",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "\n        A actions definition block, typically contained within a resource type definition block.\n        The actions represents the ways you can interact with a protected resource.\n        ",
            "key": "actions",
            "valueType": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "id",
                "value": "ActionBlockEditable"
              }
            }
          },
          {
            "description": "Attributes that each resource of this type defines, and can be used in your ABAC policies.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "id",
                  "value": "AttributeBlockEditable"
                }
              }
            }
          }
        ]
      }
    },
    "ResourceInstanceCreateAttributes": {
      "description": "Arbitraty resource attributes that will be used to enforce attribute-based access control policies.",
      "name": "ResourceInstanceCreateAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ResourceInstanceCreate": {
      "name": "ResourceInstanceCreate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A unique identifier by which Permit will identify the resource instance for permission checks. You will later pass this identifier to the `permit.check()` API. A key can be anything: for example the resource db id, a url slug, a UUID or anything else as long as it's unique on your end. The resource instance key must be url-friendly.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-Za-z0-9\\-_]+$"
              }
            }
          },
          {
            "description": "the *key* of the tenant that this resource belongs to, used to enforce tenant boundaries in multi-tenant apps.",
            "key": "tenant",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "the *key* of the resource (type) of this resource instance. For example: if this resource instance is the annual budget document, the key of the resource might be `document`.",
            "key": "resource",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Arbitraty resource attributes that will be used to enforce attribute-based access control policies.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResourceInstanceCreateAttributes"
              }
            }
          }
        ]
      }
    },
    "ResourceInstanceReadAttributes": {
      "description": "Arbitraty resource attributes that will be used to enforce attribute-based access control policies.",
      "name": "ResourceInstanceReadAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ResourceInstanceRead": {
      "name": "ResourceInstanceRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A unique identifier by which Permit will identify the resource instance for permission checks. You will later pass this identifier to the `permit.check()` API. A key can be anything: for example the resource db id, a url slug, a UUID or anything else as long as it's unique on your end. The resource instance key must be url-friendly.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "the *key* of the tenant that this resource belongs to, used to enforce tenant boundaries in multi-tenant apps.",
            "key": "tenant",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "the *key* of the resource (type) of this resource instance. For example: if this resource instance is the annual budget document, the key of the resource might be `document`.",
            "key": "resource",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique id of the resource instance",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the organization that the resource instance belongs to.",
            "key": "organization_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the project that the resource instance belongs to.",
            "key": "project_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the environment that the resource instance belongs to.",
            "key": "environment_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Date and time when the resource instance was created (ISO_8601 format).",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date and time when the resource instance was last updated/modified (ISO_8601 format).",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "the id of the resource (type) of this resource instance.",
            "key": "resource_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "the id of the tenant of this resource instance.",
            "key": "tenant_id",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          {
            "description": "Arbitraty resource attributes that will be used to enforce attribute-based access control policies.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResourceInstanceReadAttributes"
              }
            }
          }
        ]
      }
    },
    "ResourceInstanceUpdateAttributes": {
      "description": "Arbitraty resource attributes that will be used to enforce attribute-based access control policies.",
      "name": "ResourceInstanceUpdateAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ResourceInstanceUpdate": {
      "name": "ResourceInstanceUpdate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Arbitraty resource attributes that will be used to enforce attribute-based access control policies.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResourceInstanceUpdateAttributes"
              }
            }
          }
        ]
      }
    },
    "ResourceRead": {
      "name": "ResourceRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A URL-friendly name of the resource (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the resource.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique id of the resource",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the organization that the resource belongs to.",
            "key": "organization_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the project that the resource belongs to.",
            "key": "project_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the environment that the resource belongs to.",
            "key": "environment_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Date and time when the resource was created (ISO_8601 format).",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date and time when the resource was last updated/modified (ISO_8601 format).",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "The name of the resource",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name) (Uniform Resource Name) of the resource",
            "key": "urn",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "An optional longer description of what this resource respresents in your system",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "\n        A actions definition block, typically contained within a resource type definition block.\n        The actions represents the ways you can interact with a protected resource.\n        ",
            "key": "actions",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "id",
                  "value": "ActionBlockRead"
                }
              }
            }
          },
          {
            "description": "Attributes that each resource of this type defines, and can be used in your ABAC policies.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "id",
                  "value": "AttributeBlockRead"
                }
              }
            }
          },
          {
            "key": "action_groups",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "list",
                  "itemType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ]
      }
    },
    "ResourceReplace": {
      "name": "ResourceReplace",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the resource",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name) (Uniform Resource Name) of the resource",
            "key": "urn",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "An optional longer description of what this resource respresents in your system",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "\n        A actions definition block, typically contained within a resource type definition block.\n        The actions represents the ways you can interact with a protected resource.\n        ",
            "key": "actions",
            "valueType": {
              "type": "map",
              "keyType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "valueType": {
                "type": "id",
                "value": "ActionBlockEditable"
              }
            }
          },
          {
            "description": "Attributes that each resource of this type defines, and can be used in your ABAC policies.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "id",
                  "value": "AttributeBlockEditable"
                }
              }
            }
          }
        ]
      }
    },
    "ResourceRoleCreateAttributes": {
      "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
      "name": "ResourceRoleCreateAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ResourceRoleCreate": {
      "name": "ResourceRoleCreate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A URL-friendly name of the role (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the role.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-Za-z0-9\\-_]+$"
              }
            }
          },
          {
            "description": "The name of the role",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "optional description string explaining what this role represents, or what permissions are granted to it.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "list of action keys that define what actions this resource role is permitted to do",
            "key": "permissions",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResourceRoleCreateAttributes"
              }
            }
          },
          {
            "description": "list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.",
            "key": "extends",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "ResourceRoleListRoles0": {
      "name": "ResourceRoleListRoles0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "ResourceRoleRead"
          }
        }
      }
    },
    "ResourceRoleListRoles": {
      "name": "ResourceRoleListRoles",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "ResourceRoleListRoles0",
            "type": {
              "type": "id",
              "value": "ResourceRoleListRoles0"
            }
          },
          {
            "typeName": "PaginatedResult_ResourceRoleRead_",
            "type": {
              "type": "id",
              "value": "PaginatedResult_ResourceRoleRead_"
            }
          }
        ]
      }
    },
    "ResourceRoleList": {
      "name": "ResourceRoleList",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "roles",
            "valueType": {
              "type": "id",
              "value": "ResourceRoleListRoles"
            }
          }
        ]
      }
    },
    "ResourceRoleReadAttributes": {
      "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
      "name": "ResourceRoleReadAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ResourceRoleRead": {
      "name": "ResourceRoleRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the role",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "optional description string explaining what this role represents, or what permissions are granted to it.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "list of action keys that define what actions this resource role is permitted to do",
            "key": "permissions",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResourceRoleReadAttributes"
              }
            }
          },
          {
            "description": "list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.",
            "key": "extends",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "A URL-friendly name of the role (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the role.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique id of the role",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the organization that the role belongs to.",
            "key": "organization_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the project that the role belongs to.",
            "key": "project_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the environment that the role belongs to.",
            "key": "environment_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the resource that the role belongs to.",
            "key": "resource_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Date and time when the role was created (ISO_8601 format).",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date and time when the role was last updated/modified (ISO_8601 format).",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "ResourceRoleUpdateAttributes": {
      "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
      "name": "ResourceRoleUpdateAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "ResourceRoleUpdate": {
      "name": "ResourceRoleUpdate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the role",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "optional description string explaining what this role represents, or what permissions are granted to it.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "list of action keys that define what actions this resource role is permitted to do",
            "key": "permissions",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "ResourceRoleUpdateAttributes"
              }
            }
          },
          {
            "description": "list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.",
            "key": "extends",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "ResourceUpdate": {
      "name": "ResourceUpdate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the resource",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name) (Uniform Resource Name) of the resource",
            "key": "urn",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "An optional longer description of what this resource respresents in your system",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "\n        A actions definition block, typically contained within a resource type definition block.\n        The actions represents the ways you can interact with a protected resource.\n        ",
            "key": "actions",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "id",
                  "value": "ActionBlockEditable"
                }
              }
            }
          },
          {
            "description": "Attributes that each resource of this type defines, and can be used in your ABAC policies.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "map",
                "keyType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueType": {
                  "type": "id",
                  "value": "AttributeBlockEditable"
                }
              }
            }
          }
        ]
      }
    },
    "RoleAssignmentCreate": {
      "name": "RoleAssignmentCreate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "the role that will be assigned (accepts either the role id or the role key)",
            "key": "role",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "the tenant the role is associated with (accepts either the tenant id or the tenant key)",
            "key": "tenant",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "the user the role will be assigned to (accepts either the user id or the user key)",
            "key": "user",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "RoleAssignmentRead": {
      "name": "RoleAssignmentRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "Unique id of the role assignment",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "the user the role is assigned to",
            "key": "user",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "the role that is assigned",
            "key": "role",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "the tenant the role is associated with",
            "key": "tenant",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique id of the user",
            "key": "user_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the role",
            "key": "role_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the tenant",
            "key": "tenant_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the organization that the role assignment belongs to.",
            "key": "organization_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the project that the role assignment belongs to.",
            "key": "project_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the environment that the role assignment belongs to.",
            "key": "environment_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Date and time when the role assignment was created (ISO_8601 format).",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "RoleAssignmentRemove": {
      "name": "RoleAssignmentRemove",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "the role that will be unassigned (accepts either the role id or the role key)",
            "key": "role",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "the tenant the role is associated with (accepts either the tenant id or the tenant key)",
            "key": "tenant",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "the user the role will be unassigned from (accepts either the user id or the user key)",
            "key": "user",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "RoleBlock": {
      "name": "RoleBlock",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "optional description string explaining what this role represents, or what permissions are granted to it.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "list of action keys that define what actions this resource role is permitted to do",
            "key": "permissions",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "RoleCreateAttributes": {
      "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
      "name": "RoleCreateAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "RoleCreate": {
      "name": "RoleCreate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A URL-friendly name of the role (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the role.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-Za-z0-9\\-_]+$"
              }
            }
          },
          {
            "description": "The name of the role",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "optional description string explaining what this role represents, or what permissions are granted to it.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "list of action keys that define what actions this resource role is permitted to do",
            "key": "permissions",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RoleCreateAttributes"
              }
            }
          },
          {
            "description": "list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.",
            "key": "extends",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "RoleListRoles0": {
      "name": "RoleListRoles0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "RoleRead"
          }
        }
      }
    },
    "RoleListRoles": {
      "name": "RoleListRoles",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "RoleListRoles0",
            "type": {
              "type": "id",
              "value": "RoleListRoles0"
            }
          },
          {
            "typeName": "PaginatedResult_RoleRead_",
            "type": {
              "type": "id",
              "value": "PaginatedResult_RoleRead_"
            }
          }
        ]
      }
    },
    "RoleList": {
      "name": "RoleList",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "roles",
            "valueType": {
              "type": "id",
              "value": "RoleListRoles"
            }
          }
        ]
      }
    },
    "RoleReadAttributes": {
      "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
      "name": "RoleReadAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "RoleRead": {
      "name": "RoleRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the role",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "optional description string explaining what this role represents, or what permissions are granted to it.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "list of action keys that define what actions this resource role is permitted to do",
            "key": "permissions",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RoleReadAttributes"
              }
            }
          },
          {
            "description": "list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.",
            "key": "extends",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "A URL-friendly name of the role (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the role.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique id of the role",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the organization that the role belongs to.",
            "key": "organization_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the project that the role belongs to.",
            "key": "project_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the environment that the role belongs to.",
            "key": "environment_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Date and time when the role was created (ISO_8601 format).",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date and time when the role was last updated/modified (ISO_8601 format).",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      }
    },
    "RoleUpdateAttributes": {
      "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
      "name": "RoleUpdateAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "RoleUpdate": {
      "name": "RoleUpdate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The name of the role",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "optional description string explaining what this role represents, or what permissions are granted to it.",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "list of action keys that define what actions this resource role is permitted to do",
            "key": "permissions",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          {
            "description": "optional dictionary of key-value pairs that can be used to store arbitrary metadata about this role. This metadata can be used to filter role using query parameters with attr_ prefix, currently supports only 'equals' operator",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "RoleUpdateAttributes"
              }
            }
          },
          {
            "description": "list of role keys that define what roles this role extends. In other words: this role will automatically inherit all the permissions of the given roles in this list.",
            "key": "extends",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "RolesBlock": {
      "description": "Resource roles definition block, defines all the roles on the resource.",
      "name": "RolesBlock",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "Statistics": {
      "name": "Statistics",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "roles",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "key": "users",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "key": "policies",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "key": "resources",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "key": "tenants",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          {
            "key": "has_decision_logs",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "boolean"
              }
            }
          },
          {
            "key": "members",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "OrgMemberReadWithGrants"
              }
            }
          }
        ]
      }
    },
    "TenantCreateAttributes": {
      "description": "Arbitraty tenant attributes that will be used to enforce attribute-based access control policies.",
      "name": "TenantCreateAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "TenantCreate": {
      "name": "TenantCreate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A unique id by which Permit will identify the tenant. The tenant key must be url-friendly (slugified).",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-Za-z0-9\\-_]+$"
              }
            }
          },
          {
            "description": "A descriptive name for the tenant",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "an optional longer description of the tenant",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Arbitraty tenant attributes that will be used to enforce attribute-based access control policies.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TenantCreateAttributes"
              }
            }
          }
        ]
      }
    },
    "TenantCreateBulkOperation": {
      "name": "TenantCreateBulkOperation",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "operations",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "TenantCreate"
              }
            }
          }
        ]
      }
    },
    "TenantCreateBulkOperationResult": {
      "name": "TenantCreateBulkOperationResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "TenantDeleteBulkOperation": {
      "name": "TenantDeleteBulkOperation",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "idents",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "TenantDeleteBulkOperationResult": {
      "name": "TenantDeleteBulkOperationResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "TenantReadAttributes": {
      "description": "Arbitraty tenant attributes that will be used to enforce attribute-based access control policies.",
      "name": "TenantReadAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "TenantRead": {
      "name": "TenantRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A unique id by which Permit will identify the tenant. The tenant key must be url-friendly (slugified).",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique id of the tenant",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the organization that the tenant belongs to.",
            "key": "organization_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the project that the tenant belongs to.",
            "key": "project_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the environment that the tenant belongs to.",
            "key": "environment_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Date and time when the tenant was created (ISO_8601 format).",
            "key": "created_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date and time when the tenant was last updated/modified (ISO_8601 format).",
            "key": "updated_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "Date and time when the tenant was last active (ISO_8601 format). In other words, this is the last time a permission check was done on a resource belonging to this tenant.",
            "key": "last_action_at",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "description": "A descriptive name for the tenant",
            "key": "name",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "an optional longer description of the tenant",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Arbitraty tenant attributes that will be used to enforce attribute-based access control policies.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TenantReadAttributes"
              }
            }
          }
        ]
      }
    },
    "TenantUpdateAttributes": {
      "description": "Arbitraty tenant attributes that will be used to enforce attribute-based access control policies.",
      "name": "TenantUpdateAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "TenantUpdate": {
      "name": "TenantUpdate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A descriptive name for the tenant",
            "key": "name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "an optional longer description of the tenant",
            "key": "description",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Arbitraty tenant attributes that will be used to enforce attribute-based access control policies.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "TenantUpdateAttributes"
              }
            }
          }
        ]
      }
    },
    "UserCreateAttributes": {
      "description": "Arbitrary user attributes that will be used to enforce attribute-based access control policies.",
      "name": "UserCreateAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "UserCreate": {
      "name": "UserCreate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A unique id by which Permit will identify the user for permission checks.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "regex": "^[A-Za-z0-9|@+\\-\\._]+$"
              }
            }
          },
          {
            "description": "The email of the user. If synced, will be unique inside the environment.",
            "key": "email",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "email"
                }
              }
            }
          },
          {
            "description": "First name of the user.",
            "key": "first_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Last name of the user.",
            "key": "last_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Arbitrary user attributes that will be used to enforce attribute-based access control policies.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "UserCreateAttributes"
              }
            }
          }
        ]
      }
    },
    "UserCreateBulkOperation": {
      "name": "UserCreateBulkOperation",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "operations",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "UserCreate"
              }
            }
          }
        ]
      }
    },
    "UserCreateBulkOperationResult": {
      "name": "UserCreateBulkOperationResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "UserDeleteBulkOperation": {
      "name": "UserDeleteBulkOperation",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "idents",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ]
      }
    },
    "UserDeleteBulkOperationResult": {
      "name": "UserDeleteBulkOperationResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "UserInTenantStatus": {
      "description": "An enumeration.",
      "name": "UserInTenantStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "active"
          },
          {
            "value": "pending"
          }
        ]
      }
    },
    "UserInTenant": {
      "name": "UserInTenant",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The tenant key which the user is associated with",
            "key": "tenant",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "List of roles assigned to the user in that tenant",
            "key": "roles",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Whether the user has signed in or not",
            "key": "status",
            "valueType": {
              "type": "id",
              "value": "UserInTenantStatus"
            }
          }
        ]
      }
    },
    "UserReadAttributes": {
      "description": "Arbitrary user attributes that will be used to enforce attribute-based access control policies.",
      "name": "UserReadAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "UserRead": {
      "name": "UserRead",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "A unique id by which Permit will identify the user for permission checks.",
            "key": "key",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "Unique id of the user",
            "key": "id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the organization that the user belongs to.",
            "key": "organization_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the project that the user belongs to.",
            "key": "project_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "Unique id of the environment that the user belongs to.",
            "key": "environment_id",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "key": "associated_tenants",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "UserInTenant"
                }
              }
            }
          },
          {
            "key": "roles",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "UserRole"
                }
              }
            },
            "availability": "Deprecated"
          },
          {
            "description": "The email of the user. If synced, will be unique inside the environment.",
            "key": "email",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "email"
                }
              }
            }
          },
          {
            "description": "First name of the user.",
            "key": "first_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Last name of the user.",
            "key": "last_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Arbitrary user attributes that will be used to enforce attribute-based access control policies.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "UserReadAttributes"
              }
            }
          }
        ]
      }
    },
    "UserReplaceBulkOperation": {
      "name": "UserReplaceBulkOperation",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "operations",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "UserCreate"
              }
            }
          }
        ]
      }
    },
    "UserReplaceBulkOperationResult": {
      "name": "UserReplaceBulkOperationResult",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "UserRole": {
      "name": "UserRole",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "the role that is assigned",
            "key": "role",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "the tenant the role is associated with",
            "key": "tenant",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "UserRoleCreate": {
      "name": "UserRoleCreate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "the role that will be assigned (accepts either the role id or the role key)",
            "key": "role",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "the tenant the role is associated with (accepts either the tenant id or the tenant key)",
            "key": "tenant",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "UserRoleRemove": {
      "name": "UserRoleRemove",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "the role that will be unassigned (accepts either the role id or the role key)",
            "key": "role",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "description": "the tenant the role is associated with (accepts either the tenant id or the tenant key)",
            "key": "tenant",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "UserStatus": {
      "description": "An enumeration.",
      "name": "UserStatus",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "active"
          },
          {
            "value": "pending"
          }
        ]
      }
    },
    "UserUpdateAttributes": {
      "description": "Arbitrary user attributes that will be used to enforce attribute-based access control policies.",
      "name": "UserUpdateAttributes",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": []
      }
    },
    "UserUpdate": {
      "name": "UserUpdate",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "description": "The email of the user. If synced, will be unique inside the environment.",
            "key": "email",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string",
                  "format": "email"
                }
              }
            }
          },
          {
            "description": "First name of the user.",
            "key": "first_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Last name of the user.",
            "key": "last_name",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Arbitrary user attributes that will be used to enforce attribute-based access control policies.",
            "key": "attributes",
            "valueType": {
              "type": "optional",
              "itemType": {
                "type": "id",
                "value": "UserUpdateAttributes"
              }
            }
          }
        ]
      }
    },
    "ValidationErrorLocItems0": {
      "name": "ValidationErrorLocItems0",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "string"
          }
        }
      }
    },
    "ValidationErrorLocItems1": {
      "name": "ValidationErrorLocItems1",
      "shape": {
        "type": "alias",
        "value": {
          "type": "primitive",
          "value": {
            "type": "integer"
          }
        }
      }
    },
    "ValidationErrorLocItems": {
      "name": "ValidationErrorLocItems",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "ValidationErrorLocItems0",
            "type": {
              "type": "id",
              "value": "ValidationErrorLocItems0"
            }
          },
          {
            "typeName": "ValidationErrorLocItems1",
            "type": {
              "type": "id",
              "value": "ValidationErrorLocItems1"
            }
          }
        ]
      }
    },
    "ValidationError": {
      "name": "ValidationError",
      "shape": {
        "type": "object",
        "extends": [],
        "properties": [
          {
            "key": "loc",
            "valueType": {
              "type": "list",
              "itemType": {
                "type": "id",
                "value": "ValidationErrorLocItems"
              }
            }
          },
          {
            "key": "msg",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          },
          {
            "key": "type",
            "valueType": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "ResourcesListResourcesResponse2001": {
      "name": "ResourcesListResourcesResponse2001",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "ResourceRead"
          }
        }
      }
    },
    "Resources_list_resources_Response_200": {
      "name": "Resources_list_resources_Response_200",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "PaginatedResult_ResourceRead_",
            "type": {
              "type": "id",
              "value": "PaginatedResult_ResourceRead_"
            }
          },
          {
            "typeName": "ResourcesListResourcesResponse2001",
            "type": {
              "type": "id",
              "value": "ResourcesListResourcesResponse2001"
            }
          }
        ]
      }
    },
    "RolesListRolesResponse2001": {
      "name": "RolesListRolesResponse2001",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "RoleRead"
          }
        }
      }
    },
    "Roles_list_roles_Response_200": {
      "name": "Roles_list_roles_Response_200",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "PaginatedResult_RoleRead_",
            "type": {
              "type": "id",
              "value": "PaginatedResult_RoleRead_"
            }
          },
          {
            "typeName": "RolesListRolesResponse2001",
            "type": {
              "type": "id",
              "value": "RolesListRolesResponse2001"
            }
          }
        ]
      }
    },
    "V2SchemaProjIdEnvIdConditionSetsGetParametersSchema": {
      "description": "An enumeration.",
      "name": "V2SchemaProjIdEnvIdConditionSetsGetParametersSchema",
      "shape": {
        "type": "enum",
        "values": [
          {
            "value": "userset"
          },
          {
            "value": "resourceset"
          }
        ]
      }
    },
    "ConditionSetsListConditionSetsResponse2001": {
      "name": "ConditionSetsListConditionSetsResponse2001",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "ConditionSetRead"
          }
        }
      }
    },
    "Condition Sets_list_condition_sets_Response_200": {
      "name": "Condition Sets_list_condition_sets_Response_200",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "PaginatedResult_ConditionSetRead_",
            "type": {
              "type": "id",
              "value": "PaginatedResult_ConditionSetRead_"
            }
          },
          {
            "typeName": "ConditionSetsListConditionSetsResponse2001",
            "type": {
              "type": "id",
              "value": "ConditionSetsListConditionSetsResponse2001"
            }
          }
        ]
      }
    },
    "TenantsListTenantsResponse2001": {
      "name": "TenantsListTenantsResponse2001",
      "shape": {
        "type": "alias",
        "value": {
          "type": "list",
          "itemType": {
            "type": "id",
            "value": "TenantRead"
          }
        }
      }
    },
    "Tenants_list_tenants_Response_200": {
      "name": "Tenants_list_tenants_Response_200",
      "shape": {
        "type": "undiscriminatedUnion",
        "variants": [
          {
            "typeName": "PaginatedResult_TenantRead_",
            "type": {
              "type": "id",
              "value": "PaginatedResult_TenantRead_"
            }
          },
          {
            "typeName": "TenantsListTenantsResponse2001",
            "type": {
              "type": "id",
              "value": "TenantsListTenantsResponse2001"
            }
          }
        ]
      }
    }
  },
  "subpackages": {
    "subpackage_organizations": {
      "subpackageId": "subpackage_organizations",
      "name": "organizations",
      "endpoints": [
        {
          "auth": true,
          "description": "Lists all the organizations that can be accessed by the\nauthenticated actor (i.e: human team member or api key).",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "list_organizations",
          "originalEndpointId": "Organizations.list_organizations",
          "name": "List Organizations",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/orgs"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Page number of the results to fetch, starting at 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                  }
                }
              }
            },
            {
              "description": "The number of results per page (max 100).",
              "key": "per_page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 30
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "OrganizationRead"
                }
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/orgs",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "key": "foo",
                    "id": "foo",
                    "is_enterprise": true,
                    "created_at": "foo",
                    "updated_at": "foo",
                    "name": "foo",
                    "settings": {}
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "key": "foo",
                    "id": "foo",
                    "is_enterprise": true,
                    "created_at": "foo",
                    "updated_at": "foo",
                    "name": "foo",
                    "settings": {}
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Creates a new organization that will be owned by the\nauthenticated actor (i.e: human team member or api key).",
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "create_organization",
          "originalEndpointId": "Organizations.create_organization",
          "name": "Create Organization",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/orgs"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "OrganizationCreate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "OrganizationReadWithAPIKey"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/orgs",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "key": "foo",
                "name": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "name": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "id": "foo",
                  "is_enterprise": true,
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "settings": {},
                  "api_key_id": "foo",
                  "api_key_secret": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "id": "foo",
                  "is_enterprise": true,
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "settings": {},
                  "api_key_id": "foo",
                  "api_key_secret": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets a single organization (Permit.io account) matching the given org_id,\nif such org exists and can be accessed by the authenticated actor.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "get_organization",
          "originalEndpointId": "Organizations.get_organization",
          "name": "Get Organization",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \"slug\").",
                "key": "org_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/orgs/"
              },
              {
                "type": "pathParameter",
                "value": "org_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "OrganizationRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/orgs/",
              "pathParameters": {
                "org_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "id": "foo",
                  "is_enterprise": true,
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "settings": {}
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "id": "foo",
                  "is_enterprise": true,
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "settings": {}
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes an organization (Permit.io account) and all its related data.",
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "delete_organization",
          "originalEndpointId": "Organizations.delete_organization",
          "name": "Delete Organization",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \"slug\").",
                "key": "org_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/orgs/"
              },
              {
                "type": "pathParameter",
                "value": "org_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/orgs/",
              "pathParameters": {
                "org_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Updates the organization's profile.",
          "method": "PATCH",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "update_organization",
          "originalEndpointId": "Organizations.update_organization",
          "name": "Update Organization",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the organization, or the URL-friendly key of the organization (i.e: the \"slug\").",
                "key": "org_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/orgs/"
              },
              {
                "type": "pathParameter",
                "value": "org_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "OrganizationUpdate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "OrganizationRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/orgs/",
              "pathParameters": {
                "org_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "id": "foo",
                  "is_enterprise": true,
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "settings": {}
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "id": "foo",
                  "is_enterprise": true,
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "settings": {}
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets a single organization (Permit.io account) matching the given org_id,\nif such org exists and can be accessed by the authenticated actor.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "get_active_organization",
          "originalEndpointId": "Organizations.get_active_organization",
          "name": "Get Active Organization",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/orgs/active/org"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "OrganizationRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/orgs/active/org",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "id": "foo",
                  "is_enterprise": true,
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "settings": {}
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "id": "foo",
                  "is_enterprise": true,
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "settings": {}
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_projects": {
      "subpackageId": "subpackage_projects",
      "name": "projects",
      "endpoints": [
        {
          "auth": true,
          "description": "Lists all the projects under the active organization.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "list_projects",
          "originalEndpointId": "Projects.list_projects",
          "name": "List Projects",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/projects"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Page number of the results to fetch, starting at 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                  }
                }
              }
            },
            {
              "description": "The number of results per page (max 100).",
              "key": "per_page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 30
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ProjectRead"
                }
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/projects",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "key": "foo",
                    "urn_namespace": "foo",
                    "id": "foo",
                    "organization_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo",
                    "name": "foo",
                    "description": "foo",
                    "settings": {},
                    "active_policy_repo_id": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "key": "foo",
                    "urn_namespace": "foo",
                    "id": "foo",
                    "organization_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo",
                    "name": "foo",
                    "description": "foo",
                    "settings": {},
                    "active_policy_repo_id": "foo"
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Creates a new project under the active organization.",
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "create_project",
          "originalEndpointId": "Projects.create_project",
          "name": "Create Project",
          "path": {
            "pathParameters": [],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/projects"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ProjectCreate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ProjectRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/projects",
              "pathParameters": {},
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "key": "foo",
                "name": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "name": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "urn_namespace": "foo",
                  "id": "foo",
                  "organization_id": "foo",
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "description": "foo",
                  "settings": {},
                  "active_policy_repo_id": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "urn_namespace": "foo",
                  "id": "foo",
                  "organization_id": "foo",
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "description": "foo",
                  "settings": {},
                  "active_policy_repo_id": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets a single project matching the given proj_id, if such project exists.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "get_project",
          "originalEndpointId": "Projects.get_project",
          "name": "Get Project",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/projects/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ProjectRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/projects/",
              "pathParameters": {
                "proj_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "urn_namespace": "foo",
                  "id": "foo",
                  "organization_id": "foo",
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "description": "foo",
                  "settings": {},
                  "active_policy_repo_id": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "urn_namespace": "foo",
                  "id": "foo",
                  "organization_id": "foo",
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "description": "foo",
                  "settings": {},
                  "active_policy_repo_id": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes the project and all its related data.",
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "delete_project",
          "originalEndpointId": "Projects.delete_project",
          "name": "Delete Project",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/projects/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/projects/",
              "pathParameters": {
                "proj_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Updates the project.",
          "method": "PATCH",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "update_project",
          "originalEndpointId": "Projects.update_project",
          "name": "Update Project",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/projects/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ProjectUpdate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ProjectRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/projects/",
              "pathParameters": {
                "proj_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "urn_namespace": "foo",
                  "id": "foo",
                  "organization_id": "foo",
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "description": "foo",
                  "settings": {},
                  "active_policy_repo_id": "foo"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "urn_namespace": "foo",
                  "id": "foo",
                  "organization_id": "foo",
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "description": "foo",
                  "settings": {},
                  "active_policy_repo_id": "foo"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_environments": {
      "subpackageId": "subpackage_environments",
      "name": "environments",
      "endpoints": [
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "stats_environments",
          "originalEndpointId": "Environments.stats_environments",
          "name": "Stats Environments",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/projects/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/envs/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/stats"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "EnvironmentStats"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/projects/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "id": "foo",
                  "organization_id": "foo",
                  "project_id": "foo",
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "description": "foo",
                  "custom_branch_name": "foo",
                  "jwks": {
                    "keys": [
                      {}
                    ]
                  },
                  "settings": {},
                  "pdp_configs": [
                    {
                      "id": "foo",
                      "name": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "client_secret": "foo"
                    }
                  ],
                  "stats": {
                    "roles": 42,
                    "users": 42,
                    "policies": 42,
                    "resources": 42,
                    "tenants": 42,
                    "has_decision_logs": true,
                    "members": [
                      {
                        "id": "foo",
                        "email": "foo",
                        "email_verified": true,
                        "name": "foo",
                        "given_name": "foo",
                        "family_name": "foo",
                        "picture": "foo",
                        "is_superuser": true,
                        "is_onboarding": true,
                        "onboarding_step": "create_organization",
                        "created_at": "foo",
                        "last_login": "foo",
                        "last_ip": "0.0.0.0",
                        "logins_count": 0,
                        "identities": [
                          {
                            "user_id": "foo",
                            "provider": "foo",
                            "sub": "foo",
                            "email": "foo",
                            "email_verified": true,
                            "auth0_info": {}
                          }
                        ],
                        "invite": {
                          "member_id": "foo",
                          "email": "foo",
                          "role": "admin",
                          "id": "foo",
                          "organization_id": "foo",
                          "invite_code": "foo",
                          "created_at": "foo",
                          "status": "pending",
                          "failed_reason": "foo"
                        },
                        "settings": {},
                        "grants": [
                          {
                            "organization_id": "foo",
                            "project_id": "foo",
                            "environment_id": "foo",
                            "object_type": "org",
                            "access_level": "admin",
                            "organization_key": "foo",
                            "project_key": "foo",
                            "environment_key": "foo",
                            "organization_name": "foo",
                            "project_name": "foo",
                            "environment_name": "foo"
                          }
                        ]
                      }
                    ]
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "id": "foo",
                  "organization_id": "foo",
                  "project_id": "foo",
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "description": "foo",
                  "custom_branch_name": "foo",
                  "jwks": {
                    "keys": [
                      {}
                    ]
                  },
                  "settings": {},
                  "pdp_configs": [
                    {
                      "id": "foo",
                      "name": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "client_secret": "foo"
                    }
                  ],
                  "stats": {
                    "roles": 42,
                    "users": 42,
                    "policies": 42,
                    "resources": 42,
                    "tenants": 42,
                    "has_decision_logs": true,
                    "members": [
                      {
                        "id": "foo",
                        "email": "foo",
                        "email_verified": true,
                        "name": "foo",
                        "given_name": "foo",
                        "family_name": "foo",
                        "picture": "foo",
                        "is_superuser": true,
                        "is_onboarding": true,
                        "onboarding_step": "create_organization",
                        "created_at": "foo",
                        "last_login": "foo",
                        "last_ip": "0.0.0.0",
                        "logins_count": 0,
                        "identities": [
                          {
                            "user_id": "foo",
                            "provider": "foo",
                            "sub": "foo",
                            "email": "foo",
                            "email_verified": true,
                            "auth0_info": {}
                          }
                        ],
                        "invite": {
                          "member_id": "foo",
                          "email": "foo",
                          "role": "admin",
                          "id": "foo",
                          "organization_id": "foo",
                          "invite_code": "foo",
                          "created_at": "foo",
                          "status": "pending",
                          "failed_reason": "foo"
                        },
                        "settings": {},
                        "grants": [
                          {
                            "organization_id": "foo",
                            "project_id": "foo",
                            "environment_id": "foo",
                            "object_type": "org",
                            "access_level": "admin",
                            "organization_key": "foo",
                            "project_key": "foo",
                            "environment_key": "foo",
                            "organization_name": "foo",
                            "project_name": "foo",
                            "environment_name": "foo"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Lists all the environments under a given project.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "list_environments",
          "originalEndpointId": "Environments.list_environments",
          "name": "List Environments",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/projects/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/envs"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Page number of the results to fetch, starting at 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                  }
                }
              }
            },
            {
              "description": "The number of results per page (max 100).",
              "key": "per_page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 30
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "EnvironmentRead"
                }
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/projects/",
              "pathParameters": {
                "proj_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "key": "foo",
                    "id": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo",
                    "name": "foo",
                    "description": "foo",
                    "custom_branch_name": "foo",
                    "jwks": {
                      "keys": [
                        {}
                      ]
                    },
                    "settings": {}
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "key": "foo",
                    "id": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo",
                    "name": "foo",
                    "description": "foo",
                    "custom_branch_name": "foo",
                    "jwks": {
                      "keys": [
                        {}
                      ]
                    },
                    "settings": {}
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Creates a new environment under a given project.",
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "create_environment",
          "originalEndpointId": "Environments.create_environment",
          "name": "Create Environment",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/projects/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/envs"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "EnvironmentCreate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "EnvironmentRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/projects/",
              "pathParameters": {
                "proj_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "key": "foo",
                "name": "foo"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "name": "foo"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "id": "foo",
                  "organization_id": "foo",
                  "project_id": "foo",
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "description": "foo",
                  "custom_branch_name": "foo",
                  "jwks": {
                    "keys": [
                      {}
                    ]
                  },
                  "settings": {}
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "id": "foo",
                  "organization_id": "foo",
                  "project_id": "foo",
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "description": "foo",
                  "custom_branch_name": "foo",
                  "jwks": {
                    "keys": [
                      {}
                    ]
                  },
                  "settings": {}
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets a single environment matching the given env_id, if such environment exists.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "get_environment",
          "originalEndpointId": "Environments.get_environment",
          "name": "Get Environment",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/projects/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/envs/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "EnvironmentRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/projects/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "id": "foo",
                  "organization_id": "foo",
                  "project_id": "foo",
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "description": "foo",
                  "custom_branch_name": "foo",
                  "jwks": {
                    "keys": [
                      {}
                    ]
                  },
                  "settings": {}
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "id": "foo",
                  "organization_id": "foo",
                  "project_id": "foo",
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "description": "foo",
                  "custom_branch_name": "foo",
                  "jwks": {
                    "keys": [
                      {}
                    ]
                  },
                  "settings": {}
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes an environment and all its related data.",
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "delete_environment",
          "originalEndpointId": "Environments.delete_environment",
          "name": "Delete Environment",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/projects/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/envs/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/projects/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Updates the environment.",
          "method": "PATCH",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "update_environment",
          "originalEndpointId": "Environments.update_environment",
          "name": "Update Environment",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/projects/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/envs/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "EnvironmentUpdate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "EnvironmentRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/projects/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "id": "foo",
                  "organization_id": "foo",
                  "project_id": "foo",
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "description": "foo",
                  "custom_branch_name": "foo",
                  "jwks": {
                    "keys": [
                      {}
                    ]
                  },
                  "settings": {}
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "id": "foo",
                  "organization_id": "foo",
                  "project_id": "foo",
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "description": "foo",
                  "custom_branch_name": "foo",
                  "jwks": {
                    "keys": [
                      {}
                    ]
                  },
                  "settings": {}
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Copy environment\n\nThis endpoint either duplicates an existing environment to a new environment\nin the same project, or copies from an existing environment to another\nexisting environment.\n\nThe `scope` object controls which objects will be copied to the target\nenvironment.\n\nTo clone to a new environment, the user must have write permissions\nto the containing project. To clone into an existing environment,\nthe user must have write permissions to the target environment.\n\nCopying environments across projects or organizations is not\nallowed.",
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "copy_environment",
          "originalEndpointId": "Environments.copy_environment",
          "name": "Copy Environment",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/projects/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/envs/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/copy"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "EnvironmentCopy"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "EnvironmentRead"
              }
            },
            "statusCode": 201,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/projects/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "target_env": {}
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "target_env": {}
                }
              },
              "responseStatusCode": 201,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "id": "foo",
                  "organization_id": "foo",
                  "project_id": "foo",
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "description": "foo",
                  "custom_branch_name": "foo",
                  "jwks": {
                    "keys": [
                      {}
                    ]
                  },
                  "settings": {}
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "foo",
                  "id": "foo",
                  "organization_id": "foo",
                  "project_id": "foo",
                  "created_at": "foo",
                  "updated_at": "foo",
                  "name": "foo",
                  "description": "foo",
                  "custom_branch_name": "foo",
                  "jwks": {
                    "keys": [
                      {}
                    ]
                  },
                  "settings": {}
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_resources": {
      "subpackageId": "subpackage_resources",
      "name": "resources",
      "endpoints": [
        {
          "auth": true,
          "description": "Lists all the resources defined in your schema.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "list_resources",
          "originalEndpointId": "Resources.list_resources",
          "name": "List Resources",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Text search for the resources name or key",
              "key": "search",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Whether to include or exclude built-in resources, default is False",
              "key": "include_built_in",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "Include total count in response",
              "key": "include_total_count",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "Page number of the results to fetch, starting at 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                  }
                }
              }
            },
            {
              "description": "The number of results per page (max 100).",
              "key": "per_page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 30
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Resources_list_resources_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "key": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "created_at": "foo",
                      "updated_at": "foo",
                      "name": "foo",
                      "urn": "foo",
                      "description": "foo",
                      "actions": {},
                      "attributes": {},
                      "action_groups": {}
                    }
                  ],
                  "total_count": 42,
                  "page_count": 0
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "key": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "created_at": "foo",
                      "updated_at": "foo",
                      "name": "foo",
                      "urn": "foo",
                      "description": "foo",
                      "actions": {},
                      "attributes": {},
                      "action_groups": {}
                    }
                  ],
                  "total_count": 42,
                  "page_count": 0
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Creates a new resource (a type of object you may protect with permissions).",
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "create_resource",
          "originalEndpointId": "Resources.create_resource",
          "name": "Create Resource",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ResourceCreate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "key": "repository",
                "name": "Repository",
                "actions": {
                  "clone": {},
                  "read": {},
                  "push": {}
                },
                "attributes": {
                  "created": {
                    "type": "time",
                    "description": "the time (timestamp) the repository was created"
                  },
                  "private": {
                    "type": "bool",
                    "description": "whether the repo is private (if false, the repo is public)"
                  }
                }
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "key": "repository",
                  "name": "Repository",
                  "actions": {
                    "clone": {},
                    "read": {},
                    "push": {}
                  },
                  "attributes": {
                    "created": {
                      "type": "time",
                      "description": "the time (timestamp) the repository was created"
                    },
                    "private": {
                      "type": "bool",
                      "description": "whether the repo is private (if false, the repo is public)"
                    }
                  }
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "repository",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "name": "Repository",
                  "urn": "prn:github:scm:repository",
                  "description": "a git repository stored on github",
                  "actions": {
                    "clone": {
                      "id": "90e21d70-2b1b-42f0-b492-8fd69c1d79d1"
                    },
                    "read": {
                      "id": "2bc27751-6115-43c0-b68c-928cb46e34bc"
                    },
                    "push": {
                      "id": "e06da336-6e03-41d6-a495-40b0d7537b2a"
                    }
                  },
                  "attributes": {
                    "created": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f11",
                      "type": "time",
                      "description": "the time (timestamp) the repository was created"
                    },
                    "private": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f22",
                      "type": "bool",
                      "description": "whether the repo is private (if false, the repo is public)"
                    }
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "repository",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "name": "Repository",
                  "urn": "prn:github:scm:repository",
                  "description": "a git repository stored on github",
                  "actions": {
                    "clone": {
                      "id": "90e21d70-2b1b-42f0-b492-8fd69c1d79d1"
                    },
                    "read": {
                      "id": "2bc27751-6115-43c0-b68c-928cb46e34bc"
                    },
                    "push": {
                      "id": "e06da336-6e03-41d6-a495-40b0d7537b2a"
                    }
                  },
                  "attributes": {
                    "created": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f11",
                      "type": "time",
                      "description": "the time (timestamp) the repository was created"
                    },
                    "private": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f22",
                      "type": "bool",
                      "description": "whether the repo is private (if false, the repo is public)"
                    }
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets a single resource, if such resource exists.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "get_resource",
          "originalEndpointId": "Resources.get_resource",
          "name": "Get Resource",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "repository",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "name": "Repository",
                  "urn": "prn:github:scm:repository",
                  "description": "a git repository stored on github",
                  "actions": {
                    "clone": {
                      "id": "90e21d70-2b1b-42f0-b492-8fd69c1d79d1"
                    },
                    "read": {
                      "id": "2bc27751-6115-43c0-b68c-928cb46e34bc"
                    },
                    "push": {
                      "id": "e06da336-6e03-41d6-a495-40b0d7537b2a"
                    }
                  },
                  "attributes": {
                    "created": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f11",
                      "type": "time",
                      "description": "the time (timestamp) the repository was created"
                    },
                    "private": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f22",
                      "type": "bool",
                      "description": "whether the repo is private (if false, the repo is public)"
                    }
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "repository",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "name": "Repository",
                  "urn": "prn:github:scm:repository",
                  "description": "a git repository stored on github",
                  "actions": {
                    "clone": {
                      "id": "90e21d70-2b1b-42f0-b492-8fd69c1d79d1"
                    },
                    "read": {
                      "id": "2bc27751-6115-43c0-b68c-928cb46e34bc"
                    },
                    "push": {
                      "id": "e06da336-6e03-41d6-a495-40b0d7537b2a"
                    }
                  },
                  "attributes": {
                    "created": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f11",
                      "type": "time",
                      "description": "the time (timestamp) the repository was created"
                    },
                    "private": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f22",
                      "type": "bool",
                      "description": "whether the repo is private (if false, the repo is public)"
                    }
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Completely replaces the resource definition.\n\n- If the resource key is changed, all role and permissions assignments for the the resource will be revoked.\n- If the resource key is unchanged, but some actions are removed or renamed from the resource definition,\nrole and permissions assignments for these actions will be revoked.\n\nTODO: we need to decide if we are auto-revoking, or if we are rejecting the PUT completely while there are permissions that can be affected.",
          "method": "PUT",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "replace_resource",
          "originalEndpointId": "Resources.replace_resource",
          "name": "Replace Resource",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ResourceReplace"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "name": "foo",
                "actions": {}
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "foo",
                  "actions": {}
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "repository",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "name": "Repository",
                  "urn": "prn:github:scm:repository",
                  "description": "a git repository stored on github",
                  "actions": {
                    "clone": {
                      "id": "90e21d70-2b1b-42f0-b492-8fd69c1d79d1"
                    },
                    "read": {
                      "id": "2bc27751-6115-43c0-b68c-928cb46e34bc"
                    },
                    "push": {
                      "id": "e06da336-6e03-41d6-a495-40b0d7537b2a"
                    }
                  },
                  "attributes": {
                    "created": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f11",
                      "type": "time",
                      "description": "the time (timestamp) the repository was created"
                    },
                    "private": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f22",
                      "type": "bool",
                      "description": "whether the repo is private (if false, the repo is public)"
                    }
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "repository",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "name": "Repository",
                  "urn": "prn:github:scm:repository",
                  "description": "a git repository stored on github",
                  "actions": {
                    "clone": {
                      "id": "90e21d70-2b1b-42f0-b492-8fd69c1d79d1"
                    },
                    "read": {
                      "id": "2bc27751-6115-43c0-b68c-928cb46e34bc"
                    },
                    "push": {
                      "id": "e06da336-6e03-41d6-a495-40b0d7537b2a"
                    }
                  },
                  "attributes": {
                    "created": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f11",
                      "type": "time",
                      "description": "the time (timestamp) the repository was created"
                    },
                    "private": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f22",
                      "type": "bool",
                      "description": "whether the repo is private (if false, the repo is public)"
                    }
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes the resource and all its related data.",
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "delete_resource",
          "originalEndpointId": "Resources.delete_resource",
          "name": "Delete Resource",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Partially updates the resource definition.\nFields that will be provided will be completely overwritten.",
          "method": "PATCH",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "update_resource",
          "originalEndpointId": "Resources.update_resource",
          "name": "Update Resource",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ResourceUpdate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "repository",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "name": "Repository",
                  "urn": "prn:github:scm:repository",
                  "description": "a git repository stored on github",
                  "actions": {
                    "clone": {
                      "id": "90e21d70-2b1b-42f0-b492-8fd69c1d79d1"
                    },
                    "read": {
                      "id": "2bc27751-6115-43c0-b68c-928cb46e34bc"
                    },
                    "push": {
                      "id": "e06da336-6e03-41d6-a495-40b0d7537b2a"
                    }
                  },
                  "attributes": {
                    "created": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f11",
                      "type": "time",
                      "description": "the time (timestamp) the repository was created"
                    },
                    "private": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f22",
                      "type": "bool",
                      "description": "whether the repo is private (if false, the repo is public)"
                    }
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "repository",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "name": "Repository",
                  "urn": "prn:github:scm:repository",
                  "description": "a git repository stored on github",
                  "actions": {
                    "clone": {
                      "id": "90e21d70-2b1b-42f0-b492-8fd69c1d79d1"
                    },
                    "read": {
                      "id": "2bc27751-6115-43c0-b68c-928cb46e34bc"
                    },
                    "push": {
                      "id": "e06da336-6e03-41d6-a495-40b0d7537b2a"
                    }
                  },
                  "attributes": {
                    "created": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f11",
                      "type": "time",
                      "description": "the time (timestamp) the repository was created"
                    },
                    "private": {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f22",
                      "type": "bool",
                      "description": "whether the repo is private (if false, the repo is public)"
                    }
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_resourceActions": {
      "subpackageId": "subpackage_resourceActions",
      "name": "resourceActions",
      "endpoints": [
        {
          "auth": true,
          "description": "Lists all the actions defined on the resource.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "list_resource_actions",
          "originalEndpointId": "Resource Actions.list_resource_actions",
          "name": "List Resource Actions",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/actions"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Page number of the results to fetch, starting at 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                  }
                }
              }
            },
            {
              "description": "The number of results per page (max 100).",
              "key": "per_page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 30
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ResourceActionRead"
                }
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "name": "foo",
                    "description": "foo",
                    "attributes": {},
                    "key": "foo",
                    "id": "foo",
                    "permission_name": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "environment_id": "foo",
                    "resource_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "name": "foo",
                    "description": "foo",
                    "attributes": {},
                    "key": "foo",
                    "id": "foo",
                    "permission_name": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "environment_id": "foo",
                    "resource_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo"
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Creates a new action that can affect the resource.",
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "create_resource_action",
          "originalEndpointId": "Resource Actions.create_resource_action",
          "name": "Create Resource Action",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/actions"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ResourceActionCreate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceActionRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "key": "read",
                "name": "read",
                "description": "read a document"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "key": "read",
                  "name": "read",
                  "description": "read a document"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "read",
                  "description": "read a document",
                  "key": "read",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "permission_name": "document:read",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "read",
                  "description": "read a document",
                  "key": "read",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "permission_name": "document:read",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets a single action defined on the resource, if such action exists.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "get_resource_action",
          "originalEndpointId": "Resource Actions.get_resource_action",
          "name": "Get Resource Action",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the action, or the URL-friendly key of the action (i.e: the \"slug\").",
                "key": "action_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/actions/"
              },
              {
                "type": "pathParameter",
                "value": "action_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceActionRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo",
                "action_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "read",
                  "description": "read a document",
                  "key": "read",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "permission_name": "document:read",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "read",
                  "description": "read a document",
                  "key": "read",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "permission_name": "document:read",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes the action and all its related data.\nThis includes any permissions granted to perform the action.",
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "delete_resource_action",
          "originalEndpointId": "Resource Actions.delete_resource_action",
          "name": "Delete Resource Action",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the action, or the URL-friendly key of the action (i.e: the \"slug\").",
                "key": "action_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/actions/"
              },
              {
                "type": "pathParameter",
                "value": "action_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo",
                "action_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Partially updates the action defined on a resource.\nFields that will be provided will be completely overwritten.",
          "method": "PATCH",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "update_resource_action",
          "originalEndpointId": "Resource Actions.update_resource_action",
          "name": "Update Resource Action",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the action, or the URL-friendly key of the action (i.e: the \"slug\").",
                "key": "action_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/actions/"
              },
              {
                "type": "pathParameter",
                "value": "action_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ResourceActionUpdate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceActionRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo",
                "action_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "description": "read a document"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "description": "read a document"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "read",
                  "description": "read a document",
                  "key": "read",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "permission_name": "document:read",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "read",
                  "description": "read a document",
                  "key": "read",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "permission_name": "document:read",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_resourceActionGroups": {
      "subpackageId": "subpackage_resourceActionGroups",
      "name": "resourceActionGroups",
      "endpoints": [
        {
          "auth": true,
          "description": "Lists all the action groups defined on the resource.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "list_resource_action_groups",
          "originalEndpointId": "Resource Action Groups.list_resource_action_groups",
          "name": "List Resource Action Groups",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/action_groups"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Page number of the results to fetch, starting at 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                  }
                }
              }
            },
            {
              "description": "The number of results per page (max 100).",
              "key": "per_page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 30
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ResourceActionGroupRead"
                }
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "name": "foo",
                    "description": "foo",
                    "attributes": {},
                    "actions": [
                      "foo"
                    ],
                    "key": "foo",
                    "id": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "environment_id": "foo",
                    "resource_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "name": "foo",
                    "description": "foo",
                    "attributes": {},
                    "actions": [
                      "foo"
                    ],
                    "key": "foo",
                    "id": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "environment_id": "foo",
                    "resource_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo"
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Creates a new action group that can affect the resource.",
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "create_resource_action_group",
          "originalEndpointId": "Resource Action Groups.create_resource_action_group",
          "name": "Create Resource Action Group",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/action_groups"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ResourceActionGroupCreate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceActionGroupRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "key": "writer",
                "name": "Writer",
                "description": "Writer Action Group",
                "actions": [
                  "read",
                  "update"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "key": "writer",
                  "name": "Writer",
                  "description": "Writer Action Group",
                  "actions": [
                    "read",
                    "update"
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "Writer",
                  "description": "Writer Action Group",
                  "actions": [
                    "read",
                    "update"
                  ],
                  "key": "writer",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "Writer",
                  "description": "Writer Action Group",
                  "actions": [
                    "read",
                    "update"
                  ],
                  "key": "writer",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets a single action group defined on the resource, if such action exists.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "get_resource_action_group",
          "originalEndpointId": "Resource Action Groups.get_resource_action_group",
          "name": "Get Resource Action Group",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \"slug\").",
                "key": "action_group_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/action_groups/"
              },
              {
                "type": "pathParameter",
                "value": "action_group_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceActionGroupRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo",
                "action_group_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "Writer",
                  "description": "Writer Action Group",
                  "actions": [
                    "read",
                    "update"
                  ],
                  "key": "writer",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "Writer",
                  "description": "Writer Action Group",
                  "actions": [
                    "read",
                    "update"
                  ],
                  "key": "writer",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes the action and all its related data.\nThis includes any permissions granted to perform the action.",
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "delete_resource_action_group",
          "originalEndpointId": "Resource Action Groups.delete_resource_action_group",
          "name": "Delete Resource Action Group",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \"slug\").",
                "key": "action_group_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/action_groups/"
              },
              {
                "type": "pathParameter",
                "value": "action_group_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo",
                "action_group_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Partially updates the action defined on a resource.\nFields that will be provided will be completely overwritten.",
          "method": "PATCH",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "update_resource_action_group",
          "originalEndpointId": "Resource Action Groups.update_resource_action_group",
          "name": "Update Resource Action Group",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the action group, or the URL-friendly key of the action group (i.e: the \"slug\").",
                "key": "action_group_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/action_groups/"
              },
              {
                "type": "pathParameter",
                "value": "action_group_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ResourceActionGroupUpdate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceActionGroupRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "resource_id": "foo",
                "action_group_id": "foo",
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "Writer",
                  "description": "Writer Action Group",
                  "actions": [
                    "read",
                    "update"
                  ],
                  "key": "writer",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "Writer",
                  "description": "Writer Action Group",
                  "actions": [
                    "read",
                    "update"
                  ],
                  "key": "writer",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_resourceRoles": {
      "subpackageId": "subpackage_resourceRoles",
      "name": "resourceRoles",
      "endpoints": [
        {
          "auth": true,
          "description": "Lists all the roles defined on the resource.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "list_resource_roles",
          "originalEndpointId": "Resource Roles.list_resource_roles",
          "name": "List Resource Roles",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/roles"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Page number of the results to fetch, starting at 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                  }
                }
              }
            },
            {
              "description": "The number of results per page (max 100).",
              "key": "per_page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 30
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ResourceRoleRead"
                }
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "name": "foo",
                    "description": "foo",
                    "permissions": [
                      "foo"
                    ],
                    "attributes": {},
                    "extends": [
                      "foo"
                    ],
                    "key": "foo",
                    "id": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "environment_id": "foo",
                    "resource_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "name": "foo",
                    "description": "foo",
                    "permissions": [
                      "foo"
                    ],
                    "attributes": {},
                    "extends": [
                      "foo"
                    ],
                    "key": "foo",
                    "id": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "environment_id": "foo",
                    "resource_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo"
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Creates a new role associated with the resource.",
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "create_resource_role",
          "originalEndpointId": "Resource Roles.create_resource_role",
          "name": "Create Resource Role",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/roles"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ResourceRoleCreate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceRoleRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "key": "maintainer",
                "name": "Maintainer",
                "description": "the maintainer role can read from the repo and push changes",
                "permissions": [
                  "push"
                ],
                "extends": [
                  "contributor"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "key": "maintainer",
                  "name": "Maintainer",
                  "description": "the maintainer role can read from the repo and push changes",
                  "permissions": [
                    "push"
                  ],
                  "extends": [
                    "contributor"
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "Maintainer",
                  "description": "the maintainer role can read from the repo and push changes",
                  "permissions": [
                    "push"
                  ],
                  "extends": [
                    "contributor"
                  ],
                  "key": "maintainer",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "Maintainer",
                  "description": "the maintainer role can read from the repo and push changes",
                  "permissions": [
                    "push"
                  ],
                  "extends": [
                    "contributor"
                  ],
                  "key": "maintainer",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets a single role defined on the resource, if such role exists.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "get_resource_role",
          "originalEndpointId": "Resource Roles.get_resource_role",
          "name": "Get Resource Role",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the \"slug\").",
                "key": "role_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/roles/"
              },
              {
                "type": "pathParameter",
                "value": "role_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceRoleRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo",
                "role_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "Maintainer",
                  "description": "the maintainer role can read from the repo and push changes",
                  "permissions": [
                    "push"
                  ],
                  "extends": [
                    "contributor"
                  ],
                  "key": "maintainer",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "Maintainer",
                  "description": "the maintainer role can read from the repo and push changes",
                  "permissions": [
                    "push"
                  ],
                  "extends": [
                    "contributor"
                  ],
                  "key": "maintainer",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes the role and all its related data.\nThis includes any permissions granted to said role.",
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "delete_resource_role",
          "originalEndpointId": "Resource Roles.delete_resource_role",
          "name": "Delete Resource Role",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the \"slug\").",
                "key": "role_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/roles/"
              },
              {
                "type": "pathParameter",
                "value": "role_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo",
                "role_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Partially updates the role defined on a resource.\nFields that will be provided will be completely overwritten.",
          "method": "PATCH",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "update_resource_role",
          "originalEndpointId": "Resource Roles.update_resource_role",
          "name": "Update Resource Role",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the \"slug\").",
                "key": "role_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/roles/"
              },
              {
                "type": "pathParameter",
                "value": "role_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ResourceRoleUpdate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceRoleRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo",
                "role_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "description": "the maintainer role can read from the repo and push changes",
                "permissions": [
                  "push"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "description": "the maintainer role can read from the repo and push changes",
                  "permissions": [
                    "push"
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "Maintainer",
                  "description": "the maintainer role can read from the repo and push changes",
                  "permissions": [
                    "push"
                  ],
                  "extends": [
                    "contributor"
                  ],
                  "key": "maintainer",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "Maintainer",
                  "description": "the maintainer role can read from the repo and push changes",
                  "permissions": [
                    "push"
                  ],
                  "extends": [
                    "contributor"
                  ],
                  "key": "maintainer",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Assign permissions to role.\n\nIf some of the permissions specified are already assigned, will skip them.",
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "assign_permissions_to_resource_role",
          "originalEndpointId": "Resource Roles.assign_permissions_to_resource_role",
          "name": "Assign Permissions to Role",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the \"slug\").",
                "key": "role_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/roles/"
              },
              {
                "type": "pathParameter",
                "value": "role_id"
              },
              {
                "type": "literal",
                "value": "/permissions"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "AddRolePermissions"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceRoleRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo",
                "role_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "permissions": [
                  "document:write"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "permissions": [
                    "document:write"
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "Maintainer",
                  "description": "the maintainer role can read from the repo and push changes",
                  "permissions": [
                    "push"
                  ],
                  "extends": [
                    "contributor"
                  ],
                  "key": "maintainer",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "Maintainer",
                  "description": "the maintainer role can read from the repo and push changes",
                  "permissions": [
                    "push"
                  ],
                  "extends": [
                    "contributor"
                  ],
                  "key": "maintainer",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Remove permissions from role.\n\nIf some of the permissions specified are already unassigned, will skip them.",
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "remove_permissions_from_resource_role",
          "originalEndpointId": "Resource Roles.remove_permissions_from_resource_role",
          "name": "Remove Permissions from Role",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the \"slug\").",
                "key": "role_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/roles/"
              },
              {
                "type": "pathParameter",
                "value": "role_id"
              },
              {
                "type": "literal",
                "value": "/permissions"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "RemoveRolePermissions"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceRoleRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo",
                "role_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "permissions": [
                  "document:share"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "permissions": [
                    "document:share"
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "Maintainer",
                  "description": "the maintainer role can read from the repo and push changes",
                  "permissions": [
                    "push"
                  ],
                  "extends": [
                    "contributor"
                  ],
                  "key": "maintainer",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "Maintainer",
                  "description": "the maintainer role can read from the repo and push changes",
                  "permissions": [
                    "push"
                  ],
                  "extends": [
                    "contributor"
                  ],
                  "key": "maintainer",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "get_resource_role_ancestors",
          "originalEndpointId": "Resource Roles.get_resource_role_ancestors",
          "name": "Get Resource Role Ancestors",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the \"slug\").",
                "key": "role_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/roles/"
              },
              {
                "type": "pathParameter",
                "value": "role_id"
              },
              {
                "type": "literal",
                "value": "/ancestors"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceRoleList"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo",
                "role_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "roles": [
                    {
                      "name": "foo",
                      "description": "foo",
                      "permissions": [
                        "foo"
                      ],
                      "attributes": {},
                      "extends": [
                        "foo"
                      ],
                      "key": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "resource_id": "foo",
                      "created_at": "foo",
                      "updated_at": "foo"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "roles": [
                    {
                      "name": "foo",
                      "description": "foo",
                      "permissions": [
                        "foo"
                      ],
                      "attributes": {},
                      "extends": [
                        "foo"
                      ],
                      "key": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "resource_id": "foo",
                      "created_at": "foo",
                      "updated_at": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "get_resource_role_descendants",
          "originalEndpointId": "Resource Roles.get_resource_role_descendants",
          "name": "Get Resource Role Descendants",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the \"slug\").",
                "key": "role_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/roles/"
              },
              {
                "type": "pathParameter",
                "value": "role_id"
              },
              {
                "type": "literal",
                "value": "/descendants"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceRoleList"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo",
                "role_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "roles": [
                    {
                      "name": "foo",
                      "description": "foo",
                      "permissions": [
                        "foo"
                      ],
                      "attributes": {},
                      "extends": [
                        "foo"
                      ],
                      "key": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "resource_id": "foo",
                      "created_at": "foo",
                      "updated_at": "foo"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "roles": [
                    {
                      "name": "foo",
                      "description": "foo",
                      "permissions": [
                        "foo"
                      ],
                      "attributes": {},
                      "extends": [
                        "foo"
                      ],
                      "key": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "resource_id": "foo",
                      "created_at": "foo",
                      "updated_at": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_resourceAttributes": {
      "subpackageId": "subpackage_resourceAttributes",
      "name": "resourceAttributes",
      "endpoints": [
        {
          "auth": true,
          "description": "Lists all the attributes defined on the resource.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "list_resource_attributes",
          "originalEndpointId": "Resource Attributes.list_resource_attributes",
          "name": "List Resource Attributes",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/attributes"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Page number of the results to fetch, starting at 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                  }
                }
              }
            },
            {
              "description": "The number of results per page (max 100).",
              "key": "per_page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 30
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ResourceAttributeRead"
                }
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "type": "bool",
                    "description": "foo",
                    "key": "foo",
                    "id": "foo",
                    "resource_id": "foo",
                    "resource_key": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "environment_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo",
                    "built_in": true
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "type": "bool",
                    "description": "foo",
                    "key": "foo",
                    "id": "foo",
                    "resource_id": "foo",
                    "resource_key": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "environment_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo",
                    "built_in": true
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Creates a new attribute as part of the resource definition.",
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "create_resource_attribute",
          "originalEndpointId": "Resource Attributes.create_resource_attribute",
          "name": "Create Resource Attribute",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/attributes"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ResourceAttributeCreate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceAttributeRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "key": "private",
                "type": "bool",
                "description": "whether or not the github repository is private"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "key": "private",
                  "type": "bool",
                  "description": "whether or not the github repository is private"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "type": "bool",
                  "description": "whether or not the github repository is private",
                  "key": "private",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "resource_key": "repository",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "built_in": false
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "type": "bool",
                  "description": "whether or not the github repository is private",
                  "key": "private",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "resource_key": "repository",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "built_in": false
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets a single attribute defined on the resource, if such attribute exists.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "get_resource_attribute",
          "originalEndpointId": "Resource Attributes.get_resource_attribute",
          "name": "Get Resource Attribute",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \"slug\").",
                "key": "attribute_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/attributes/"
              },
              {
                "type": "pathParameter",
                "value": "attribute_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceAttributeRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo",
                "attribute_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "type": "bool",
                  "description": "whether or not the github repository is private",
                  "key": "private",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "resource_key": "repository",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "built_in": false
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "type": "bool",
                  "description": "whether or not the github repository is private",
                  "key": "private",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "resource_key": "repository",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "built_in": false
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes the attribute and all its related data.\n\nNote: If the attribute is used by policies, removing it will cause the\nattribute to evaluate as `undefined`.",
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "delete_resource_attribute",
          "originalEndpointId": "Resource Attributes.delete_resource_attribute",
          "name": "Delete Resource Attribute",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \"slug\").",
                "key": "attribute_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/attributes/"
              },
              {
                "type": "pathParameter",
                "value": "attribute_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Page number of the results to fetch, starting at 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                  }
                }
              }
            },
            {
              "description": "The number of results per page (max 100).",
              "key": "per_page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 30
                  }
                }
              }
            }
          ],
          "headers": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo",
                "attribute_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Partially updates the attribute defined on a resource.\nFields that will be provided will be completely overwritten.",
          "method": "PATCH",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "update_resource_attribute",
          "originalEndpointId": "Resource Attributes.update_resource_attribute",
          "name": "Update Resource Attribute",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \"slug\").",
                "key": "resource_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \"slug\").",
                "key": "attribute_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resources/"
              },
              {
                "type": "pathParameter",
                "value": "resource_id"
              },
              {
                "type": "literal",
                "value": "/attributes/"
              },
              {
                "type": "pathParameter",
                "value": "attribute_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ResourceAttributeUpdate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceAttributeRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "resource_id": "foo",
                "attribute_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "description": "whether or not the github repository is private"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "description": "whether or not the github repository is private"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "type": "bool",
                  "description": "whether or not the github repository is private",
                  "key": "private",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "resource_key": "repository",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "built_in": false
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "type": "bool",
                  "description": "whether or not the github repository is private",
                  "key": "private",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "resource_key": "repository",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "built_in": false
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_userAttributes": {
      "subpackageId": "subpackage_userAttributes",
      "name": "userAttributes",
      "endpoints": [
        {
          "auth": true,
          "description": "Lists all the attributes defined on the User resource.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "list_user_attributes",
          "originalEndpointId": "User Attributes.list_user_attributes",
          "name": "List User Attributes",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/users/attributes"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "resource_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "__user"
                  }
                }
              }
            },
            {
              "description": "Page number of the results to fetch, starting at 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                  }
                }
              }
            },
            {
              "description": "The number of results per page (max 100).",
              "key": "per_page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 30
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ResourceAttributeRead"
                }
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "type": "bool",
                    "description": "foo",
                    "key": "foo",
                    "id": "foo",
                    "resource_id": "foo",
                    "resource_key": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "environment_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo",
                    "built_in": true
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "type": "bool",
                    "description": "foo",
                    "key": "foo",
                    "id": "foo",
                    "resource_id": "foo",
                    "resource_key": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "environment_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo",
                    "built_in": true
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Creates a new attribute for the User resource.",
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "create_user_attribute",
          "originalEndpointId": "User Attributes.create_user_attribute",
          "name": "Create User Attribute",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/users/attributes"
              }
            ]
          },
          "queryParameters": [
            {
              "key": "resource_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "__user"
                  }
                }
              }
            }
          ],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ResourceAttributeCreate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceAttributeRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "key": "private",
                "type": "bool",
                "description": "whether or not the github repository is private"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "key": "private",
                  "type": "bool",
                  "description": "whether or not the github repository is private"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "type": "bool",
                  "description": "whether or not the github repository is private",
                  "key": "private",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "resource_key": "repository",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "built_in": false
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "type": "bool",
                  "description": "whether or not the github repository is private",
                  "key": "private",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "resource_key": "repository",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "built_in": false
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets a single attribute defined on the User resource, if such attribute exists.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "get_user_attribute",
          "originalEndpointId": "User Attributes.get_user_attribute",
          "name": "Get User Attribute",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \"slug\").",
                "key": "attribute_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/users/attributes/"
              },
              {
                "type": "pathParameter",
                "value": "attribute_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [
            {
              "key": "resource_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "__user"
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceAttributeRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "attribute_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "type": "bool",
                  "description": "whether or not the github repository is private",
                  "key": "private",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "resource_key": "repository",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "built_in": false
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "type": "bool",
                  "description": "whether or not the github repository is private",
                  "key": "private",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "resource_key": "repository",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "built_in": false
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes the attribute and all its related data.\n\nNote: If the attribute is used by policies, removing it will cause the\nattribute to evaluate as `undefined`.",
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "delete_user_attribute",
          "originalEndpointId": "User Attributes.delete_user_attribute",
          "name": "Delete User Attribute",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \"slug\").",
                "key": "attribute_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/users/attributes/"
              },
              {
                "type": "pathParameter",
                "value": "attribute_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [
            {
              "key": "resource_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "__user"
                  }
                }
              }
            },
            {
              "description": "Page number of the results to fetch, starting at 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                  }
                }
              }
            },
            {
              "description": "The number of results per page (max 100).",
              "key": "per_page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 30
                  }
                }
              }
            }
          ],
          "headers": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "attribute_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Partially updates the attribute defined on the User resource.\nFields that will be provided will be completely overwritten.",
          "method": "PATCH",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "update_user_attribute",
          "originalEndpointId": "User Attributes.update_user_attribute",
          "name": "Update User Attribute",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the attribute, or the URL-friendly key of the attribute (i.e: the \"slug\").",
                "key": "attribute_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/users/attributes/"
              },
              {
                "type": "pathParameter",
                "value": "attribute_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [
            {
              "key": "resource_id",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "default": "__user"
                  }
                }
              }
            }
          ],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ResourceAttributeUpdate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceAttributeRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "attribute_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "description": "whether or not the github repository is private"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "description": "whether or not the github repository is private"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "type": "bool",
                  "description": "whether or not the github repository is private",
                  "key": "private",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "resource_key": "repository",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "built_in": false
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "type": "bool",
                  "description": "whether or not the github repository is private",
                  "key": "private",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7dd",
                  "resource_key": "repository",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "built_in": false
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_roles": {
      "subpackageId": "subpackage_roles",
      "name": "roles",
      "endpoints": [
        {
          "auth": true,
          "description": "Lists all tenant roles.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "list_roles",
          "originalEndpointId": "Roles.list_roles",
          "name": "List Roles",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/roles"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Text search for the roles name or key",
              "key": "search",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Include total count in response",
              "key": "include_total_count",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "Page number of the results to fetch, starting at 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                  }
                }
              }
            },
            {
              "description": "The number of results per page (max 100).",
              "key": "per_page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 30
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Roles_list_roles_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "name": "foo",
                      "description": "foo",
                      "permissions": [
                        "foo"
                      ],
                      "attributes": {},
                      "extends": [
                        "foo"
                      ],
                      "key": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "created_at": "foo",
                      "updated_at": "foo"
                    }
                  ],
                  "total_count": 42,
                  "page_count": 0
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "name": "foo",
                      "description": "foo",
                      "permissions": [
                        "foo"
                      ],
                      "attributes": {},
                      "extends": [
                        "foo"
                      ],
                      "key": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "created_at": "foo",
                      "updated_at": "foo"
                    }
                  ],
                  "total_count": 42,
                  "page_count": 0
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Creates a new tenant role.",
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "create_role",
          "originalEndpointId": "Roles.create_role",
          "name": "Create Role",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/roles"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "RoleCreate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RoleRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "key": "editor",
                "name": "Editor",
                "description": "the editor role can read and write to documents",
                "permissions": [
                  "document:write"
                ],
                "extends": [
                  "viewer"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "key": "editor",
                  "name": "Editor",
                  "description": "the editor role can read and write to documents",
                  "permissions": [
                    "document:write"
                  ],
                  "extends": [
                    "viewer"
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "Editor",
                  "description": "the editor role can read and write to documents",
                  "permissions": [
                    "document:write"
                  ],
                  "extends": [
                    "viewer"
                  ],
                  "key": "editor",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "Editor",
                  "description": "the editor role can read and write to documents",
                  "permissions": [
                    "document:write"
                  ],
                  "extends": [
                    "viewer"
                  ],
                  "key": "editor",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets a single tenant role, if such role exists.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "get_role",
          "originalEndpointId": "Roles.get_role",
          "name": "Get Role",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the \"slug\").",
                "key": "role_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/roles/"
              },
              {
                "type": "pathParameter",
                "value": "role_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RoleRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "role_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "Editor",
                  "description": "the editor role can read and write to documents",
                  "permissions": [
                    "document:write"
                  ],
                  "extends": [
                    "viewer"
                  ],
                  "key": "editor",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "Editor",
                  "description": "the editor role can read and write to documents",
                  "permissions": [
                    "document:write"
                  ],
                  "extends": [
                    "viewer"
                  ],
                  "key": "editor",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes a tenant role and all its related data.\nThis includes any permissions granted to said role.",
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "delete_role",
          "originalEndpointId": "Roles.delete_role",
          "name": "Delete Role",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the \"slug\").",
                "key": "role_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/roles/"
              },
              {
                "type": "pathParameter",
                "value": "role_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "role_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Partially updates a tenant role.\nFields that will be provided will be completely overwritten.",
          "method": "PATCH",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "update_role",
          "originalEndpointId": "Roles.update_role",
          "name": "Update Role",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the \"slug\").",
                "key": "role_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/roles/"
              },
              {
                "type": "pathParameter",
                "value": "role_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "RoleUpdate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RoleRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "role_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "description": "the editor role can read and write to documents",
                "permissions": [
                  "document:write"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "description": "the editor role can read and write to documents",
                  "permissions": [
                    "document:write"
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "Editor",
                  "description": "the editor role can read and write to documents",
                  "permissions": [
                    "document:write"
                  ],
                  "extends": [
                    "viewer"
                  ],
                  "key": "editor",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "Editor",
                  "description": "the editor role can read and write to documents",
                  "permissions": [
                    "document:write"
                  ],
                  "extends": [
                    "viewer"
                  ],
                  "key": "editor",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Assign permissions to role.\n\nIf some of the permissions specified are already assigned, will skip them.",
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "assign_permissions_to_role",
          "originalEndpointId": "Roles.assign_permissions_to_role",
          "name": "Assign Permissions To Role",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the \"slug\").",
                "key": "role_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/roles/"
              },
              {
                "type": "pathParameter",
                "value": "role_id"
              },
              {
                "type": "literal",
                "value": "/permissions"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "AddRolePermissions"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RoleRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "role_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "permissions": [
                  "document:write"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "permissions": [
                    "document:write"
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "Editor",
                  "description": "the editor role can read and write to documents",
                  "permissions": [
                    "document:write"
                  ],
                  "extends": [
                    "viewer"
                  ],
                  "key": "editor",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "Editor",
                  "description": "the editor role can read and write to documents",
                  "permissions": [
                    "document:write"
                  ],
                  "extends": [
                    "viewer"
                  ],
                  "key": "editor",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Remove permissions from role.\n\nIf some of the permissions specified are already unassigned, will skip them.",
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "remove_permissions_from_role",
          "originalEndpointId": "Roles.remove_permissions_from_role",
          "name": "Remove Permissions From Role",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the \"slug\").",
                "key": "role_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/roles/"
              },
              {
                "type": "pathParameter",
                "value": "role_id"
              },
              {
                "type": "literal",
                "value": "/permissions"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "RemoveRolePermissions"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RoleRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "role_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "permissions": [
                  "document:share"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "permissions": [
                    "document:share"
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "name": "Editor",
                  "description": "the editor role can read and write to documents",
                  "permissions": [
                    "document:write"
                  ],
                  "extends": [
                    "viewer"
                  ],
                  "key": "editor",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "name": "Editor",
                  "description": "the editor role can read and write to documents",
                  "permissions": [
                    "document:write"
                  ],
                  "extends": [
                    "viewer"
                  ],
                  "key": "editor",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "get_role_ancestors",
          "originalEndpointId": "Roles.get_role_ancestors",
          "name": "Get Role Ancestors",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the \"slug\").",
                "key": "role_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/roles/"
              },
              {
                "type": "pathParameter",
                "value": "role_id"
              },
              {
                "type": "literal",
                "value": "/ancestors"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RoleList"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "role_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "roles": [
                    {
                      "name": "foo",
                      "description": "foo",
                      "permissions": [
                        "foo"
                      ],
                      "attributes": {},
                      "extends": [
                        "foo"
                      ],
                      "key": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "created_at": "foo",
                      "updated_at": "foo"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "roles": [
                    {
                      "name": "foo",
                      "description": "foo",
                      "permissions": [
                        "foo"
                      ],
                      "attributes": {},
                      "extends": [
                        "foo"
                      ],
                      "key": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "created_at": "foo",
                      "updated_at": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "get_role_descendants",
          "originalEndpointId": "Roles.get_role_descendants",
          "name": "Get Role Descendants",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the role, or the URL-friendly key of the role (i.e: the \"slug\").",
                "key": "role_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/roles/"
              },
              {
                "type": "pathParameter",
                "value": "role_id"
              },
              {
                "type": "literal",
                "value": "/descendants"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RoleList"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "role_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "roles": [
                    {
                      "name": "foo",
                      "description": "foo",
                      "permissions": [
                        "foo"
                      ],
                      "attributes": {},
                      "extends": [
                        "foo"
                      ],
                      "key": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "created_at": "foo",
                      "updated_at": "foo"
                    }
                  ]
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "roles": [
                    {
                      "name": "foo",
                      "description": "foo",
                      "permissions": [
                        "foo"
                      ],
                      "attributes": {},
                      "extends": [
                        "foo"
                      ],
                      "key": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "created_at": "foo",
                      "updated_at": "foo"
                    }
                  ]
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_conditionSets": {
      "subpackageId": "subpackage_conditionSets",
      "name": "conditionSets",
      "endpoints": [
        {
          "auth": true,
          "description": "Lists all condition sets matching a filter.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "list_condition_sets",
          "originalEndpointId": "Condition Sets.list_condition_sets",
          "name": "List Condition Sets",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/condition_sets"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Text search for the condition sets name or key",
              "key": "search",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "if provided, will return only the condition sets of the specified type. e.g: only user sets.",
              "key": "type",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "id",
                  "value": "V2SchemaProjIdEnvIdConditionSetsGetParametersSchema"
                }
              }
            },
            {
              "description": "Include total count in response",
              "key": "include_total_count",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "Page number of the results to fetch, starting at 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                  }
                }
              }
            },
            {
              "description": "The number of results per page (max 100).",
              "key": "per_page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 30
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Condition Sets_list_condition_sets_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "key": "foo",
                      "type": "userset",
                      "autogenerated": false,
                      "resource_id": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "created_at": "foo",
                      "updated_at": "foo",
                      "resource": {
                        "key": "foo",
                        "id": "foo",
                        "organization_id": "foo",
                        "project_id": "foo",
                        "environment_id": "foo",
                        "created_at": "foo",
                        "updated_at": "foo",
                        "name": "foo",
                        "urn": "foo",
                        "description": "foo",
                        "actions": {},
                        "attributes": {},
                        "action_groups": {}
                      },
                      "name": "foo",
                      "description": "foo",
                      "conditions": {},
                      "parent_id": "foo"
                    }
                  ],
                  "total_count": 42,
                  "page_count": 0
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "key": "foo",
                      "type": "userset",
                      "autogenerated": false,
                      "resource_id": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "created_at": "foo",
                      "updated_at": "foo",
                      "resource": {
                        "key": "foo",
                        "id": "foo",
                        "organization_id": "foo",
                        "project_id": "foo",
                        "environment_id": "foo",
                        "created_at": "foo",
                        "updated_at": "foo",
                        "name": "foo",
                        "urn": "foo",
                        "description": "foo",
                        "actions": {},
                        "attributes": {},
                        "action_groups": {}
                      },
                      "name": "foo",
                      "description": "foo",
                      "conditions": {},
                      "parent_id": "foo"
                    }
                  ],
                  "total_count": 42,
                  "page_count": 0
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Creates a new condition set (can be either a user set or a resource set).",
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "create_condition_set",
          "originalEndpointId": "Condition Sets.create_condition_set",
          "name": "Create Condition Set",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/condition_sets"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ConditionSetCreate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ConditionSetRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "key": "na_based_employees",
                "type": "userset",
                "name": "US or Canada based employees",
                "conditions": {
                  "allOf": [
                    {
                      "user.role": {
                        "equals": "employee"
                      }
                    },
                    {
                      "user.location": {
                        "in": [
                          "US",
                          "Canada"
                        ]
                      }
                    }
                  ]
                }
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "key": "na_based_employees",
                  "type": "userset",
                  "name": "US or Canada based employees",
                  "conditions": {
                    "allOf": [
                      {
                        "user.role": {
                          "equals": "employee"
                        }
                      },
                      {
                        "user.location": {
                          "in": [
                            "US",
                            "Canada"
                          ]
                        }
                      }
                    ]
                  }
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "na_based_employees",
                  "type": "userset",
                  "autogenerated": false,
                  "resource_id": "e05f8571-f31e-20b2-2c45-15ae74cfb0f1",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "name": "US or Canada based employees",
                  "description": "All employees based in the US or Canada",
                  "conditions": {
                    "allOf": [
                      {
                        "user.role": {
                          "equals": "employee"
                        }
                      },
                      {
                        "user.location": {
                          "in": [
                            "US",
                            "Canada"
                          ]
                        }
                      }
                    ]
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "na_based_employees",
                  "type": "userset",
                  "autogenerated": false,
                  "resource_id": "e05f8571-f31e-20b2-2c45-15ae74cfb0f1",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "name": "US or Canada based employees",
                  "description": "All employees based in the US or Canada",
                  "conditions": {
                    "allOf": [
                      {
                        "user.role": {
                          "equals": "employee"
                        }
                      },
                      {
                        "user.location": {
                          "in": [
                            "US",
                            "Canada"
                          ]
                        }
                      }
                    ]
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets a single condition set, if such condition set exists.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "get_condition_set",
          "originalEndpointId": "Condition Sets.get_condition_set",
          "name": "Get Condition Set",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \"slug\").",
                "key": "condition_set_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/condition_sets/"
              },
              {
                "type": "pathParameter",
                "value": "condition_set_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ConditionSetRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "condition_set_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "na_based_employees",
                  "type": "userset",
                  "autogenerated": false,
                  "resource_id": "e05f8571-f31e-20b2-2c45-15ae74cfb0f1",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "name": "US or Canada based employees",
                  "description": "All employees based in the US or Canada",
                  "conditions": {
                    "allOf": [
                      {
                        "user.role": {
                          "equals": "employee"
                        }
                      },
                      {
                        "user.location": {
                          "in": [
                            "US",
                            "Canada"
                          ]
                        }
                      }
                    ]
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "na_based_employees",
                  "type": "userset",
                  "autogenerated": false,
                  "resource_id": "e05f8571-f31e-20b2-2c45-15ae74cfb0f1",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "name": "US or Canada based employees",
                  "description": "All employees based in the US or Canada",
                  "conditions": {
                    "allOf": [
                      {
                        "user.role": {
                          "equals": "employee"
                        }
                      },
                      {
                        "user.location": {
                          "in": [
                            "US",
                            "Canada"
                          ]
                        }
                      }
                    ]
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes a condition set and all its related data.\nThis includes any permissions granted to said condition set (i.e: any matching condition set rules).",
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "delete_condition_set",
          "originalEndpointId": "Condition Sets.delete_condition_set",
          "name": "Delete Condition Set",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \"slug\").",
                "key": "condition_set_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/condition_sets/"
              },
              {
                "type": "pathParameter",
                "value": "condition_set_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "condition_set_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Partially updates a condition set.\nFields that will be provided will be completely overwritten.",
          "method": "PATCH",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "update_condition_set",
          "originalEndpointId": "Condition Sets.update_condition_set",
          "name": "Update Condition Set",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \"slug\").",
                "key": "condition_set_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/condition_sets/"
              },
              {
                "type": "pathParameter",
                "value": "condition_set_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ConditionSetUpdate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ConditionSetRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "condition_set_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "name": "US based managers",
                "conditions": {
                  "allOf": [
                    {
                      "user.role": {
                        "equals": "manager"
                      }
                    },
                    {
                      "user.location": {
                        "in": [
                          "US"
                        ]
                      }
                    }
                  ]
                }
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "name": "US based managers",
                  "conditions": {
                    "allOf": [
                      {
                        "user.role": {
                          "equals": "manager"
                        }
                      },
                      {
                        "user.location": {
                          "in": [
                            "US"
                          ]
                        }
                      }
                    ]
                  }
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "na_based_employees",
                  "type": "userset",
                  "autogenerated": false,
                  "resource_id": "e05f8571-f31e-20b2-2c45-15ae74cfb0f1",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "name": "US or Canada based employees",
                  "description": "All employees based in the US or Canada",
                  "conditions": {
                    "allOf": [
                      {
                        "user.role": {
                          "equals": "employee"
                        }
                      },
                      {
                        "user.location": {
                          "in": [
                            "US",
                            "Canada"
                          ]
                        }
                      }
                    ]
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "na_based_employees",
                  "type": "userset",
                  "autogenerated": false,
                  "resource_id": "e05f8571-f31e-20b2-2c45-15ae74cfb0f1",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "name": "US or Canada based employees",
                  "description": "All employees based in the US or Canada",
                  "conditions": {
                    "allOf": [
                      {
                        "user.role": {
                          "equals": "employee"
                        }
                      },
                      {
                        "user.location": {
                          "in": [
                            "US",
                            "Canada"
                          ]
                        }
                      }
                    ]
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets all ancestors (parent, parent of parent, and so on)",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "get_condition_set_ancestors",
          "originalEndpointId": "Condition Sets.get_condition_set_ancestors",
          "name": "Get Condition Set Ancestors",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \"slug\").",
                "key": "condition_set_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/condition_sets/"
              },
              {
                "type": "pathParameter",
                "value": "condition_set_id"
              },
              {
                "type": "literal",
                "value": "/ancestors"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Page number of the results to fetch, starting at 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                  }
                }
              }
            },
            {
              "description": "The number of results per page (max 100).",
              "key": "per_page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 30
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ConditionSetRead"
                }
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "condition_set_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "key": "foo",
                    "type": "userset",
                    "autogenerated": false,
                    "resource_id": "foo",
                    "id": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "environment_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo",
                    "resource": {
                      "key": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "created_at": "foo",
                      "updated_at": "foo",
                      "name": "foo",
                      "urn": "foo",
                      "description": "foo",
                      "actions": {},
                      "attributes": {},
                      "action_groups": {}
                    },
                    "name": "foo",
                    "description": "foo",
                    "conditions": {},
                    "parent_id": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "key": "foo",
                    "type": "userset",
                    "autogenerated": false,
                    "resource_id": "foo",
                    "id": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "environment_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo",
                    "resource": {
                      "key": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "created_at": "foo",
                      "updated_at": "foo",
                      "name": "foo",
                      "urn": "foo",
                      "description": "foo",
                      "actions": {},
                      "attributes": {},
                      "action_groups": {}
                    },
                    "name": "foo",
                    "description": "foo",
                    "conditions": {},
                    "parent_id": "foo"
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets all descendants (children, children of children, and so on)",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "get_condition_set_descendants",
          "originalEndpointId": "Condition Sets.get_condition_set_descendants",
          "name": "Get Condition Set Descendants",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the condition set, or the URL-friendly key of the condition set (i.e: the \"slug\").",
                "key": "condition_set_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/schema/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/condition_sets/"
              },
              {
                "type": "pathParameter",
                "value": "condition_set_id"
              },
              {
                "type": "literal",
                "value": "/descendants"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Page number of the results to fetch, starting at 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                  }
                }
              }
            },
            {
              "description": "The number of results per page (max 100).",
              "key": "per_page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 30
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ConditionSetRead"
                }
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/schema/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "condition_set_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "key": "foo",
                    "type": "userset",
                    "autogenerated": false,
                    "resource_id": "foo",
                    "id": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "environment_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo",
                    "resource": {
                      "key": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "created_at": "foo",
                      "updated_at": "foo",
                      "name": "foo",
                      "urn": "foo",
                      "description": "foo",
                      "actions": {},
                      "attributes": {},
                      "action_groups": {}
                    },
                    "name": "foo",
                    "description": "foo",
                    "conditions": {},
                    "parent_id": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "key": "foo",
                    "type": "userset",
                    "autogenerated": false,
                    "resource_id": "foo",
                    "id": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "environment_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo",
                    "resource": {
                      "key": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "created_at": "foo",
                      "updated_at": "foo",
                      "name": "foo",
                      "urn": "foo",
                      "description": "foo",
                      "actions": {},
                      "attributes": {},
                      "action_groups": {}
                    },
                    "name": "foo",
                    "description": "foo",
                    "conditions": {},
                    "parent_id": "foo"
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_users": {
      "subpackageId": "subpackage_users",
      "name": "users",
      "endpoints": [
        {
          "auth": true,
          "description": "Lists all the users defined within an environment.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "list_users",
          "originalEndpointId": "Users.list_users",
          "name": "List Users",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/users"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Text search for the email field",
              "key": "search",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Match users with a specific role",
              "key": "role",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Page number of the results to fetch, starting at 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                  }
                }
              }
            },
            {
              "description": "The number of results per page (max 100).",
              "key": "per_page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 30
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "PaginatedResult_UserRead_"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "key": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "associated_tenants": [
                        {
                          "tenant": "foo",
                          "roles": [
                            "foo"
                          ],
                          "status": "active"
                        }
                      ],
                      "roles": [
                        {
                          "role": "foo",
                          "tenant": "foo"
                        }
                      ],
                      "email": "foo",
                      "first_name": "foo",
                      "last_name": "foo",
                      "attributes": {}
                    }
                  ],
                  "total_count": 42,
                  "page_count": 0
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "key": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "associated_tenants": [
                        {
                          "tenant": "foo",
                          "roles": [
                            "foo"
                          ],
                          "status": "active"
                        }
                      ],
                      "roles": [
                        {
                          "role": "foo",
                          "tenant": "foo"
                        }
                      ],
                      "email": "foo",
                      "first_name": "foo",
                      "last_name": "foo",
                      "attributes": {}
                    }
                  ],
                  "total_count": 42,
                  "page_count": 0
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Creates a new user inside the Permit.io system, from that point forward\nyou may run permission checks on that user.\n\nIf the user is already created: will return 200 instead of 201,\nand will return the existing user object in the response body.",
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "create_user",
          "originalEndpointId": "Users.create_user",
          "name": "Create User",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/users"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "UserCreate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "UserRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "key": "user|892179821739812389327",
                "email": "jane@coolcompany.com",
                "first_name": "Jane",
                "last_name": "Doe",
                "attributes": {
                  "department": "marketing",
                  "age": 30,
                  "subscription": {
                    "tier": "pro",
                    "expired": false
                  }
                }
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "key": "user|892179821739812389327",
                  "email": "jane@coolcompany.com",
                  "first_name": "Jane",
                  "last_name": "Doe",
                  "attributes": {
                    "department": "marketing",
                    "age": 30,
                    "subscription": {
                      "tier": "pro",
                      "expired": false
                    }
                  }
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "user|892179821739812389327",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "associated_tenants": [
                    {
                      "tenant": "stripe-inc",
                      "roles": [
                        "admin"
                      ],
                      "status": "active"
                    },
                    {
                      "tenant": "othercompany.com",
                      "roles": [
                        "viewer"
                      ],
                      "status": "pending"
                    }
                  ],
                  "roles": [
                    {
                      "role": "admin",
                      "tenant": "stripe-inc"
                    },
                    {
                      "role": "viewer",
                      "tenant": "othercompany.com"
                    }
                  ],
                  "email": "jane@coolcompany.com",
                  "first_name": "Jane",
                  "last_name": "Doe",
                  "attributes": {
                    "department": "marketing",
                    "age": 30,
                    "subscription": {
                      "tier": "pro",
                      "expired": false
                    }
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "user|892179821739812389327",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "associated_tenants": [
                    {
                      "tenant": "stripe-inc",
                      "roles": [
                        "admin"
                      ],
                      "status": "active"
                    },
                    {
                      "tenant": "othercompany.com",
                      "roles": [
                        "viewer"
                      ],
                      "status": "pending"
                    }
                  ],
                  "roles": [
                    {
                      "role": "admin",
                      "tenant": "stripe-inc"
                    },
                    {
                      "role": "viewer",
                      "tenant": "othercompany.com"
                    }
                  ],
                  "email": "jane@coolcompany.com",
                  "first_name": "Jane",
                  "last_name": "Doe",
                  "attributes": {
                    "department": "marketing",
                    "age": 30,
                    "subscription": {
                      "tier": "pro",
                      "expired": false
                    }
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets a user, if such user exists. Otherwise returns 404.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "get_user",
          "originalEndpointId": "Users.get_user",
          "name": "Get User",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the user, or the URL-friendly key of the user (i.e: the \"slug\").",
                "key": "user_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/users/"
              },
              {
                "type": "pathParameter",
                "value": "user_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "UserRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "user_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "user|892179821739812389327",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "associated_tenants": [
                    {
                      "tenant": "stripe-inc",
                      "roles": [
                        "admin"
                      ],
                      "status": "active"
                    },
                    {
                      "tenant": "othercompany.com",
                      "roles": [
                        "viewer"
                      ],
                      "status": "pending"
                    }
                  ],
                  "roles": [
                    {
                      "role": "admin",
                      "tenant": "stripe-inc"
                    },
                    {
                      "role": "viewer",
                      "tenant": "othercompany.com"
                    }
                  ],
                  "email": "jane@coolcompany.com",
                  "first_name": "Jane",
                  "last_name": "Doe",
                  "attributes": {
                    "department": "marketing",
                    "age": 30,
                    "subscription": {
                      "tier": "pro",
                      "expired": false
                    }
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "user|892179821739812389327",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "associated_tenants": [
                    {
                      "tenant": "stripe-inc",
                      "roles": [
                        "admin"
                      ],
                      "status": "active"
                    },
                    {
                      "tenant": "othercompany.com",
                      "roles": [
                        "viewer"
                      ],
                      "status": "pending"
                    }
                  ],
                  "roles": [
                    {
                      "role": "admin",
                      "tenant": "stripe-inc"
                    },
                    {
                      "role": "viewer",
                      "tenant": "othercompany.com"
                    }
                  ],
                  "email": "jane@coolcompany.com",
                  "first_name": "Jane",
                  "last_name": "Doe",
                  "attributes": {
                    "department": "marketing",
                    "age": 30,
                    "subscription": {
                      "tier": "pro",
                      "expired": false
                    }
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "PUT",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "replace_user",
          "originalEndpointId": "Users.replace_user",
          "name": "Replace User",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the user, or the URL-friendly key of the user (i.e: the \"slug\").",
                "key": "user_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/users/"
              },
              {
                "type": "pathParameter",
                "value": "user_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "UserCreate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "UserRead"
              }
            },
            "statusCode": 200,
            "description": "An existing user was replaced"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "user_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "key": "user|892179821739812389327",
                "email": "jane@coolcompany.com",
                "first_name": "Jane",
                "last_name": "Doe",
                "attributes": {
                  "department": "marketing",
                  "age": 30,
                  "subscription": {
                    "tier": "pro",
                    "expired": false
                  }
                }
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "key": "user|892179821739812389327",
                  "email": "jane@coolcompany.com",
                  "first_name": "Jane",
                  "last_name": "Doe",
                  "attributes": {
                    "department": "marketing",
                    "age": 30,
                    "subscription": {
                      "tier": "pro",
                      "expired": false
                    }
                  }
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "user|892179821739812389327",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "associated_tenants": [
                    {
                      "tenant": "stripe-inc",
                      "roles": [
                        "admin"
                      ],
                      "status": "active"
                    },
                    {
                      "tenant": "othercompany.com",
                      "roles": [
                        "viewer"
                      ],
                      "status": "pending"
                    }
                  ],
                  "roles": [
                    {
                      "role": "admin",
                      "tenant": "stripe-inc"
                    },
                    {
                      "role": "viewer",
                      "tenant": "othercompany.com"
                    }
                  ],
                  "email": "jane@coolcompany.com",
                  "first_name": "Jane",
                  "last_name": "Doe",
                  "attributes": {
                    "department": "marketing",
                    "age": 30,
                    "subscription": {
                      "tier": "pro",
                      "expired": false
                    }
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "user|892179821739812389327",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "associated_tenants": [
                    {
                      "tenant": "stripe-inc",
                      "roles": [
                        "admin"
                      ],
                      "status": "active"
                    },
                    {
                      "tenant": "othercompany.com",
                      "roles": [
                        "viewer"
                      ],
                      "status": "pending"
                    }
                  ],
                  "roles": [
                    {
                      "role": "admin",
                      "tenant": "stripe-inc"
                    },
                    {
                      "role": "viewer",
                      "tenant": "othercompany.com"
                    }
                  ],
                  "email": "jane@coolcompany.com",
                  "first_name": "Jane",
                  "last_name": "Doe",
                  "attributes": {
                    "department": "marketing",
                    "age": 30,
                    "subscription": {
                      "tier": "pro",
                      "expired": false
                    }
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes the user and all its related data.",
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "delete_user",
          "originalEndpointId": "Users.delete_user",
          "name": "Delete User",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the user, or the URL-friendly key of the user (i.e: the \"slug\").",
                "key": "user_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/users/"
              },
              {
                "type": "pathParameter",
                "value": "user_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "user_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Partially updates the user definition.\nFields that will be provided will be completely overwritten.",
          "method": "PATCH",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "update_user",
          "originalEndpointId": "Users.update_user",
          "name": "Update User",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the user, or the URL-friendly key of the user (i.e: the \"slug\").",
                "key": "user_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/users/"
              },
              {
                "type": "pathParameter",
                "value": "user_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "UserUpdate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "UserRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "user_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "user|892179821739812389327",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "associated_tenants": [
                    {
                      "tenant": "stripe-inc",
                      "roles": [
                        "admin"
                      ],
                      "status": "active"
                    },
                    {
                      "tenant": "othercompany.com",
                      "roles": [
                        "viewer"
                      ],
                      "status": "pending"
                    }
                  ],
                  "roles": [
                    {
                      "role": "admin",
                      "tenant": "stripe-inc"
                    },
                    {
                      "role": "viewer",
                      "tenant": "othercompany.com"
                    }
                  ],
                  "email": "jane@coolcompany.com",
                  "first_name": "Jane",
                  "last_name": "Doe",
                  "attributes": {
                    "department": "marketing",
                    "age": 30,
                    "subscription": {
                      "tier": "pro",
                      "expired": false
                    }
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "user|892179821739812389327",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "associated_tenants": [
                    {
                      "tenant": "stripe-inc",
                      "roles": [
                        "admin"
                      ],
                      "status": "active"
                    },
                    {
                      "tenant": "othercompany.com",
                      "roles": [
                        "viewer"
                      ],
                      "status": "pending"
                    }
                  ],
                  "roles": [
                    {
                      "role": "admin",
                      "tenant": "stripe-inc"
                    },
                    {
                      "role": "viewer",
                      "tenant": "othercompany.com"
                    }
                  ],
                  "email": "jane@coolcompany.com",
                  "first_name": "Jane",
                  "last_name": "Doe",
                  "attributes": {
                    "department": "marketing",
                    "age": 30,
                    "subscription": {
                      "tier": "pro",
                      "expired": false
                    }
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Assigns a role to the user within the tenant.\n\nThe tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.",
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "assign_role_to_user",
          "originalEndpointId": "Users.assign_role_to_user",
          "name": "Assign Role To User",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the user, or the URL-friendly key of the user (i.e: the \"slug\").",
                "key": "user_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/users/"
              },
              {
                "type": "pathParameter",
                "value": "user_id"
              },
              {
                "type": "literal",
                "value": "/roles"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "UserRoleCreate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RoleAssignmentRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "user_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "role": "admin",
                "tenant": "stripe-inc"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "role": "admin",
                  "tenant": "stripe-inc"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "user": "jane@coolcompany.com",
                  "role": "admin",
                  "tenant": "stripe-inc",
                  "user_id": "7c60d51f-b44e-4682-87d6-449835ea4d11",
                  "role_id": "405d8375-3514-403b-8c43-83ae74cfe022",
                  "tenant_id": "40ef0e48-a11f-4963-a229-e396c9f7e733",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "user": "jane@coolcompany.com",
                  "role": "admin",
                  "tenant": "stripe-inc",
                  "user_id": "7c60d51f-b44e-4682-87d6-449835ea4d11",
                  "role_id": "405d8375-3514-403b-8c43-83ae74cfe022",
                  "tenant_id": "40ef0e48-a11f-4963-a229-e396c9f7e733",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Unassigns the role from the user within the tenant.\n\nThe tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.\n\nIf the role is not actually assigned, will return 404.",
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "unassign_role_from_user",
          "originalEndpointId": "Users.unassign_role_from_user",
          "name": "Unassign Role From User",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the user, or the URL-friendly key of the user (i.e: the \"slug\").",
                "key": "user_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/users/"
              },
              {
                "type": "pathParameter",
                "value": "user_id"
              },
              {
                "type": "literal",
                "value": "/roles"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "UserRoleRemove"
                }
              }
            }
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "user_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "role": "editor",
                "tenant": "google-inc"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "role": "editor",
                  "tenant": "google-inc"
                }
              },
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_tenants": {
      "subpackageId": "subpackage_tenants",
      "name": "tenants",
      "endpoints": [
        {
          "auth": true,
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "list_tenant_users",
          "originalEndpointId": "Tenants.list_tenant_users",
          "name": "List Tenant Users",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \"slug\").",
                "key": "tenant_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/tenants/"
              },
              {
                "type": "pathParameter",
                "value": "tenant_id"
              },
              {
                "type": "literal",
                "value": "/users"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Text search for the email field",
              "key": "search",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Match users with a specific role",
              "key": "role",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Page number of the results to fetch, starting at 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                  }
                }
              }
            },
            {
              "description": "The number of results per page (max 100).",
              "key": "per_page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 30
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "PaginatedResult_UserRead_"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "tenant_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "key": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "associated_tenants": [
                        {
                          "tenant": "foo",
                          "roles": [
                            "foo"
                          ],
                          "status": "active"
                        }
                      ],
                      "roles": [
                        {
                          "role": "foo",
                          "tenant": "foo"
                        }
                      ],
                      "email": "foo",
                      "first_name": "foo",
                      "last_name": "foo",
                      "attributes": {}
                    }
                  ],
                  "total_count": 42,
                  "page_count": 0
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "key": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "associated_tenants": [
                        {
                          "tenant": "foo",
                          "roles": [
                            "foo"
                          ],
                          "status": "active"
                        }
                      ],
                      "roles": [
                        {
                          "role": "foo",
                          "tenant": "foo"
                        }
                      ],
                      "email": "foo",
                      "first_name": "foo",
                      "last_name": "foo",
                      "attributes": {}
                    }
                  ],
                  "total_count": 42,
                  "page_count": 0
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Lists all the tenants defined within an environment.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "list_tenants",
          "originalEndpointId": "Tenants.list_tenants",
          "name": "List Tenants",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/tenants"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Text search for the tenant name or key",
              "key": "search",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Include total count in response",
              "key": "include_total_count",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            },
            {
              "description": "Page number of the results to fetch, starting at 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                  }
                }
              }
            },
            {
              "description": "The number of results per page (max 100).",
              "key": "per_page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 30
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "Tenants_list_tenants_Response_200"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "key": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "created_at": "foo",
                      "updated_at": "foo",
                      "last_action_at": "foo",
                      "name": "foo",
                      "description": "foo",
                      "attributes": {}
                    }
                  ],
                  "total_count": 42,
                  "page_count": 0
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "data": [
                    {
                      "key": "foo",
                      "id": "foo",
                      "organization_id": "foo",
                      "project_id": "foo",
                      "environment_id": "foo",
                      "created_at": "foo",
                      "updated_at": "foo",
                      "last_action_at": "foo",
                      "name": "foo",
                      "description": "foo",
                      "attributes": {}
                    }
                  ],
                  "total_count": 42,
                  "page_count": 0
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Creates a new tenant inside the Permit.io system.\n\nIf the tenant is already created: will return 200 instead of 201,\nand will return the existing tenant object in the response body.",
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "create_tenant",
          "originalEndpointId": "Tenants.create_tenant",
          "name": "Create Tenant",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/tenants"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "TenantCreate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TenantRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "key": "stripeinc",
                "name": "Stripe Inc",
                "attributes": {
                  "allowed_locations": [
                    "US",
                    "CA"
                  ]
                }
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "key": "stripeinc",
                  "name": "Stripe Inc",
                  "attributes": {
                    "allowed_locations": [
                      "US",
                      "CA"
                    ]
                  }
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "stripeinc",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "last_action_at": "2019-08-24T14:15:22Z",
                  "name": "Stripe Inc",
                  "attributes": {
                    "allowed_locations": [
                      "US",
                      "CA"
                    ]
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "stripeinc",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "last_action_at": "2019-08-24T14:15:22Z",
                  "name": "Stripe Inc",
                  "attributes": {
                    "allowed_locations": [
                      "US",
                      "CA"
                    ]
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets a tenant, if such tenant exists. Otherwise returns 404.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "get_tenant",
          "originalEndpointId": "Tenants.get_tenant",
          "name": "Get Tenant",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \"slug\").",
                "key": "tenant_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/tenants/"
              },
              {
                "type": "pathParameter",
                "value": "tenant_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TenantRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "tenant_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "stripeinc",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "last_action_at": "2019-08-24T14:15:22Z",
                  "name": "Stripe Inc",
                  "attributes": {
                    "allowed_locations": [
                      "US",
                      "CA"
                    ]
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "stripeinc",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "last_action_at": "2019-08-24T14:15:22Z",
                  "name": "Stripe Inc",
                  "attributes": {
                    "allowed_locations": [
                      "US",
                      "CA"
                    ]
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes the tenant and all its related data.",
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "delete_tenant",
          "originalEndpointId": "Tenants.delete_tenant",
          "name": "Delete Tenant",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \"slug\").",
                "key": "tenant_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/tenants/"
              },
              {
                "type": "pathParameter",
                "value": "tenant_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "tenant_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Partially updates the tenant definition.\nFields that will be provided will be completely overwritten.",
          "method": "PATCH",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "update_tenant",
          "originalEndpointId": "Tenants.update_tenant",
          "name": "Update Tenant",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \"slug\").",
                "key": "tenant_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/tenants/"
              },
              {
                "type": "pathParameter",
                "value": "tenant_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "TenantUpdate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TenantRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "tenant_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {},
              "requestBodyV3": {
                "type": "json",
                "value": {}
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "stripeinc",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "last_action_at": "2019-08-24T14:15:22Z",
                  "name": "Stripe Inc",
                  "attributes": {
                    "allowed_locations": [
                      "US",
                      "CA"
                    ]
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "stripeinc",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "last_action_at": "2019-08-24T14:15:22Z",
                  "name": "Stripe Inc",
                  "attributes": {
                    "allowed_locations": [
                      "US",
                      "CA"
                    ]
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes a user under a tenant.",
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "delete_tenant_user",
          "originalEndpointId": "Tenants.delete_tenant_user",
          "name": "Delete Tenant User",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the tenant, or the URL-friendly key of the tenant (i.e: the \"slug\").",
                "key": "tenant_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the user, or the URL-friendly key of the user (i.e: the \"slug\").",
                "key": "user_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/tenants/"
              },
              {
                "type": "pathParameter",
                "value": "tenant_id"
              },
              {
                "type": "literal",
                "value": "/users/"
              },
              {
                "type": "pathParameter",
                "value": "user_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "tenant_id": "foo",
                "user_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_roleAssignments": {
      "subpackageId": "subpackage_roleAssignments",
      "name": "roleAssignments",
      "endpoints": [
        {
          "auth": true,
          "description": "Lists the role assignments defined within an environment.\n\n- If the `user` filter is present, will only return the role assignments of that user.\n- If the `tenant` filter is present, will only return the role assignments in that tenant.\n- If the `role` filter is present, will only return role assignments that are granting that role.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "list_role_assignments",
          "originalEndpointId": "Role Assignments.list_role_assignments",
          "name": "List Role Assignments",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/role_assignments"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "optional user filter, will only return role assignments granted to this user.",
              "key": "user",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "optional role filter, will only return role assignments granting this role.",
              "key": "role",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "optional tenant filter, will only return role assignments granted in that tenant.",
              "key": "tenant",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Page number of the results to fetch, starting at 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                  }
                }
              }
            },
            {
              "description": "The number of results per page (max 100).",
              "key": "per_page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 30
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "RoleAssignmentRead"
                }
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "id": "foo",
                    "user": "foo",
                    "role": "foo",
                    "tenant": "foo",
                    "user_id": "foo",
                    "role_id": "foo",
                    "tenant_id": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "environment_id": "foo",
                    "created_at": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "id": "foo",
                    "user": "foo",
                    "role": "foo",
                    "tenant": "foo",
                    "user_id": "foo",
                    "role_id": "foo",
                    "tenant_id": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "environment_id": "foo",
                    "created_at": "foo"
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Assigns a role to a user within a tenant.\n\nThe tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.",
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "assign_role",
          "originalEndpointId": "Role Assignments.assign_role",
          "name": "Assign Role",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/role_assignments"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "RoleAssignmentCreate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "RoleAssignmentRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "role": "admin",
                "tenant": "stripe-inc",
                "user": "jane@coolcompany.com"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "role": "admin",
                  "tenant": "stripe-inc",
                  "user": "jane@coolcompany.com"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "user": "jane@coolcompany.com",
                  "role": "admin",
                  "tenant": "stripe-inc",
                  "user_id": "7c60d51f-b44e-4682-87d6-449835ea4d11",
                  "role_id": "405d8375-3514-403b-8c43-83ae74cfe022",
                  "tenant_id": "40ef0e48-a11f-4963-a229-e396c9f7e733",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z"
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "user": "jane@coolcompany.com",
                  "role": "admin",
                  "tenant": "stripe-inc",
                  "user_id": "7c60d51f-b44e-4682-87d6-449835ea4d11",
                  "role_id": "405d8375-3514-403b-8c43-83ae74cfe022",
                  "tenant_id": "40ef0e48-a11f-4963-a229-e396c9f7e733",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z"
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Unassigns a user role within a tenant.\n\nThe tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.\n\nIf the role is not actually assigned, will return 404.",
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "unassign_role",
          "originalEndpointId": "Role Assignments.unassign_role",
          "name": "Unassign Role",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/role_assignments"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "RoleAssignmentRemove"
                }
              }
            }
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "role": "editor",
                "tenant": "google-inc",
                "user": "jane@coolcompany.com"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "role": "editor",
                  "tenant": "google-inc",
                  "user": "jane@coolcompany.com"
                }
              },
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "bulk_assign_role",
          "originalEndpointId": "Role Assignments.bulk_assign_role",
          "name": "Bulk Assign Role",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/role_assignments/bulk"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "RoleAssignmentCreate"
                  }
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BulkRoleAssignmentReport"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": [
                {
                  "role": "foo",
                  "tenant": "foo",
                  "user": "foo"
                }
              ],
              "requestBodyV3": {
                "type": "json",
                "value": [
                  {
                    "role": "foo",
                    "tenant": "foo",
                    "user": "foo"
                  }
                ]
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "assignments_created": 0
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "assignments_created": 0
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "bulk_unassign_role",
          "originalEndpointId": "Role Assignments.bulk_unassign_role",
          "name": "Bulk Unassign Role",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/role_assignments/bulk"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "list",
                  "itemType": {
                    "type": "id",
                    "value": "RoleAssignmentRemove"
                  }
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "BulkRoleUnAssignmentReport"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": [
                {
                  "role": "foo",
                  "tenant": "foo",
                  "user": "foo"
                }
              ],
              "requestBodyV3": {
                "type": "json",
                "value": [
                  {
                    "role": "foo",
                    "tenant": "foo",
                    "user": "foo"
                  }
                ]
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "assignments_removed": 0
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "assignments_removed": 0
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_conditionSetRules": {
      "subpackageId": "subpackage_conditionSetRules",
      "name": "conditionSetRules",
      "endpoints": [
        {
          "auth": true,
          "description": "Lists the condition set rules matching the filter.\n- If the `user_set` filter is present, will only return the permissions set of that user set.\n- If the `permission` filter is present, will only return the permissions sets that equals to the queried permission.\n- If the `resource_set` filter is present, will only return the permissions set of that resource set.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "list_set_permissions",
          "originalEndpointId": "Condition Set Rules.list_set_permissions",
          "name": "List Set Permissions",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/set_rules"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "optional user set filter, will only return rules where the permission is granted to this user set",
              "key": "user_set",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "optional permission filter, will only return condition set rules granting this permission",
              "key": "permission",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "optional resource set filter, will only return rules where the permission is granted on this resource set",
              "key": "resource_set",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "description": "Page number of the results to fetch, starting at 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                  }
                }
              }
            },
            {
              "description": "The number of results per page (max 100).",
              "key": "per_page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 30
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ConditionSetRuleRead"
                }
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "id": "foo",
                    "key": "foo",
                    "user_set": "foo",
                    "permission": "foo",
                    "resource_set": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "environment_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "id": "foo",
                    "key": "foo",
                    "user_set": "foo",
                    "permission": "foo",
                    "resource_set": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "environment_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo"
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Grant permissions to a user set *on* a resource set.\n\nIf the permission is already granted, it is skipped.",
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "assign_set_permissions",
          "originalEndpointId": "Condition Set Rules.assign_set_permissions",
          "name": "Assign Set Permissions",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/set_rules"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ConditionSetRuleCreate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ConditionSetRuleRead"
                }
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "user_set": "us_based_employees",
                "permission": "repository:clone",
                "resource_set": "private_repos"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "user_set": "us_based_employees",
                  "permission": "repository:clone",
                  "resource_set": "private_repos"
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "id": "foo",
                    "key": "foo",
                    "user_set": "foo",
                    "permission": "foo",
                    "resource_set": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "environment_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo"
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "id": "foo",
                    "key": "foo",
                    "user_set": "foo",
                    "permission": "foo",
                    "resource_set": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "environment_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo"
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Revokes permissions to a user set *on* a resource set.\n\nIf the permission is not granted, it is skipped.",
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "unassign_set_permissions",
          "originalEndpointId": "Condition Set Rules.unassign_set_permissions",
          "name": "Unassign Set Permissions",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/set_rules"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ConditionSetRuleRemove"
                }
              }
            }
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "user_set": "us_based_employees",
                "permission": "repository:clone",
                "resource_set": "private_repos"
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "user_set": "us_based_employees",
                  "permission": "repository:clone",
                  "resource_set": "private_repos"
                }
              },
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_resourceInstances": {
      "subpackageId": "subpackage_resourceInstances",
      "name": "resourceInstances",
      "endpoints": [
        {
          "auth": true,
          "description": "Lists all the resource instances defined within an environment.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "list_resource_instances",
          "originalEndpointId": "Resource Instances.list_resource_instances",
          "name": "List Resource Instances",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resource_instances"
              }
            ]
          },
          "queryParameters": [
            {
              "description": "Page number of the results to fetch, starting at 1.",
              "key": "page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1
                  }
                }
              }
            },
            {
              "description": "The number of results per page (max 100).",
              "key": "per_page",
              "type": {
                "type": "optional",
                "itemType": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 30
                  }
                }
              }
            }
          ],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "list",
                "itemType": {
                  "type": "id",
                  "value": "ResourceInstanceRead"
                }
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": [
                  {
                    "key": "foo",
                    "tenant": "foo",
                    "resource": "foo",
                    "id": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "environment_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo",
                    "resource_id": "foo",
                    "tenant_id": "foo",
                    "attributes": {}
                  }
                ]
              },
              "responseBodyV3": {
                "type": "json",
                "value": [
                  {
                    "key": "foo",
                    "tenant": "foo",
                    "resource": "foo",
                    "id": "foo",
                    "organization_id": "foo",
                    "project_id": "foo",
                    "environment_id": "foo",
                    "created_at": "foo",
                    "updated_at": "foo",
                    "resource_id": "foo",
                    "tenant_id": "foo",
                    "attributes": {}
                  }
                ]
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Creates a new instance inside the Permit.io system.\n\nIf the instance is already created: will return 200 instead of 201,\nand will return the existing instance object in the response body.",
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "create_resource_instance",
          "originalEndpointId": "Resource Instances.create_resource_instance",
          "name": "Create Resource Instance",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resource_instances"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ResourceInstanceCreate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceInstanceRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "key": "react",
                "tenant": "default",
                "resource": "repository",
                "attributes": {
                  "private": "false",
                  "owner": "facebook"
                }
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "key": "react",
                  "tenant": "default",
                  "resource": "repository",
                  "attributes": {
                    "private": "false",
                    "owner": "facebook"
                  }
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "react",
                  "tenant": "default",
                  "resource": "repository",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c5",
                  "tenant_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c3",
                  "attributes": {
                    "private": "false",
                    "owner": "facebook"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "react",
                  "tenant": "default",
                  "resource": "repository",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c5",
                  "tenant_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c3",
                  "attributes": {
                    "private": "false",
                    "owner": "facebook"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Gets a instance, if such instance exists. Otherwise returns 404.",
          "method": "GET",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "get_resource_instance",
          "originalEndpointId": "Resource Instances.get_resource_instance",
          "name": "Get Resource Instance",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \"slug\").",
                "key": "instance_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resource_instances/"
              },
              {
                "type": "pathParameter",
                "value": "instance_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceInstanceRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "instance_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "react",
                  "tenant": "default",
                  "resource": "repository",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c5",
                  "tenant_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c3",
                  "attributes": {
                    "private": "false",
                    "owner": "facebook"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "react",
                  "tenant": "default",
                  "resource": "repository",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c5",
                  "tenant_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c3",
                  "attributes": {
                    "private": "false",
                    "owner": "facebook"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Deletes the instance and all its related data.",
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "delete_resource_instance",
          "originalEndpointId": "Resource Instances.delete_resource_instance",
          "name": "Delete Resource Instance",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \"slug\").",
                "key": "instance_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resource_instances/"
              },
              {
                "type": "pathParameter",
                "value": "instance_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "instance_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "responseStatusCode": 200
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "description": "Partially updates the instance definition.\nFields that will be provided will be completely overwritten.",
          "method": "PATCH",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "update_resource_instance",
          "originalEndpointId": "Resource Instances.update_resource_instance",
          "name": "Update Resource Instance",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the resource instance, or the URL-friendly key of the resource instance (i.e: the \"slug\").",
                "key": "instance_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/resource_instances/"
              },
              {
                "type": "pathParameter",
                "value": "instance_id"
              },
              {
                "type": "literal",
                "value": ""
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "ResourceInstanceUpdate"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "ResourceInstanceRead"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo",
                "instance_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "attributes": {
                  "private": "false",
                  "owner": "facebook"
                }
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "attributes": {
                    "private": "false",
                    "owner": "facebook"
                  }
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {
                  "key": "react",
                  "tenant": "default",
                  "resource": "repository",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c5",
                  "tenant_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c3",
                  "attributes": {
                    "private": "false",
                    "owner": "facebook"
                  }
                }
              },
              "responseBodyV3": {
                "type": "json",
                "value": {
                  "key": "react",
                  "tenant": "default",
                  "resource": "repository",
                  "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                  "organization_id": "7c60d51f-b44e-4682-87d6-449835ea4de6",
                  "project_id": "405d8375-3514-403b-8c43-83ae74cfe0e9",
                  "environment_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c4",
                  "created_at": "2019-08-24T14:15:22Z",
                  "updated_at": "2019-08-24T14:15:22Z",
                  "resource_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c5",
                  "tenant_id": "40ef0e48-a11f-4963-a229-e396c9f7e7c3",
                  "attributes": {
                    "private": "false",
                    "owner": "facebook"
                  }
                }
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    },
    "subpackage_bulkOperations": {
      "subpackageId": "subpackage_bulkOperations",
      "name": "bulkOperations",
      "endpoints": [
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "bulk_create_users",
          "originalEndpointId": "Bulk Operations.bulk_create_users",
          "name": "Bulk Create Users",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/bulk/users"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "UserCreateBulkOperation"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "UserCreateBulkOperationResult"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "operations": [
                  {
                    "key": "foo"
                  }
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "operations": [
                    {
                      "key": "foo"
                    }
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "PUT",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "bulk_replace_users",
          "originalEndpointId": "Bulk Operations.bulk_replace_users",
          "name": "Bulk Replace Users",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/bulk/users"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "UserReplaceBulkOperation"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "UserReplaceBulkOperationResult"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "operations": [
                  {
                    "key": "foo"
                  }
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "operations": [
                    {
                      "key": "foo"
                    }
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "bulk_delete_users",
          "originalEndpointId": "Bulk Operations.bulk_delete_users",
          "name": "Bulk Delete Users",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/bulk/users"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "UserDeleteBulkOperation"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "UserDeleteBulkOperationResult"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "idents": [
                  "foo"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "idents": [
                    "foo"
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "POST",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "bulk_create_tenants",
          "originalEndpointId": "Bulk Operations.bulk_create_tenants",
          "name": "Bulk Create Tenants",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/bulk/tenants"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "TenantCreateBulkOperation"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TenantCreateBulkOperationResult"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "operations": [
                  {
                    "key": "foo",
                    "name": "foo"
                  }
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "operations": [
                    {
                      "key": "foo",
                      "name": "foo"
                    }
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        },
        {
          "auth": true,
          "method": "DELETE",
          "defaultEnvironment": "https://api.permit.io",
          "environments": [
            {
              "id": "https://api.permit.io",
              "baseUrl": "https://api.permit.io"
            }
          ],
          "id": "bulk_delete_tenants",
          "originalEndpointId": "Bulk Operations.bulk_delete_tenants",
          "name": "Bulk Delete Tenants",
          "path": {
            "pathParameters": [
              {
                "description": "Either the unique id of the project, or the URL-friendly key of the project (i.e: the \"slug\").",
                "key": "proj_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              {
                "description": "Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \"slug\").",
                "key": "env_id",
                "type": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            ],
            "parts": [
              {
                "type": "literal",
                "value": ""
              },
              {
                "type": "literal",
                "value": "/v2/facts/"
              },
              {
                "type": "pathParameter",
                "value": "proj_id"
              },
              {
                "type": "literal",
                "value": "/"
              },
              {
                "type": "pathParameter",
                "value": "env_id"
              },
              {
                "type": "literal",
                "value": "/bulk/tenants"
              }
            ]
          },
          "queryParameters": [],
          "headers": [],
          "request": {
            "type": {
              "type": "json",
              "contentType": "application/json",
              "shape": {
                "type": "reference",
                "value": {
                  "type": "id",
                  "value": "TenantDeleteBulkOperation"
                }
              }
            }
          },
          "response": {
            "type": {
              "type": "reference",
              "value": {
                "type": "id",
                "value": "TenantDeleteBulkOperationResult"
              }
            },
            "statusCode": 200,
            "description": "Successful Response"
          },
          "errorsV2": [
            {
              "type": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "value": "HTTPValidationError"
                }
              },
              "statusCode": 422,
              "description": "Validation Error",
              "name": "UnprocessableEntityError",
              "examples": []
            }
          ],
          "examples": [
            {
              "name": "",
              "description": "",
              "path": "/v2/facts/",
              "pathParameters": {
                "proj_id": "foo",
                "env_id": "foo"
              },
              "queryParameters": {},
              "headers": {},
              "requestBody": {
                "idents": [
                  "foo"
                ]
              },
              "requestBodyV3": {
                "type": "json",
                "value": {
                  "idents": [
                    "foo"
                  ]
                }
              },
              "responseStatusCode": 200,
              "responseBody": {
                "type": "json",
                "value": {}
              },
              "responseBodyV3": {
                "type": "json",
                "value": {}
              }
            }
          ],
          "protocol": {
            "type": "rest"
          }
        }
      ],
      "webhooks": [],
      "websockets": [],
      "types": [],
      "subpackages": []
    }
  },
  "rootPackage": {
    "endpoints": [],
    "webhooks": [],
    "websockets": [],
    "types": [
      "ActionBlockEditable",
      "ActionBlockRead",
      "AddRolePermissions",
      "AttributeBlockEditable",
      "AttributeBlockRead",
      "AttributeType",
      "BulkRoleAssignmentReport",
      "BulkRoleUnAssignmentReport",
      "ConditionSetCreate",
      "ConditionSetRead",
      "ConditionSetRuleCreate",
      "ConditionSetRuleRead",
      "ConditionSetRuleRemove",
      "ConditionSetType",
      "ConditionSetUpdate",
      "EnvironmentCopy",
      "EnvironmentCopyScope",
      "EnvironmentCopyScopeFilters",
      "EnvironmentCopyTarget",
      "EnvironmentCreate",
      "EnvironmentRead",
      "EnvironmentStats",
      "EnvironmentUpdate",
      "HTTPValidationError",
      "IdentityRead",
      "InviteRead",
      "InviteStatus",
      "JwksObj",
      "MemberAccessLevel",
      "MemberAccessObj",
      "OnboardingStep",
      "OrgMemberReadWithGrants",
      "OrganizationCreate",
      "OrganizationRead",
      "OrganizationReadWithAPIKey",
      "OrganizationUpdate",
      "PDPConfigRead",
      "PaginatedResult_ConditionSetRead_",
      "PaginatedResult_ResourceRead_",
      "PaginatedResult_ResourceRoleRead_",
      "PaginatedResult_RoleRead_",
      "PaginatedResult_TenantRead_",
      "PaginatedResult_UserRead_",
      "Permission",
      "ProjectCreate",
      "ProjectRead",
      "ProjectUpdate",
      "RelationsBlock",
      "RemoveRolePermissions",
      "ResourceActionCreate",
      "ResourceActionGroupCreate",
      "ResourceActionGroupRead",
      "ResourceActionGroupUpdate",
      "ResourceActionRead",
      "ResourceActionUpdate",
      "ResourceAttributeCreate",
      "ResourceAttributeRead",
      "ResourceAttributeUpdate",
      "ResourceCreate",
      "ResourceInstanceCreate",
      "ResourceInstanceRead",
      "ResourceInstanceUpdate",
      "ResourceRead",
      "ResourceReplace",
      "ResourceRoleCreate",
      "ResourceRoleList",
      "ResourceRoleRead",
      "ResourceRoleUpdate",
      "ResourceUpdate",
      "RoleAssignmentCreate",
      "RoleAssignmentRead",
      "RoleAssignmentRemove",
      "RoleBlock",
      "RoleCreate",
      "RoleList",
      "RoleRead",
      "RoleUpdate",
      "RolesBlock",
      "Statistics",
      "TenantCreate",
      "TenantCreateBulkOperation",
      "TenantCreateBulkOperationResult",
      "TenantDeleteBulkOperation",
      "TenantDeleteBulkOperationResult",
      "TenantRead",
      "TenantUpdate",
      "UserCreate",
      "UserCreateBulkOperation",
      "UserCreateBulkOperationResult",
      "UserDeleteBulkOperation",
      "UserDeleteBulkOperationResult",
      "UserInTenant",
      "UserRead",
      "UserReplaceBulkOperation",
      "UserReplaceBulkOperationResult",
      "UserRole",
      "UserRoleCreate",
      "UserRoleRemove",
      "UserStatus",
      "UserUpdate",
      "ValidationError"
    ],
    "subpackages": [
      "subpackage_organizations",
      "subpackage_projects",
      "subpackage_environments",
      "subpackage_resources",
      "subpackage_resourceActions",
      "subpackage_resourceActionGroups",
      "subpackage_resourceRoles",
      "subpackage_resourceAttributes",
      "subpackage_userAttributes",
      "subpackage_roles",
      "subpackage_conditionSets",
      "subpackage_users",
      "subpackage_tenants",
      "subpackage_roleAssignments",
      "subpackage_conditionSetRules",
      "subpackage_resourceInstances",
      "subpackage_bulkOperations"
    ]
  },
  "auth": {
    "type": "bearerAuth",
    "tokenName": "token"
  },
  "snippetsConfiguration": {},
  "globalHeaders": []
}