import { FernWorkspace } from "@fern-api/api-workspace-commons";
import { RawSchemas, isRawObjectDefinition, visitRawTypeDeclaration } from "@fern-api/fern-definition-schema";
import { Encoding, ExampleType, FernFilepath, Source, Type, TypeDeclaration } from "@fern-api/ir-sdk";
import { SourceResolver } from "@fern-api/source-resolver";

import { FernFileContext } from "../../FernFileContext";
import { AudienceId } from "../../filtered-ir/ids";
import { ExampleResolver } from "../../resolvers/ExampleResolver";
import { TypeResolver } from "../../resolvers/TypeResolver";
import { getPropertiesByAudience } from "../../utils/getPropertiesByAudience";
import { parseTypeName } from "../../utils/parseTypeName";
import { convertDeclaration } from "../convertDeclaration";
import { convertSourceToProtobufType, maybeConvertEncodingToProtobufType } from "../convertProtobufType";
import { convertAliasTypeDeclaration } from "./convertAliasTypeDeclaration";
import { convertDiscriminatedUnionTypeDeclaration } from "./convertDiscriminatedUnionTypeDeclaration";
import { convertEnumTypeDeclaration } from "./convertEnumTypeDeclaration";
import { convertTypeExample } from "./convertExampleType";
import { convertObjectTypeDeclaration } from "./convertObjectTypeDeclaration";
import { convertUndiscriminatedUnionTypeDeclaration } from "./convertUndiscriminatedUnionTypeDeclaration";
import { getReferencedTypesFromRawDeclaration } from "./getReferencedTypesFromRawDeclaration";

export interface TypeDeclarationWithDescendantFilepaths {
    typeDeclaration: TypeDeclaration;
    descendantFilepaths: Set<FernFilepath>;
    propertiesByAudience: Record<AudienceId, Set<string>>;
}

export function convertTypeDeclaration({
    typeName,
    typeDeclaration,
    file,
    typeResolver,
    exampleResolver,
    sourceResolver,
    workspace
}: {
    typeName: string;
    typeDeclaration: RawSchemas.TypeDeclarationSchema;
    file: FernFileContext;
    typeResolver: TypeResolver;
    exampleResolver: ExampleResolver;
    sourceResolver: SourceResolver;
    workspace: FernWorkspace;
}): TypeDeclarationWithDescendantFilepaths {
    const declaration = convertDeclaration(typeDeclaration);
    const declaredTypeName = parseTypeName({
        typeName,
        file
    });

    const referencedTypes = getReferencedTypesFromRawDeclaration({ typeDeclaration, file, typeResolver });

    let propertiesByAudience: Record<AudienceId, Set<string>> = {};
    if (isRawObjectDefinition(typeDeclaration)) {
        propertiesByAudience = getPropertiesByAudience(typeDeclaration.properties ?? {});
    }

    const source = convertTypeDeclarationSource({
        file,
        typeDeclaration,
        typeName,
        sourceResolver
    });

    return {
        propertiesByAudience,
        typeDeclaration: {
            ...declaration,
            inline: getInline(typeDeclaration),
            name: declaredTypeName,
            shape: convertType({ typeDeclaration, file, typeResolver }),
            referencedTypes: new Set(referencedTypes.map((referencedType) => referencedType.typeId)),
            encoding: convertTypeDeclarationEncoding({ typeDeclaration, source }),
            source,
            userProvidedExamples:
                typeof typeDeclaration !== "string" && typeDeclaration.examples != null
                    ? typeDeclaration.examples.map(
                          (example): ExampleType => ({
                              name: example.name != null ? file.casingsGenerator.generateName(example.name) : undefined,
                              docs: example.docs,
                              jsonExample: exampleResolver.resolveAllReferencesInExampleOrThrow({
                                  example: example.value,
                                  file
                              }).resolvedExample,
                              shape: convertTypeExample({
                                  typeName: declaredTypeName,
                                  example: example.value,
                                  typeResolver,
                                  exampleResolver,
                                  typeDeclaration,
                                  fileContainingType: file,
                                  fileContainingExample: file,
                                  workspace
                              })
                          })
                      )
                    : [],
            autogeneratedExamples: [],
            v2Examples: undefined
        },
        descendantFilepaths: new Set(referencedTypes.map((referencedType) => referencedType.fernFilepath))
    };
}

export function convertType({
    typeDeclaration,
    file,
    typeResolver
}: {
    typeDeclaration: RawSchemas.TypeDeclarationSchema;
    file: FernFileContext;
    typeResolver: TypeResolver;
}): Type {
    return visitRawTypeDeclaration<Type>(typeDeclaration, {
        alias: (alias) => convertAliasTypeDeclaration({ alias, file, typeResolver }),
        object: (object) => convertObjectTypeDeclaration({ object, file }),
        discriminatedUnion: (union) => convertDiscriminatedUnionTypeDeclaration({ union, file, typeResolver }),
        undiscriminatedUnion: (union) => convertUndiscriminatedUnionTypeDeclaration({ union, file }),
        enum: (enum_) => Type.enum(convertEnumTypeDeclaration({ _enum: enum_, file }))
    });
}

function convertTypeDeclarationSource({
    file,
    typeDeclaration,
    typeName,
    sourceResolver
}: {
    file: FernFileContext;
    typeDeclaration: RawSchemas.TypeDeclarationSchema;
    typeName: string;
    sourceResolver: SourceResolver;
}): Source | undefined {
    if (typeof typeDeclaration === "string" || (typeDeclaration.source == null && typeDeclaration.encoding == null)) {
        return undefined;
    }
    if (typeDeclaration.encoding != null) {
        const maybeProtobufType = maybeConvertEncodingToProtobufType({
            encoding: typeDeclaration.encoding
        });
        if (maybeProtobufType != null) {
            return Source.proto(maybeProtobufType);
        }
    }
    if (typeDeclaration.source == null) {
        return undefined;
    }
    const resolvedSource = sourceResolver.resolveSourceOrThrow({
        source: typeDeclaration.source,
        relativeFilepath: file.relativeFilepath
    });
    if (resolvedSource == null || resolvedSource.type !== "protobuf") {
        return undefined;
    }
    return Source.proto(
        convertSourceToProtobufType({
            source: resolvedSource,
            name: typeName
        })
    );
}

function convertTypeDeclarationEncoding({
    typeDeclaration,
    source
}: {
    typeDeclaration: RawSchemas.TypeDeclarationSchema;
    source: Source | undefined;
}): Encoding {
    if (typeof typeDeclaration !== "string" && typeDeclaration.encoding != null) {
        return convertEncoding(typeDeclaration.encoding);
    }
    return convertSourceToEncoding(source);
}

function convertEncoding(encodingSchema: RawSchemas.EncodingSchema): Encoding {
    return encodingSchema.proto != null
        ? {
              json: undefined,
              proto: {}
          }
        : {
              json: {},
              proto: undefined
          };
}

function convertSourceToEncoding(source: Source | undefined): Encoding {
    return source != null && source.type === "proto"
        ? {
              json: undefined,
              proto: {}
          }
        : {
              json: {},
              proto: undefined
          };
}
function getInline(typeDeclaration: RawSchemas.TypeDeclarationSchema): boolean | undefined {
    if (typeof typeDeclaration === "string") {
        return undefined;
    }
    if ("inline" in typeDeclaration) {
        return typeDeclaration.inline;
    }
    return undefined;
}
