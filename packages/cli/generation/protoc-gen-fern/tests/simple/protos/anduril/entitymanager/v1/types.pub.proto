syntax = "proto3";

package anduril.entitymanager.v1;

option csharp_namespace = "Anduril.Entitymanager.V1";
option go_package = "ghe.anduril.dev/anduril/andurilapis-go/anduril/entitymanager/v1;entitymanager";
option java_multiple_files = true;
option java_outer_classname = "TypesProto";
option java_package = "com.anduril.entitymanager.v1";
option objc_class_prefix = "AEX";

// The type of alternate id.
enum AltIdType {
  ALT_ID_TYPE_INVALID = 0;
  // an Anduril trackId_2
  ALT_ID_TYPE_TRACK_ID_2 = 1;
  // an Anduril trackId_1
  ALT_ID_TYPE_TRACK_ID_1 = 12;
  // an Anduril Sensor Point of Interest ID
  ALT_ID_TYPE_SPI_ID = 2;
  // NITF file title
  ALT_ID_TYPE_NITF_FILE_TITLE = 3;
  // Track repo alert ID
  ALT_ID_TYPE_TRACK_REPO_ALERT_ID = 4;
  // an Anduril AssetId
  ALT_ID_TYPE_ASSET_ID = 5;
  // Use for Link 16 track identifiers for non-JTIDS Unit entities.
  ALT_ID_TYPE_LINK16_TRACK_NUMBER = 6;
  // Use for Link 16 JTIDS Unit identifiers.
  ALT_ID_TYPE_LINK16_JU = 7;
  // an NCCT message ID
  ALT_ID_TYPE_NCCT_MESSAGE_ID = 8;
  // callsign for the entity. e.g. a TAK callsign or an aircraft callsign
  ALT_ID_TYPE_CALLSIGN = 9;
  // the Maritime Mobile Service Identity for a maritime object (vessel, offshore installation, etc.)
  ALT_ID_TYPE_MMSI_ID = 10;
  // A VMF URN that uniquely identifies the URN on the VMF network.
  ALT_ID_TYPE_VMF_URN = 11;
  // the International Maritime Organization number for identifying maritime objects (vessel, offshore installation, etc.)
  ALT_ID_TYPE_IMO_ID = 13;
  // A VMF target number that uniquely identifies the target on the VMF network
  ALT_ID_TYPE_VMF_TARGET_NUMBER = 14;
  // A serial number that uniquely identifies the entity and is permanently associated with only one entity. This
  // identifier is assigned by some authority and only ever identifies a single thing. Examples include a
  // Vehicle Identification Number (VIN) or ship hull identification number (hull number). This is a generalized
  // component and should not be used if a more specific registration type is already defined (i.e., ALT_ID_TYPE_VMF_URN).
  ALT_ID_TYPE_SERIAL_NUMBER = 15;
  // A registration identifier assigned by a local or national authority. This identifier is not permanently fixed
  // to one specific entity and may be reassigned on change of ownership, destruction, or other conditions set
  // forth by the authority. Examples include a vehicle license plate or aircraft tail number. This is a generalized
  // component and should not be used if a more specific registration type is already defined (i.e., ALT_ID_TYPE_IMO_ID).
  ALT_ID_TYPE_REGISTRATION_ID = 16;
  // Integrated Broadcast Service Common Message Format Global Identifier
  ALT_ID_TYPE_IBS_GID = 17;
  // Department of Defense Activity Address Code.
  ALT_ID_TYPE_DODAAC = 18;
  // Unit Identification Code uniquely identifies each US Department of Defense entity
  ALT_ID_TYPE_UIC = 19;
  // A NORAD Satellite Catalog Number, a 9-digit number uniquely representing orbital objects around Earth.
  // of strictly numeric.
  ALT_ID_TYPE_NORAD_CAT_ID = 20;
  // Space object name. If populated, use names from the UN Office
  // of Outer Space Affairs designator index, otherwise set field to UNKNOWN.
  ALT_ID_TYPE_UNOOSA_NAME = 23;
  // Space object identifier. If populated, use the international spacecraft designator
  // as published in the UN Office of Outer Space Affairs designator index, otherwise set to UNKNOWN.
  // Recommended values have the format YYYYNNNP{PP}, where:
  //  YYYY = Year of launch.
  //  NNN = Three-digit serial number of launch
  //  in year YYYY (with leading zeros).
  //  P{PP} = At least one capital letter for the
  //  identification of the part brought
  //  into space by the launch.
  ALT_ID_TYPE_UNOOSA_ID = 24;
}

// Set of possible templates used when creating an entity.
// This impacts minimum required component sets and can be used by edge systems that need to distinguish.
enum Template {
  TEMPLATE_INVALID = 0;
  // additional track required components:
  //   * location
  //   * mil_view
  TEMPLATE_TRACK = 1;
  // additional SPI required components:
  //   * location
  //   * mil_view
  //   * produced_by
  TEMPLATE_SENSOR_POINT_OF_INTEREST = 2;
  // additional asset required components:
  //   * location
  //   * mil_view
  //   * ontology
  TEMPLATE_ASSET = 3;
  // additional geo required components:
  //   * geo_shape
  //   * geo_details
  TEMPLATE_GEO = 4;
  // additional SOI required components:
  //   * signal
  //   * location field should be populated if there is a fix.
  //   * mil_view
  //   * ontology
  TEMPLATE_SIGNAL_OF_INTEREST = 5;
}

// The state of an override.
enum OverrideStatus {
  OVERRIDE_STATUS_INVALID = 0;
  // the override was applied to the entity.
  OVERRIDE_STATUS_APPLIED = 1;
  // the override is pending action.
  OVERRIDE_STATUS_PENDING = 2;
  // the override has been timed out.
  OVERRIDE_STATUS_TIMEOUT = 3;
  // the override has been rejected
  OVERRIDE_STATUS_REJECTED = 4;
  // The override is pending deletion.
  OVERRIDE_STATUS_DELETION_PENDING = 5;
}

message UInt32Range {
  uint32 lower_bound = 1;
  uint32 upper_bound = 2;
}

message FloatRange {
  float lower_bound = 1;
  float upper_bound = 2;
}

enum OverrideType {
  // The override type value was not set. This value is interpreted as OVERRIDE_TYPE_LIVE for backward compatibility.
  OVERRIDE_TYPE_INVALID = 0;
  // Override was requested when the entity was live according to the Entity Manager instance that handled the request.
  OVERRIDE_TYPE_LIVE = 1;
  // Override was requested after the entity expired according to the Entity Manager instance that handled the request.
  OVERRIDE_TYPE_POST_EXPIRY = 2;
}
