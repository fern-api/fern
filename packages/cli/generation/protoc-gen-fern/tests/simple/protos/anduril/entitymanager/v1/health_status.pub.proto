syntax = "proto3";

package anduril.entitymanager.v1;

import "google/protobuf/timestamp.proto";

option csharp_namespace = "Anduril.Entitymanager.V1";
option go_package = "ghe.anduril.dev/anduril/andurilapis-go/anduril/entitymanager/v1;entitymanager";
option java_multiple_files = true;
option java_outer_classname = "EntityHealthStatusProto";
option java_package = "com.anduril.entitymanager.v1";
option objc_class_prefix = "AEX";

// Enumeration of possible connection states.
enum ConnectionStatus {
  CONNECTION_STATUS_INVALID = 0;
  CONNECTION_STATUS_ONLINE = 1;
  CONNECTION_STATUS_OFFLINE = 2;
}

// Enumeration of possible health states.
enum HealthStatus {
  HEALTH_STATUS_INVALID = 0;
  // Indicates that the component is operating as intended.
  HEALTH_STATUS_HEALTHY = 1;
  // Indicates that the component is at risk of transitioning into a HEALTH_STATUS_FAIL
  // state or that the component is operating in a degraded state.
  HEALTH_STATUS_WARN = 2;
  // Indicates that the component is not functioning as intended.
  HEALTH_STATUS_FAIL = 3;
  // Indicates that the component is offline.
  HEALTH_STATUS_OFFLINE = 4;
  // Indicates that the component is not yet functioning, but it is transitioning into a
  // HEALTH_STATUS_HEALTHY state. A component should only report this state temporarily.
  HEALTH_STATUS_NOT_READY = 5;
}

// A message describing the component's health status.
message ComponentMessage {
  // The status associated with this message.
  HealthStatus status = 1;

  // The human-readable content of the message.
  string message = 2;
}

// Health of an individual component.
message ComponentHealth {
  // Consistent internal ID for this component.
  string id = 1;

  // Display name for this component.
  string name = 2;

  // Health for this component.
  HealthStatus health = 3;

  // Human-readable describing the component state. These messages should be understandable by end users.
  repeated ComponentMessage messages = 4;

  // The last update time for this specific component.
  // If this timestamp is unset, the data is assumed to be most recent
  google.protobuf.Timestamp update_time = 5;
}

// General health of the entity as reported by the entity.
message Health {
  // Status indicating whether the entity is able to communicate with Entity Manager.
  ConnectionStatus connection_status = 1;

  // Top-level health status; typically a roll-up of individual component healths.
  HealthStatus health_status = 2;

  // Health of individual components running on this Entity.
  repeated ComponentHealth components = 3;

  // The update time for the top-level health information.
  // If this timestamp is unset, the data is assumed to be most recent
  google.protobuf.Timestamp update_time = 4;

  // Active alerts indicate a critical change in system state sent by the asset
  // that must be made known to an operator or consumer of the common operating picture.
  // Alerts are different from ComponentHealth messages--an active alert does not necessarily
  // indicate a component is in an unhealthy state. For example, an asset may trigger
  // an active alert based on fuel levels running low. Alerts should be removed from this list when their conditions
  // are cleared. In other words, only active alerts should be reported here.
  repeated Alert active_alerts = 5;
}

// An alert informs operators of critical events related to system performance and mission
// execution. An alert is produced as a result of one or more alert conditions.
message Alert {
  // Short, machine-readable code that describes this alert. This code is intended to provide systems off-asset
  // with a lookup key to retrieve more detailed information about the alert.
  string alert_code = 1;
  // Human-readable description of this alert. The description is intended for display in the UI for human
  // understanding and should not be used for machine processing. If the description is fixed and the vehicle controller
  // provides no dynamic substitutions, then prefer lookup based on alert_code.
  string description = 2;
  // Alert level (Warning, Caution, or Advisory).
  AlertLevel level = 3;
  // Time at which this alert was activated.
  google.protobuf.Timestamp activated_time = 4;
  // Set of conditions which have activated this alert.
  repeated AlertCondition active_conditions = 5;
}

// Alerts are categorized into one of three levels - Warnings, Cautions, and Advisories (WCAs).
enum AlertLevel {
  ALERT_LEVEL_INVALID = 0;
  // For conditions that require awareness and may require subsequent response.
  ALERT_LEVEL_ADVISORY = 1;
  // For conditions that require immediate awareness and subsequent response.
  ALERT_LEVEL_CAUTION = 2;
  // For conditions that require immediate awareness and response.
  ALERT_LEVEL_WARNING = 3;
}

// A condition which may trigger an alert.
message AlertCondition {
  // Short, machine-readable code that describes this condition. This code is intended to provide systems off-asset
  // with a lookup key to retrieve more detailed information about the condition.
  string condition_code = 1;
  // Human-readable description of this condition. The description is intended for display in the UI for human
  // understanding and should not be used for machine processing. If the description is fixed and the vehicle controller
  // provides no dynamic substitutions, then prefer lookup based on condition_code.
  string description = 2;
}
