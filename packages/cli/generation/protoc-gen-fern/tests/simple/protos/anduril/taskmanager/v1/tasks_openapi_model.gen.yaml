# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi

openapi: 3.0.3
info:
    title: TaskManagerRestAPI API
    version: 0.0.1
paths:
    /task/query:
        get:
            tags:
                - TaskManagerRestAPI
            operationId: TaskManagerRestAPI_TaskQuery
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TaskQueryResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /task/{taskId}:
        get:
            tags:
                - TaskManagerRestAPI
            operationId: TaskManagerRestAPI_GetTask
            parameters:
                - name: taskId
                  in: path
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetTaskResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
components:
    schemas:
        ActiveTarget:
            type: object
            properties: {}
            description: |-
                A target relationship is the inverse of TrackedBy; a one-way relation
                 from sensor to target, indicating track(s) currently prioritized by a robot.
        Agent:
            type: object
            properties:
                entityId:
                    type: string
                    description: Entity ID of the agent.
            description: Represents an Agent in the COP.
        Alert:
            type: object
            properties:
                alertCode:
                    type: string
                    description: |-
                        Short, machine-readable code that describes this alert. This code is intended to provide systems off-asset
                         with a lookup key to retrieve more detailed information about the alert.
                description:
                    type: string
                    description: |-
                        Human-readable description of this alert. The description is intended for display in the UI for human
                         understanding and should not be used for machine processing. If the description is fixed and the vehicle controller
                         provides no dynamic substitutions, then prefer lookup based on alert_code.
                level:
                    enum:
                        - ALERT_LEVEL_INVALID
                        - ALERT_LEVEL_ADVISORY
                        - ALERT_LEVEL_CAUTION
                        - ALERT_LEVEL_WARNING
                    type: string
                    description: Alert level (Warning, Caution, or Advisory).
                    format: enum
                activatedTime:
                    type: string
                    description: Time at which this alert was activated.
                    format: date-time
                activeConditions:
                    type: array
                    items:
                        $ref: '#/components/schemas/AlertCondition'
                    description: Set of conditions which have activated this alert.
            description: |-
                An alert informs operators of critical events related to system performance and mission
                 execution. An alert is produced as a result of one or more alert conditions.
        AlertCondition:
            type: object
            properties:
                conditionCode:
                    type: string
                    description: |-
                        Short, machine-readable code that describes this condition. This code is intended to provide systems off-asset
                         with a lookup key to retrieve more detailed information about the condition.
                description:
                    type: string
                    description: |-
                        Human-readable description of this condition. The description is intended for display in the UI for human
                         understanding and should not be used for machine processing. If the description is fixed and the vehicle controller
                         provides no dynamic substitutions, then prefer lookup based on condition_code.
            description: A condition which may trigger an alert.
        Aliases:
            type: object
            properties:
                alternateIds:
                    type: array
                    items:
                        $ref: '#/components/schemas/AlternateId'
                name:
                    type: string
                    description: The best available version of the entity's display name.
            description: Available for any Entities with alternate ids in other systems.
        Allocation:
            type: object
            properties:
                activeAgents:
                    type: array
                    items:
                        $ref: '#/components/schemas/Agent'
                    description: Agents actively being utilized in a Task.
            description: Allocation contains a list of agents allocated to a Task.
        AlternateId:
            type: object
            properties:
                id:
                    type: string
                type:
                    enum:
                        - ALT_ID_TYPE_INVALID
                        - ALT_ID_TYPE_TRACK_ID_2
                        - ALT_ID_TYPE_TRACK_ID_1
                        - ALT_ID_TYPE_SPI_ID
                        - ALT_ID_TYPE_NITF_FILE_TITLE
                        - ALT_ID_TYPE_TRACK_REPO_ALERT_ID
                        - ALT_ID_TYPE_ASSET_ID
                        - ALT_ID_TYPE_LINK16_TRACK_NUMBER
                        - ALT_ID_TYPE_LINK16_JU
                        - ALT_ID_TYPE_NCCT_MESSAGE_ID
                        - ALT_ID_TYPE_CALLSIGN
                        - ALT_ID_TYPE_MMSI_ID
                        - ALT_ID_TYPE_VMF_URN
                        - ALT_ID_TYPE_IMO_ID
                        - ALT_ID_TYPE_VMF_TARGET_NUMBER
                        - ALT_ID_TYPE_SERIAL_NUMBER
                        - ALT_ID_TYPE_REGISTRATION_ID
                        - ALT_ID_TYPE_IBS_GID
                        - ALT_ID_TYPE_DODAAC
                        - ALT_ID_TYPE_UIC
                        - ALT_ID_TYPE_NORAD_CAT_ID
                        - ALT_ID_TYPE_UNOOSA_NAME
                        - ALT_ID_TYPE_UNOOSA_ID
                    type: string
                    format: enum
            description: An alternate id for an Entity.
        AngleOfArrival:
            type: object
            properties:
                relativePose:
                    allOf:
                        - $ref: '#/components/schemas/Pose'
                    description: |-
                        Origin (LLA) and attitude (relative to ENU) of a ray pointing towards the detection. The attitude represents a
                         forward-left-up (FLU) frame where the x-axis (1, 0, 0) is pointing towards the target.
                bearingElevationCovarianceRad2:
                    allOf:
                        - $ref: '#/components/schemas/TMat2'
                    description: |-
                        Bearing/elevation covariance matrix where bearing is defined in radians CCW+ about the z-axis from the x-axis of FLU frame
                         and elevation is positive down from the FL/XY plane.
                         mxx = bearing variance in rad^2
                         mxy = bearing/elevation covariance in rad^2
                         myy = elevation variance in rad^2
            description: The direction from which the signal is received
        Bandwidth:
            type: object
            properties:
                bandwidthHz:
                    type: number
                    format: double
            description: Describes the bandwidth of a signal
        BandwidthRange:
            type: object
            properties:
                minimumBandwidth:
                    $ref: '#/components/schemas/Bandwidth'
                maximumBandwidth:
                    $ref: '#/components/schemas/Bandwidth'
            description: A component that describes the min and max bandwidths of a sensor
        CancelRequest:
            type: object
            properties:
                taskId:
                    type: string
                    description: ID of the Task to cancel.
                assignee:
                    allOf:
                        - $ref: '#/components/schemas/Principal'
                    description: |-
                        The assignee of the Task. Useful for agent routing where an endpoint owns multiple agents,
                         especially onBehalfOf assignees.
            description: Request to Cancel a Task.
        Classification:
            type: object
            properties:
                default:
                    allOf:
                        - $ref: '#/components/schemas/ClassificationInformation'
                    description: |-
                        The default classification information which should be assumed to apply to everything in
                         the entity unless a specific field level classification is present.
                fields:
                    type: array
                    items:
                        $ref: '#/components/schemas/FieldClassificationInformation'
                    description: |-
                        The set of individual field classification information which should always precedence
                         over the default classification information.
            description: A component that describes an entity's security classification levels.
        ClassificationInformation:
            type: object
            properties:
                level:
                    enum:
                        - CLASSIFICATION_LEVELS_INVALID
                        - CLASSIFICATION_LEVELS_UNCLASSIFIED
                        - CLASSIFICATION_LEVELS_CONTROLLED_UNCLASSIFIED
                        - CLASSIFICATION_LEVELS_CONFIDENTIAL
                        - CLASSIFICATION_LEVELS_SECRET
                        - CLASSIFICATION_LEVELS_TOP_SECRET
                    type: string
                    description: Classification level to be applied to the information in question.
                    format: enum
                caveats:
                    type: array
                    items:
                        type: string
                    description: Caveats that may further restrict how the information can be disseminated.
            description: |-
                Represents all of the necessary information required to generate a summarized
                 classification marking.

                 > example: A summarized classification marking of "TOPSECRET//NOFORN//FISA"
                            would be defined as: { "level": 5, "caveats": [ "NOFORN, "FISA" ] }
        Color:
            type: object
            properties:
                red:
                    type: number
                    description: The amount of red in the color as a value in the interval [0, 1].
                    format: float
                green:
                    type: number
                    description: The amount of green in the color as a value in the interval [0, 1].
                    format: float
                blue:
                    type: number
                    description: The amount of blue in the color as a value in the interval [0, 1].
                    format: float
                alpha:
                    type: number
                    description: |-
                        The fraction of this color that should be applied to the pixel. That is,
                         the final pixel color is defined by the equation:

                         `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)`

                         This means that a value of 1.0 corresponds to a solid color, whereas
                         a value of 0.0 corresponds to a completely transparent color. This
                         uses a wrapper message rather than a simple float scalar so that it is
                         possible to distinguish between a default value and the value being unset.
                         If omitted, this color object is rendered as a solid color
                         (as if the alpha value had been explicitly given a value of 1.0).
                    format: float
        CompleteRequest:
            type: object
            properties:
                taskId:
                    type: string
                    description: ID of the task to complete.
            description: Request to Complete a Task.
        ComponentHealth:
            type: object
            properties:
                id:
                    type: string
                    description: Consistent internal ID for this component.
                name:
                    type: string
                    description: Display name for this component.
                health:
                    enum:
                        - HEALTH_STATUS_INVALID
                        - HEALTH_STATUS_HEALTHY
                        - HEALTH_STATUS_WARN
                        - HEALTH_STATUS_FAIL
                        - HEALTH_STATUS_OFFLINE
                        - HEALTH_STATUS_NOT_READY
                    type: string
                    description: Health for this component.
                    format: enum
                messages:
                    type: array
                    items:
                        $ref: '#/components/schemas/ComponentMessage'
                    description: Human-readable describing the component state. These messages should be understandable by end users.
                updateTime:
                    type: string
                    description: |-
                        The last update time for this specific component.
                         If this timestamp is unset, the data is assumed to be most recent
                    format: date-time
            description: Health of an individual component.
        ComponentMessage:
            type: object
            properties:
                status:
                    enum:
                        - HEALTH_STATUS_INVALID
                        - HEALTH_STATUS_HEALTHY
                        - HEALTH_STATUS_WARN
                        - HEALTH_STATUS_FAIL
                        - HEALTH_STATUS_OFFLINE
                        - HEALTH_STATUS_NOT_READY
                    type: string
                    description: The status associated with this message.
                    format: enum
                message:
                    type: string
                    description: The human-readable content of the message.
            description: A message describing the component's health status.
        Correlation:
            type: object
            properties:
                primary:
                    allOf:
                        - $ref: '#/components/schemas/PrimaryCorrelation'
                    description: |-
                        This entity is the primary of a correlation meaning that it serves as the representative
                         entity of the correlation set.
                secondary:
                    allOf:
                        - $ref: '#/components/schemas/SecondaryCorrelation'
                    description: |-
                        This entity is a secondary of a correlation meaning that it will be represented by the
                         primary of the correlation set.
                membership:
                    allOf:
                        - $ref: '#/components/schemas/CorrelationMembership'
                    description: If present, this entity is a part of a correlation set.
                decorrelation:
                    allOf:
                        - $ref: '#/components/schemas/Decorrelation'
                    description: |-
                        If present, this entity was explicitly decorrelated from one or more entities.
                         An entity can be both correlated and decorrelated as long as they are disjoint sets.
                         An example would be if a user in the UI decides that two tracks are not actually the
                         same despite an automatic correlator having correlated them. The user would then
                         decorrelate the two tracks and this decorrelation would be preserved preventing the
                         correlator from re-correlating them at a later time.
            description: |-
                Available for Entities that are a correlated (N to 1) set of entities. This will be present on
                 each entity in the set.
        CorrelationMembership:
            type: object
            properties:
                correlationSetId:
                    type: string
                    description: The ID of the correlation set this entity belongs to.
                primary:
                    allOf:
                        - $ref: '#/components/schemas/PrimaryMembership'
                    description: |-
                        This entity is the primary of a correlation set meaning that it serves as the representative
                         entity of the correlation set.
                nonPrimary:
                    allOf:
                        - $ref: '#/components/schemas/NonPrimaryMembership'
                    description: |-
                        This entity is not the primary of the correlation set. Note that there may not
                         be a primary at all.
                metadata:
                    allOf:
                        - $ref: '#/components/schemas/CorrelationMetadata'
                    description: Additional metadata on this correlation.
        CorrelationMetadata:
            type: object
            properties:
                provenance:
                    allOf:
                        - $ref: '#/components/schemas/Provenance'
                    description: Who or what added this entity to the (de)correlation.
                replicationMode:
                    enum:
                        - CORRELATION_REPLICATION_MODE_INVALID
                        - CORRELATION_REPLICATION_MODE_LOCAL
                        - CORRELATION_REPLICATION_MODE_GLOBAL
                    type: string
                    description: |-
                        Indicates how the correlation will be distributed. Because a correlation is composed of
                         multiple secondaries, each of which may have been correlated with different replication
                         modes, the distribution of the correlation is composed of distributions of the individual
                         entities within the correlation set.
                         For example, if there are two secondary entities A and B correlated against a primary C,
                         with A having been correlated globally and B having been correlated locally, then the
                         correlation set that is distributed globally than what is known locally in the node.
                    format: enum
                type:
                    enum:
                        - CORRELATION_TYPE_INVALID
                        - CORRELATION_TYPE_MANUAL
                        - CORRELATION_TYPE_AUTOMATED
                    type: string
                    description: What type of (de)correlation was this entity added with.
                    format: enum
        CronWindow:
            type: object
            properties:
                cronExpression:
                    type: string
                    description: |-
                        in UTC, describes when and at what cadence this window starts, in the quartz flavor of cron

                         examples:
                            This schedule is begins at 7:00:00am UTC everyday between Monday and Friday
                                0 0 7 ? * MON-FRI *
                            This schedule begins every 5 minutes starting at 12:00:00pm UTC until 8:00:00pm UTC everyday
                                0 0/5 12-20 * * ? *
                            This schedule begins at 12:00:00pm UTC on March 2nd 2023
                                0 0 12 2 3 ? 2023
                durationMillis:
                    type: string
                    description: describes the duration
        DecorrelatedAll:
            type: object
            properties:
                metadata:
                    allOf:
                        - $ref: '#/components/schemas/CorrelationMetadata'
                    description: Metadata about the decorrelation.
        DecorrelatedSingle:
            type: object
            properties:
                entityId:
                    type: string
                    description: The entity that was decorrelated against.
                metadata:
                    allOf:
                        - $ref: '#/components/schemas/CorrelationMetadata'
                    description: Metadata about the decorrelation.
        Decorrelation:
            type: object
            properties:
                all:
                    allOf:
                        - $ref: '#/components/schemas/DecorrelatedAll'
                    description: This will be specified if this entity was decorrelated against all other entities.
                decorrelatedEntities:
                    type: array
                    items:
                        $ref: '#/components/schemas/DecorrelatedSingle'
                    description: |-
                        A list of decorrelated entities that have been explicitly decorrelated against this entity
                         which prevents lower precedence correlations from overriding it in the future.
                         For example, if an operator in the UI decorrelated tracks A and B, any automated
                         correlators would be unable to correlate them since manual decorrelations have
                         higher precedence than automatic ones. Precedence is determined by both correlation
                         type and replication mode.
        Dimensions:
            type: object
            properties:
                lengthM:
                    type: number
                    description: Length of the entity in meters
                    format: float
        ENU:
            type: object
            properties:
                e:
                    type: number
                    format: double
                n:
                    type: number
                    format: double
                u:
                    type: number
                    format: double
        Echelon:
            type: object
            properties:
                armyEchelon:
                    enum:
                        - ARMY_ECHELON_INVALID
                        - ARMY_ECHELON_FIRE_TEAM
                        - ARMY_ECHELON_SQUAD
                        - ARMY_ECHELON_PLATOON
                        - ARMY_ECHELON_COMPANY
                        - ARMY_ECHELON_BATTALION
                        - ARMY_ECHELON_REGIMENT
                        - ARMY_ECHELON_BRIGADE
                        - ARMY_ECHELON_DIVISION
                        - ARMY_ECHELON_CORPS
                        - ARMY_ECHELON_ARMY
                    type: string
                    format: enum
            description: |-
                Describes a Echelon group type.  Comprised of entities which are members of the
                 same unit or echelon. Ex: A group of tanks within a armored company or that same company
                 as a member of a battalion.
        EmitterNotation:
            type: object
            properties:
                emitterNotation:
                    type: string
                confidence:
                    type: number
                    description: confidence as a percentage that the emitter notation in this component is accurate
                    format: double
            description: A representation of a single emitter notation.
        Entity:
            type: object
            properties:
                entityId:
                    type: string
                    description: |-
                        A Globally Unique Identifier (GUID) for your entity. If this field is empty, the Entity Manager API
                         automatically generates an ID when it creates the entity.
                description:
                    type: string
                    description: |-
                        A human-readable entity description that's helpful for debugging purposes and human
                         traceability. If this field is empty, the Entity Manager API generates one for you.
                isLive:
                    type: boolean
                    description: |-
                        Indicates the entity is active and should have a lifecycle state of CREATE or UPDATE.
                         Set this field to true when publishing an entity.
                createdTime:
                    type: string
                    description: |-
                        The time when the entity was first known to the entity producer. If this field is empty, the Entity Manager API uses the
                         current timestamp of when the entity is first received.
                         For example, when a drone is first powered on, it might report its startup time as the created time.
                         The timestamp doesn't change for the lifetime of an entity.
                    format: date-time
                expiryTime:
                    type: string
                    description: |-
                        Future time that expires an entity and updates the is_live flag.
                         For entities that are constantly updating, the expiry time also updates.
                         In some cases, this may differ from is_live.
                         Example: Entities with tasks exported to an external system must remain
                         active even after they expire.
                         This field is required when publishing a prepopulated entity.
                         The expiry time must be in the future, but less than 30 days from the current time.
                    format: date-time
                status:
                    allOf:
                        - $ref: '#/components/schemas/Status'
                    description: Human-readable descriptions of what the entity is currently doing.
                location:
                    allOf:
                        - $ref: '#/components/schemas/Location'
                    description: Geospatial data related to the entity, including its position, kinematics, and orientation.
                locationUncertainty:
                    allOf:
                        - $ref: '#/components/schemas/LocationUncertainty'
                    description: Indicates uncertainty of the entity's position and kinematics.
                geoShape:
                    allOf:
                        - $ref: '#/components/schemas/GeoShape'
                    description: Geospatial representation of the entity, including entities that cover an area rather than a fixed point.
                geoDetails:
                    allOf:
                        - $ref: '#/components/schemas/GeoDetails'
                    description: Additional details on what the geospatial area or point represents, along with visual display details.
                aliases:
                    allOf:
                        - $ref: '#/components/schemas/Aliases'
                    description: Entity name displayed in the Lattice UI side panel. Also includes identifiers that other systems can use to reference the same entity.
                tracked:
                    allOf:
                        - $ref: '#/components/schemas/Tracked'
                    description: If this entity is tracked by another entity, this component contains data related to how it's being tracked.
                correlation:
                    allOf:
                        - $ref: '#/components/schemas/Correlation'
                    description: If this entity has been correlated or decorrelated to another one, this component contains information on the correlation or decorrelation.
                milView:
                    allOf:
                        - $ref: '#/components/schemas/MilView'
                    description: View of the entity.
                ontology:
                    allOf:
                        - $ref: '#/components/schemas/Ontology'
                    description: Ontology defines an entity's categorization in Lattice, and improves data retrieval and integration. Builds a standardized representation of the entity.
                sensors:
                    allOf:
                        - $ref: '#/components/schemas/Sensors'
                    description: Details an entity's available sensors.
                payloads:
                    allOf:
                        - $ref: '#/components/schemas/Payloads'
                    description: Details an entity's available payloads.
                powerState:
                    allOf:
                        - $ref: '#/components/schemas/PowerState'
                    description: Details the entity's power source.
                provenance:
                    allOf:
                        - $ref: '#/components/schemas/Provenance'
                    description: The primary data source provenance for this entity.
                overrides:
                    allOf:
                        - $ref: '#/components/schemas/Overrides'
                    description: Provenance of override data.
                indicators:
                    allOf:
                        - $ref: '#/components/schemas/Indicators'
                    description: |-
                        Describes an entity's specific characteristics and the operations that can be performed on the entity.
                         For example, "simulated" informs the operator that the entity is from a simulation, and "deletable"
                         informs the operator (and system) that the delete operation is valid against the entity.
                targetPriority:
                    allOf:
                        - $ref: '#/components/schemas/TargetPriority'
                    description: The prioritization associated with an entity, such as if it's a threat or a high-value target.
                signal:
                    allOf:
                        - $ref: '#/components/schemas/Signal'
                    description: Describes an entity's signal characteristics, primarily used when an entity is a signal of interest.
                transponderCodes:
                    allOf:
                        - $ref: '#/components/schemas/TransponderCodes'
                    description: A message describing any transponder codes associated with Mode 1, 2, 3, 4, 5, S interrogations. These are related to ADS-B modes.
                dataClassification:
                    allOf:
                        - $ref: '#/components/schemas/Classification'
                    description: |-
                        Describes an entity's security classification levels at an overall classification level and on a per
                         field level.
                taskCatalog:
                    allOf:
                        - $ref: '#/components/schemas/TaskCatalog'
                    description: A catalog of tasks that can be performed by an entity.
                relationships:
                    allOf:
                        - $ref: '#/components/schemas/Relationships'
                    description: The relationships between this entity and other entities in the common operational picture (COP).
                visualDetails:
                    allOf:
                        - $ref: '#/components/schemas/VisualDetails'
                    description: Visual details associated with the display of an entity in the client.
                dimensions:
                    allOf:
                        - $ref: '#/components/schemas/Dimensions'
                    description: Physical dimensions of the entity.
                routeDetails:
                    allOf:
                        - $ref: '#/components/schemas/RouteDetails'
                    description: Additional information about an entity's route.
                schedules:
                    allOf:
                        - $ref: '#/components/schemas/Schedules'
                    description: Schedules associated with this entity.
                health:
                    allOf:
                        - $ref: '#/components/schemas/Health'
                    description: Health metrics or connection status reported by the entity.
                groupDetails:
                    allOf:
                        - $ref: '#/components/schemas/GroupDetails'
                    description: Details for the group associated with this entity.
                supplies:
                    allOf:
                        - $ref: '#/components/schemas/Supplies'
                    description: Contains relevant supply information for the entity, such as fuel.
                orbit:
                    allOf:
                        - $ref: '#/components/schemas/Orbit'
                    description: Orbit information for space objects.
            description: |-
                The entity object represents a single known object within the Lattice operational environment. It contains
                 all data associated with the entity, such as its name, ID, and other relevant components.
        ErrorEllipse:
            type: object
            properties:
                probability:
                    type: number
                    description: 'Defines the probability in percentage that an entity lies within the given ellipse: 0-1.'
                    format: double
                semiMajorAxisM:
                    type: number
                    description: Defines the distance from the center point of the ellipse to the furthest distance on the perimeter in meters.
                    format: double
                semiMinorAxisM:
                    type: number
                    description: Defines the distance from the center point of the ellipse to the shortest distance on the perimeter in meters.
                    format: double
                orientationD:
                    type: number
                    description: 'The orientation of the semi-major relative to true north in degrees from clockwise: 0-180 due to symmetry across the semi-minor axis.'
                    format: double
            description: Indicates ellipse characteristics and probability that an entity lies within the defined ellipse.
        ExecuteRequest:
            type: object
            properties:
                task:
                    allOf:
                        - $ref: '#/components/schemas/Task'
                    description: Task to execute.
            description: Request to execute a Task.
        FieldClassificationInformation:
            type: object
            properties:
                fieldPath:
                    type: string
                    description: |-
                        Proto field path which is the string representation of a field.
                         > example: signal.bandwidth_hz would be bandwidth_hz in the signal component
                classificationInformation:
                    allOf:
                        - $ref: '#/components/schemas/ClassificationInformation'
                    description: The information which makes up the field level classification marking.
            description: A field specific classification information definition.
        FieldOfView:
            type: object
            properties:
                fovId:
                    type: integer
                    description: |-
                        The Id for one instance of a FieldOfView, persisted across multiple updates to provide continuity during
                         smoothing. This is relevant for sensors where the dwell schedule is on the order of
                         milliseconds, making multiple FOVs a requirement for proper display of search beams.
                    format: int32
                mountId:
                    type: string
                    description: The Id of the mount the sensor is on.
                projectedFrustum:
                    allOf:
                        - $ref: '#/components/schemas/ProjectedFrustum'
                    description: The field of view the sensor projected onto the ground.
                projectedCenterRay:
                    allOf:
                        - $ref: '#/components/schemas/Position'
                    description: Center ray of the frustum projected onto the ground.
                centerRayPose:
                    allOf:
                        - $ref: '#/components/schemas/Pose'
                    description: |-
                        The origin and direction of the center ray for this sensor relative to the ENU frame. A ray which is aligned with
                         the positive X axis in the sensor frame will be transformed into the ray along the sensor direction in the ENU
                         frame when transformed by the quaternion contained in this pose.
                horizontalFov:
                    type: number
                    description: Horizontal field of view in radians.
                    format: float
                verticalFov:
                    type: number
                    description: Vertical field of view in radians.
                    format: float
                range:
                    type: number
                    description: Sensor range in meters.
                    format: float
                mode:
                    enum:
                        - SENSOR_MODE_INVALID
                        - SENSOR_MODE_SEARCH
                        - SENSOR_MODE_TRACK
                        - SENSOR_MODE_WEAPON_SUPPORT
                        - SENSOR_MODE_AUTO
                        - SENSOR_MODE_MUTE
                    type: string
                    description: |-
                        The mode that this sensor is currently in, used to display for context in the UI. Some sensors can emit multiple
                         sensor field of views with different modes, for example a radar can simultaneously search broadly and perform
                         tighter bounded tracking.
                    format: enum
            description: Sensor Field Of View closely resembling fov.proto SensorFieldOfView.
        Fixed:
            type: object
            properties: {}
            description: A fix of a signal. No extra fields but it is expected that location should be populated when using this report.
        Frequency:
            type: object
            properties:
                frequencyHz:
                    allOf:
                        - $ref: '#/components/schemas/Measurement'
                    description: Indicates a frequency of a signal (Hz) with its standard deviation.
            description: A component for describing frequency.
        FrequencyRange:
            type: object
            properties:
                minimumFrequencyHz:
                    allOf:
                        - $ref: '#/components/schemas/Frequency'
                    description: Indicates the lowest measured frequency of a signal (Hz).
                maximumFrequencyHz:
                    allOf:
                        - $ref: '#/components/schemas/Frequency'
                    description: Indicates the maximum measured frequency of a signal (Hz).
            description: A component to represent a frequency range.
        Fuel:
            type: object
            properties:
                fuelId:
                    type: string
                    description: unique fuel identifier
                name:
                    type: string
                    description: long form name of the fuel source.
                reportedDate:
                    type: string
                    description: timestamp the information was reported
                    format: date-time
                amountGallons:
                    type: integer
                    description: amount of gallons on hand
                    format: uint32
                maxAuthorizedCapacityGallons:
                    type: integer
                    description: how much the asset is allowed to have available (in gallons)
                    format: uint32
                operationalRequirementGallons:
                    type: integer
                    description: minimum required for operations (in gallons)
                    format: uint32
                dataClassification:
                    allOf:
                        - $ref: '#/components/schemas/Classification'
                    description: |-
                        fuel in a single asset may have different levels of classification
                         use case: fuel for a SECRET asset while diesel fuel may be UNCLASSIFIED
                dataSource:
                    type: string
                    description: source of information
            description: Fuel describes an entity's repository of fuels stores including current amount, operational requirements, and maximum authorized capacity
        GeoDetails:
            type: object
            properties:
                type:
                    enum:
                        - GEO_TYPE_INVALID
                        - GEO_TYPE_GENERAL
                        - GEO_TYPE_HAZARD
                        - GEO_TYPE_EMERGENCY
                        - GEO_TYPE_ENGAGEMENT_ZONE
                        - GEO_TYPE_CONTROL_AREA
                        - GEO_TYPE_BULLSEYE
                    type: string
                    format: enum
            description: A component that describes a geo-entity.
        GeoEllipse:
            type: object
            properties:
                semiMajorAxisM:
                    type: number
                    description: Defines the distance from the center point of the ellipse to the furthest distance on the perimeter in meters.
                    format: double
                semiMinorAxisM:
                    type: number
                    description: Defines the distance from the center point of the ellipse to the shortest distance on the perimeter in meters.
                    format: double
                orientationD:
                    type: number
                    description: 'The orientation of the semi-major relative to true north in degrees from clockwise: 0-180 due to symmetry across the semi-minor axis.'
                    format: double
                heightM:
                    type: number
                    description: Optional height above entity position to extrude in meters. A non-zero value creates an elliptic cylinder
                    format: double
            description: |-
                An ellipse shaped geo-entity.
                 For a circle, the major and minor axis would be the same values.
                 This shape is NOT Geo-JSON compatible.
        GeoEllipsoid:
            type: object
            properties:
                forwardAxisM:
                    type: number
                    description: Defines the distance from the center point to the surface along the forward axis
                    format: double
                sideAxisM:
                    type: number
                    description: Defines the distance from the center point to the surface along the side axis
                    format: double
                upAxisM:
                    type: number
                    description: Defines the distance from the center point to the surface along the up axis
                    format: double
            description: |-
                An ellipsoid shaped geo-entity.
                 Principal axis lengths are defined in entity body space
                 This shape is NOT Geo-JSON compatible.
        GeoLine:
            type: object
            properties:
                positions:
                    type: array
                    items:
                        $ref: '#/components/schemas/Position'
            description: |-
                A line shaped geo-entity.
                 See https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.4
        GeoPoint:
            type: object
            properties:
                position:
                    $ref: '#/components/schemas/Position'
            description: |-
                A point shaped geo-entity.
                 See https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.2
        GeoPolygon:
            type: object
            properties:
                rings:
                    type: array
                    items:
                        $ref: '#/components/schemas/LinearRing'
                    description: An array of LinearRings where the first item is the exterior ring and subsequent items are interior rings.
                isRectangle:
                    type: boolean
                    description: |-
                        An extension hint that this polygon is a rectangle. When true this implies several things:
                         * exactly 1 linear ring with 5 points (starting corner, 3 other corners and start again)
                         * each point has the same altitude corresponding with the plane of the rectangle
                         * each point has the same height (either all present and equal, or all not present)
            description: |-
                A polygon shaped geo-entity.
                 See https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.6, only canonical representations accepted
        GeoPolygonPosition:
            type: object
            properties:
                position:
                    allOf:
                        - $ref: '#/components/schemas/Position'
                    description: base position. if no altitude set, its on the ground.
                heightM:
                    type: number
                    description: |-
                        optional height above base position to extrude in meters.
                         for a given polygon, all points should have a height or none of them.
                         strictly GeoJSON compatible polygons will not have this set.
                    format: float
            description: A position in a GeoPolygon with an optional extruded height.
        GeoShape:
            type: object
            properties:
                point:
                    $ref: '#/components/schemas/GeoPoint'
                line:
                    $ref: '#/components/schemas/GeoLine'
                polygon:
                    $ref: '#/components/schemas/GeoPolygon'
                ellipse:
                    $ref: '#/components/schemas/GeoEllipse'
                ellipsoid:
                    $ref: '#/components/schemas/GeoEllipsoid'
            description: A component that describes the shape of a geo-entity.
        GetTaskResponse:
            type: object
            properties:
                task:
                    $ref: '#/components/schemas/Task'
        GoogleProtobufAny:
            type: object
            properties:
                '@type':
                    type: string
                    description: The type of the serialized message.
            additionalProperties: true
            description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
        GroupChild:
            type: object
            properties: {}
            description: |-
                A GroupChild relationship is a uni-directional relationship indicating that (1) this entity
                 represents an Entity Group and (2) the related entity is a child member of this group. The presence of this
                 relationship alone determines that the type of group is an Entity Group.
        GroupDetails:
            type: object
            properties:
                team:
                    $ref: '#/components/schemas/Team'
                echelon:
                    $ref: '#/components/schemas/Echelon'
            description: Details related to grouping for this entity
        GroupParent:
            type: object
            properties: {}
            description: |-
                A GroupParent relationship is a uni-directional relationship indicating that this entity is a member of
                 the Entity Group represented by the related entity. The presence of this relationship alone determines that
                 the type of group that this entity is a member of is an Entity Group.
        Health:
            type: object
            properties:
                connectionStatus:
                    enum:
                        - CONNECTION_STATUS_INVALID
                        - CONNECTION_STATUS_ONLINE
                        - CONNECTION_STATUS_OFFLINE
                    type: string
                    description: Status indicating whether the entity is able to communicate with Entity Manager.
                    format: enum
                healthStatus:
                    enum:
                        - HEALTH_STATUS_INVALID
                        - HEALTH_STATUS_HEALTHY
                        - HEALTH_STATUS_WARN
                        - HEALTH_STATUS_FAIL
                        - HEALTH_STATUS_OFFLINE
                        - HEALTH_STATUS_NOT_READY
                    type: string
                    description: Top-level health status; typically a roll-up of individual component healths.
                    format: enum
                components:
                    type: array
                    items:
                        $ref: '#/components/schemas/ComponentHealth'
                    description: Health of individual components running on this Entity.
                updateTime:
                    type: string
                    description: |-
                        The update time for the top-level health information.
                         If this timestamp is unset, the data is assumed to be most recent
                    format: date-time
                activeAlerts:
                    type: array
                    items:
                        $ref: '#/components/schemas/Alert'
                    description: |-
                        Active alerts indicate a critical change in system state sent by the asset
                         that must be made known to an operator or consumer of the common operating picture.
                         Alerts are different from ComponentHealth messages--an active alert does not necessarily
                         indicate a component is in an unhealthy state. For example, an asset may trigger
                         an active alert based on fuel levels running low. Alerts should be removed from this list when their conditions
                         are cleared. In other words, only active alerts should be reported here.
            description: General health of the entity as reported by the entity.
        HighValueTarget:
            type: object
            properties:
                isHighValueTarget:
                    type: boolean
                    description: Indicates whether the target matches any description from a high value target list.
                targetPriority:
                    type: integer
                    description: |-
                        The priority associated with the target. If the target's description appears on multiple high value target lists,
                         the priority will be a reflection of the highest priority of all of those list's target description.

                         A lower value indicates the target is of a higher priority, with 1 being the highest possible priority. A value of
                         0 indicates there is no priority associated with this target.
                    format: uint32
                targetMatches:
                    type: array
                    items:
                        $ref: '#/components/schemas/HighValueTargetMatch'
                    description: All of the high value target descriptions that the target matches against.
                isHighPayoffTarget:
                    type: boolean
                    description: Indicates whether the target is a 'High Payoff Target'. Targets can be one or both of high value and high payoff.
            description: Describes whether something is a high value target or not.
        HighValueTargetMatch:
            type: object
            properties:
                highValueTargetListId:
                    type: string
                    description: The ID of the high value target list that matches the target description.
                highValueTargetDescriptionId:
                    type: string
                    description: |-
                        The ID of the specific high value target description within a high value target list that was matched against.
                         The ID is considered to be a globally unique identifier across all high value target IDs.
        Indicators:
            type: object
            properties:
                simulated:
                    type: boolean
                exercise:
                    type: boolean
                emergency:
                    type: boolean
                c2:
                    type: boolean
                egressable:
                    type: boolean
                    description: |-
                        Indicates the Entity should be egressed to external sources.
                         Integrations choose how the egressing happens (e.g. if an Entity needs fuzzing).
                starred:
                    type: boolean
                    description: A signal of arbitrary importance such that the entity should be globally marked for all users
            description: Indicators to describe entity to consumers.
        LLA:
            type: object
            properties:
                lon:
                    type: number
                    format: double
                lat:
                    type: number
                    format: double
                alt:
                    type: number
                    format: double
                is2d:
                    type: boolean
                altitudeReference:
                    enum:
                        - ALTITUDE_REFERENCE_INVALID
                        - ALTITUDE_REFERENCE_HEIGHT_ABOVE_WGS84
                        - ALTITUDE_REFERENCE_HEIGHT_ABOVE_EGM96
                        - ALTITUDE_REFERENCE_UNKNOWN
                        - ALTITUDE_REFERENCE_BAROMETRIC
                        - ALTITUDE_REFERENCE_ABOVE_SEA_FLOOR
                        - ALTITUDE_REFERENCE_BELOW_SEA_SURFACE
                    type: string
                    description: |-
                        Meaning of alt.
                         altitude in meters above either WGS84 or EGM96, use altitude_reference to
                         determine what zero means.
                    format: enum
        LineOfBearing:
            type: object
            properties:
                angleOfArrival:
                    allOf:
                        - $ref: '#/components/schemas/AngleOfArrival'
                    description: The direction pointing from this entity to the detection
                rangeEstimateM:
                    allOf:
                        - $ref: '#/components/schemas/Measurement'
                    description: The estimated distance of the detection
                maxRangeM:
                    allOf:
                        - $ref: '#/components/schemas/Measurement'
                    description: The maximum distance of the detection
            description: A line of bearing of a signal.
        LinearRing:
            type: object
            properties:
                positions:
                    type: array
                    items:
                        $ref: '#/components/schemas/GeoPolygonPosition'
            description: A closed ring of points. The first and last point must be the same.
        Location:
            type: object
            properties:
                position:
                    allOf:
                        - $ref: '#/components/schemas/Position'
                    description: see Position definition for details.
                velocityEnu:
                    allOf:
                        - $ref: '#/components/schemas/ENU'
                    description: Velocity in an ENU reference frame centered on the corresponding position. All units are meters per second.
                speedMps:
                    type: number
                    description: Speed is the magnitude of velocity_enu vector [sqrt(e^2 + n^2 + u^2)] when present, measured in m/s.
                    format: double
                acceleration:
                    allOf:
                        - $ref: '#/components/schemas/ENU'
                    description: The entity's acceleration in meters/s^2.
                attitudeEnu:
                    allOf:
                        - $ref: '#/components/schemas/Quaternion'
                    description: quaternion to translate from entity body frame to it's ENU frame
            description: Available for Entities that have a single or primary Location.
        LocationUncertainty:
            type: object
            properties:
                positionEnuCov:
                    allOf:
                        - $ref: '#/components/schemas/TMat3'
                    description: |-
                        Positional covariance represented by the upper triangle of the covariance matrix. It is valid to populate
                         only the diagonal of the matrix if the full covariance matrix is unknown.
                velocityEnuCov:
                    allOf:
                        - $ref: '#/components/schemas/TMat3'
                    description: |-
                        Velocity covariance represented by the upper triangle of the covariance matrix. It is valid to populate
                         only the diagonal of the matrix if the full covariance matrix is unknown.
                positionErrorEllipse:
                    allOf:
                        - $ref: '#/components/schemas/ErrorEllipse'
                    description: An ellipse that describes the certainty probability and error boundary for a given geolocation.
            description: Uncertainty of entity position and velocity, if available.
        MeanKeplerianElements:
            type: object
            properties:
                epoch:
                    type: string
                    description: UTC time of validity
                    format: date-time
                semiMajorAxisKm:
                    type: number
                    description: 'Preferred: semi major axis in kilometers'
                    format: double
                meanMotion:
                    type: number
                    description: If using SGP/SGP4, provide the Keplerian Mean Motion in revolutions per day
                    format: double
                eccentricity:
                    type: number
                    format: double
                inclinationDeg:
                    type: number
                    description: Angle of inclination in deg
                    format: double
                raOfAscNodeDeg:
                    type: number
                    description: Right ascension of the ascending node in deg
                    format: double
                argOfPericenterDeg:
                    type: number
                    description: Argument of pericenter in deg
                    format: double
                meanAnomalyDeg:
                    type: number
                    description: Mean anomaly in deg
                    format: double
                gm:
                    type: number
                    description: 'Optional: gravitational coefficient (Gravitational Constant x central mass) in kg^3 / s^2'
                    format: double
        Measurement:
            type: object
            properties:
                value:
                    type: number
                    description: The value of the measurement.
                    format: double
                sigma:
                    type: number
                    description: Estimated one standard deviation in same unit as the value.
                    format: double
            description: A component that describes some measured value with error.
        MergedFrom:
            type: object
            properties: {}
            description: |-
                A MergedFrom relationship is a uni-directional relationship indicating that this entity is a merged entity whose
                 data has at least partially been merged from the related entity.
        MilView:
            type: object
            properties:
                disposition:
                    enum:
                        - DISPOSITION_UNKNOWN
                        - DISPOSITION_FRIENDLY
                        - DISPOSITION_HOSTILE
                        - DISPOSITION_SUSPICIOUS
                        - DISPOSITION_ASSUMED_FRIENDLY
                        - DISPOSITION_NEUTRAL
                        - DISPOSITION_PENDING
                    type: string
                    format: enum
                environment:
                    enum:
                        - ENVIRONMENT_UNKNOWN
                        - ENVIRONMENT_AIR
                        - ENVIRONMENT_SURFACE
                        - ENVIRONMENT_SUB_SURFACE
                        - ENVIRONMENT_LAND
                        - ENVIRONMENT_SPACE
                    type: string
                    format: enum
                nationality:
                    enum:
                        - NATIONALITY_INVALID
                        - NATIONALITY_ALBANIA
                        - NATIONALITY_ALGERIA
                        - NATIONALITY_ARGENTINA
                        - NATIONALITY_ARMENIA
                        - NATIONALITY_AUSTRALIA
                        - NATIONALITY_AUSTRIA
                        - NATIONALITY_AZERBAIJAN
                        - NATIONALITY_BELARUS
                        - NATIONALITY_BELGIUM
                        - NATIONALITY_BOLIVIA
                        - NATIONALITY_BOSNIA_AND_HERZEGOVINA
                        - NATIONALITY_BRAZIL
                        - NATIONALITY_BULGARIA
                        - NATIONALITY_CAMBODIA
                        - NATIONALITY_CANADA
                        - NATIONALITY_CHILE
                        - NATIONALITY_CHINA
                        - NATIONALITY_COLOMBIA
                        - NATIONALITY_CROATIA
                        - NATIONALITY_CUBA
                        - NATIONALITY_CYPRUS
                        - NATIONALITY_CZECH_REPUBLIC
                        - NATIONALITY_DEMOCRATIC_PEOPLES_REPUBLIC_OF_KOREA
                        - NATIONALITY_DENMARK
                        - NATIONALITY_DOMINICAN_REPUBLIC
                        - NATIONALITY_ECUADOR
                        - NATIONALITY_EGYPT
                        - NATIONALITY_ESTONIA
                        - NATIONALITY_ETHIOPIA
                        - NATIONALITY_FINLAND
                        - NATIONALITY_FRANCE
                        - NATIONALITY_GEORGIA
                        - NATIONALITY_GERMANY
                        - NATIONALITY_GREECE
                        - NATIONALITY_GUATEMALA
                        - NATIONALITY_GUINEA
                        - NATIONALITY_HUNGARY
                        - NATIONALITY_ICELAND
                        - NATIONALITY_INDIA
                        - NATIONALITY_INDONESIA
                        - NATIONALITY_INTERNATIONAL_RED_CROSS
                        - NATIONALITY_IRAQ
                        - NATIONALITY_IRELAND
                        - NATIONALITY_ISLAMIC_REPUBLIC_OF_IRAN
                        - NATIONALITY_ISRAEL
                        - NATIONALITY_ITALY
                        - NATIONALITY_JAMAICA
                        - NATIONALITY_JAPAN
                        - NATIONALITY_JORDAN
                        - NATIONALITY_KAZAKHSTAN
                        - NATIONALITY_KUWAIT
                        - NATIONALITY_KYRGHYZ_REPUBLIC
                        - NATIONALITY_LAO_PEOPLES_DEMOCRATIC_REPUBLIC
                        - NATIONALITY_LATVIA
                        - NATIONALITY_LEBANON
                        - NATIONALITY_LIBERIA
                        - NATIONALITY_LITHUANIA
                        - NATIONALITY_LUXEMBOURG
                        - NATIONALITY_MADAGASCAR
                        - NATIONALITY_MALAYSIA
                        - NATIONALITY_MALTA
                        - NATIONALITY_MEXICO
                        - NATIONALITY_MOLDOVA
                        - NATIONALITY_MONTENEGRO
                        - NATIONALITY_MOROCCO
                        - NATIONALITY_MYANMAR
                        - NATIONALITY_NATO
                        - NATIONALITY_NETHERLANDS
                        - NATIONALITY_NEW_ZEALAND
                        - NATIONALITY_NICARAGUA
                        - NATIONALITY_NIGERIA
                        - NATIONALITY_NORWAY
                        - NATIONALITY_PAKISTAN
                        - NATIONALITY_PANAMA
                        - NATIONALITY_PARAGUAY
                        - NATIONALITY_PERU
                        - NATIONALITY_PHILIPPINES
                        - NATIONALITY_POLAND
                        - NATIONALITY_PORTUGAL
                        - NATIONALITY_REPUBLIC_OF_KOREA
                        - NATIONALITY_ROMANIA
                        - NATIONALITY_RUSSIA
                        - NATIONALITY_SAUDI_ARABIA
                        - NATIONALITY_SENEGAL
                        - NATIONALITY_SERBIA
                        - NATIONALITY_SINGAPORE
                        - NATIONALITY_SLOVAKIA
                        - NATIONALITY_SLOVENIA
                        - NATIONALITY_SOUTH_AFRICA
                        - NATIONALITY_SPAIN
                        - NATIONALITY_SUDAN
                        - NATIONALITY_SWEDEN
                        - NATIONALITY_SWITZERLAND
                        - NATIONALITY_SYRIAN_ARAB_REPUBLIC
                        - NATIONALITY_TAIWAN
                        - NATIONALITY_TAJIKISTAN
                        - NATIONALITY_THAILAND
                        - NATIONALITY_THE_FORMER_YUGOSLAV_REPUBLIC_OF_MACEDONIA
                        - NATIONALITY_TUNISIA
                        - NATIONALITY_TURKEY
                        - NATIONALITY_TURKMENISTAN
                        - NATIONALITY_UGANDA
                        - NATIONALITY_UKRAINE
                        - NATIONALITY_UNITED_KINGDOM
                        - NATIONALITY_UNITED_NATIONS
                        - NATIONALITY_UNITED_REPUBLIC_OF_TANZANIA
                        - NATIONALITY_UNITED_STATES_OF_AMERICA
                        - NATIONALITY_URUGUAY
                        - NATIONALITY_UZBEKISTAN
                        - NATIONALITY_VENEZUELA
                        - NATIONALITY_VIETNAM
                        - NATIONALITY_YEMEN
                        - NATIONALITY_ZIMBABWE
                    type: string
                    format: enum
            description: Provides the disposition, environment, and nationality of an Entity.
        Mode5:
            type: object
            properties:
                mode5InterrogationResponse:
                    enum:
                        - INTERROGATION_RESPONSE_INVALID
                        - INTERROGATION_RESPONSE_CORRECT
                        - INTERROGATION_RESPONSE_INCORRECT
                        - INTERROGATION_RESPONSE_NO_RESPONSE
                    type: string
                    description: The validity of the response from the Mode 5 interrogation.
                    format: enum
                mode5:
                    type: integer
                    description: The Mode 5 code assigned to military assets.
                    format: uint32
                mode5PlatformId:
                    type: integer
                    description: The Mode 5 platform identification code.
                    format: uint32
            description: Describes the Mode 5 transponder interrogation status and codes.
        ModeS:
            type: object
            properties:
                id:
                    type: string
                    description: Mode S identifier which comprises of 8 alphanumeric characters.
                address:
                    type: integer
                    description: |-
                        The Mode S ICAO aircraft address. Expected values are between 1 and 16777214 decimal. The Mode S address is
                         considered unique.
                    format: uint32
            description: Describes the Mode S codes.
        NonPrimaryMembership:
            type: object
            properties: {}
        Ontology:
            type: object
            properties:
                platformType:
                    type: string
                    description: A string that describes the entity's high-level type with natural language.
                specificType:
                    type: string
                    description: A string that describes the entity's exact model or type.
                template:
                    enum:
                        - TEMPLATE_INVALID
                        - TEMPLATE_TRACK
                        - TEMPLATE_SENSOR_POINT_OF_INTEREST
                        - TEMPLATE_ASSET
                        - TEMPLATE_GEO
                        - TEMPLATE_SIGNAL_OF_INTEREST
                    type: string
                    description: The template used when creating this entity. Specifies minimum required components.
                    format: enum
            description: Ontology of the entity.
        Orbit:
            type: object
            properties:
                orbitMeanElements:
                    allOf:
                        - $ref: '#/components/schemas/OrbitMeanElements'
                    description: Orbit Mean Elements data, analogous to the Orbit Mean Elements Message in CCSDS 502.0-B-3
        OrbitMeanElements:
            type: object
            properties:
                metadata:
                    $ref: '#/components/schemas/OrbitMeanElementsMetadata'
                meanKeplerianElements:
                    $ref: '#/components/schemas/MeanKeplerianElements'
                tleParameters:
                    $ref: '#/components/schemas/TleParameters'
            description: Orbit Mean Elements data, analogous to the Orbit Mean Elements Message in CCSDS 502.0-B-3
        OrbitMeanElementsMetadata:
            type: object
            properties:
                creationDate:
                    type: string
                    description: Creation date/time in UTC
                    format: date-time
                originator:
                    type: string
                    description: Creating agency or operator
                messageId:
                    type: string
                    description: ID that uniquely identifies a message from a given originator.
                refFrame:
                    enum:
                        - ECI_REFERENCE_FRAME_INVALID
                        - ECI_REFERENCE_FRAME_TEME
                    type: string
                    description: Reference frame, assumed to be Earth-centered
                    format: enum
                refFrameEpoch:
                    type: string
                    description: Reference frame epoch in UTC - mandatory only if not intrinsic to frame definition
                    format: date-time
                meanElementTheory:
                    enum:
                        - MEAN_ELEMENT_THEORY_INVALID
                        - MEAN_ELEMENT_THEORY_SGP4
                    type: string
                    format: enum
        Override:
            type: object
            properties:
                requestId:
                    type: string
                    description: override request id for an override request
                fieldPath:
                    type: string
                    description: |-
                        proto field path which is the string representation of a field.
                         example: correlated.primary_entity_id would be primary_entity_id in correlated component
                maskedFieldValue:
                    allOf:
                        - $ref: '#/components/schemas/Entity'
                    description: |-
                        new field value corresponding to field path. In the shape of an empty entity with only the changed value.
                         example: entity: { mil_view: { disposition: Disposition_DISPOSITION_HOSTILE } }
                status:
                    enum:
                        - OVERRIDE_STATUS_INVALID
                        - OVERRIDE_STATUS_APPLIED
                        - OVERRIDE_STATUS_PENDING
                        - OVERRIDE_STATUS_TIMEOUT
                        - OVERRIDE_STATUS_REJECTED
                        - OVERRIDE_STATUS_DELETION_PENDING
                    type: string
                    description: status of the override
                    format: enum
                provenance:
                    $ref: '#/components/schemas/Provenance'
                type:
                    enum:
                        - OVERRIDE_TYPE_INVALID
                        - OVERRIDE_TYPE_LIVE
                        - OVERRIDE_TYPE_POST_EXPIRY
                    type: string
                    description: |-
                        The type of the override, defined by the stage of the entity lifecycle that the entity was in when the override
                         was requested.
                    format: enum
                requestTimestamp:
                    type: string
                    description: Timestamp of the override request. The timestamp is generated by the Entity Manager instance that receives the request.
                    format: date-time
            description: Details about an override. Last write wins.
        Overrides:
            type: object
            properties:
                override:
                    type: array
                    items:
                        $ref: '#/components/schemas/Override'
            description: Metadata about entity overrides present.
        Owner:
            type: object
            properties:
                entityId:
                    type: string
                    description: Entity ID of the owner.
            description: Owner designates the entity responsible for writes of Task data.
        Payload:
            type: object
            properties:
                config:
                    $ref: '#/components/schemas/PayloadConfiguration'
            description: Individual payload configuration.
        PayloadConfiguration:
            type: object
            properties:
                capabilityId:
                    type: string
                    description: |-
                        Identifying ID for the capability.
                         This ID may be used multiple times to represent payloads that are the same capability but have different operational states
                quantity:
                    type: integer
                    description: The number of payloads currently available in the configuration.
                    format: uint32
                effectiveEnvironment:
                    type: array
                    items:
                        enum:
                            - ENVIRONMENT_UNKNOWN
                            - ENVIRONMENT_AIR
                            - ENVIRONMENT_SURFACE
                            - ENVIRONMENT_SUB_SURFACE
                            - ENVIRONMENT_LAND
                            - ENVIRONMENT_SPACE
                        type: string
                        format: enum
                    description: The target environments the configuration is effective against.
                payloadOperationalState:
                    enum:
                        - PAYLOAD_OPERATIONAL_STATE_INVALID
                        - PAYLOAD_OPERATIONAL_STATE_OFF
                        - PAYLOAD_OPERATIONAL_STATE_NON_OPERATIONAL
                        - PAYLOAD_OPERATIONAL_STATE_DEGRADED
                        - PAYLOAD_OPERATIONAL_STATE_OPERATIONAL
                        - PAYLOAD_OPERATIONAL_STATE_OUT_OF_SERVICE
                        - PAYLOAD_OPERATIONAL_STATE_UNKNOWN
                    type: string
                    description: The operational state of this payload.
                    format: enum
                payloadDescription:
                    type: string
                    description: A human readable description of the payload
        Payloads:
            type: object
            properties:
                payloadConfigurations:
                    type: array
                    items:
                        $ref: '#/components/schemas/Payload'
            description: List of payloads available for an entity.
        Pose:
            type: object
            properties:
                pos:
                    allOf:
                        - $ref: '#/components/schemas/LLA'
                    description: Geospatial location defined by this Pose.
                attEnu:
                    allOf:
                        - $ref: '#/components/schemas/Quaternion'
                    description: |-
                        The quaternion to transform a point in the Pose frame to the ENU frame. The Pose frame could be Body, Turret,
                         etc and is determined by the context in which this Pose is used.
                         The normal convention for defining orientation is to list the frames of transformation, for example
                         att_gimbal_to_enu is the quaternion which transforms a point in the gimbal frame to the body frame, but
                         in this case we truncate to att_enu because the Pose frame isn't defined. A potentially better name for this
                         field would have been att_pose_to_enu.

                         Implementations of this quaternion should left multiply this quaternion to transform a point from the Pose frame
                         to the enu frame.

                         Point<Pose\> posePt{1,0,0};
                         Rotation<Enu, Pose\> attPoseToEnu{};
                         Point<Enu\> = attPoseToEnu*posePt;

                         This transformed point represents some vector in ENU space that is aligned with the x axis of the attPoseToEnu
                         matrix.

                         An alternative matrix expression is as follows:
                         ptEnu = M x ptPose
        Position:
            type: object
            properties:
                latitudeDegrees:
                    type: number
                    description: WGS84 geodetic latitude in decimal degrees.
                    format: double
                longitudeDegrees:
                    type: number
                    description: WGS84 longitude in decimal degrees.
                    format: double
                altitudeHaeMeters:
                    type: number
                    description: |-
                        altitude as height above ellipsoid (WGS84) in meters. DoubleValue wrapper is used to distinguish optional from
                         default 0.
                    format: double
                altitudeAglMeters:
                    type: number
                    description: |-
                        Altitude as AGL (Above Ground Level) if the upstream data source has this value set. This value represents the
                         entity's height above the terrain. This is typically measured with a radar altimeter or by using a terrain tile
                         set lookup. If the value is not set from the upstream, this value is not set.
                    format: double
                altitudeAsfMeters:
                    type: number
                    description: |-
                        Altitude as ASF (Above Sea Floor) if the upstream data source has this value set. If the value is not set from the upstream, this value is
                         not set.
                    format: double
                pressureDepthMeters:
                    type: number
                    description: |-
                        The depth of the entity from the surface of the water through sensor measurements based on differential pressure
                         between the interior and exterior of the vessel. If the value is not set from the upstream, this value is not set.
                    format: double
            description: |-
                WGS84 position. Position includes four altitude references.
                 The data model does not currently support Mean Sea Level (MSL) references,
                 such as the Earth Gravitational Model 1996 (EGM-96) and the Earth Gravitational Model 2008 (EGM-08).
                 If the only altitude reference available to your integration is MSL, convert it to
                 Height Above Ellipsoid (HAE) and populate the altitude_hae_meters field.
        PowerLevel:
            type: object
            properties:
                capacity:
                    type: number
                    description: Total power capacity of the system.
                    format: float
                remaining:
                    type: number
                    description: Remaining power capacity of the system.
                    format: float
                percentRemaining:
                    type: number
                    description: Percent of power remaining.
                    format: float
                voltage:
                    type: number
                    description: |-
                        Voltage of the power source subsystem, as reported by the power source. If the source does not report this value
                         this field will be null.
                    format: double
                currentAmps:
                    type: number
                    description: |-
                        Current in amps of the power source subsystem, as reported by the power source. If the source does not
                         report this value this field will be null.
                    format: double
                runTimeToEmptyMins:
                    type: number
                    description: |-
                        Estimated minutes until empty. Calculated with consumption at the moment, as reported by the power source. If the source does not
                         report this value this field will be null.
                    format: double
                consumptionRateLPerS:
                    type: number
                    description: Fuel consumption rate in liters per second.
                    format: double
            description: Represents the power level of a system.
        PowerSource:
            type: object
            properties:
                powerStatus:
                    enum:
                        - POWER_STATUS_INVALID
                        - POWER_STATUS_UNKNOWN
                        - POWER_STATUS_NOT_PRESENT
                        - POWER_STATUS_OPERATING
                        - POWER_STATUS_DISABLED
                        - POWER_STATUS_ERROR
                    type: string
                    description: Status of the power source.
                    format: enum
                powerType:
                    enum:
                        - POWER_TYPE_INVALID
                        - POWER_TYPE_UNKNOWN
                        - POWER_TYPE_GAS
                        - POWER_TYPE_BATTERY
                    type: string
                    description: Used to determine the type of power source.
                    format: enum
                powerLevel:
                    allOf:
                        - $ref: '#/components/schemas/PowerLevel'
                    description: Power level of the system. If absent, the power level is assumed to be unknown.
                messages:
                    type: array
                    items:
                        type: string
                    description: |-
                        Set of human-readable messages with status of the power system. Typically this would be used in an error state
                         to provide additional error information. This can also be used for informational messages.
                offloadable:
                    type: boolean
                    description: |-
                        Whether the power source is offloadable. If the value is missing (as opposed to false) then the entity does not
                         report whether the power source is offloadable.
            description: Represents the state of a single power source that is connected to this entity.
        PowerState:
            type: object
            properties:
                sourceIdToState:
                    type: object
                    additionalProperties:
                        $ref: '#/components/schemas/PowerSource'
                    description: |-
                        This is a map where the key is a unique id of the power source and the value is additional information about the
                         power source.
            description: Represents the state of power sources connected to this entity.
        PrimaryCorrelation:
            type: object
            properties:
                secondaryEntityIds:
                    type: array
                    items:
                        type: string
                    description: The secondary entity IDs part of this correlation.
        PrimaryMembership:
            type: object
            properties: {}
        Principal:
            type: object
            properties:
                system:
                    $ref: '#/components/schemas/System'
                user:
                    $ref: '#/components/schemas/User'
                team:
                    $ref: '#/components/schemas/Team'
                onBehalfOf:
                    allOf:
                        - $ref: '#/components/schemas/Principal'
                    description: |-
                        The Principal _this_ Principal is acting on behalf of.

                         Likely only populated once in the nesting (i.e. the "on_behalf_of" Principal would not have another "on_behalf_of" in most cases).
            description: A Principal is an entity that has authority over this Task.
        ProjectedFrustum:
            type: object
            properties:
                upperLeft:
                    allOf:
                        - $ref: '#/components/schemas/Position'
                    description: Upper left point of the frustum.
                upperRight:
                    allOf:
                        - $ref: '#/components/schemas/Position'
                    description: Upper right point of the frustum.
                bottomRight:
                    allOf:
                        - $ref: '#/components/schemas/Position'
                    description: Bottom right point of the frustum.
                bottomLeft:
                    allOf:
                        - $ref: '#/components/schemas/Position'
                    description: Bottom left point of the frustum.
            description: |-
                Represents a frustum in which which all four corner points project onto the ground. All points in this message
                 are optional, if the projection to the ground fails then they will not be populated.
        Provenance:
            type: object
            properties:
                integrationName:
                    type: string
                    description: Name of the integration that produced this entity
                dataType:
                    type: string
                    description: 'Source data type of this entity. Examples: ADSB, Link16, etc.'
                sourceId:
                    type: string
                    description: An ID that allows an element from a source to be uniquely identified
                sourceUpdateTime:
                    type: string
                    description: |-
                        The time, according to the source system, that the data in the entity was last modified. Generally, this should
                         be the time that the source-reported time of validity of the data in the entity. This field must be
                         updated with every change to the entity or else Entity Manager will discard the update.
                    format: date-time
                sourceDescription:
                    type: string
                    description: Description of the modification source. In the case of a user this is the email address.
            description: Data provenance.
        PulseRepetitionInterval:
            type: object
            properties:
                pulseRepetitionIntervalS:
                    $ref: '#/components/schemas/Measurement'
            description: A component that describe the length in time between two pulses
        Quaternion:
            type: object
            properties:
                x:
                    type: number
                    description: x, y, z are vector portion, w is scalar
                    format: double
                y:
                    type: number
                    format: double
                z:
                    type: number
                    format: double
                w:
                    type: number
                    format: double
        RFConfiguration:
            type: object
            properties:
                frequencyRangeHz:
                    type: array
                    items:
                        $ref: '#/components/schemas/FrequencyRange'
                    description: Frequency ranges that are available for this sensor.
                bandwidthRangeHz:
                    type: array
                    items:
                        $ref: '#/components/schemas/BandwidthRange'
                    description: Bandwidth ranges that are available for this sensor.
            description: Represents RF configurations supported on this sensor.
        RangeRings:
            type: object
            properties:
                minDistanceM:
                    type: number
                    description: The minimum range ring distance, specified in meters.
                    format: double
                maxDistanceM:
                    type: number
                    description: The maximum range ring distance, specified in meters.
                    format: double
                ringCount:
                    type: integer
                    description: The count of range rings.
                    format: uint32
                ringLineColor:
                    allOf:
                        - $ref: '#/components/schemas/Color'
                    description: The color of range rings, specified in hex string.
            description: Range rings allow visual assessment of map distance at varying zoom levels.
        Relations:
            type: object
            properties:
                assignee:
                    allOf:
                        - $ref: '#/components/schemas/Principal'
                    description: Who or what, if anyone, this Task is currently assigned to.
                parentTaskId:
                    type: string
                    description: If this Task is a "sub-Task", what is its parent, none if empty.
            description: Relations describes the relationships of this Task, such as assignment, or if the Task has any parents.
        Relationship:
            type: object
            properties:
                relatedEntityId:
                    type: string
                    description: The entity ID to which this entity is related.
                relationshipId:
                    type: string
                    description: A unique identifier for this relationship. Allows removing or updating relationships.
                relationshipType:
                    allOf:
                        - $ref: '#/components/schemas/RelationshipType'
                    description: The relationship type
            description: The relationship component indicates a relationship to another entity.
        RelationshipType:
            type: object
            properties:
                trackedBy:
                    $ref: '#/components/schemas/TrackedBy'
                groupChild:
                    $ref: '#/components/schemas/GroupChild'
                groupParent:
                    $ref: '#/components/schemas/GroupParent'
                mergedFrom:
                    $ref: '#/components/schemas/MergedFrom'
                activeTarget:
                    $ref: '#/components/schemas/ActiveTarget'
            description: Determines the type of relationship between this entity and another.
        Relationships:
            type: object
            properties:
                relationships:
                    type: array
                    items:
                        $ref: '#/components/schemas/Relationship'
            description: The relationships between this entity and other entities in the common operational picture.
        Replication:
            type: object
            properties:
                staleTime:
                    type: string
                    description: Time by which this Task should be assumed to be stale.
                    format: date-time
            description: Any metadata associated with the replication of a Task.
        RouteDetails:
            type: object
            properties:
                destinationName:
                    type: string
                    description: Free form text giving the name of the entity's destination
                estimatedArrivalTime:
                    type: string
                    description: Estimated time of arrival at destination
                    format: date-time
        ScanCharacteristics:
            type: object
            properties:
                scanType:
                    enum:
                        - SCAN_TYPE_INVALID
                        - SCAN_TYPE_CIRCULAR
                        - SCAN_TYPE_BIDIRECTIONAL_HORIZONTAL_SECTOR
                        - SCAN_TYPE_BIDIRECTIONAL_VERTICAL_SECTOR
                        - SCAN_TYPE_NON_SCANNING
                        - SCAN_TYPE_IRREGULAR
                        - SCAN_TYPE_CONICAL
                        - SCAN_TYPE_LOBE_SWITCHING
                        - SCAN_TYPE_RASTER
                        - SCAN_TYPE_CIRCULAR_VERTICAL_SECTOR
                        - SCAN_TYPE_CIRCULAR_CONICAL
                        - SCAN_TYPE_SECTOR_CONICAL
                        - SCAN_TYPE_AGILE_BEAM
                        - SCAN_TYPE_UNIDIRECTIONAL_VERTICAL_SECTOR
                        - SCAN_TYPE_UNIDIRECTIONAL_HORIZONTAL_SECTOR
                        - SCAN_TYPE_UNIDIRECTIONAL_SECTOR
                        - SCAN_TYPE_BIDIRECTIONAL_SECTOR
                    type: string
                    format: enum
                scanPeriodS:
                    type: number
                    format: double
            description: A component that describes the scanning characteristics of a signal
        Schedule:
            type: object
            properties:
                windows:
                    type: array
                    items:
                        $ref: '#/components/schemas/CronWindow'
                    description: expression that represents this schedule's "ON" state
                scheduleId:
                    type: string
                    description: A unique identifier for this schedule.
                scheduleType:
                    enum:
                        - SCHEDULE_TYPE_INVALID
                        - SCHEDULE_TYPE_ZONE_ENABLED
                        - SCHEDULE_TYPE_ZONE_TEMP_ENABLED
                    type: string
                    description: The schedule type
                    format: enum
            description: A Schedule associated with this entity
        Schedules:
            type: object
            properties:
                schedules:
                    type: array
                    items:
                        $ref: '#/components/schemas/Schedule'
            description: Schedules associated with this entity
        SecondaryCorrelation:
            type: object
            properties:
                primaryEntityId:
                    type: string
                    description: The primary of this correlation.
                metadata:
                    allOf:
                        - $ref: '#/components/schemas/CorrelationMetadata'
                    description: Metadata about the correlation.
        Sensor:
            type: object
            properties:
                sensorId:
                    type: string
                    description: This generally is used to indicate a specific type at a more detailed granularity. E.g. COMInt or LWIR
                operationalState:
                    enum:
                        - OPERATIONAL_STATE_INVALID
                        - OPERATIONAL_STATE_OFF
                        - OPERATIONAL_STATE_NON_OPERATIONAL
                        - OPERATIONAL_STATE_DEGRADED
                        - OPERATIONAL_STATE_OPERATIONAL
                        - OPERATIONAL_STATE_DENIED
                    type: string
                    format: enum
                sensorType:
                    enum:
                        - SENSOR_TYPE_INVALID
                        - SENSOR_TYPE_RADAR
                        - SENSOR_TYPE_CAMERA
                        - SENSOR_TYPE_TRANSPONDER
                        - SENSOR_TYPE_RF
                        - SENSOR_TYPE_GPS
                        - SENSOR_TYPE_PTU_POS
                        - SENSOR_TYPE_PERIMETER
                        - SENSOR_TYPE_SONAR
                    type: string
                    description: The type of sensor
                    format: enum
                sensorDescription:
                    type: string
                    description: A human readable description of the sensor
                rfConfiguraton:
                    allOf:
                        - $ref: '#/components/schemas/RFConfiguration'
                    description: RF configuration details of the sensor
                lastDetectionTimestamp:
                    type: string
                    description: Time of the latest detection from the sensor
                    format: date-time
                fieldsOfView:
                    type: array
                    items:
                        $ref: '#/components/schemas/FieldOfView'
                    description: Multiple fields of view for a single sensor component
            description: Individual sensor configuration.
        Sensors:
            type: object
            properties:
                sensors:
                    type: array
                    items:
                        $ref: '#/components/schemas/Sensor'
            description: List of sensors available for an entity.
        Signal:
            type: object
            properties:
                frequencyCenter:
                    $ref: '#/components/schemas/Frequency'
                frequencyRange:
                    $ref: '#/components/schemas/FrequencyRange'
                bandwidthHz:
                    type: number
                    description: Indicates the bandwidth of a signal (Hz).
                    format: double
                signalToNoiseRatio:
                    type: number
                    description: Indicates the signal to noise (SNR) of this signal.
                    format: double
                lineOfBearing:
                    $ref: '#/components/schemas/LineOfBearing'
                fixed:
                    $ref: '#/components/schemas/Fixed'
                emitterNotations:
                    type: array
                    items:
                        $ref: '#/components/schemas/EmitterNotation'
                    description: Emitter notations associated with this entity.
                pulseWidthS:
                    type: number
                    description: length in time of a single pulse
                    format: double
                pulseRepetitionInterval:
                    allOf:
                        - $ref: '#/components/schemas/PulseRepetitionInterval'
                    description: length in time between the start of two pulses
                scanCharacteristics:
                    allOf:
                        - $ref: '#/components/schemas/ScanCharacteristics'
                    description: describes how a signal is observing the environment
            description: A component that describes an entity's signal characteristics.
        Status:
            type: object
            properties:
                code:
                    type: integer
                    description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
                    format: int32
                message:
                    type: string
                    description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
                details:
                    type: array
                    items:
                        $ref: '#/components/schemas/GoogleProtobufAny'
                    description: A list of messages that carry the error details.  There is a common set of message types for APIs to use.
            description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
        Supplies:
            type: object
            properties:
                fuel:
                    type: array
                    items:
                        $ref: '#/components/schemas/Fuel'
            description: Represents the state of supplies associated with an entity (available but not in condition to use immediately)
        System:
            type: object
            properties:
                serviceName:
                    type: string
                    description: Name of the service associated with this System.
                entityId:
                    type: string
                    description: The Entity ID of the System.
                managesOwnScheduling:
                    type: boolean
                    description: |-
                        Whether the System Principal (for example, an Asset) can own scheduling.
                         This means we bypass manager-owned scheduling and defer to the system
                         Principal to handle scheduling and give us status updates for the Task.
                         Regardless of the value defined by the client, the Task Manager will
                         determine and set this value appropriately.
            description: System Principal representing some autonomous system.
        TMat2:
            type: object
            properties:
                mxx:
                    type: number
                    format: double
                mxy:
                    type: number
                    format: double
                myy:
                    type: number
                    format: double
            description: |-
                symmetric 2d matrix only representing the upper right triangle, useful for
                 covariance matrices
        TMat3:
            type: object
            properties:
                mxx:
                    type: number
                    format: float
                mxy:
                    type: number
                    format: float
                mxz:
                    type: number
                    format: float
                myy:
                    type: number
                    format: float
                myz:
                    type: number
                    format: float
                mzz:
                    type: number
                    format: float
            description: Symmetric 3d matrix only representing the upper right triangle.
        TargetPriority:
            type: object
            properties:
                highValueTarget:
                    allOf:
                        - $ref: '#/components/schemas/HighValueTarget'
                    description: Describes the target priority in relation to high value target lists.
                threat:
                    allOf:
                        - $ref: '#/components/schemas/Threat'
                    description: Describes whether the entity should be treated as a threat
            description: The target prioritization associated with an entity.
        Task:
            type: object
            properties:
                version:
                    allOf:
                        - $ref: '#/components/schemas/TaskVersion'
                    description: Version of this Task.
                displayName:
                    type: string
                    description: 'DEPRECATED: Human readable display name for this Task, should be short (<100 chars).'
                specification:
                    allOf:
                        - $ref: '#/components/schemas/GoogleProtobufAny'
                    description: Full Task parameterization, must be a message under anduril/tasks/v*/
                createdBy:
                    allOf:
                        - $ref: '#/components/schemas/Principal'
                    description: Records who created this Task. This field will not change after the Task has been created.
                lastUpdatedBy:
                    allOf:
                        - $ref: '#/components/schemas/Principal'
                    description: Records who updated this Task last.
                lastUpdateTime:
                    type: string
                    description: Records the time of last update.
                    format: date-time
                status:
                    allOf:
                        - $ref: '#/components/schemas/TaskStatus'
                    description: The status of this Task.
                scheduledTime:
                    type: string
                    description: If the Task has been scheduled to execute, what time it should execute at.
                    format: date-time
                relations:
                    allOf:
                        - $ref: '#/components/schemas/Relations'
                    description: Any related Tasks associated with this, typically includes an assignee for this Task and/or a parent.
                description:
                    type: string
                    description: Longer, free form human readable description of this Task
                isExecutedElsewhere:
                    type: boolean
                    description: |-
                        If set, execution of this Task is managed elsewhere, not by Task Manager.
                         In other words, Task manager will not attempt to update the assigned agent with execution instructions.
                createTime:
                    type: string
                    description: Time of Task creation.
                    format: date-time
                replication:
                    allOf:
                        - $ref: '#/components/schemas/Replication'
                    description: If populated, designates this to be a replicated Task.
                initialEntities:
                    type: array
                    items:
                        $ref: '#/components/schemas/TaskEntity'
                    description: |-
                        If populated, indicates an initial set of entities that can be used to execute an entity aware task
                         For example, an entity Objective, an entity Keep In Zone, etc.
                         These will not be updated during execution. If a taskable agent needs continuous updates on the entities from the
                         COP, can call entity-manager, or use an AlternateId escape hatch.
                owner:
                    allOf:
                        - $ref: '#/components/schemas/Owner'
                    description: |-
                        The networked owner of this Task. It is used to ensure that linear writes occur on the node responsible
                         for replication of task data to other nodes running Task Manager.
            description: A Task is something an agent can be asked to do.
        TaskCatalog:
            type: object
            properties:
                taskDefinitions:
                    type: array
                    items:
                        $ref: '#/components/schemas/TaskDefinition'
            description: Catalog of supported tasks.
        TaskDefinition:
            type: object
            properties:
                taskSpecificationUrl:
                    type: string
                    description: Url path must be prefixed with `type.googleapis.com/`.
            description: Defines a supported task by the task specification URL of its "Any" type.
        TaskEntity:
            type: object
            properties:
                entity:
                    allOf:
                        - $ref: '#/components/schemas/Entity'
                    description: The wrapped entity-manager entity.
                snapshot:
                    type: boolean
                    description: Indicates that this entity was generated from a snapshot of a live entity.
            description: Wrapper of an entity passed in Tasking, used to hold an additional information, and as a future extension point.
        TaskError:
            type: object
            properties:
                code:
                    enum:
                        - ERROR_CODE_INVALID
                        - ERROR_CODE_CANCELLED
                        - ERROR_CODE_REJECTED
                        - ERROR_CODE_TIMEOUT
                        - ERROR_CODE_FAILED
                    type: string
                    description: Error code for Task error.
                    format: enum
                message:
                    type: string
                    description: Descriptive human-readable string regarding this error.
                errorDetails:
                    allOf:
                        - $ref: '#/components/schemas/GoogleProtobufAny'
                    description: Any additional details regarding this error.
            description: TaskError contains an error code and message typically associated to a Task.
        TaskQueryResponse:
            type: object
            properties:
                executeRequest:
                    $ref: '#/components/schemas/ExecuteRequest'
                cancelRequest:
                    $ref: '#/components/schemas/CancelRequest'
                completeRequest:
                    $ref: '#/components/schemas/CompleteRequest'
        TaskStatus:
            type: object
            properties:
                status:
                    enum:
                        - STATUS_INVALID
                        - STATUS_CREATED
                        - STATUS_SCHEDULED_IN_MANAGER
                        - STATUS_SENT
                        - STATUS_MACHINE_RECEIPT
                        - STATUS_ACK
                        - STATUS_WILCO
                        - STATUS_EXECUTING
                        - STATUS_WAITING_FOR_UPDATE
                        - STATUS_DONE_OK
                        - STATUS_DONE_NOT_OK
                        - STATUS_REPLACED
                        - STATUS_CANCEL_REQUESTED
                        - STATUS_COMPLETE_REQUESTED
                        - STATUS_VERSION_REJECTED
                    type: string
                    description: Status of the Task.
                    format: enum
                taskError:
                    allOf:
                        - $ref: '#/components/schemas/TaskError'
                    description: Any errors associated with the Task.
                progress:
                    allOf:
                        - $ref: '#/components/schemas/GoogleProtobufAny'
                    description: Any incremental progress on the Task, should be from the tasks/v*/progress folder.
                result:
                    allOf:
                        - $ref: '#/components/schemas/GoogleProtobufAny'
                    description: Any final result of the Task, should be from tasks/v*/result folder.
                startTime:
                    type: string
                    description: Time the Task began execution, may not be known even for executing Tasks.
                    format: date-time
                estimate:
                    allOf:
                        - $ref: '#/components/schemas/GoogleProtobufAny'
                    description: Any estimate for how the Task will progress, should be from tasks/v*/estimates folder.
                allocation:
                    allOf:
                        - $ref: '#/components/schemas/Allocation'
                    description: Any allocated agents of the Task.
            description: |-
                TaskStatus is contains information regarding the status of a Task at any given time. Can include related information
                  such as any progress towards Task completion, or any associated results if Task completed.
        TaskVersion:
            type: object
            properties:
                taskId:
                    type: string
                    description: The unique ID for this Task.
                definitionVersion:
                    type: integer
                    description: Increments on definition (i.e. not TaskStatus) change. 0 is unset, starts at 1 on creation.
                    format: uint32
                statusVersion:
                    type: integer
                    description: Increments on changes to TaskStatus. 0 is unset, starts at 1 on creation.
                    format: uint32
            description: Version of a Task.
        Team:
            type: object
            properties:
                entityId:
                    type: string
                    description: Entity ID of the team
                members:
                    type: array
                    items:
                        $ref: '#/components/schemas/Agent'
            description: Represents a team of agents
        Threat:
            type: object
            properties:
                isThreat:
                    type: boolean
                    description: Indicates that the entity has been determined to be a threat.
            description: Describes whether an entity is a threat or not.
        TleParameters:
            type: object
            properties:
                ephemerisType:
                    type: integer
                    description: Integer specifying TLE ephemeris type
                    format: uint32
                classificationType:
                    type: string
                    description: User-defined free-text message classification/caveats of this TLE
                noradCatId:
                    type: integer
                    description: 'Norad catalog number: integer up to nine digits.'
                    format: uint32
                elementSetNo:
                    type: integer
                    format: uint32
                revAtEpoch:
                    type: integer
                    description: 'Optional: revolution number'
                    format: uint32
                bstar:
                    type: number
                    description: Drag parameter for SGP-4 in units 1 / Earth radii
                    format: double
                bterm:
                    type: number
                    description: Drag parameter for SGP4-XP in units m^2 / kg
                    format: double
                meanMotionDot:
                    type: number
                    description: First time derivative of mean motion in rev / day^2
                    format: double
                meanMotionDdot:
                    type: number
                    description: Second time derivative of mean motion in rev / day^3. For use with SGP or PPT3.
                    format: double
                agom:
                    type: number
                    description: Solar radiation pressure coefficient A_gamma / m in m^2 / kg. For use with SGP4-XP.
                    format: double
        Tracked:
            type: object
            properties:
                trackQualityWrapper:
                    type: integer
                    description: Quality score, 0-15, nil if none
                    format: int32
                sensorHits:
                    type: integer
                    description: Sensor hits aggregation on the tracked entity.
                    format: int32
                numberOfObjects:
                    allOf:
                        - $ref: '#/components/schemas/UInt32Range'
                    description: |-
                        Estimated number of objects or units that are represented by this entity. Known as Strength in certain contexts (Link16)
                         if UpperBound == LowerBound; (strength = LowerBound)
                         If both UpperBound and LowerBound are defined; strength is between LowerBound and UpperBound (represented as string "Strength: 4-5")
                         If UpperBound is defined only (LowerBound unset), Strength ≤ UpperBound
                         If LowerBound is defined only (UpperBound unset), LowerBound ≤ Strength
                         0 indicates unset.
                radarCrossSection:
                    type: number
                    description: |-
                        The radar cross section (RCS) is a measure of how detectable an object is by radar. A large RCS indicates an object is more easily
                         detected. The unit is “decibels per square meter,” or dBsm
                    format: double
                lastMeasurementTime:
                    type: string
                    description: Timestamp of the latest tracking measurement for this entity.
                    format: date-time
                lineOfBearing:
                    allOf:
                        - $ref: '#/components/schemas/LineOfBearing'
                    description: |-
                        The relative position of a track with respect to the entity that is tracking it. Used for tracks that do not yet have a 3D position.
                         For this entity (A), being tracked by some entity (B), this LineOfBearing would express a ray from B to A.
            description: Available for Entities that are tracked.
        TrackedBy:
            type: object
            properties:
                activelyTrackingSensors:
                    allOf:
                        - $ref: '#/components/schemas/Sensors'
                    description: |-
                        Sensor details of the tracking entity's sensors that were active and tracking the tracked entity. This may be
                         a subset of the total sensors available on the tracking entity.
                lastMeasurementTimestamp:
                    type: string
                    description: Latest time that any sensor in actively_tracking_sensors detected the tracked entity.
                    format: date-time
            description: |-
                Describes the relationship between the entity being tracked ("tracked entity") and the entity that is
                 performing the tracking ("tracking entity").
        TransponderCodes:
            type: object
            properties:
                mode1:
                    type: integer
                    description: The mode 1 code assigned to military assets.
                    format: uint32
                mode2:
                    type: integer
                    description: The Mode 2 code assigned to military assets.
                    format: uint32
                mode3:
                    type: integer
                    description: The Mode 3 code assigned by ATC to the asset.
                    format: uint32
                mode4InterrogationResponse:
                    enum:
                        - INTERROGATION_RESPONSE_INVALID
                        - INTERROGATION_RESPONSE_CORRECT
                        - INTERROGATION_RESPONSE_INCORRECT
                        - INTERROGATION_RESPONSE_NO_RESPONSE
                    type: string
                    description: The validity of the response from the Mode 4 interrogation.
                    format: enum
                mode5:
                    allOf:
                        - $ref: '#/components/schemas/Mode5'
                    description: The Mode 5 transponder codes.
                modeS:
                    allOf:
                        - $ref: '#/components/schemas/ModeS'
                    description: The Mode S transponder codes.
            description: A message describing any transponder codes associated with Mode 1, 2, 3, 4, 5, S interrogations.
        UInt32Range:
            type: object
            properties:
                lowerBound:
                    type: integer
                    format: uint32
                upperBound:
                    type: integer
                    format: uint32
        User:
            type: object
            properties:
                userId:
                    type: string
                    description: The User ID associated with this User.
            description: A User Principal representing a human.
        VisualDetails:
            type: object
            properties:
                rangeRings:
                    allOf:
                        - $ref: '#/components/schemas/RangeRings'
                    description: The range rings to display around an entity.
            description: Visual details associated with the display of an entity in the client.
tags:
    - name: TaskManagerRestAPI
