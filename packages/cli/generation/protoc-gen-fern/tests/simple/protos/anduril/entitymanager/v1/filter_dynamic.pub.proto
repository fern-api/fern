syntax = "proto3";

package anduril.entitymanager.v1;

import "anduril/entitymanager/v1/filter.pub.proto";

option csharp_namespace = "Anduril.Entitymanager.V1";
option go_package = "ghe.anduril.dev/anduril/andurilapis-go/anduril/entitymanager/v1;entitymanager";
option java_multiple_files = true;
option java_outer_classname = "FilterDynamicProto";
option java_package = "com.anduril.entitymanager.v1";
option objc_class_prefix = "AEX";

// A DynamicStatement is the building block of a "runtime aware" entity filter - that is, any filter
// which needs to perform operations against a series of entities that will need to be evaluated against
// on demand. The DynamicStatement allows you to perform a set intersection operation across a static
// set of entities dictated by a filter, and a dynamic set of entities dictated by a selector statement.
//
// For example, the expression "find me all hostile entities that reside within any assumed
// friendly geoentity" would be represented as the following dynamic statement:
//
//  DynamicStatement
//    filter
//      predicate
//        field_path: mil_view.disposition
//        comparator: EQUALITY
//        value: 2 // Hostile
//    selector
//      andOperation
//        predicate1
//          field_path: mil_view.disposition
//          comparator: EQUALITY
//          value: 4 // Assumed Friendly
//        predicate2
//          field_path: ontology.template
//          comparator: EQUALITY
//          value: 4 // Template Geo
//    comparator
//      IntersectionComparator
//        WithinComparison
message DynamicStatement {
  // The filter statement is used to determine which entities can be compared to the dynamic series
  // of entities aggregated by the selector statement.
  Statement filter = 1;
  // The selector statement is used to determine which entities should be a part of dynamically
  // changing set. The selector should be reevaluated as entites are created or deleted.
  Statement selector = 2;
  // The comparator specifies how the set intersection operation will be performed.
  IntersectionComparator comparator = 3;
}

// The IntersectionComparator determines what entities and what fields to respect within a set during
// a set intersection operation.
message IntersectionComparator {
  oneof comparison {
    WithinComparison within_comparison = 1;
  }
}

// The WithinComparison implicitly will understand how to determine which entitites reside
// within other geo-shaped entities. This comparison is being left empty, but as a proto, to
// support future expansions of the within comparison (eg; within range of a static distance).
message WithinComparison {}
