syntax = "proto3";

package anduril.entitymanager.v1;

import "anduril/entitymanager/v1/geoentity.pub.proto";
import "anduril/entitymanager/v1/location.pub.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "Anduril.Entitymanager.V1";
option go_package = "ghe.anduril.dev/anduril/andurilapis-go/anduril/entitymanager/v1;entitymanager";
option java_multiple_files = true;
option java_outer_classname = "FilterProto";
option java_package = "com.anduril.entitymanager.v1";
option objc_class_prefix = "AEX";

// A Statement is the building block of the entity filter. The outermost statement is conceptually
// the root node of an "expression tree" which allows for the construction of complete boolean
// logic statements. Statements are formed by grouping sets of children statement(s) or predicate(s)
// according to the boolean operation which is to be applied.
//
// For example, the criteria "take an action if an entity is hostile and an air vehicle" can be
// represented as: Statement1: { AndOperation: { Predicate1, Predicate2 } }. Where Statement1
// is the root of the expression tree, with an AND operation that is applied to children
// predicates. The predicates themselves encode "entity is hostile" and "entity is air vehicle."
message Statement {
  oneof operation {
    AndOperation and = 1;
    OrOperation or = 2;
    NotOperation not = 3;
    ListOperation list = 4;
    Predicate predicate = 5;
  }
}

// The AndOperation represents the boolean AND operation, which is to be applied to the list of
// children statement(s) or predicate(s).
message AndOperation {
  oneof children {
    PredicateSet predicate_set = 1;
    StatementSet statement_set = 2;
  }
}

// The OrOperation represents the boolean OR operation, which is to be applied to the list of
// children statement(s) or predicate(s).
message OrOperation {
  oneof children {
    PredicateSet predicate_set = 1;
    StatementSet statement_set = 2;
  }
}

// The NotOperation represents the boolean NOT operation, which can only be applied to a single
// child predicate or statement.
message NotOperation {
  oneof child {
    Predicate predicate = 1;
    Statement statement = 2;
  }
}

// The ListOperation represents an operation against a proto list. If the list is of primitive proto
// type (e.g. int32), paths in all child predicates should be left empty. If the list is of message
// proto type (e.g. Sensor), paths in all child predicates should be relative to the list path.
//
// For example, the criteria "take an action if an entity has any sensor with sensor_id='sensor' and
// OperationalState=STATE_OFF" would be modeled as:
// Predicate1: { path: "sensor_id", comparator: EQUAL_TO, value: "sensor" }
// Predicate2: { path: "operational_state", comparator: EQUAL_TO, value: STATE_OFF }
//
// Statement2: { AndOperation: PredicateSet: { <Predicate1>, <Predicate2> } }
// ListOperation: { list_path: "sensors.sensors", list_comparator: ANY, statement: <Statement2> }
// Statement1: { ListOperation: <ListOperation> }
//
// Note that in the above, the child predicates of the list operation have paths relative to the
// list_path because the list is comprised of message not primitive types.
message ListOperation {
  // The list_path specifies the repeated field on an entity to which this operation applies.
  string list_path = 1;
  // The list_comparator specifies how to compose the boolean results from the child statement
  // for each member of the specified list.
  ListComparator list_comparator = 2;
  // The statement is a new expression tree conceptually rooted at type of the list. It determines
  // how each member of the list is evaluated.
  Statement statement = 3;
}

// The PredicateSet represents a list of predicates or "leaf nodes" in the expression tree, which
// can be directly evaluated to a boolean TRUE/FALSE result.
message PredicateSet {
  repeated Predicate predicates = 1;
}

// The StatementSet represents a list of statements or "tree nodes," each of which follow the same
// behavior as the Statement proto message.
message StatementSet {
  repeated Statement statements = 1;
}

// The Predicate fully encodes the information required to make an evaluation of an entity field
// against a given static value, resulting in a boolean TRUE/FALSE result. The structure of a
// predicate will always follow: "{entity-value} {comparator} {fixed-value}" where the entity value
// is determined by the field path.
//
// For example, a predicate would read as: "{entity.location.velocity_enu} {LESS_THAN} {500kph}"
message Predicate {
  // The field_path determines which field on an entity is being referenced in this predicate. For
  // example: correlated.primary_entity_id would be primary_entity_id in correlated component.
  string field_path = 1;
  // The value determines the fixed value against which the entity field is to be compared.
  // In the case of COMPARATOR_MATCH_ALL, the value contents do not matter as long as the Value is a supported
  // type.
  Value value = 2;
  // The comparator determines the manner in which the entity field and static value are compared.
  // Comparators may only be applied to certain values. For example, the WITHIN comparator cannot
  // be used for a boolean value comparison.
  Comparator comparator = 3;
}

// The Comparator specifies the set of supported comparison operations. It also provides the
// mapping information about which comparators are supported for which values. Services that wish
// to implement entity filters must provide validation functionality to strictly enforce these
// mappings.
enum Comparator {
  COMPARATOR_INVALID = 0;
  // Comparators for: boolean, numeric, string, enum, position, timestamp, positions, and bounded shapes.
  COMPARATOR_MATCH_ALL = 11;
  // Comparators for: boolean, numeric, string, enum, position, and timestamp.
  COMPARATOR_EQUALITY = 1;
  COMPARATOR_IN = 9;
  // Comparators for: numeric, string, and timestamp.
  COMPARATOR_LESS_THAN = 2;
  COMPARATOR_GREATER_THAN = 3;
  COMPARATOR_LESS_THAN_EQUAL_TO = 4;
  COMPARATOR_GREATER_THAN_EQUAL_TO = 5;
  // Comparators for: positions and bounded shapes.
  COMPARATOR_WITHIN = 6;
  // Comparators for: existential checks.
  // TRUE if path to field exists (parent message is present), and either:
  //   1. the field is a primitive: all values including default pass check.
  //   2. the field is a message and set/present.
  //   3. the field is repeated or map with size > 0.
  // FALSE unless path exists and one of the above 3 conditions is met
  COMPARATOR_EXISTS = 7;
  // Comparator for string type only.
  COMPARATOR_CASE_INSENSITIVE_EQUALITY = 8;
  COMPARATOR_CASE_INSENSITIVE_EQUALITY_IN = 10;
  // Comparators for range types only.
  // Closed (inclusive endpoints) [a, b]
  COMPARATOR_RANGE_CLOSED = 12;
}

// The ListComparator determines how to compose statement evaluations for members of a list. For
// example, if ANY_OF is specified, the ListOperation in which the ListComparator is embedded
// will return TRUE if any of the values in the list returns true for the ListOperation's child
// statement.
enum ListComparator {
  LIST_COMPARATOR_INVALID = 0;
  LIST_COMPARATOR_ANY_OF = 1;
}

// The Value represents the information against which an entity field is evaluated. It is one of
// a fixed set of types, each of which correspond to specific comparators. See "ComparatorType"
// for the full list of Value <-> Comparator mappings.
message Value {
  oneof type {
    BooleanType boolean_type = 1;
    NumericType numeric_type = 2;
    StringType string_type = 3;
    EnumType enum_type = 4;
    TimestampType timestamp_type = 5;
    BoundedShapeType bounded_shape_type = 6;
    PositionType position_type = 7;
    HeadingType heading_type = 8;
    ListType list_type = 9;
    RangeType range_type = 10;
  }
}

// The BooleanType represents a static boolean value.
message BooleanType {
  bool value = 1;
}

// The NumericType represents static numeric values. It supports all numeric primitives supported
// by the proto3 language specification.
message NumericType {
  oneof value {
    double double_value = 1;
    float float_value = 2;
    int32 int32_value = 3;
    int64 int64_value = 4;
    uint32 uint32_value = 5;
    uint64 uint64_value = 6;
  }
}

// The StringType represents static string values.
message StringType {
  string value = 1;
}

// The EnumType represents members of well-known anduril ontologies, such as "disposition." When
// such a value is specified, the evaluation library expects the integer representation of the enum
// value. For example, a disposition derived from ontology.v1 such as "DISPOSITION_HOSTILE" should be
// represented with the integer value 2.
message EnumType {
  int32 value = 1;
}

// A List of Values for use with the IN comparator.
message ListType {
  repeated Value values = 1;
}

// The TimestampType represents a static timestamp value.
message TimestampType {
  google.protobuf.Timestamp value = 1;
}

// The PositionType represents any fixed LLA point in space.
message PositionType {
  Position value = 1;
}

// The BoundedShapeType represents any static fully-enclosed shape.
message BoundedShapeType {
  oneof value {
    GeoPolygon polygon_value = 1;
  }
}

// The HeadingType represents the heading in degrees for an entity's
// attitudeEnu quaternion to be compared against. Defaults between a range of 0 to 360
message HeadingType {
  int32 value = 1;
}

// The RangeType represents a numeric range.
// Whether endpoints are included are based on the comparator used.
// Both endpoints must be of the same numeric type.
message RangeType {
  NumericType start = 1;
  NumericType end = 2;
}
