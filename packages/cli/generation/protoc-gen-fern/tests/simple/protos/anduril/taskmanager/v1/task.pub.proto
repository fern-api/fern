syntax = "proto3";

package anduril.taskmanager.v1;

import "anduril/entitymanager/v1/entity.pub.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "Anduril.Taskmanager.V1";
option go_package = "ghe.anduril.dev/anduril/andurilapis-go/anduril/taskmanager/v1;taskmanager";
option java_multiple_files = true;
option java_outer_classname = "TaskProto";
option java_package = "com.anduril.taskmanager.v1";
option objc_class_prefix = "ATX";

// A Task is something an agent can be asked to do.
message Task {
  // Version of this Task.
  TaskVersion version = 1;
  // DEPRECATED: Human readable display name for this Task, should be short (<100 chars).
  string display_name = 2 [deprecated = true];
  // Full Task parameterization, must be a message under anduril/tasks/v*/
  google.protobuf.Any specification = 3;
  // Records who created this Task. This field will not change after the Task has been created.
  Principal created_by = 16;
  // Records who updated this Task last.
  Principal last_updated_by = 4;
  // Records the time of last update.
  google.protobuf.Timestamp last_update_time = 9;
  // The status of this Task.
  TaskStatus status = 5;
  // If the Task has been scheduled to execute, what time it should execute at.
  google.protobuf.Timestamp scheduled_time = 6;
  reserved 7;
  // Any related Tasks associated with this, typically includes an assignee for this Task and/or a parent.
  Relations relations = 8;
  // Longer, free form human readable description of this Task
  string description = 10;
  // If set, execution of this Task is managed elsewhere, not by Task Manager.
  // In other words, Task manager will not attempt to update the assigned agent with execution instructions.
  bool is_executed_elsewhere = 11;
  // Time of Task creation.
  google.protobuf.Timestamp create_time = 13;
  // If populated, designates this to be a replicated Task.
  Replication replication = 14;
  // If populated, indicates an initial set of entities that can be used to execute an entity aware task
  // For example, an entity Objective, an entity Keep In Zone, etc.
  // These will not be updated during execution. If a taskable agent needs continuous updates on the entities from the
  // COP, can call entity-manager, or use an AlternateId escape hatch.
  repeated TaskEntity initial_entities = 15;
  // The networked owner of this Task. It is used to ensure that linear writes occur on the node responsible
  // for replication of task data to other nodes running Task Manager.
  Owner owner = 12;
}

// TaskStatus is contains information regarding the status of a Task at any given time. Can include related information
//  such as any progress towards Task completion, or any associated results if Task completed.
message TaskStatus {
  // Status of the Task.
  Status status = 1;
  // Any errors associated with the Task.
  TaskError task_error = 2;
  // Any incremental progress on the Task, should be from the tasks/v*/progress folder.
  google.protobuf.Any progress = 4;
  // Any final result of the Task, should be from tasks/v*/result folder.
  google.protobuf.Any result = 5;
  // Time the Task began execution, may not be known even for executing Tasks.
  google.protobuf.Timestamp start_time = 6;
  // Any estimate for how the Task will progress, should be from tasks/v*/estimates folder.
  google.protobuf.Any estimate = 7;
  // Any allocated agents of the Task.
  Allocation allocation = 8;
}

// TaskError contains an error code and message typically associated to a Task.
message TaskError {
  // Error code for Task error.
  ErrorCode code = 1;
  // Descriptive human-readable string regarding this error.
  string message = 2;
  // Any additional details regarding this error.
  google.protobuf.Any error_details = 3;
}

// A Principal is an entity that has authority over this Task.
message Principal {
  // A Principal can be either a human user, or a system.
  oneof agent {
    System system = 1;
    User user = 2;
    Team team = 4;
  }
  // The Principal _this_ Principal is acting on behalf of.
  //
  // Likely only populated once in the nesting (i.e. the "on_behalf_of" Principal would not have another "on_behalf_of" in most cases).
  Principal on_behalf_of = 3;
}

// System Principal representing some autonomous system.
message System {
  // Name of the service associated with this System.
  string service_name = 1;
  // The Entity ID of the System.
  string entity_id = 2;
  // Whether the System Principal (for example, an Asset) can own scheduling.
  // This means we bypass manager-owned scheduling and defer to the system
  // Principal to handle scheduling and give us status updates for the Task.
  // Regardless of the value defined by the client, the Task Manager will
  // determine and set this value appropriately.
  bool manages_own_scheduling = 4;

  reserved 3;
}

// A User Principal representing a human.
message User {
  // The User ID associated with this User.
  string user_id = 1;
}

// Relations describes the relationships of this Task, such as assignment, or if the Task has any parents.
message Relations {
  // Who or what, if anyone, this Task is currently assigned to.
  Principal assignee = 1;
  // If this Task is a "sub-Task", what is its parent, none if empty.
  string parent_task_id = 2;
}

// Holds Tasks and its associated Events, e.g. CREATED.
message TaskEvent {
  // Type of Event.
  EventType event_type = 1;
  // Task associated with this TaskEvent.
  Task task = 2;
  // View associated with this task.
  TaskView task_view = 3;

  // ===== Time Series Updates =====
  //
  // Timestamp for time-series to index.
  google.protobuf.Timestamp time = 4;
}

// Version of a Task.
message TaskVersion {
  // The unique ID for this Task.
  string task_id = 1;
  // Increments on definition (i.e. not TaskStatus) change. 0 is unset, starts at 1 on creation.
  uint32 definition_version = 2;
  // Increments on changes to TaskStatus. 0 is unset, starts at 1 on creation.
  uint32 status_version = 3;
}

// The Status of a Task definition through its lifecycle. Each Definition Version can have its own Status.
// For example, Definition v1 could go CREATED -> SENT -> WILCO -> REPLACED, with v2 then potentially in sent Status.
enum Status {
  STATUS_INVALID = 0;
  // Initial creation Status.
  STATUS_CREATED = 1;
  // Scheduled within Task Manager to be sent at a future time.
  STATUS_SCHEDULED_IN_MANAGER = 2;
  // Sent to another system (Asset), no receipt yet.
  STATUS_SENT = 3;
  // Task was sent to Assignee, and some system was reachable and responded.
  // However, the system responsible for execution on the Assignee has not yet acknowledged the Task.
  STATUS_MACHINE_RECEIPT = 4;
  // System responsible for execution on the Assignee has acknowledged the Task.
  STATUS_ACK = 5;
  // Assignee confirmed they "will comply" / intend to execute Task.
  STATUS_WILCO = 6;
  // Task was started and is actively executing.
  STATUS_EXECUTING = 7;
  // Task is on hold, waiting for additional updates/information before proceeding.
  STATUS_WAITING_FOR_UPDATE = 8;
  // Task was completed successfully.
  STATUS_DONE_OK = 9;
  // Task has reached a terminal state but did not complete successfully, see error code/message.
  STATUS_DONE_NOT_OK = 10;
  // This definition version was replaced.
  STATUS_REPLACED = 11;
  // A Task was requested to be cancelled but not yet confirmed, will eventually move to DONE_NOT_OK.
  STATUS_CANCEL_REQUESTED = 12;
  // A Task was requested to be completed successfully but not yet confirmed, will eventually move to DONE_NOT_OK / DONE_OK.
  STATUS_COMPLETE_REQUESTED = 13;
  // This definition version was rejected, intended to be used when an Agent does not accept a new version of a task
  // and continues using previous version
  STATUS_VERSION_REJECTED = 14;
}

// Error code associated with a Task error.
enum ErrorCode {
  ERROR_CODE_INVALID = 0;
  // Task was cancelled by requester.
  ERROR_CODE_CANCELLED = 1;
  // Task was rejected by assignee, see message for details.
  ERROR_CODE_REJECTED = 2;
  // Task Manager gave up waiting for a receipt/ack from assignee.
  ERROR_CODE_TIMEOUT = 3;
  // Task attempted to execute, but failed.
  ERROR_CODE_FAILED = 4;
}

// The type of Task event.
enum EventType {
  EVENT_TYPE_INVALID = 0;
  // Task was created.
  EVENT_TYPE_CREATED = 1;
  // Task was updated.
  EVENT_TYPE_UPDATE = 2;
  // Task already existed, but sent on a new stream connection.
  EVENT_TYPE_PREEXISTING = 3;
}

// View of a Task through its lifecycle.
// For example, a definition v1 of a task may be running on an agent, indicated by TASK_VIEW_AGENT,
// while the definition v2 may not have been received yet, indicated by TASK_VIEW_MANAGER.
enum TaskView {
  TASK_VIEW_INVALID = 0;
  // Represents the most recent version of the Task known to Task Manager
  TASK_VIEW_MANAGER = 1;
  // Represents the most recent version of the Task acknowledged or updated by an Agent
  TASK_VIEW_AGENT = 2;
}

// a Task status update
message StatusUpdate {
  // Version of the Task.
  TaskVersion version = 1;
  // Status of the Task.
  TaskStatus status = 2;
  // Author of the StatusUpdate message. Used to set the LastUpdatedBy field of the Task.
  Principal author = 3;
  // Typically provided if a user is manually managing a Task, or if an asset owns scheduling.
  google.protobuf.Timestamp scheduled_time = 4;
}

// Message representing a Task create or update.
message DefinitionUpdate {
  // New task definition being created or updated.
  // The last_updated_by and specification fields inside the task object must be defined.
  // Definition version must also be incremented by the publisher on updates.
  // We do not look at the fields create_time or last_update_time in this object,
  // they are instead set by task-manager.
  Task task = 1;
}

// Owner designates the entity responsible for writes of Task data.
message Owner {
  // Entity ID of the owner.
  string entity_id = 2;

  reserved 1;
}

// Any metadata associated with the replication of a Task.
message Replication {
  // Time by which this Task should be assumed to be stale.
  google.protobuf.Timestamp stale_time = 1;
}

// Allocation contains a list of agents allocated to a Task.
message Allocation {
  // Agents actively being utilized in a Task.
  repeated Agent active_agents = 1;
}

// Represents a team of agents
message Team {
  // Entity ID of the team
  string entity_id = 1;
  repeated Agent members = 2;
}

// Represents an Agent in the COP.
message Agent {
  // Entity ID of the agent.
  string entity_id = 2;

  reserved 1;
}

// Wrapper of an entity passed in Tasking, used to hold an additional information, and as a future extension point.
message TaskEntity {
  // The wrapped entity-manager entity.
  entitymanager.v1.Entity entity = 1;
  // Indicates that this entity was generated from a snapshot of a live entity.
  bool snapshot = 2;
}
