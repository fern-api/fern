import { DescriptorProto, EnumDescriptorProto } from "@bufbuild/protobuf/wkt";

import { FernIr } from "@fern-api/ir-sdk";
import { AbstractConverter, AbstractConverterContext } from "@fern-api/v2-importer-commons";

import { ProtofileConverterContext } from "../ProtofileConverterContext";
import { EnumConverter } from "./EnumConverter";
import { MessageConverter } from "./MessageConverter";

export declare namespace EnumOrMessageConverter {
    export interface Args extends AbstractConverter.Args<ProtofileConverterContext> {
        schema: EnumDescriptorProto | DescriptorProto;
    }

    export interface ConvertedSchema {
        typeDeclaration: FernIr.TypeDeclaration;
        audiences: string[];
        propertiesByAudience: Record<string, Set<string>>;
    }

    export interface Output {
        convertedSchema: ConvertedSchema;
        inlinedTypes: Record<FernIr.TypeId, ConvertedSchema>;
    }
}

export class EnumOrMessageConverter extends AbstractConverter<
    ProtofileConverterContext,
    EnumOrMessageConverter.Output
> {
    private readonly schema: EnumDescriptorProto | DescriptorProto;
    private readonly audiences: string[];
    constructor({ context, breadcrumbs, schema }: EnumOrMessageConverter.Args) {
        super({ context, breadcrumbs });
        this.schema = schema;
        this.audiences = [];
    }

    public convert(): EnumOrMessageConverter.Output | undefined {
        const maybeConvertedGrpcEnum = this.tryConvertGrpcEnum();
        if (maybeConvertedGrpcEnum != null) {
            return maybeConvertedGrpcEnum;
        }
        const maybeConvertedGrpcMessage = this.tryConvertGrpcMessage();
        if (maybeConvertedGrpcMessage != null) {
            return maybeConvertedGrpcMessage;
        }
        return undefined;
    }

    private tryConvertGrpcEnum(): EnumOrMessageConverter.Output | undefined {
        if (this.schema.$typeName === "google.protobuf.EnumDescriptorProto") {
            const enumConverter = new EnumConverter({
                context: this.context,
                breadcrumbs: [...this.breadcrumbs, this.schema.name],
                enum: this.schema
            });
            const convertedGrpcEnum = enumConverter.convert();
            if (convertedGrpcEnum != null) {
                return {
                    convertedSchema: {
                        typeDeclaration: this.createTypeDeclaration({
                            shape: convertedGrpcEnum.type,
                            referencedTypes: new Set()
                        }),
                        audiences: this.audiences,
                        propertiesByAudience: {}
                    },
                    inlinedTypes: {}
                };
            }
        }
        return undefined;
    }

    private tryConvertGrpcMessage(): EnumOrMessageConverter.Output | undefined {
        if (this.schema.$typeName === "google.protobuf.DescriptorProto") {
            const messageConverter = new MessageConverter({
                context: this.context,
                breadcrumbs: [...this.breadcrumbs, this.schema.name],
                message: this.schema
            });
            const convertedGrpcMessage = messageConverter.convert();
            if (convertedGrpcMessage != null) {
                return {
                    convertedSchema: convertedGrpcMessage.convertedSchema,
                    inlinedTypes: convertedGrpcMessage.inlinedTypes
                };
            }
        }
        return undefined;
    }

    public createTypeDeclaration({
        shape,
        referencedTypes,
        omitV2Examples
    }: {
        shape: FernIr.Type;
        referencedTypes: Set<string>;
        omitV2Examples?: boolean;
    }): FernIr.TypeDeclaration {
        return {
            name: this.convertDeclaredTypeName(),
            shape,
            autogeneratedExamples: [],
            userProvidedExamples: [],
            encoding: undefined,
            availability: undefined,
            docs: undefined,
            referencedTypes,
            source: undefined,
            inline: undefined,
            v2Examples: undefined
        };
    }

    public convertDeclaredTypeName(): FernIr.DeclaredTypeName {
        return {
            typeId: this.schema.name,
            fernFilepath: this.context.createFernFilepath(),
            name: this.context.casingsGenerator.generateName(this.schema.name),
            displayName: undefined
        };
    }
}
