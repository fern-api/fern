import { MethodDescriptorProto } from "@bufbuild/protobuf/wkt";

import {
    HttpEndpoint,
    HttpEndpointSource,
    HttpMethod,
    HttpRequestBody,
    HttpResponse,
    HttpResponseBody,
    JsonResponse,
    ProtobufMethodType,
    V2HttpEndpointResponseBody
} from "@fern-api/ir-sdk";
import { AbstractConverter } from "@fern-api/v2-importer-commons";

import { ProtofileConverterContext } from "../ProtofileConverterContext";
import { ExampleConverter } from "../message/ExampleConverter";

export declare namespace MethodConverter {
    export interface Args extends AbstractConverter.Args<ProtofileConverterContext> {
        operation: MethodDescriptorProto;
        serviceName: string;
        sourceCodeInfoPath: number[];
    }

    export interface Output {
        group: string[];
        endpoint: HttpEndpoint;
    }

    export interface ConvertedRequestBodyOutput {
        requestBody: HttpRequestBody | undefined;
        requestExample: ExampleConverter.Output | undefined;
    }

    export interface ConvertedResponseBodyOutput {
        responseBody: HttpResponse | undefined;
        responseExample: ExampleConverter.Output | undefined;
    }

    type BaseEndpoint = Omit<HttpEndpoint, "requestBody" | "response" | "name" | "docs" | "id" | "v2Examples">;
}

export class MethodConverter extends AbstractConverter<ProtofileConverterContext, MethodConverter.Output> {
    private readonly operation: MethodDescriptorProto;
    private readonly serviceName: string;
    private readonly sourceCodeInfoPath: number[];
    constructor({ context, breadcrumbs, operation, serviceName, sourceCodeInfoPath }: MethodConverter.Args) {
        super({ context, breadcrumbs });
        this.operation = operation;
        this.serviceName = serviceName;
        this.sourceCodeInfoPath = sourceCodeInfoPath;
    }

    public convert(): MethodConverter.Output | undefined {
        // TODO: convert method by parsing name, request type, and response type

        const packageName = this.context.spec.package;

        const convertedRequestBody = this.convertRequestBody();
        const convertedResponseBody = this.convertResponseBody();

        return {
            group: [packageName, this.serviceName],
            endpoint: {
                id: this.operation.name,
                docs: this.context.getCommentForPath(this.sourceCodeInfoPath),
                name: this.context.casingsGenerator.generateName(
                    this.context.maybePrependPackageName(this.operation.name)
                ),
                requestBody: convertedRequestBody?.requestBody,
                response: convertedResponseBody?.responseBody,
                v2Responses: undefined,
                displayName: this.context.maybeRemoveGrpcPackagePrefix(this.operation.name),
                method: HttpMethod.Post,
                baseUrl: undefined,
                v2BaseUrls: undefined,
                v2Examples: {
                    autogeneratedExamples: {
                        HELLO: {
                            request: {
                                endpoint: {
                                    method: "POST",
                                    path: "/users"
                                },
                                baseUrl: "",
                                environment: undefined,
                                auth: undefined,
                                pathParameters: {},
                                queryParameters: {},
                                headers: {},
                                requestBody: {},
                                docs: undefined
                            },
                            response: {
                                statusCode: 200,
                                body: V2HttpEndpointResponseBody.json({
                                    value: {
                                        id: "foo",
                                        name: "foo",
                                        email: "foo",
                                        createdAt: "foo"
                                    }
                                }),
                                docs: undefined
                            },
                            codeSamples: []
                        }
                    },
                    userSpecifiedExamples: {}
                },
                path: {
                    head: this.operation.name,
                    parts: []
                },
                pathParameters: [],
                queryParameters: [],
                headers: [],
                sdkRequest: undefined,
                errors: [],
                auth: false,
                availability: undefined,
                userSpecifiedExamples: [],
                autogeneratedExamples: [],
                idempotent: false,
                basePath: undefined,
                fullPath: {
                    head: this.operation.name,
                    parts: []
                },
                allPathParameters: [],
                pagination: undefined,
                transport: undefined,
                source: HttpEndpointSource.proto({
                    methodType: this.getGrpcMethodType()
                }),
                audiences: []
            }
        };
    }

    private getGrpcMethodType(): ProtobufMethodType {
        if (this.operation.clientStreaming && this.operation.serverStreaming) {
            return ProtobufMethodType.BidirectionalStream;
        }
        if (this.operation.clientStreaming) {
            return ProtobufMethodType.ClientStream;
        }
        if (this.operation.serverStreaming) {
            return ProtobufMethodType.ServerStream;
        }
        return ProtobufMethodType.Unary;
    }

    private convertRequestBody(): MethodConverter.ConvertedRequestBodyOutput | undefined {
        const requestBodyType = this.context.convertGrpcReferenceToTypeReference({
            typeName: this.operation.inputType,
            displayNameOverride: this.context.maybeRemoveGrpcPackagePrefix(this.operation.inputType)
        });
        if (requestBodyType.ok) {
            return {
                requestBody: HttpRequestBody.reference({
                    contentType: "application/proto",
                    docs: undefined,
                    requestBodyType: requestBodyType.reference,
                    v2Examples: undefined
                }),
                requestExample: undefined
            };
        }
        return {
            requestBody: undefined,
            requestExample: undefined
        };
    }

    private convertResponseBody(): MethodConverter.ConvertedResponseBodyOutput | undefined {
        const responseBodyType = this.context.convertGrpcReferenceToTypeReference({
            typeName: this.operation.outputType,
            displayNameOverride: this.context.maybeRemoveGrpcPackagePrefix(this.operation.outputType)
        });

        if (responseBodyType.ok) {
            return {
                responseBody: {
                    body: HttpResponseBody.json(
                        JsonResponse.response({
                            responseBodyType: responseBodyType.reference,
                            docs: undefined,
                            v2Examples: undefined
                        })
                    ),
                    statusCode: undefined
                },
                responseExample: undefined
            };
        }

        return {
            responseBody: undefined,
            responseExample: undefined
        };
    }
}
