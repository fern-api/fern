import { MethodDescriptorProto } from "@bufbuild/protobuf/wkt";

import {
    HttpEndpoint,
    HttpEndpointSource,
    HttpMethod,
    HttpRequestBody,
    HttpResponse,
    HttpResponseBody,
    JsonResponse
} from "@fern-api/ir-sdk";
import { AbstractConverter } from "@fern-api/v2-importer-commons";

import { ProtofileConverterContext } from "../ProtofileConverterContext";

export type gRPCMethodType = "UNARY" | "CLIENT_STREAM" | "SERVER_STREAM" | "BIDI_STREAM";

export declare namespace MethodConverter {
    export interface Args extends AbstractConverter.Args<ProtofileConverterContext> {
        operation: MethodDescriptorProto;
    }

    export interface Output {
        endpoint: HttpEndpoint;
    }

    type BaseEndpoint = Omit<HttpEndpoint, "requestBody" | "response" | "name" | "docs" | "id" | "v2Examples">;
}

export class MethodConverter extends AbstractConverter<ProtofileConverterContext, MethodConverter.Output> {
    private readonly operation: MethodDescriptorProto;

    constructor({ context, breadcrumbs, operation }: MethodConverter.Args) {
        super({ context, breadcrumbs });
        this.operation = operation;
    }

    public convert(): MethodConverter.Output | undefined {
        // TODO: convert method by parsing name, request type, and response type
        const convertedRequestBody = this.convertRequestBody();

        const convertedResponseBody = this.convertResponseBody();

        return {
            endpoint: {
                id: this.operation.name,
                docs: undefined,
                name: this.context.casingsGenerator.generateName(this.operation.name),
                requestBody: convertedRequestBody,
                response: convertedResponseBody,
                displayName: undefined,
                method: HttpMethod.Post,
                baseUrl: undefined,
                v2BaseUrls: undefined,
                v2Examples: undefined,
                path: {
                    head: this.operation.name,
                    parts: []
                },
                pathParameters: [],
                queryParameters: [],
                headers: [],
                sdkRequest: undefined,
                errors: [],
                auth: false,
                availability: undefined,
                userSpecifiedExamples: [],
                autogeneratedExamples: [],
                idempotent: false,
                basePath: undefined,
                fullPath: {
                    head: this.operation.name,
                    parts: []
                },
                allPathParameters: [],
                pagination: undefined,
                transport: undefined,
                source: HttpEndpointSource.proto(),
                audiences: []
            }
        };
    }

    private getMethodType(): gRPCMethodType {
        if (this.operation.clientStreaming && this.operation.serverStreaming) {
            return "BIDI_STREAM";
        }
        if (this.operation.clientStreaming) {
            return "CLIENT_STREAM";
        }
        if (this.operation.serverStreaming) {
            return "SERVER_STREAM";
        }
        return "UNARY";
    }

    private convertRequestBody(): HttpRequestBody | undefined {
        const requestBodyType = this.context.convertGrpcReferenceToTypeReference({
            typeName: this.context.maybeRemoveGrpcPackagePrefix(this.operation.inputType)
        });
        if (requestBodyType.ok) {
            return HttpRequestBody.reference({
                contentType: "application/protobuf",
                docs: undefined,
                requestBodyType: requestBodyType.reference,
                v2Examples: undefined
            });
        }
        return undefined;
    }

    private convertResponseBody(): HttpResponse | undefined {
        const responseBodyType = this.context.convertGrpcReferenceToTypeReference({
            typeName: this.context.maybeRemoveGrpcPackagePrefix(this.operation.outputType)
        });

        if (responseBodyType.ok) {
            return {
                body: HttpResponseBody.json(
                    JsonResponse.response({
                        responseBodyType: responseBodyType.reference,
                        docs: undefined,
                        v2Examples: undefined
                    })
                ),
                statusCode: undefined
            };
        }

        return undefined;
    }
}
