types:
  SearchRequestQuery:
    discriminated: false
    inline: true
    union:
      - type: SingleFilterSearchRequest
      - type: MultipleFilterSearchRequest
  MultipleFilterSearchRequest:
    properties:
      operator:
        type: optional<MultipleFilterSearchRequestOperator>
      value:
        type: optional<MultipleFilterSearchRequestValue>
  MultipleFilterSearchRequestOperator:
    enum:
      - AND
      - OR
    inline: true
  MultipleFilterSearchRequestValue:
    discriminated: false
    inline: true
    union:
      - type: list<MultipleFilterSearchRequest>
      - type: list<SingleFilterSearchRequest>
  SingleFilterSearchRequest:
    properties:
      field:
        type: optional<string>
      operator:
        type: optional<SingleFilterSearchRequestOperator>
      value:
        type: optional<string>
  SingleFilterSearchRequestOperator:
    enum:
      - name: Equals
        value: '='
      - name: NotEquals
        value: '!='
      - name: In
        value: IN
      - name: NotIn
        value: NIN
      - name: LessThan
        value: <
      - name: GreaterThan
        value: '>'
      - name: Contains
        value: '~'
      - name: DoesNotContain
        value: '!~'
      - name: StartsWith
        value: ^
      - name: EndsWith
        value: $
    inline: true
  SearchRequest:
    properties:
      pagination:
        type: optional<StartingAfterPaging>
      query: SearchRequestQuery
  PaginatedConversationResponse:
    properties:
      conversations:
        type: list<Conversation>
      pages:
        type: optional<CursorPages>
      total_count:
        type: integer
      type:
        type: literal<"conversation.list">
  CursorPages:
    properties:
      next:
        type: optional<StartingAfterPaging>
      page:
        type: optional<integer>
      per_page:
        type: optional<integer>
      total_pages:
        type: optional<integer>
      type:
        type: literal<"pages">
  StartingAfterPaging:
    properties:
      per_page:
        type: integer
      starting_after:
        type: optional<string>
  Conversation:
    properties:
      foo: string
service:
  auth: false
  base-path: ''
  display-name: Conversations
  endpoints:
    search:
      auth: true
      display-name: Search conversations
      method: POST
      pagination:
        cursor: $request.pagination.starting_after
        next_cursor: $response.pages.next.starting_after
        results: $response.conversations
      path: /conversations/search
      request:
        body:
          type: SearchRequest
        content-type: application/json
      response:
        type: PaginatedConversationResponse

