import { assertNever } from "@fern-api/core-utils";
import { IrVersions } from "../../../ir-versions";
import { convertName, convertNameAndWireValue } from "./commons";

export function convertTypes(types: Record<IrVersions.V61.TypeId, IrVersions.V61.TypeDeclaration>): Record<IrVersions.V60.TypeId, IrVersions.V60.TypeDeclaration> {
    return Object.fromEntries(
        Object.entries(types).map(([key, typeDeclaration]) => [
            key,
            convertTypeDeclaration(typeDeclaration)
        ])
    );
}

export function convertTypeReference(typeRef: IrVersions.V61.TypeReference): IrVersions.V60.TypeReference {
    switch (typeRef.type) {
        case "primitive":
            return typeRef;
        case "container":
            return {
                ...typeRef,
                container: convertContainerType(typeRef.container)
            };
        case "named":
            return {
                ...typeRef,
                name: convertDeclaredTypeName(typeRef.name)
            };
        case "unknown":
            return typeRef;
        default:
            return assertNever(typeRef);
    }
}

function convertContainerType(container: IrVersions.V61.ContainerType): IrVersions.V60.ContainerType {
    switch (container.type) {
        case "list":
            return {
                ...container,
                list: convertTypeReference(container.list)
            };
        case "set":
            return {
                ...container,
                set: convertTypeReference(container.set)
            };
        case "optional":
            return {
                ...container,
                optional: convertTypeReference(container.optional)
            };
        case "map":
            return {
                ...container,
                keyType: convertTypeReference(container.keyType),
                valueType: convertTypeReference(container.valueType)
            };
        case "literal":
            return container;
        default:
            return assertNever(container);
    }
}

function convertDeclaredTypeName(typeName: IrVersions.V61.DeclaredTypeName): IrVersions.V60.DeclaredTypeName {
    return {
        ...typeName,
        name: convertName(typeName.name),
        fernFilepath: {
            ...typeName.fernFilepath,
            allParts: typeName.fernFilepath.allParts.map(convertName),
            packagePath: typeName.fernFilepath.packagePath.map(convertName),
            file: typeName.fernFilepath.file != null ? convertName(typeName.fernFilepath.file) : undefined
        }
    };
}


function convertTypeDeclaration(typeDeclaration: IrVersions.V61.TypeDeclaration): IrVersions.V60.TypeDeclaration {
    return {
        ...typeDeclaration,
        name: convertDeclaredTypeName(typeDeclaration.name),
        shape: convertTypeShape(typeDeclaration.shape),
        autogeneratedExamples: typeDeclaration.autogeneratedExamples.map(({name, shape}) => ({
            name: name != null ? convertName(name) : undefined,
            shape: convertExampleTypeShape(shape)
        })),
        userProvidedExamples: typeDeclaration.userProvidedExamples.map(({name, shape}) => ({
            name: convertName(name),
            shape: convertExampleTypeShape(shape)
        })),
    };
}

function convertTypeShape(shape: IrVersions.V61.Type): IrVersions.V60.Type {
    switch (shape.type) {
        case "alias":
            return {
                ...shape,
                aliasOf: convertTypeReference(shape.aliasOf),
                resolvedType: convertResolvedTypeReference(shape.resolvedType)
            };
        case "enum":
            return {
                ...shape,
                values: shape.values.map(enumValue => ({
                    ...enumValue,
                    name: convertNameAndWireValue(enumValue.name)
                })),
                default: shape.default != null ? {
                    ...shape.default,
                    name: convertNameAndWireValue(shape.default.name)
                } : undefined
            };
        case "object":
            return {
                ...shape,
                extends: shape.extends.map(convertDeclaredTypeName),
                properties: shape.properties.map(property => ({
                    ...property,
                    name: convertNameAndWireValue(property.name),
                    valueType: convertTypeReference(property.valueType)
                }))
            };
        case "union":
            return {
                ...shape,
                discriminant: convertNameAndWireValue(shape.discriminant),
                baseProperties: shape.baseProperties.map(property => ({
                    ...property,
                    name: convertNameAndWireValue(property.name),
                    valueType: convertTypeReference(property.valueType)
                })),
                types: shape.types.map(unionType => convertSingleUnionType(unionType))
            };
        case "undiscriminatedUnion":
            return {
                ...shape,
                members: shape.members.map(member => ({
                    ...member,
                    type: convertTypeReference(member.type)
                }))
            };
        default:
            return assertNever(shape);
    }
}

function convertSingleUnionType(unionType: IrVersions.V61.SingleUnionType): IrVersions.V60.SingleUnionType {
    return {
        ...unionType,
        discriminantValue: convertNameAndWireValue(unionType.discriminantValue),
        shape: convertSingleUnionTypeProperties(unionType.shape)
    };
}

function convertSingleUnionTypeProperties(properties: IrVersions.V61.SingleUnionTypeProperties): IrVersions.V60.SingleUnionTypeProperties {
    switch (properties.propertiesType) {
        case "samePropertiesAsObject":
            return {
                ...properties,
                name: convertName(properties.name)
            };
        case "singleProperty":
            return {
                ...properties,
                name: convertNameAndWireValue(properties.name),
                type: convertTypeReference(properties.type)
            };
        case "noProperties":
            return properties;
        default:
            return assertNever(properties);
    }
}

function convertResolvedTypeReference(resolvedTypeRef: IrVersions.V61.ResolvedTypeReference): IrVersions.V60.ResolvedTypeReference {
    switch (resolvedTypeRef.type) {
        case "primitive":
            return resolvedTypeRef;
        case "container":
            return {
                ...resolvedTypeRef,
                container: convertContainerType(resolvedTypeRef.container)
            };
        case "named":
            return {
                ...resolvedTypeRef,
                name: convertDeclaredTypeName(resolvedTypeRef.name),
                shape: convertTypeShape(resolvedTypeRef.shape)
            };
        case "unknown":
            return resolvedTypeRef;
        default:
            return assertNever(resolvedTypeRef);
    }
}

function convertExampleObjectType(exampleObjectType: IrVersions.V61.ExampleObjectType): IrVersions.V60.ExampleObjectType {

}



function convertExampleTypeReference(exampleTypeReference: IrVersions.V61.ExampleTypeReference): IrVersions.V60.ExampleTypeReference {
    return {
        ...exampleTypeReference,
        shape: 
    }
}

function convertExampleSingleUnionTypeProperties(exampleSingleUnionTypeProperties: IrVersions.V61.ExampleSingleUnionTypeProperties): IrVersions.V60.ExampleSingleUnionTypeProperties {
    switch (exampleSingleUnionTypeProperties.type) {
        case "samePropertiesAsObject":
            return IrVersions.V60.ExampleSingleUnionTypeProperties.samePropertiesAsObject({
                ...exampleSingleUnionTypeProperties,
                object: convertExampleObjectType(exampleSingleUnionTypeProperties.object)
            });
        case "singleProperty":
            return IrVersions.V60.ExampleSingleUnionTypeProperties.singleProperty(convertExampleTypeReference(exampleSingleUnionTypeProperties));
        case "noProperties":
            return IrVersions.V60.ExampleSingleUnionTypeProperties.noProperties();
        default:
            return assertNever(exampleSingleUnionTypeProperties);
    }
}

function convertExampleTypeShape(exampleTypeShape: IrVersions.V61.ExampleTypeShape): IrVersions.V60.ExampleTypeShape {
    switch (exampleTypeShape.type) {
        case "alias":
            return IrVersions.V60.ExampleTypeShape.alias({
                value: convertExampleTypeReference(exampleTypeShape.value)
            });
            case "enum":
                return IrVersions.V60.ExampleTypeShape.enum({
                    value: convertNameAndWireValue(exampleTypeShape.value)});
        case "object":
            return IrVersions.V60.ExampleTypeShape.object({
                properties: exampleTypeShape.properties.map(property => ({
                    ...property,
                    name: convertNameAndWireValue(property.name),
                    value: convertExampleTypeReference(property.value),
                    originalTypeDeclaration: convertDeclaredTypeName(property.originalTypeDeclaration)
                }))
            });
        case "union":
            return IrVersions.V60.ExampleTypeShape.union({
                discriminant: convertNameAndWireValue(exampleTypeShape.discriminant),
                singleUnionType: {
                    wireDiscriminantValue: convertNameAndWireValue(exampleTypeShape.singleUnionType.wireDiscriminantValue),
                    shape: convertExampleSingleUnionTypeProperties(exampleTypeShape.singleUnionType.shape)
                }
            });
        case "undiscriminatedUnion":
            return IrVersions.V60.ExampleTypeShape.undiscriminatedUnion({
                ...exampleTypeShape,
                singleUnionType: convertExampleTypeReference(exampleTypeShape.singleUnionType)
            });
    }
}

