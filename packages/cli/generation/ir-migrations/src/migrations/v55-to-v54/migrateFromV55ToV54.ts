import { mapValues } from "lodash-es";

import { GeneratorName } from "@fern-api/configuration-loader";
import { assertNever } from "@fern-api/core-utils";

import { IrSerialization } from "../../ir-serialization";
import { IrVersions } from "../../ir-versions";
import {
    GeneratorWasNeverUpdatedToConsumeNewIR,
    GeneratorWasNotCreatedYet,
    IrMigration
} from "../../types/IrMigration";

export const V55_TO_V54_MIGRATION: IrMigration<
    IrVersions.V55.ir.IntermediateRepresentation,
    IrVersions.V54.ir.IntermediateRepresentation
> = {
    laterVersion: "v55",
    earlierVersion: "v54",
    firstGeneratorVersionToConsumeNewIR: {
        [GeneratorName.TYPESCRIPT_NODE_SDK]: "0.47.0",
        [GeneratorName.TYPESCRIPT_BROWSER_SDK]: "0.47.0",
        [GeneratorName.TYPESCRIPT]: "0.47.0",
        [GeneratorName.TYPESCRIPT_SDK]: "0.47.0",
        [GeneratorName.TYPESCRIPT_EXPRESS]: "0.17.7",
        [GeneratorName.JAVA]: GeneratorWasNeverUpdatedToConsumeNewIR,
        [GeneratorName.JAVA_MODEL]: GeneratorWasNeverUpdatedToConsumeNewIR,
        [GeneratorName.JAVA_SDK]: GeneratorWasNeverUpdatedToConsumeNewIR,
        [GeneratorName.JAVA_SPRING]: GeneratorWasNeverUpdatedToConsumeNewIR,
        [GeneratorName.PYTHON_FASTAPI]: GeneratorWasNeverUpdatedToConsumeNewIR,
        [GeneratorName.PYTHON_PYDANTIC]: GeneratorWasNeverUpdatedToConsumeNewIR,
        [GeneratorName.OPENAPI_PYTHON_CLIENT]: GeneratorWasNeverUpdatedToConsumeNewIR,
        [GeneratorName.OPENAPI]: GeneratorWasNeverUpdatedToConsumeNewIR,
        [GeneratorName.STOPLIGHT]: GeneratorWasNeverUpdatedToConsumeNewIR,
        [GeneratorName.POSTMAN]: GeneratorWasNeverUpdatedToConsumeNewIR,
        [GeneratorName.PYTHON_SDK]: GeneratorWasNeverUpdatedToConsumeNewIR,
        [GeneratorName.GO_FIBER]: GeneratorWasNeverUpdatedToConsumeNewIR,
        [GeneratorName.GO_MODEL]: GeneratorWasNeverUpdatedToConsumeNewIR,
        [GeneratorName.GO_SDK]: GeneratorWasNeverUpdatedToConsumeNewIR,
        [GeneratorName.RUBY_MODEL]: GeneratorWasNeverUpdatedToConsumeNewIR,
        [GeneratorName.RUBY_SDK]: GeneratorWasNeverUpdatedToConsumeNewIR,
        [GeneratorName.CSHARP_MODEL]: GeneratorWasNeverUpdatedToConsumeNewIR,
        [GeneratorName.CSHARP_SDK]: GeneratorWasNeverUpdatedToConsumeNewIR,
        [GeneratorName.SWIFT_MODEL]: GeneratorWasNeverUpdatedToConsumeNewIR,
        [GeneratorName.SWIFT_SDK]: GeneratorWasNotCreatedYet,
        [GeneratorName.PHP_MODEL]: GeneratorWasNotCreatedYet,
        [GeneratorName.PHP_SDK]: GeneratorWasNeverUpdatedToConsumeNewIR
    },
    jsonifyEarlierVersion: (ir) =>
        IrSerialization.V54.IntermediateRepresentation.jsonOrThrow(ir, {
            unrecognizedObjectKeys: "strip",
            skipValidation: true
        }),
    migrateBackwards: (v55): IrVersions.V54.ir.IntermediateRepresentation => {
        return {
            ...v55,
            apiVersion: v55.apiVersion != null ? convertApiVersionScheme(v55.apiVersion) : undefined,
            auth: convertAuth(v55.auth),
            headers: v55.headers.map((header) => convertHttpHeader(header)),
            idempotencyHeaders: v55.idempotencyHeaders.map((header) => convertHttpHeader(header)),
            types: convertTypes(v55.types),
            services: mapValues(v55.services, (service) => convertHttpService(service)),
            webhookGroups: mapValues(v55.webhookGroups, (webhookGroup) => convertWebhookGroup(webhookGroup)),
            websocketChannels: mapValues(v55.websocketChannels, (websocketChannel) =>
                convertWebsocketChannel(websocketChannel)
            ),
            errors: mapValues(v55.errors, (error) => convertErrorDeclaration(error)),
            pathParameters: v55.pathParameters.map((pathParameter) => convertPathParameter(pathParameter)),
            variables: v55.variables.map((variable) => convertVariable(variable)),
            dynamic: v55.dynamic != null ? convertDynamic(v55.dynamic) : undefined
        };
    }
};

function convertTypes(
    types: Record<string, IrVersions.V55.types.TypeDeclaration>
): Record<string, IrVersions.V54.types.TypeDeclaration> {
    return mapValues(types, (typeDeclaration) => {
        return {
            ...typeDeclaration,
            autogeneratedExamples: typeDeclaration.autogeneratedExamples.map((example) => convertExampleType(example)),
            userProvidedExamples: typeDeclaration.userProvidedExamples.map((example) => convertExampleType(example)),
            shape: IrVersions.V55.types.Type._visit<IrVersions.V54.types.Type>(typeDeclaration.shape, {
                union: (union) => {
                    return IrVersions.V54.types.Type.union({
                        ...union,
                        baseProperties: union.baseProperties.map((objectProperty) => {
                            return {
                                ...objectProperty,
                                valueType: convertTypeReference(objectProperty.valueType)
                            };
                        }),
                        types: union.types.map((singleUnionType) => convertSingleUnionType(singleUnionType))
                    });
                },
                enum: IrVersions.V54.types.Type.enum,
                object: (object) => {
                    return IrVersions.V54.types.Type.object({
                        ...object,
                        properties: object.properties.map((objectProperty) => {
                            return {
                                ...objectProperty,
                                valueType: convertTypeReference(objectProperty.valueType)
                            };
                        }),
                        extendedProperties: object.extendedProperties?.map((extendedProperty) => {
                            return {
                                ...extendedProperty,
                                valueType: convertTypeReference(extendedProperty.valueType)
                            };
                        })
                    });
                },
                alias: (aliasTypeDeclaration) => {
                    return IrVersions.V54.types.Type.alias({
                        aliasOf: convertTypeReference(aliasTypeDeclaration.aliasOf),
                        resolvedType: convertResolvedType(aliasTypeDeclaration.resolvedType)
                    });
                },
                undiscriminatedUnion: (undiscriminatedUnion) => {
                    return IrVersions.V54.types.Type.undiscriminatedUnion(
                        convertUndiscriminatedUnion(undiscriminatedUnion)
                    );
                },
                _other: () => {
                    throw new Error("Encountered unknown shape");
                }
            })
        };
    });
}

function convertApiVersionScheme(apiVersionScheme: IrVersions.V55.ApiVersionScheme): IrVersions.V54.ApiVersionScheme {
    return IrVersions.V54.ApiVersionScheme.header({
        ...apiVersionScheme,
        header: convertHttpHeader(apiVersionScheme.header)
    });
}

function convertWebsocketChannel(
    websocketChannel: IrVersions.V55.websocket.WebSocketChannel
): IrVersions.V54.websocket.WebSocketChannel {
    return {
        ...websocketChannel,
        headers: websocketChannel.headers.map((header) => convertHttpHeader(header)),
        queryParameters: websocketChannel.queryParameters.map((queryParameter) =>
            convertQueryParameter(queryParameter)
        ),
        pathParameters: websocketChannel.pathParameters.map((pathParameter) => convertPathParameter(pathParameter)),
        messages: websocketChannel.messages.map((message) => convertWebsocketMessage(message)),
        examples: websocketChannel.examples.map((example) => convertExampleWebsocketSession(example))
    };
}

function convertWebsocketMessage(
    websocketMessage: IrVersions.V55.websocket.WebSocketMessage
): IrVersions.V54.websocket.WebSocketMessage {
    return {
        ...websocketMessage,
        body: convertWebsocketMessageBody(websocketMessage.body)
    };
}

function convertWebsocketMessageBody(
    body: IrVersions.V55.websocket.WebSocketMessageBody
): IrVersions.V54.websocket.WebSocketMessageBody {
    switch (body.type) {
        case "inlinedBody":
            return IrVersions.V54.websocket.WebSocketMessageBody.inlinedBody({
                ...body,
                properties: body.properties.map((property) => {
                    return {
                        ...property,
                        valueType: convertTypeReference(property.valueType)
                    };
                })
            });
        case "reference":
            return IrVersions.V54.websocket.WebSocketMessageBody.reference({
                ...body,
                bodyType: convertTypeReference(body.bodyType)
            });
    }
}

function convertWebhookGroup(webhookGroup: IrVersions.V55.webhooks.WebhookGroup): IrVersions.V54.webhooks.WebhookGroup {
    return webhookGroup.map((webhook) => convertWebhook(webhook));
}

function convertWebhook(webhook: IrVersions.V55.webhooks.Webhook): IrVersions.V54.webhooks.Webhook {
    return {
        ...webhook,
        headers: webhook.headers.map((header) => convertHttpHeader(header)),
        payload: convertWebhookPayload(webhook.payload),
        examples:
            webhook.examples != null ? webhook.examples.map((example) => convertWebhookExampleCall(example)) : undefined
    };
}

function convertWebhookPayload(
    payload: IrVersions.V55.webhooks.WebhookPayload
): IrVersions.V54.webhooks.WebhookPayload {
    switch (payload.type) {
        case "reference":
            return IrVersions.V54.webhooks.WebhookPayload.reference({
                ...payload,
                payloadType: convertTypeReference(payload.payloadType)
            });
        case "inlinedPayload":
            return IrVersions.V54.webhooks.WebhookPayload.inlinedPayload({
                ...payload,
                properties: payload.properties.map((property) => {
                    return {
                        ...property,
                        valueType: convertTypeReference(property.valueType)
                    };
                })
            });
    }
}

function convertWebhookExampleCall(example: IrVersions.V55.ExampleWebhookCall): IrVersions.V54.ExampleWebhookCall {
    return {
        ...example,
        payload: convertExampleTypeReference(example.payload)
    };
}

function convertAuth(auth: IrVersions.V55.auth.ApiAuth): IrVersions.V54.auth.ApiAuth {
    return {
        ...auth,
        schemes: auth.schemes.map((scheme) => {
            switch (scheme.type) {
                case "basic":
                    return IrVersions.V54.auth.AuthScheme.basic(scheme);
                case "bearer":
                    return IrVersions.V54.auth.AuthScheme.bearer(scheme);
                case "header":
                    return IrVersions.V54.auth.AuthScheme.header(convertHeader(scheme));
                case "oauth":
                    return IrVersions.V54.auth.AuthScheme.oauth(convertOAuth(scheme));
            }
        })
    };
}

function convertHeader(header: IrVersions.V55.auth.AuthScheme.Header): IrVersions.V54.auth.HeaderAuthScheme {
    return {
        ...header,
        valueType: convertTypeReference(header.valueType)
    };
}

function convertOAuth(oauth: IrVersions.V55.auth.AuthScheme.Oauth): IrVersions.V54.auth.OAuthScheme {
    return {
        ...oauth,
        configuration: IrVersions.V54.auth.OAuthConfiguration.clientCredentials({
            ...oauth.configuration,
            tokenEndpoint: convertOAuthTokenEndpoint(oauth.configuration.tokenEndpoint),
            refreshEndpoint:
                oauth.configuration.refreshEndpoint != null
                    ? convertOAuthRefreshEndpoint(oauth.configuration.refreshEndpoint)
                    : undefined
        })
    };
}

function convertOAuthTokenEndpoint(
    tokenEndpoint: IrVersions.V55.auth.OAuthTokenEndpoint
): IrVersions.V54.auth.OAuthTokenEndpoint {
    return {
        ...tokenEndpoint,
        requestProperties: {
            clientId: convertRequestProperty(tokenEndpoint.requestProperties.clientId),
            clientSecret: convertRequestProperty(tokenEndpoint.requestProperties.clientSecret),
            scopes:
                tokenEndpoint.requestProperties.scopes != null
                    ? convertRequestProperty(tokenEndpoint.requestProperties.scopes)
                    : undefined
        },
        responseProperties: {
            accessToken: convertResponseProperty(tokenEndpoint.responseProperties.accessToken),
            expiresIn:
                tokenEndpoint.responseProperties.expiresIn != null
                    ? convertResponseProperty(tokenEndpoint.responseProperties.expiresIn)
                    : undefined,
            refreshToken:
                tokenEndpoint.responseProperties.refreshToken != null
                    ? convertResponseProperty(tokenEndpoint.responseProperties.refreshToken)
                    : undefined
        }
    };
}

function convertOAuthRefreshEndpoint(
    refreshEndpoint: IrVersions.V55.auth.OAuthRefreshEndpoint
): IrVersions.V54.auth.OAuthRefreshEndpoint | undefined {
    return {
        ...refreshEndpoint,
        requestProperties: {
            refreshToken: convertRequestProperty(refreshEndpoint.requestProperties.refreshToken)
        },
        responseProperties: {
            accessToken: convertResponseProperty(refreshEndpoint.responseProperties.accessToken),
            expiresIn:
                refreshEndpoint.responseProperties.expiresIn != null
                    ? convertResponseProperty(refreshEndpoint.responseProperties.expiresIn)
                    : undefined,
            refreshToken:
                refreshEndpoint.responseProperties.refreshToken != null
                    ? convertResponseProperty(refreshEndpoint.responseProperties.refreshToken)
                    : undefined
        }
    };
}

function convertHttpHeader(header: IrVersions.V55.http.HttpHeader): IrVersions.V54.http.HttpHeader {
    return {
        ...header,
        valueType: convertTypeReference(header.valueType)
    };
}

function convertTypeReference(typeReference: IrVersions.V55.types.TypeReference): IrVersions.V54.types.TypeReference {
    if (typeReference.type === "container" && typeReference.container.type === "nullable") {
        return convertNullableTypeReferenceToOptionalIfNotAlready(typeReference.container.nullable);
    }
    if (typeReference.type === "container" && typeReference.container.type === "optional") {
        return convertOptionalTypeReferenceWithoutNullable(typeReference.container.optional);
    }
    return IrVersions.V55.types.TypeReference._visit<IrVersions.V54.types.TypeReference>(typeReference, {
        container: (container) => IrVersions.V54.types.TypeReference.container(convertContainerType(container)),
        primitive: (primitiveType) => IrVersions.V54.types.TypeReference.primitive(convertPrimitiveType(primitiveType)),
        named: IrVersions.V54.types.TypeReference.named,
        unknown: IrVersions.V54.types.TypeReference.unknown,
        _other: () => {
            throw new Error("Unknown type reference: " + typeReference.type);
        }
    });
}

function convertPrimitiveType(primitiveType: IrVersions.V55.types.PrimitiveType): IrVersions.V54.types.PrimitiveType {
    return {
        v1: convertPrimitiveTypeV1(primitiveType.v1),
        v2: primitiveType.v2 != null ? convertPrimitiveTypeV2(primitiveType.v2) : undefined
    };
}

function convertPrimitiveTypeV1(
    primitiveTypeV1: IrVersions.V55.types.PrimitiveTypeV1
): IrVersions.V54.types.PrimitiveTypeV1 {
    return primitiveTypeV1;
}

function convertPrimitiveTypeV2(
    primitiveTypeV2: IrVersions.V55.types.PrimitiveTypeV2
): IrVersions.V54.types.PrimitiveTypeV2 | undefined {
    return primitiveTypeV2;
}

function convertContainerType(container: IrVersions.V55.types.ContainerType): IrVersions.V54.types.ContainerType {
    return IrVersions.V55.types.ContainerType._visit<IrVersions.V54.types.ContainerType>(container, {
        list: (itemType) => IrVersions.V54.types.ContainerType.list(convertTypeReference(itemType)),
        optional: (itemType) => IrVersions.V54.types.ContainerType.optional(convertTypeReference(itemType)),
        nullable: (itemType) => IrVersions.V54.types.ContainerType.optional(convertTypeReference(itemType)),
        set: (itemType) => IrVersions.V54.types.ContainerType.set(convertTypeReference(itemType)),
        map: ({ keyType, valueType }) =>
            IrVersions.V54.types.ContainerType.map({
                keyType: convertTypeReference(keyType),
                valueType: convertTypeReference(valueType)
            }),
        literal: IrVersions.V54.types.ContainerType.literal,
        _other: () => {
            throw new Error("Unknown ContainerType: " + container.type);
        }
    });
}

function convertSingleUnionType(
    singleUnionType: IrVersions.V55.types.SingleUnionType
): IrVersions.V54.types.SingleUnionType {
    return {
        ...singleUnionType,
        shape: convertSingleUnionTypeProperties(singleUnionType.shape)
    };
}

function convertSingleUnionTypeProperties(
    properties: IrVersions.V55.types.SingleUnionTypeProperties
): IrVersions.V54.types.SingleUnionTypeProperties {
    return IrVersions.V55.types.SingleUnionTypeProperties._visit<IrVersions.V54.types.SingleUnionTypeProperties>(
        properties,
        {
            samePropertiesAsObject: (declaredTypeName) =>
                IrVersions.V54.types.SingleUnionTypeProperties.samePropertiesAsObject(declaredTypeName),
            singleProperty: (singleProperty) =>
                IrVersions.V54.types.SingleUnionTypeProperties.singleProperty({
                    ...singleProperty,
                    type: convertTypeReference(singleProperty.type)
                }),
            noProperties: IrVersions.V54.types.SingleUnionTypeProperties.noProperties,
            _other: () => {
                throw new Error(`Unknown SingleUnionTypeProperties: ${JSON.stringify(properties)}`);
            }
        }
    );
}

function convertResolvedType(
    resolvedType: IrVersions.V55.types.ResolvedTypeReference
): IrVersions.V54.types.ResolvedTypeReference {
    return IrVersions.V55.types.ResolvedTypeReference._visit<IrVersions.V54.types.ResolvedTypeReference>(resolvedType, {
        container: (container) => IrVersions.V54.types.ResolvedTypeReference.container(convertContainerType(container)),
        named: IrVersions.V54.types.ResolvedTypeReference.named,
        primitive: (primitiveType) =>
            IrVersions.V54.types.ResolvedTypeReference.primitive(convertPrimitiveType(primitiveType)),
        unknown: IrVersions.V54.types.ResolvedTypeReference.unknown,
        _other: () => {
            throw new Error("Unknown ResolvedTypeReference: " + resolvedType.type);
        }
    });
}

function convertUndiscriminatedUnion(
    undiscriminatedUnion: IrVersions.V55.types.UndiscriminatedUnionTypeDeclaration
): IrVersions.V54.types.UndiscriminatedUnionTypeDeclaration {
    return {
        members: undiscriminatedUnion.members.map((member) => {
            return {
                ...member,
                type: convertTypeReference(member.type)
            };
        })
    };
}

function convertHttpService(service: IrVersions.V55.http.HttpService): IrVersions.V54.http.HttpService {
    return {
        ...service,
        pathParameters: service.pathParameters.map((pathParameter) => convertPathParameter(pathParameter)),
        headers: service.headers.map((header) => convertHttpHeader(header)),
        endpoints: service.endpoints.map((endpoint) => convertEndpoint(endpoint))
    };
}

function convertPathParameter(pathParameter: IrVersions.V55.http.PathParameter): IrVersions.V54.http.PathParameter {
    return {
        ...pathParameter,
        valueType: convertTypeReference(pathParameter.valueType)
    };
}

function convertVariable(variable: IrVersions.V55.VariableDeclaration): IrVersions.V54.VariableDeclaration {
    return {
        ...variable,
        type: convertTypeReference(variable.type)
    };
}

function convertEndpoint(endpoint: IrVersions.V55.http.HttpEndpoint): IrVersions.V54.http.HttpEndpoint {
    return {
        ...endpoint,
        pagination: endpoint.pagination != null ? convertPagination(endpoint.pagination) : undefined,
        allPathParameters: endpoint.allPathParameters.map((pathParameter) => convertPathParameter(pathParameter)),
        pathParameters: endpoint.pathParameters.map((pathParameter) => convertPathParameter(pathParameter)),
        sdkRequest: endpoint.sdkRequest != null ? convertSdkRequest(endpoint.sdkRequest) : undefined,
        requestBody: endpoint.requestBody != null ? convertRequestBody(endpoint.requestBody) : undefined,
        response: endpoint.response != null ? convertHttpResponse(endpoint.response) : undefined,
        headers: endpoint.headers.map((header) => convertHttpHeader(header)),
        queryParameters: endpoint.queryParameters.map((queryParameter) => convertQueryParameter(queryParameter)),
        autogeneratedExamples: endpoint.autogeneratedExamples.map((autogeneratedExample) => ({
            ...autogeneratedExample,
            example: convertExampleEndpointCall(autogeneratedExample.example)
        })),
        userSpecifiedExamples: endpoint.userSpecifiedExamples.map((userSpecifiedExample) => ({
            ...userSpecifiedExample,
            example:
                userSpecifiedExample.example != null
                    ? convertExampleEndpointCall(userSpecifiedExample.example)
                    : undefined
        }))
    };
}

function convertHttpResponse(response: IrVersions.V55.http.HttpResponse): IrVersions.V54.http.HttpResponse {
    return {
        ...response,
        body: response.body != null ? convertResponseBody(response.body) : undefined
    };
}

function convertResponseBody(responseBody: IrVersions.V55.http.HttpResponseBody): IrVersions.V54.http.HttpResponseBody {
    switch (responseBody.type) {
        case "json":
            return IrVersions.V54.http.HttpResponseBody.json(convertJsonResponse(responseBody.value));
        case "fileDownload":
            return IrVersions.V54.http.HttpResponseBody.fileDownload(responseBody);
        case "bytes":
            return IrVersions.V54.http.HttpResponseBody.bytes(responseBody);
        case "text":
            return IrVersions.V54.http.HttpResponseBody.text(responseBody);
        case "streaming":
            return IrVersions.V54.http.HttpResponseBody.streaming(convertStreamingResponse(responseBody.value));
        case "streamParameter":
            return IrVersions.V54.http.HttpResponseBody.streamParameter(convertStreamParameter(responseBody));
        default:
            assertNever(responseBody);
    }
}

function convertJsonResponse(jsonResponse: IrVersions.V55.http.JsonResponse): IrVersions.V54.http.JsonResponse {
    switch (jsonResponse.type) {
        case "response":
            return IrVersions.V54.http.JsonResponse.response({
                ...jsonResponse,
                responseBodyType: convertTypeReference(jsonResponse.responseBodyType)
            });
        case "nestedPropertyAsResponse":
            return IrVersions.V54.http.JsonResponse.nestedPropertyAsResponse({
                ...jsonResponse,
                responseBodyType: convertTypeReference(jsonResponse.responseBodyType),
                responseProperty:
                    jsonResponse.responseProperty != null
                        ? convertObjectProperty(jsonResponse.responseProperty)
                        : undefined
            });
    }
}

function convertStreamingResponse(
    streamingResponse: IrVersions.V55.http.StreamingResponse
): IrVersions.V54.http.StreamingResponse {
    switch (streamingResponse.type) {
        case "json":
            return IrVersions.V54.http.StreamingResponse.json({
                ...streamingResponse,
                payload: convertTypeReference(streamingResponse.payload)
            });
        case "text":
            return IrVersions.V54.http.StreamingResponse.text(streamingResponse);
        case "sse":
            return IrVersions.V54.http.StreamingResponse.sse({
                ...streamingResponse,
                payload: convertTypeReference(streamingResponse.payload)
            });
    }
}

function convertNonStreamHttpResponse(
    nonStreamingResponse: IrVersions.V55.http.NonStreamHttpResponseBody
): IrVersions.V54.http.NonStreamHttpResponseBody {
    switch (nonStreamingResponse.type) {
        case "json":
            return IrVersions.V54.http.NonStreamHttpResponseBody.json(convertJsonResponse(nonStreamingResponse.value));
        case "bytes":
            return IrVersions.V54.http.NonStreamHttpResponseBody.bytes(nonStreamingResponse);
        case "text":
            return IrVersions.V54.http.NonStreamHttpResponseBody.text(nonStreamingResponse);
        case "fileDownload":
            return IrVersions.V54.http.NonStreamHttpResponseBody.fileDownload(nonStreamingResponse);
        default:
            assertNever(nonStreamingResponse);
    }
}

function convertStreamParameter(
    streamingResponse: IrVersions.V55.http.StreamParameterResponse
): IrVersions.V54.http.StreamParameterResponse {
    return {
        nonStreamResponse: convertNonStreamHttpResponse(streamingResponse.nonStreamResponse),
        streamResponse: convertStreamingResponse(streamingResponse.streamResponse)
    };
}

function convertPagination(pagination: IrVersions.V55.http.Pagination): IrVersions.V54.http.Pagination {
    switch (pagination.type) {
        case "cursor":
            return IrVersions.V54.http.Pagination.cursor(convertCursorPagination(pagination));
        case "offset":
            return IrVersions.V54.http.Pagination.offset(convertOffsetPagination(pagination));
    }
}

function convertCursorPagination(
    cursorPagination: IrVersions.V55.http.CursorPagination
): IrVersions.V54.http.CursorPagination {
    return {
        ...cursorPagination,
        page: convertRequestProperty(cursorPagination.page),
        next: convertResponseProperty(cursorPagination.next),
        results: convertResponseProperty(cursorPagination.results)
    };
}

function convertOffsetPagination(
    offsetPagination: IrVersions.V55.http.OffsetPagination
): IrVersions.V54.http.OffsetPagination {
    return {
        ...offsetPagination,
        page: convertRequestProperty(offsetPagination.page),
        results: convertResponseProperty(offsetPagination.results),
        step: offsetPagination.step != null ? convertRequestProperty(offsetPagination.step) : undefined,
        hasNextPage:
            offsetPagination.hasNextPage != null ? convertResponseProperty(offsetPagination.hasNextPage) : undefined
    };
}

function convertRequestProperty(
    requestProperty: IrVersions.V55.http.RequestProperty
): IrVersions.V54.http.RequestProperty {
    return {
        ...requestProperty,
        property: convertRequestPropertValue(requestProperty.property)
    };
}

function convertRequestPropertValue(
    requestPropertyValue: IrVersions.V55.http.RequestPropertyValue
): IrVersions.V54.http.RequestPropertyValue {
    switch (requestPropertyValue.type) {
        case "query":
            return IrVersions.V54.RequestPropertyValue.query(convertQueryParameter(requestPropertyValue));
        case "body":
            return IrVersions.V54.RequestPropertyValue.body(convertObjectProperty(requestPropertyValue));
    }
}

function convertResponseProperty(
    responseProperty: IrVersions.V55.http.ResponseProperty
): IrVersions.V54.http.ResponseProperty {
    return {
        ...responseProperty,
        property: convertObjectProperty(responseProperty.property)
    };
}

function convertObjectProperty(
    objectProperty: IrVersions.V55.types.ObjectProperty
): IrVersions.V54.types.ObjectProperty {
    return {
        ...objectProperty,
        valueType: convertTypeReference(objectProperty.valueType)
    };
}

function convertQueryParameter(queryParameter: IrVersions.V55.http.QueryParameter): IrVersions.V54.http.QueryParameter {
    return {
        ...queryParameter,
        valueType: convertTypeReference(queryParameter.valueType)
    };
}

function convertSdkRequest(sdkRequest: IrVersions.V55.http.SdkRequest): IrVersions.V54.http.SdkRequest {
    return {
        ...sdkRequest,
        streamParameter:
            sdkRequest.streamParameter != null ? convertRequestProperty(sdkRequest.streamParameter) : undefined,
        shape: convertSdkRequestShape(sdkRequest.shape)
    };
}

function convertSdkRequestShape(shape: IrVersions.V55.http.SdkRequestShape): IrVersions.V54.http.SdkRequestShape {
    return IrVersions.V55.http.SdkRequestShape._visit<IrVersions.V54.http.SdkRequestShape>(shape, {
        justRequestBody: (reference) =>
            IrVersions.V54.http.SdkRequestShape.justRequestBody(convertSdkRequestBodyType(reference)),
        wrapper: IrVersions.V54.http.SdkRequestShape.wrapper,
        _other: () => {
            throw new Error("Unknown SdkRequestShape: " + shape.type);
        }
    });
}

function convertSdkRequestBodyType(
    shape: IrVersions.V55.http.SdkRequestBodyType
): IrVersions.V54.http.SdkRequestBodyType {
    switch (shape.type) {
        case "bytes":
            return IrVersions.V54.http.SdkRequestBodyType.bytes(shape);
        case "typeReference":
            return IrVersions.V54.http.SdkRequestBodyType.typeReference({
                ...shape,
                requestBodyType: convertTypeReference(shape.requestBodyType)
            });
    }
}

function convertRequestBody(requestBody: IrVersions.V55.http.HttpRequestBody): IrVersions.V54.http.HttpRequestBody {
    return IrVersions.V55.http.HttpRequestBody._visit<IrVersions.V54.http.HttpRequestBody>(requestBody, {
        inlinedRequestBody: (inlinedRequestBody) =>
            IrVersions.V54.http.HttpRequestBody.inlinedRequestBody({
                ...inlinedRequestBody,
                properties: inlinedRequestBody.properties.map((property) => ({
                    ...property,
                    valueType: convertTypeReference(property.valueType)
                })),
                extendedProperties: inlinedRequestBody.extendedProperties?.map((property) => ({
                    ...property,
                    valueType: convertTypeReference(property.valueType)
                }))
            }),
        reference: (reference) =>
            IrVersions.V54.http.HttpRequestBody.reference({
                ...reference,
                requestBodyType: convertTypeReference(reference.requestBodyType)
            }),
        fileUpload: (fileUpload) =>
            IrVersions.V54.http.HttpRequestBody.fileUpload({
                ...fileUpload,
                properties: fileUpload.properties.map((fileUploadRequestProperty) => {
                    switch (fileUploadRequestProperty.type) {
                        case "bodyProperty":
                            return IrVersions.V54.http.FileUploadRequestProperty.bodyProperty({
                                ...fileUploadRequestProperty,
                                valueType: convertTypeReference(fileUploadRequestProperty.valueType)
                            });
                        case "file":
                            return IrVersions.V54.http.FileUploadRequestProperty.file(
                                convertFileProperty(fileUploadRequestProperty.value)
                            );
                    }
                })
            }),
        bytes: (bytes) => {
            return IrVersions.V54.http.HttpRequestBody.bytes(bytes);
        },
        _other: () => {
            throw new Error("Unknown HttpRequestBody: " + requestBody.type);
        }
    });
}

function convertFileProperty(fileProperty: IrVersions.V55.http.FileProperty): IrVersions.V54.http.FileProperty {
    switch (fileProperty.type) {
        case "file":
            return IrVersions.V54.http.FileProperty.file(fileProperty);
        case "fileArray":
            return IrVersions.V54.http.FileProperty.fileArray(fileProperty);
    }
}

function convertErrorDeclaration(
    error: IrVersions.V55.errors.ErrorDeclaration
): IrVersions.V54.errors.ErrorDeclaration {
    return {
        ...error,
        type: error.type != null ? convertTypeReference(error.type) : undefined,
        examples: error.examples.map((example) => ({
            ...example,
            shape: convertExampleTypeReference(example.shape)
        }))
    };
}

function convertExampleWebsocketSession(
    example: IrVersions.V55.ExampleWebSocketSession
): IrVersions.V54.ExampleWebSocketSession {
    return {
        ...example,
        pathParameters: example.pathParameters.map((pathParameter) => convertExamplePathParameter(pathParameter)),
        headers: example.headers.map((exampleHeader) => convertExampleHeader(exampleHeader)),
        queryParameters: example.queryParameters.map((exampleQueryParameter) =>
            convertExampleQueryParameter(exampleQueryParameter)
        ),
        messages: example.messages.map((message) => ({
            ...message,
            body: convertExampleWebSocketMessageBody(message.body)
        }))
    };
}

function convertExampleQueryParameter(
    exampleQueryParameter: IrVersions.V55.ExampleQueryParameter
): IrVersions.V54.ExampleQueryParameter {
    return {
        ...exampleQueryParameter,
        value: convertExampleTypeReference(exampleQueryParameter.value)
    };
}

function convertExampleHeader(exampleHeader: IrVersions.V55.ExampleHeader): IrVersions.V54.ExampleHeader {
    return {
        ...exampleHeader,
        value: convertExampleTypeReference(exampleHeader.value)
    };
}

function convertExamplePathParameter(
    pathParameter: IrVersions.V55.ExamplePathParameter
): IrVersions.V54.ExamplePathParameter {
    return {
        ...pathParameter,
        value: convertExampleTypeReference(pathParameter.value)
    };
}

function convertExampleWebSocketMessageBody(
    body: IrVersions.V55.ExampleWebSocketMessageBody
): IrVersions.V54.ExampleWebSocketMessageBody {
    switch (body.type) {
        case "inlinedBody":
            return IrVersions.V54.ExampleWebSocketMessageBody.inlinedBody(convertExampleInlinedRequestBody(body));
        case "reference":
            return IrVersions.V54.ExampleWebSocketMessageBody.reference(convertExampleTypeReference(body));
    }
}

function convertExampleInlinedRequestBody(
    inlinedBody: IrVersions.V55.ExampleInlinedRequestBody
): IrVersions.V54.ExampleInlinedRequestBody {
    return {
        ...inlinedBody,
        properties: inlinedBody.properties.map((property) => ({
            ...property,
            value: convertExampleTypeReference(property.value)
        }))
    };
}

function convertExampleType(example: IrVersions.V55.ExampleType): IrVersions.V54.ExampleType {
    return {
        ...example,
        shape: convertExampleTypeShape(example.shape)
    };
}

function convertExampleTypeReferenceShape(
    shape: IrVersions.V55.ExampleTypeReferenceShape
): IrVersions.V54.ExampleTypeReferenceShape {
    switch (shape.type) {
        case "primitive":
            return IrVersions.V54.ExampleTypeReferenceShape.primitive(convertExamplePrimitiveTypeReferenceShape(shape));
        case "container":
            return IrVersions.V54.ExampleTypeReferenceShape.container(convertExampleContainerTypeReferenceShape(shape));
        case "unknown":
            return IrVersions.V54.ExampleTypeReferenceShape.unknown(shape.unknown);
        case "named":
            return IrVersions.V54.ExampleTypeReferenceShape.named({
                ...shape,
                typeName: shape.typeName,
                shape: convertExampleTypeShape(shape.shape)
            });
    }
}

function convertExamplePrimitive(primitive: IrVersions.V55.ExamplePrimitive): IrVersions.V54.ExamplePrimitive {
    return primitive;
}

function convertExamplePrimitiveTypeReferenceShape(
    shape: IrVersions.V55.ExampleTypeReferenceShape.Primitive
): IrVersions.V54.ExamplePrimitive {
    return convertExamplePrimitive(shape.primitive);
}

function convertExampleContainerTypeReferenceShape(
    shape: IrVersions.V55.ExampleTypeReferenceShape.Container
): IrVersions.V54.ExampleContainer {
    switch (shape.container.type) {
        case "list":
            return IrVersions.V54.ExampleContainer.list({
                list: shape.container.list.map((exampleTypeReference) =>
                    convertExampleTypeReference(exampleTypeReference)
                ),
                itemType: convertTypeReference(shape.container.itemType)
            });
        case "set":
            return IrVersions.V54.ExampleContainer.set({
                set: shape.container.set.map((exampleTypeReference) =>
                    convertExampleTypeReference(exampleTypeReference)
                ),
                itemType: convertTypeReference(shape.container.itemType)
            });
        case "optional":
            return IrVersions.V54.ExampleContainer.optional({
                optional:
                    shape.container.optional != null
                        ? convertExampleTypeReference(shape.container.optional)
                        : undefined,
                valueType: convertTypeReference(shape.container.valueType)
            });
        case "nullable":
            return IrVersions.V54.ExampleContainer.optional({
                optional:
                    shape.container.nullable != null
                        ? convertExampleTypeReference(shape.container.nullable)
                        : undefined,
                valueType: convertTypeReference(shape.container.valueType)
            });
        case "map":
            return IrVersions.V54.ExampleContainer.map({
                map: shape.container.map.map((exampleKeyValuePair) => ({
                    key: convertExampleTypeReference(exampleKeyValuePair.key),
                    value: convertExampleTypeReference(exampleKeyValuePair.value)
                })),
                keyType: convertTypeReference(shape.container.keyType),
                valueType: convertTypeReference(shape.container.valueType)
            });
        case "literal":
            return IrVersions.V54.ExampleContainer.literal({
                literal: convertExamplePrimitive(shape.container.literal)
            });
    }
}

function convertExampleTypeReference(
    exampleTypeReference: IrVersions.V55.ExampleTypeReference
): IrVersions.V54.ExampleTypeReference {
    return {
        ...exampleTypeReference,
        shape: convertExampleTypeReferenceShape(exampleTypeReference.shape)
    };
}

function convertExampleTypeShape(shape: IrVersions.V55.ExampleTypeShape): IrVersions.V54.ExampleTypeShape {
    switch (shape.type) {
        case "object":
            return IrVersions.V54.ExampleTypeShape.object({
                properties: shape.properties.map((property) => convertExampleObjectProperty(property))
            });
        case "alias":
            return IrVersions.V54.ExampleTypeShape.alias({
                value: { ...convertExampleTypeReference(shape.value) }
            });
        case "enum":
            return IrVersions.V54.ExampleTypeShape.enum(shape);
        case "union":
            return IrVersions.V54.ExampleTypeShape.union(convertUnionExampleTypeShape(shape));
        case "undiscriminatedUnion":
            return IrVersions.V54.ExampleTypeShape.undiscriminatedUnion(
                convertUndiscriminatedUnionExampleTypeShape(shape)
            );
    }
}

function convertUndiscriminatedUnionExampleTypeShape(
    shape: IrVersions.V55.ExampleTypeShape.UndiscriminatedUnion
): IrVersions.V54.ExampleUndiscriminatedUnionType {
    return {
        ...shape,
        singleUnionType: convertExampleTypeReference(shape.singleUnionType)
    };
}

function convertUnionExampleTypeShape(shape: IrVersions.V55.ExampleTypeShape.Union): IrVersions.V54.ExampleUnionType {
    return {
        ...shape,
        singleUnionType: convertExampleSingleUnionType(shape.singleUnionType)
    };
}

function convertExampleSingleUnionType(
    singleUnionType: IrVersions.V55.ExampleSingleUnionType
): IrVersions.V54.ExampleSingleUnionType {
    return {
        ...singleUnionType,
        shape: convertExampleSingleUnionTypeProperties(singleUnionType.shape)
    };
}

function convertExampleSingleUnionTypeProperties(
    exampleSingleUnionTypeProperties: IrVersions.V55.ExampleSingleUnionTypeProperties
): IrVersions.V54.ExampleSingleUnionTypeProperties {
    switch (exampleSingleUnionTypeProperties.type) {
        case "samePropertiesAsObject":
            return IrVersions.V54.ExampleSingleUnionTypeProperties.samePropertiesAsObject({
                ...exampleSingleUnionTypeProperties,
                object: convertExampleObjectType(exampleSingleUnionTypeProperties.object)
            });
        case "singleProperty":
            return IrVersions.V54.ExampleSingleUnionTypeProperties.singleProperty({
                ...exampleSingleUnionTypeProperties,
                shape: convertExampleTypeReferenceShape(exampleSingleUnionTypeProperties.shape)
            });
        case "noProperties":
            return IrVersions.V54.ExampleSingleUnionTypeProperties.noProperties();
    }
}

function convertExampleObjectType(object: IrVersions.V55.ExampleObjectType): IrVersions.V54.ExampleObjectType {
    return {
        ...object,
        properties: object.properties.map((property) => convertExampleObjectProperty(property))
    };
}

function convertExampleObjectProperty(
    property: IrVersions.V55.ExampleObjectProperty
): IrVersions.V54.ExampleObjectProperty {
    return {
        ...property,
        value: {
            ...property.value,
            shape: convertExampleTypeReferenceShape(property.value.shape)
        }
    };
}

function convertExampleEndpointCall(example: IrVersions.V55.ExampleEndpointCall): IrVersions.V54.ExampleEndpointCall {
    return {
        ...example,
        rootPathParameters: example.rootPathParameters.map((examplePathParameter) =>
            convertExamplePathParameter(examplePathParameter)
        ),
        servicePathParameters: example.servicePathParameters.map((examplePathParameter) =>
            convertExamplePathParameter(examplePathParameter)
        ),
        endpointPathParameters: example.endpointPathParameters.map((examplePathParameter) =>
            convertExamplePathParameter(examplePathParameter)
        ),
        serviceHeaders: example.serviceHeaders.map((exampleHeader) => convertExampleHeader(exampleHeader)),
        endpointHeaders: example.endpointHeaders.map((exampleHeader) => convertExampleHeader(exampleHeader)),
        queryParameters: example.queryParameters.map((exampleQueryParameter) =>
            convertExampleQueryParameter(exampleQueryParameter)
        ),
        request: example.request != null ? convertExampleRequest(example.request) : undefined,
        response: convertExampleResponse(example.response)
    };
}

function convertExampleResponse(response: IrVersions.V55.ExampleResponse): IrVersions.V54.ExampleResponse {
    switch (response.type) {
        case "error":
            return IrVersions.V54.ExampleResponse.error({
                ...response,
                body: response.body != null ? convertExampleTypeReference(response.body) : undefined
            });
        case "ok":
            return IrVersions.V54.ExampleResponse.ok(convertExampleEndpointSuccessResponse(response));
    }
}

function convertExampleEndpointSuccessResponse(
    response: IrVersions.V55.ExampleResponse.Ok
): IrVersions.V54.ExampleEndpointSuccessResponse {
    switch (response.value.type) {
        case "body":
            return IrVersions.V54.ExampleEndpointSuccessResponse.body(
                response.value.value != null ? convertExampleTypeReference(response.value.value) : undefined
            );
        case "stream":
            return IrVersions.V54.ExampleEndpointSuccessResponse.stream(
                response.value.value.map((exampleTypeReference) => convertExampleTypeReference(exampleTypeReference))
            );
        case "sse":
            return IrVersions.V54.ExampleEndpointSuccessResponse.sse(
                response.value.value.map((exampleServerSideEvent) => ({
                    ...exampleServerSideEvent,
                    data: convertExampleTypeReference(exampleServerSideEvent.data)
                }))
            );
    }
}

function convertExampleRequest(request: IrVersions.V55.ExampleRequestBody): IrVersions.V54.ExampleRequestBody {
    switch (request.type) {
        case "inlinedRequestBody":
            return IrVersions.V54.ExampleRequestBody.inlinedRequestBody(convertExampleInlinedRequestBody(request));
        case "reference":
            return IrVersions.V54.ExampleRequestBody.reference(convertExampleTypeReference(request));
    }
}

function convertDynamic(
    dynamic: IrVersions.V55.dynamic.DynamicIntermediateRepresentation
): IrVersions.V54.dynamic.DynamicIntermediateRepresentation {
    return {
        ...dynamic,
        types: mapValues(dynamic.types, (type) => convertDynamicType(type)),
        endpoints: mapValues(dynamic.endpoints, (endpoint) => convertDynamicEndpoint(endpoint)),
        headers: dynamic.headers?.map((header) => convertDynamicNamedParameter(header))
    };
}

function convertDynamicType(type: IrVersions.V55.dynamic.NamedType): IrVersions.V54.dynamic.NamedType {
    switch (type.type) {
        case "alias":
            return IrVersions.V54.dynamic.NamedType.alias({
                ...type,
                typeReference: convertDynamicTypeReference(type.typeReference)
            });
        case "enum":
            return IrVersions.V54.dynamic.NamedType.enum(type);
        case "object":
            return IrVersions.V54.dynamic.NamedType.object({
                ...type,
                properties: type.properties.map((property) => convertDynamicNamedParameter(property))
            });
        case "discriminatedUnion":
            return IrVersions.V54.dynamic.NamedType.discriminatedUnion({
                ...type,
                types: Object.fromEntries(
                    Object.entries(type.types).map(([discriminant, type]) => [
                        discriminant,
                        convertDynamicSingleDiscriminatedUnionType(type)
                    ])
                )
            });
        case "undiscriminatedUnion":
            return IrVersions.V54.dynamic.NamedType.undiscriminatedUnion({
                ...type,
                types: type.types.map((type) => convertDynamicTypeReference(type))
            });
        default:
            assertNever(type);
    }
}

function convertDynamicEndpoint(endpoint: IrVersions.V55.dynamic.Endpoint): IrVersions.V54.dynamic.Endpoint {
    return {
        ...endpoint,
        auth: endpoint.auth != null ? convertDynamicAuth(endpoint.auth) : undefined,
        request: convertDynamicRequest(endpoint.request)
    };
}

function convertDynamicAuth(auth: IrVersions.V55.dynamic.Auth): IrVersions.V54.dynamic.Auth {
    switch (auth.type) {
        case "basic":
            return IrVersions.V54.dynamic.Auth.basic(auth);
        case "bearer":
            return IrVersions.V54.dynamic.Auth.bearer(auth);
        case "header":
            return IrVersions.V54.dynamic.Auth.header({
                header: convertDynamicNamedParameter(auth.header)
            });
    }
}

function convertDynamicTypeReference(
    typeReference: IrVersions.V55.dynamic.TypeReference
): IrVersions.V54.dynamic.TypeReference {
    switch (typeReference.type) {
        case "list":
            return IrVersions.V54.dynamic.TypeReference.list(convertDynamicTypeReference(typeReference.value));
        case "optional":
            return convertOptionalDynamicTypeReferenceWithoutNullable(typeReference.value);
        case "nullable":
            return convertNullableDynamicTypeReferenceToOptionalIfNotAlready(typeReference.value);
        case "map":
            return IrVersions.V54.dynamic.TypeReference.map({
                ...typeReference,
                key: convertDynamicTypeReference(typeReference.key),
                value: convertDynamicTypeReference(typeReference.value)
            });
        case "literal":
            return IrVersions.V54.dynamic.TypeReference.literal(typeReference.value);
        case "named":
            return IrVersions.V54.dynamic.TypeReference.named(typeReference.value);
        case "primitive":
            return IrVersions.V54.dynamic.TypeReference.primitive(typeReference.value);
        case "set":
            return IrVersions.V54.dynamic.TypeReference.set(convertDynamicTypeReference(typeReference.value));
        case "unknown":
            return IrVersions.V54.dynamic.TypeReference.unknown();
        default:
            assertNever(typeReference);
    }
}

function convertDynamicSingleDiscriminatedUnionType(
    singleDiscriminatedUnionType: IrVersions.V55.dynamic.SingleDiscriminatedUnionType
): IrVersions.V54.dynamic.SingleDiscriminatedUnionType {
    switch (singleDiscriminatedUnionType.type) {
        case "samePropertiesAsObject":
            return IrVersions.V54.dynamic.SingleDiscriminatedUnionType.samePropertiesAsObject({
                ...singleDiscriminatedUnionType,
                properties: singleDiscriminatedUnionType.properties.map((property) =>
                    convertDynamicNamedParameter(property)
                )
            });
        case "singleProperty":
            return IrVersions.V54.dynamic.SingleDiscriminatedUnionType.singleProperty({
                ...singleDiscriminatedUnionType,
                typeReference: convertDynamicTypeReference(singleDiscriminatedUnionType.typeReference),
                properties: singleDiscriminatedUnionType.properties?.map((property) =>
                    convertDynamicNamedParameter(property)
                )
            });
        case "noProperties":
            return IrVersions.V54.dynamic.SingleDiscriminatedUnionType.noProperties({
                ...singleDiscriminatedUnionType,
                properties: singleDiscriminatedUnionType.properties?.map((property) =>
                    convertDynamicNamedParameter(property)
                )
            });
        default:
            assertNever(singleDiscriminatedUnionType);
    }
}

function convertDynamicNamedParameter(
    namedParameter: IrVersions.V55.dynamic.NamedParameter
): IrVersions.V54.dynamic.NamedParameter {
    return {
        ...namedParameter,
        typeReference: convertDynamicTypeReference(namedParameter.typeReference)
    };
}

function convertDynamicRequest(request: IrVersions.V55.dynamic.Request): IrVersions.V54.dynamic.Request {
    switch (request.type) {
        case "body":
            return IrVersions.V54.dynamic.Request.body(convertDynamicRequestBody(request));
        case "inlined":
            return IrVersions.V54.dynamic.Request.inlined(convertDynamicInlinedRequest(request));
        default:
            assertNever(request);
    }
}

function convertDynamicRequestBody(
    bodyRequest: IrVersions.V55.dynamic.BodyRequest
): IrVersions.V54.dynamic.BodyRequest {
    return {
        pathParameters: bodyRequest.pathParameters?.map((pathParameter) => convertDynamicNamedParameter(pathParameter)),
        body: bodyRequest.body != null ? convertDynamicRequestBodyType(bodyRequest.body) : undefined
    };
}

function convertDynamicInlinedRequest(
    inlinedRequest: IrVersions.V55.dynamic.InlinedRequest
): IrVersions.V54.dynamic.InlinedRequest {
    return {
        ...inlinedRequest,
        pathParameters: inlinedRequest.pathParameters?.map((pathParameter) =>
            convertDynamicNamedParameter(pathParameter)
        ),
        queryParameters: inlinedRequest.queryParameters?.map((queryParameter) =>
            convertDynamicNamedParameter(queryParameter)
        ),
        headers: inlinedRequest.headers?.map((header) => convertDynamicNamedParameter(header)),
        body: inlinedRequest.body != null ? convertDynamicInlinedRequestBody(inlinedRequest.body) : undefined
    };
}

function convertDynamicInlinedRequestBody(
    inlinedRequestBody: IrVersions.V55.dynamic.InlinedRequestBody
): IrVersions.V54.dynamic.InlinedRequestBody {
    switch (inlinedRequestBody.type) {
        case "properties":
            return IrVersions.V54.dynamic.InlinedRequestBody.properties(
                inlinedRequestBody.value.map((property) => convertDynamicNamedParameter(property))
            );
        case "referenced":
            return IrVersions.V54.dynamic.InlinedRequestBody.referenced(
                convertDynamicReferencedRequestBody(inlinedRequestBody)
            );
        case "fileUpload":
            return IrVersions.V54.dynamic.InlinedRequestBody.fileUpload(
                convertFileUploadRequestBody(inlinedRequestBody)
            );
        default:
            assertNever(inlinedRequestBody);
    }
}

function convertDynamicReferencedRequestBody(
    referencedRequestBody: IrVersions.V55.dynamic.ReferencedRequestBody
): IrVersions.V54.dynamic.ReferencedRequestBody {
    return {
        ...referencedRequestBody,
        bodyType: convertDynamicRequestBodyType(referencedRequestBody.bodyType)
    };
}

function convertDynamicRequestBodyType(
    requestBodyType: IrVersions.V55.dynamic.ReferencedRequestBodyType
): IrVersions.V54.dynamic.ReferencedRequestBodyType {
    switch (requestBodyType.type) {
        case "bytes":
            return IrVersions.V54.dynamic.ReferencedRequestBodyType.bytes();
        case "typeReference":
            return IrVersions.V54.dynamic.ReferencedRequestBodyType.typeReference(
                convertDynamicTypeReference(requestBodyType.value)
            );
        default:
            assertNever(requestBodyType);
    }
}

function convertFileUploadRequestBody(
    fileUploadRequestBody: IrVersions.V55.dynamic.FileUploadRequestBody
): IrVersions.V54.dynamic.FileUploadRequestBody {
    return {
        properties: fileUploadRequestBody.properties.map((property) =>
            convertDynamicFileUploadRequestBodyProperty(property)
        )
    };
}

function convertDynamicFileUploadRequestBodyProperty(
    fileUploadRequestBodyProperty: IrVersions.V55.dynamic.FileUploadRequestBodyProperty
): IrVersions.V54.dynamic.FileUploadRequestBodyProperty {
    switch (fileUploadRequestBodyProperty.type) {
        case "file":
            return IrVersions.V54.dynamic.FileUploadRequestBodyProperty.file(fileUploadRequestBodyProperty);
        case "fileArray":
            return IrVersions.V54.dynamic.FileUploadRequestBodyProperty.fileArray(fileUploadRequestBodyProperty);
        case "bodyProperty":
            return IrVersions.V54.dynamic.FileUploadRequestBodyProperty.bodyProperty(
                convertDynamicNamedParameter(fileUploadRequestBodyProperty)
            );
        default:
            assertNever(fileUploadRequestBodyProperty);
    }
}

function convertOptionalTypeReferenceWithoutNullable(
    typeReference: IrVersions.V55.types.TypeReference
): IrVersions.V54.types.TypeReference {
    if (typeReference.type === "container" && typeReference.container.type === "nullable") {
        return IrVersions.V54.types.TypeReference.container(
            IrVersions.V54.types.ContainerType.optional(convertTypeReference(typeReference.container.nullable))
        );
    }
    return IrVersions.V54.types.TypeReference.container(
        IrVersions.V54.types.ContainerType.optional(convertTypeReference(typeReference))
    );
}

function convertNullableTypeReferenceToOptionalIfNotAlready(
    typeReference: IrVersions.V55.types.TypeReference
): IrVersions.V54.types.TypeReference {
    if (typeReference.type === "container" && typeReference.container.type === "optional") {
        return convertTypeReference(typeReference);
    }
    return IrVersions.V54.types.TypeReference.container(
        IrVersions.V54.types.ContainerType.optional(convertTypeReference(typeReference))
    );
}

function convertNullableDynamicTypeReferenceToOptionalIfNotAlready(
    typeReference: IrVersions.V55.dynamic.TypeReference
): IrVersions.V54.dynamic.TypeReference {
    if (typeReference.type === "optional") {
        return convertDynamicTypeReference(typeReference);
    }
    return IrVersions.V54.dynamic.TypeReference.optional(convertDynamicTypeReference(typeReference));
}

function convertOptionalDynamicTypeReferenceWithoutNullable(
    typeReference: IrVersions.V55.dynamic.TypeReference
): IrVersions.V54.dynamic.TypeReference {
    if (typeReference.type === "nullable") {
        return IrVersions.V54.dynamic.TypeReference.optional(convertDynamicTypeReference(typeReference.value));
    }
    return IrVersions.V54.dynamic.TypeReference.optional(convertDynamicTypeReference(typeReference));
}
