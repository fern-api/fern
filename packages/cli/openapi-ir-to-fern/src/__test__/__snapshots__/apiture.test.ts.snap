// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`open api parser apiture simple 1`] = `
{
  "definitionFiles": {
    "accountJointOwners.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "listAccountJointOwners": {
            "auth": true,
            "display-name": "Return a collection of account joint owners",
            "docs": "Return a collection of account joint owners. The user must have the \`account.manageJointOwners\` permission to use this operation.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "accountId": "accountId",
                },
                "response": {
                  "body": {
                    "items": [
                      {
                        "id": "0399abed-fd3d",
                        "name": "Max Pike",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/accounts/{accountId}/jointOwners",
            "path-parameters": {
              "accountId": {
                "docs": "The unique identifier of this account resource. This is an opaque string.",
                "type": "root.ResourceId",
              },
            },
            "response": {
              "docs": "OK.",
              "type": "root.AccountJointOwners",
            },
          },
        },
      },
    },
    "accounts.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getAccount": {
            "auth": true,
            "display-name": "Get an Account",
            "docs": "Return details of the customer's internal account.",
            "errors": [
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "accountId": "accountId",
                },
                "response": {
                  "body": {
                    "allows": {
                      "billPay": true,
                      "manageCards": true,
                      "manageJointOwners": true,
                      "manageOverdraftAccounts": true,
                      "mobileCheckDeposit": true,
                      "transferFrom": true,
                      "transferTo": true,
                      "view": true,
                      "viewCards": true,
                    },
                    "electronicStatements": true,
                    "id": "id",
                    "label": "Checking *1008",
                    "location": "internal",
                    "maskedNumber": "maskedNumber",
                    "nickname": "Payroll Checking",
                    "product": {
                      "code": "180D_CDA",
                      "description": "Certificate of Deposit with a 180 day term",
                      "label": "180 Day CD",
                      "type": "cd",
                    },
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/accounts/{accountId}",
            "path-parameters": {
              "accountId": {
                "docs": "The unique identifier of this account resource. This is an opaque string.",
                "type": "root.ResourceId",
              },
            },
            "response": {
              "docs": "OK. The response is a representation of the customer's account.",
              "type": "root.Account",
            },
          },
          "listAccountBalances": {
            "auth": true,
            "display-name": "List Account Balances",
            "docs": "Return a list of the requested internal accounts' balances. The \`accounts\` query parameter is a list of account IDs which typically comes from the \`getAccounts\` operation response. The returned list does not include external accounts. The caller must have entitlements to view each account's details, as indicated by a \`true\` value for \`account.allows.view\`. Requests to list balances for accounts the user is not allowed to read results in a 403 Forbidden response.

The response may be incomplete. Given a \`Retry-After\` response header, the client can retry the operation after a short delay, requesting only the accounts which are incomplete; see the 202 Accepted response for details.",
            "errors": [
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
              "root.TooManyRequestsError",
              "root.ServiceUnavailableError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "items": [
                      {
                        "available": "3208.20",
                        "current": "3448.72",
                        "currentWithPending": "3448.72",
                        "id": "05d00d7d-d630",
                        "incomplete": false,
                        "updatedAt": "2022-05-02T06:51:19Z",
                      },
                      {
                        "available": "1750.80",
                        "current": "1956.19",
                        "currentWithPending": "1956.19",
                        "id": "cb5d67ea-a5c3",
                        "incomplete": false,
                        "updatedAt": "2022-05-02T06:51:19Z",
                      },
                      {
                        "available": "3456.78",
                        "current": "3456.78",
                        "currentWithPending": "3456.78",
                        "id": "id",
                        "incomplete": true,
                        "updatedAt": "2021-10-30T19:06:04Z",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/accountBalances",
            "request": {
              "name": "AccountsListAccountBalancesRequest",
              "query-parameters": {
                "accounts": {
                  "allow-multiple": true,
                  "docs": "The unique account identifiers of one or more internal accounts. (Internal accounts are those with \`location\` value of \`internal\`.) If omitted, this operation uses the accounts for which the customer has view permissions but is limited to at most 1000 accounts. Note: The account IDs are unrelated to the account number.",
                  "type": "optional<root.ResourceId>",
                },
                "retryCount": {
                  "docs": "When retrying the operation, pass the \`retryCount\` from the \`incompleteAccountBalances\` response.",
                  "type": "optional<integer>",
                },
              },
            },
            "response": {
              "docs": "OK. The response contains the balances for all the accounts in the \`?accounts=\` query parameter.",
              "type": "root.AccountBalances",
            },
          },
          "listAccounts": {
            "auth": true,
            "display-name": "List Accounts",
            "docs": "Return a paginated list of the customer's accounts, consisting of internal accounts at this financial institution and accounts at other financial institutions, if any.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "count": 1,
                    "items": [
                      {
                        "allows": {
                          "billPay": true,
                          "manageCards": true,
                          "mobileCheckDeposit": true,
                          "transferFrom": true,
                          "transferTo": true,
                          "view": true,
                          "viewCards": true,
                        },
                        "id": "id",
                        "label": "Checking *1008",
                        "location": "internal",
                        "maskedNumber": "maskedNumber",
                        "nickname": "Payroll Checking",
                        "product": {
                          "code": "180D_CDA",
                          "description": "Certificate of Deposit with a 180 day term",
                          "label": "180 Day CD",
                          "type": "cd",
                        },
                      },
                    ],
                    "limit": 1,
                    "nextPage_url": "https://production.api.apiture.com/banking/accounts/bf23bc970b78d27691e8",
                    "primaryAccountId": "primaryAccountId",
                    "start": "start",
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/accounts",
            "request": {
              "name": "AccountsListAccountsRequest",
              "query-parameters": {
                "allows": {
                  "allow-multiple": true,
                  "docs": "Filter the result to accounts that have corresponding \`true\` values in \`account.allows\`. For example \`?allows=transferTo,transferFrom,view\` returns only accounts where \`account.allows.transferTo\`, \`account.allows.transferFrom\`, and \`account.allows.view\` are all \`true\` for the caller.",
                  "type": "optional<root.AccountAllowsFilter>",
                },
                "limit": {
                  "docs": "The maximum number of items to return in this paged response.",
                  "type": "optional<integer>",
                },
                "location": {
                  "docs": "Filter accounts to just a subset of \`internal\` or \`external\` accounts (per the \`location\` property on the [\`accountItem\`](#schema-accountItem) schema).",
                  "type": "optional<AccountsListAccountsRequestLocation>",
                },
                "productType": {
                  "allow-multiple": true,
                  "docs": "Include only accounts whose \`product.type\` is in pipe-delimited set. For example, to list only savings, checking, and CD accounts, use <br>\`?productType=savings|checking|cd\`.",
                  "type": "optional<root.ProductType>",
                },
                "start": {
                  "docs": "The location of the next item in the collection. This is an opaque cursor supplied by the API service. Omit this to start at the beginning of the collection. The client does not define this value; the API services automatically pass the \`?start=\` parameter on the \`nextPage_url\`.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK. A page from the full list of the customer's accounts. This list contains only accounts that the customer is entitled to access. While the \`nextPage_url\` property is present in the response, the client can fetch the next page of accounts by performing a \`GET\` on that URL.",
              "type": "root.Accounts",
            },
          },
          "listEligibleAchAccounts": {
            "auth": true,
            "display-name": "List Eligible ACH Accounts",
            "docs": "Return a paginated list of a customer's accounts that are eligible for ACH transfers based on allowed privileges.

Optionally, an agent can access a business customer's ACH accounts when acting on behalf of that business customer via the optional \`customerId\` query parameter.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "method": "GET",
            "path": "/achEligibleAccounts",
            "request": {
              "name": "AccountsListEligibleAchAccountsRequest",
              "query-parameters": {
                "allows": {
                  "allow-multiple": true,
                  "docs": "Filter the result to accounts that have corresponding \`true\` values in \`account.allows\`. For example \`?allows=transferTo,transferFrom,view\` returns only accounts where \`account.allows.transferTo\`, \`account.allows.transferFrom\`, and \`account.allows.view\` are all \`true\` for the caller.",
                  "type": "optional<root.AccountAllowsFilter>",
                },
                "customerId": {
                  "docs": "The optional identifier of a business customer. This is an opaque string. An agent who is operating on behalf of a business can use this to access the resources of that business customer. The agent must have entitlements to act on behalf of the business; if not, the operation returns a 403 Forbidden response. For other situations, omit this value, else this _must_ match the authenticated caller's customer ID (not their access ID).",
                  "type": "optional<root.ResourceId>",
                },
                "limit": {
                  "docs": "The maximum number of items to return in this paged response.",
                  "type": "optional<integer>",
                },
                "secCode": {
                  "docs": "Filter the result to accounts that allow ACH transfers of the given Standard Entry Class (SEC) codes.",
                  "type": "root.AchSecCode",
                },
                "start": {
                  "docs": "The location of the next item in the collection. This is an opaque cursor supplied by the API service. Omit this to start at the beginning of the collection. The client does not define this value; the API services automatically pass the \`?start=\` parameter on the \`nextPage_url\`.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK. A page from the full list of the customer's ACH-eligible accounts. This list contains only accounts that the customer is entitled to access. While the \`nextPage_url\` property is present in the response, the client can fetch the next page of accounts by performing a \`GET\` on that URL.",
              "type": "root.Accounts",
            },
          },
        },
      },
      "types": {
        "AccountsListAccountsRequestLocation": {
          "enum": [
            "internal",
            "external",
          ],
        },
      },
    },
    "institutions.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getCutoffTimes": {
            "auth": true,
            "display-name": "Return the financial institution's cutoff times for products",
            "docs": "Return daily cutoff times for different money movement processes at a financial institution. Money movement requests (account to account transfers, ACH, wire transfers, etc.) must be submitted before the cutoff time in order for the financial institution to begin processing the request that day. Some [cutoff time types](#schema-cutoffTimeType) may have multiple cutoff times per day.

Cutoff times are very slowly changing data. This is a _conditional operation_ when the \`If-None-Match\` header is used. If the client has a \`getCutoffTimes\` response and the \`ETag\` returned from a previous call to this operation, this operation returns a 304 Not Modified when called again if the cutoff times have not changed.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "institutionId": "TIBURON",
                },
                "response": {
                  "body": {
                    "items": [
                      {
                        "time": "13:45",
                        "type": "ach",
                      },
                      {
                        "time": "16:45",
                        "type": "ach",
                      },
                      {
                        "time": "16:45",
                        "type": "sameDayAch",
                      },
                      {
                        "time": "16:45",
                        "type": "domesticWireTransfer",
                      },
                      {
                        "time": "16:45",
                        "type": "ach",
                      },
                    ],
                    "timeZoneId": "America/New_York",
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/institutions/{institutionId}/cutoffTimes",
            "path-parameters": {
              "institutionId": {
                "docs": "The unique identifier of a financial institution.",
                "type": "root.InstitutionId",
              },
            },
            "request": {
              "headers": {
                "If-None-Match": {
                  "docs": "The entity tag that was returned in the \`ETag\` response header of a previous call. If the resource's current entity tag value matches this header value, the \`GET\` will return 304 (Not Modified) and no response body, else the current resource representation and updated \`ETag\` is returned.",
                  "name": "ifNoneMatch",
                  "type": "optional<string>",
                },
              },
              "name": "InstitutionsGetCutoffTimesRequest",
              "query-parameters": {
                "timeZoneId": {
                  "docs": "Identifies the time zone for formatting time values in the response. If omitted, time values are formatting in the local timezone of the financial institution.",
                  "type": "optional<root.TimeZoneId>",
                },
              },
            },
            "response": {
              "docs": "OK.",
              "type": "root.CutoffTimes",
            },
          },
          "getTransferDateRestrictions": {
            "auth": true,
            "display-name": "Return the financial institution's transfer dates restrictions",
            "docs": "Return the transfer date restrictions for a date range and transfer parameters. The result is a list of days and dates that the financial institution does not allow scheduling specific types of transfers.

This information provides hints to clients, allowing bank customers to select transfer dates from a calendar picker. However, these dates are not strictly enforced; a transfer can still be scheduled to occur on restricted dates but the financial institution may shift the date when funds are drafted to account for holidays, closures, or to adjust based on the risk level of the funding account.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "institutionId": "TIBURON",
                },
                "query-parameters": {
                  "endsOn": "2022-07-04",
                  "startsOn": "2022-07-04",
                },
                "response": {
                  "body": {
                    "accuracyEndsOn": "2026-12-31T00:00:00.000Z",
                    "restrictedDates": [
                      {
                        "creditOn": "2022-07-05",
                        "debitOn": "2022-07-05",
                        "occursOn": "2022-10-01",
                        "reason": "pastDate",
                      },
                      {
                        "creditOn": "2022-07-05",
                        "debitOn": "2022-07-05",
                        "occursOn": "2022-10-02",
                        "reason": "pastDate",
                      },
                      {
                        "creditOn": "2022-07-05",
                        "debitOn": "2022-07-05",
                        "occursOn": "2022-10-03",
                        "reason": "pastDate",
                      },
                      {
                        "creditOn": "2022-07-05",
                        "debitOn": "2022-07-05",
                        "occursOn": "2022-10-04",
                        "reason": "pastDate",
                      },
                      {
                        "creditOn": "2022-07-05",
                        "debitOn": "2022-07-05",
                        "occursOn": "2022-10-05",
                        "reason": "pastCutoffTime",
                      },
                      {
                        "creditOn": "2022-07-05",
                        "debitOn": "2022-07-05",
                        "occursOn": "2022-10-06",
                        "reason": "riskRestricted",
                      },
                      {
                        "creditOn": "2022-07-05",
                        "debitOn": "2022-07-05",
                        "occursOn": "2022-10-07",
                        "reason": "riskRestricted",
                      },
                      {
                        "creditOn": "2022-07-05",
                        "debitOn": "2022-07-05",
                        "occursOn": "2022-10-08",
                        "reason": "closure",
                      },
                      {
                        "creditOn": "2022-07-05",
                        "debitOn": "2022-07-05",
                        "occursOn": "2022-10-09",
                        "reason": "closure",
                      },
                      {
                        "creditOn": "2022-07-05",
                        "debitOn": "2022-07-05",
                        "occursOn": "2022-10-10",
                        "reason": "holiday",
                      },
                      {
                        "creditOn": "2022-07-05",
                        "debitOn": "2022-07-05",
                        "occursOn": "2022-10-15",
                        "reason": "closure",
                      },
                      {
                        "creditOn": "2022-07-05",
                        "debitOn": "2022-07-05",
                        "occursOn": "2022-10-16",
                        "reason": "closure",
                      },
                      {
                        "creditOn": "2022-07-05",
                        "debitOn": "2022-07-05",
                        "occursOn": "2022-10-22",
                        "reason": "closure",
                      },
                      {
                        "creditOn": "2022-07-05",
                        "debitOn": "2022-07-05",
                        "occursOn": "2022-10-23",
                        "reason": "closure",
                      },
                      {
                        "creditOn": "2022-07-05",
                        "debitOn": "2022-07-05",
                        "occursOn": "2022-10-29",
                        "reason": "closure",
                      },
                      {
                        "creditOn": "2022-07-05",
                        "debitOn": "2022-07-05",
                        "occursOn": "2022-10-30",
                        "reason": "closure",
                      },
                      {
                        "creditOn": "2022-07-05",
                        "debitOn": "2022-10-07",
                        "occursOn": "2022-10-10",
                        "reason": "holiday",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/institutions/{institutionId}/transferDateRestrictions",
            "path-parameters": {
              "institutionId": {
                "docs": "The unique identifier of a financial institution.",
                "type": "root.InstitutionId",
              },
            },
            "request": {
              "name": "InstitutionsGetTransferDateRestrictionsRequest",
              "query-parameters": {
                "endsOn": {
                  "docs": "The end of the range of dates to include in the response. in \`YYYY-MM-DD\` [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. The default is at least one year from the \`startOn\` date and is limited to a four year interval.",
                  "type": "optional<string>",
                },
                "risk": {
                  "docs": "The primary account's risk level. This determines what business rules and adjustments to make to the date restrictions. This parameter only applies to ACH credit transfers (funds credited to an external account) and is ignored for others.",
                  "type": "optional<root.AchAccountRisk>",
                },
                "startsOn": {
                  "docs": "The start of the range of dates to include in the response, in \`YYYY-MM-DD\` [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. While start dates far in the future are allowed, bank holiday schedules are only available for a small number of years ahead. The default is the current date.",
                  "type": "optional<string>",
                },
                "type": {
                  "docs": "Describes the type of transfer. This determines what business rules and adjustments to make to the date restrictions. Note ACH transfers (including CTX and PPD), that \`Credit\` and \`Debit\` here are relative to the account at the _external_ financial institution.",
                  "type": "optional<root.TransferTypeForDateRestrictions>",
                },
              },
            },
            "response": {
              "docs": "OK.",
              "type": "root.TransferDateRestrictions",
            },
          },
          "listTransferSchedule": {
            "auth": true,
            "display-name": "Return this institution's list of upcoming transfer schedule dates",
            "docs": "Return a transfer schedule list for this institution.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "institutionId": "TIBURON",
                },
                "query-parameters": {
                  "direction": "debit",
                  "endsOn": "2022-07-04",
                  "frequency": "once",
                  "startsOn": "2022-07-04",
                },
                "response": {
                  "body": {
                    "items": [
                      {
                        "effectiveOn": "2022-06-27",
                        "scheduledOn": "2022-06-27",
                      },
                      {
                        "effectiveOn": "2022-07-05",
                        "scheduledOn": "2022-07-04",
                      },
                      {
                        "effectiveOn": "2022-07-11",
                        "scheduledOn": "2022-07-11",
                      },
                      {
                        "effectiveOn": "2022-07-18",
                        "scheduledOn": "2022-07-18",
                      },
                      {
                        "effectiveOn": "2022-07-25",
                        "scheduledOn": "2022-07-25",
                      },
                      {
                        "effectiveOn": "2022-07-01",
                        "scheduledOn": "2022-08-01",
                      },
                      {
                        "effectiveOn": "2022-07-05",
                        "scheduledOn": "2022-07-04",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/institutions/{institutionId}/transferSchedule",
            "path-parameters": {
              "institutionId": {
                "docs": "The unique identifier of a financial institution.",
                "type": "root.InstitutionId",
              },
            },
            "request": {
              "name": "InstitutionsListTransferScheduleRequest",
              "query-parameters": {
                "count": {
                  "docs": "The maximum amount of dates to calculate and include in the response. If an end date is provided, the total count may be lower than the requested count.",
                  "type": "optional<integer>",
                },
                "direction": {
                  "docs": "The direction of the transfer from the institution to the customer used for adjusting transfer dates due to banking holidays. For \`debit\`, dates are adjusted to the next business day. For \`credit\`, dates are adjusted to the previous business day.",
                  "type": "root.TransferScheduleDirection",
                },
                "endsOn": {
                  "docs": "The date to use to conclude calculations of the transfer schedule in \`YYYY-MM-DD\` [RFC 3339](https://tools.ietf.org/html/rfc3339) date format.",
                  "type": "optional<string>",
                },
                "frequency": {
                  "docs": "The interval at which the money movement recurs.",
                  "type": "root.TransferFrequency",
                },
                "startsOn": {
                  "docs": "The date to use to begin calculations of the transfer schedule in \`YYYY-MM-DD\` [RFC 3339](https://tools.ietf.org/html/rfc3339) date format.",
                  "type": "string",
                },
              },
            },
            "response": {
              "docs": "OK.",
              "type": "root.TransferSchedules",
            },
          },
          "lookUpInstitutionByLocator": {
            "auth": true,
            "display-name": "Look up institution by routing number, IBAN, or SWIFT/BIC code",
            "docs": "Look up a financial institution by their country code and either [American Bankers Association routing number](https://www.aba.com/about-us/routing-number), by [International Bank Account Number (IBAN)](https://www.ecbs.org/iban.htm), or by [SWIFT Business Identifier Code (BIC) code](https://www.swift.com/standards/data-standards/bic-business-identifier-code). Optionally, include a list of intermediary institutions that may be necessary to complete international wire transfers.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "query-parameters": {
                  "countryCode": "countryCode",
                  "locator": "locator",
                  "locatorType": "abaRoutingNumber",
                },
                "response": {
                  "body": {
                    "found": true,
                    "institution": {
                      "address": {
                        "address1": "239 West Princess Ave.",
                        "address2": "Building 14, Suite 1500",
                        "countryCode": "US",
                        "locality": "Andalasia",
                        "postalCode": "28407",
                        "regionCode": "NC",
                        "regionName": "regionName",
                      },
                      "locator": "503000196",
                      "locatorType": "abaRoutingNumber",
                      "name": "First Bank of Andalasia",
                    },
                    "intermediaryInstitutions": [
                      {
                        "address": {
                          "address1": "239 West Princess Ave.",
                          "address2": "Building 14, Suite 1500",
                          "countryCode": "US",
                          "locality": "Andalasia",
                          "postalCode": "28407",
                          "regionCode": "NC",
                        },
                        "locator": "503000196",
                        "locatorType": "abaRoutingNumber",
                        "name": "First Bank of Andalasia",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/institutionByLocator",
            "request": {
              "name": "InstitutionsLookUpInstitutionByLocatorRequest",
              "query-parameters": {
                "countryCode": {
                  "docs": "The country code in which to search for institutions. For the US, the \`locatorType\` must be \`abaRoutingNumber\`. For non-US countries, the \`locatorType\` must be \`swiftBicCode\` or \`ibanAccountNumber\`.",
                  "type": "string",
                },
                "includeIntermediaryInstitutions": {
                  "docs": "If looking up a beneficiary institution for a wire transfer beneficiary institution, request the response also include a list of intermediary institutions.",
                  "type": "optional<boolean>",
                },
                "locator": {
                  "docs": "The financial institution lookup key (routing number, IBAN, or SWIFT/BIC), as indicated by the \`locatorType\` query parameter.",
                  "type": "string",
                },
                "locatorType": {
                  "docs": "Indicates what type of value the \`locator\` query parameter is.",
                  "type": "root.InstitutionLocatorType",
                },
              },
            },
            "response": {
              "docs": "OK.",
              "type": "root.InstitutionLookupResult",
            },
          },
        },
      },
    },
    "jointOwners.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "createJointOwnerInvitation": {
            "auth": true,
            "display-name": "Invite a joint owner",
            "docs": "Create and send an invitation to another person to become a joint owner of the account. The invitation will be sent to the invitee's email address. The invitation directs the invitee to a web page to verify and accept the invitation, and if necessary, enroll in digital banking.

The authenticated user must have the \`account.allows.manageJointOwners\` permission to use this operation.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "accountId": "accountId",
                },
                "request": {
                  "disallowDebitCardAccess": false,
                  "emailAddress": "Mary.Jones@example.com",
                  "firstName": "Mary",
                  "lastName": "Jones",
                  "sharedSecret": "obsolete obese octopus",
                },
                "response": {
                  "body": {
                    "disallowDebitCardAccess": false,
                    "emailAddress": "Mary.Jones@example.com",
                    "firstName": "Mary",
                    "id": "db4f580290d3e07bf55d",
                    "lastName": "Jones",
                    "sharedSecret": "obsolete obese octopus",
                    "taxId": "taxId",
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/accounts/{accountId}/jointOwnerInvitations",
            "path-parameters": {
              "accountId": {
                "docs": "The unique identifier of this account resource. This is an opaque string.",
                "type": "root.ResourceId",
              },
            },
            "request": {
              "body": {
                "extends": [
                  "root.AbstractBody",
                  "root.JointOwnerInvitationFields",
                ],
                "properties": {},
              },
              "headers": undefined,
              "name": "NewJointOwnerInvitation",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK.",
              "type": "root.JointOwnerInvitation",
            },
          },
        },
      },
    },
    "overdraftProtection.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "getOverdraftProtection": {
            "auth": true,
            "display-name": "Fetch a representation of the account's overdraft protection settings",
            "docs": "Return the JSON representation of this account's overdraft protection settings.",
            "errors": [
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "accountId": "accountId",
                },
                "response": {
                  "body": {
                    "accounts": {
                      "key": "value",
                    },
                    "maximumOverdraftAccounts": 1,
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/accounts/{accountId}/overdraftProtection",
            "path-parameters": {
              "accountId": {
                "docs": "The unique identifier of this account resource. This is an opaque string.",
                "type": "root.ResourceId",
              },
            },
            "response": {
              "docs": "OK.",
              "type": "root.OverdraftProtection",
            },
          },
          "listEligibleOverdraftAccounts": {
            "auth": true,
            "display-name": "List Eligible Overdraft Accounts",
            "docs": "Return a paginated list of a customer's accounts that are eligible to serve as overdraft protection accounts for the given account. An overdraft protection account is a deposit account that the financial institution can transfer funds from to prevent the account balance from going negative and incurring non-sufficient funds fees.

The user must have the \`allows.manageOverdraftAccounts\` permission on the account to use this operation.

To obtain available balances for these accounts, use [\`listAccountBalances\`](#op-listAccountBalances).",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "accountId": "accountId",
                },
                "response": {
                  "body": {
                    "items": {
                      "0": {
                        "id": "da1331a9e9168ea91346",
                        "label": "Checking *3456",
                        "maskedNumber": "*3456",
                      },
                      "1": {
                        "id": "5c9b4e50a0401ef4eb2e",
                        "label": "Premiere Savings *1234",
                        "maskedNumber": "*1234",
                      },
                    },
                    "limit": 100,
                    "maximumOverdraftAccounts": 1,
                    "nextPage_url": "https://production.api.apiture.com/banking/accounts/f204d292df9fb/eligibleOverdraftAccounts?start=641f62296ecbf1882c84?limit=100",
                    "start": "start",
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/accounts/{accountId}/eligibleOverdraftAccounts",
            "path-parameters": {
              "accountId": {
                "docs": "The unique identifier of this account resource. This is an opaque string.",
                "type": "root.ResourceId",
              },
            },
            "request": {
              "name": "OverdraftProtectionListEligibleOverdraftAccountsRequest",
              "query-parameters": {
                "limit": {
                  "docs": "The maximum number of items to return in this paged response.",
                  "type": "optional<integer>",
                },
                "start": {
                  "docs": "The location of the next item in the collection. This is an opaque cursor supplied by the API service. Omit this to start at the beginning of the collection. The client does not define this value; the API services automatically pass the \`?start=\` parameter on the \`nextPage_url\`.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK. A page from the full list of the customer's eligible overdraft accounts. This list contains only accounts that the customer is entitled to access. While the \`nextPage_url\` property is present in the response, the client can fetch the next page of accounts by performing a \`GET\` on that URL.",
              "type": "root.EligibleOverdraftAccounts",
            },
          },
          "patchOverdraftAccounts": {
            "auth": true,
            "display-name": "Update the overdraft accounts",
            "docs": "Perform a partial update of the overdraft accounts. Only fields in the request body are updated on the resource; fields which are omitted are not updated. To add, replace, or remove an overdraft account, add, replace, or remove the corresponding account item from the \`items\` array. Only the account \`id\` in the items is significant.

The user must have the \`allows.manageOverdraftAccounts\` permission on the account to use this operation.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "accountId": "accountId",
                },
                "request": {},
                "response": {
                  "body": {
                    "accounts": {
                      "key": "value",
                    },
                    "maximumOverdraftAccounts": 1,
                  },
                },
              },
            ],
            "method": "PATCH",
            "path": "/accounts/{accountId}/overdraftProtection",
            "path-parameters": {
              "accountId": {
                "docs": "The unique identifier of this account resource. This is an opaque string.",
                "type": "root.ResourceId",
              },
            },
            "request": {
              "body": {
                "extends": [
                  "root.AbstractBody",
                  "root.OverdraftProtectionFields",
                ],
                "properties": {},
              },
              "headers": undefined,
              "name": "OverdraftProtectionPatch",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK.",
              "type": "root.OverdraftProtection",
            },
          },
        },
      },
    },
    "transactionCategories.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "listTransactionCategories": {
            "auth": true,
            "display-name": "Return a collection of transaction categories",
            "docs": "Return a collection of transaction categories. The response is limited to 1,000 categories.

This is a _conditional operation_ when the \`If-None-Match\` header is used. If the client has a \`transactionCategories\` response and the \`ETag\` returned from a previous call, this operation returns a 304 Not Modified if called again when the categories collection has not changed.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "items": [
                      {
                        "id": "0399abed-fd3d",
                        "label": "Dining",
                        "type": "debit",
                      },
                    ],
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/transactionCategories",
            "request": {
              "headers": {
                "If-None-Match": {
                  "docs": "The entity tag that was returned in the \`ETag\` response header of a previous call. If the resource's current entity tag value matches this header value, the \`GET\` will return 304 (Not Modified) and no response body, else the current resource representation and updated \`ETag\` is returned.",
                  "name": "ifNoneMatch",
                  "type": "optional<string>",
                },
              },
              "name": "TransactionCategoriesListTransactionCategoriesRequest",
            },
            "response": {
              "docs": "OK.",
              "type": "root.TransactionCategories",
            },
          },
        },
      },
    },
    "transactions.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "listTransactions": {
            "auth": true,
            "display-name": "Return a collection of transactions",
            "docs": "Return a [paginated](https://dx.apiture.com/docs/api-documentation/concepts/pagination) collection of transaction history for this internal account. The [\`nextPage_url\`](https://dx.apiture.com/docs/api-documentation/concepts/links) link in the response, if present, is a pagination link to the next page of transactions for the given filters.

This operation returns a 403 Forbidden error if the customer does not have \`view\` permissions in the \`account.allows\` object, or a 422 Unprocessable Entity if called on an external account.

The default response lists only recent transactions. Normally, this is transactions for the most recent 30 days, although for high-volume accounts, it may be a shorter period.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
              "root.TooManyRequestsError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "accountId": "accountId",
                },
                "response": {
                  "body": {
                    "count": 2381,
                    "items": [
                      {
                        "amount": "0.00",
                        "balance": "8509.38",
                        "category": {
                          "id": "id",
                          "label": "label",
                        },
                        "check": {
                          "number": 1,
                        },
                        "createdOn": "2023-05-18",
                        "description": "description",
                        "id": "d62c0701-0d74",
                        "memo": "memo",
                        "occurredOn": "2023-06-18",
                        "posted": true,
                        "postedOn": "2023-05-18",
                        "subtype": "check",
                        "type": "balance",
                      },
                      {
                        "amount": "1276.21",
                        "balance": "8509.38",
                        "category": {
                          "id": "127",
                          "label": "Utilities",
                        },
                        "check": {
                          "imageBack_url": "/accounts/1d16e438-18e0/transactions/88f5bf17-ecc4/images/back/content",
                          "imageFront_url": "/accounts/1d16e438-18e0/transactions/88f5bf17-ecc4/images/front/content",
                          "number": 8412,
                        },
                        "createdOn": "2023-05-18",
                        "description": "description",
                        "id": "88f5bf17-ecc4",
                        "memo": "Paid electric bill",
                        "merchant": {
                          "logo_url": "https://BillTedsExcellentElectricCompany.example.com/img/logos/medium.png",
                          "name": "B&T's Excellent Electric Co.",
                          "website_url": "https://BillTedsExcellentElectricCompany.example.com/",
                        },
                        "occurredOn": "2023-06-18",
                        "posted": true,
                        "postedOn": "2023-05-18",
                        "subtype": "check",
                        "type": "debit",
                      },
                      {
                        "amount": "1276.21",
                        "balance": "8509.38",
                        "category": {
                          "id": "127",
                          "label": "Utilities",
                        },
                        "check": {
                          "imageBack_url": "/accounts/1d16e438-18e0/transactions/88f5bf17-ecc4/images/back/content",
                          "imageFront_url": "/accounts/1d16e438-18e0/transactions/88f5bf17-ecc4/images/front/content",
                          "number": 8412,
                        },
                        "createdOn": "2023-05-18",
                        "description": "description",
                        "id": "88f5bf17-ecc4",
                        "memo": "Paid electric bill",
                        "merchant": {
                          "logo_url": "https://BillTedsExcellentElectricCompany.example.com/img/logos/medium.png",
                          "name": "B&T's Excellent Electric Co.",
                          "website_url": "https://BillTedsExcellentElectricCompany.example.com/",
                        },
                        "occurredOn": "2023-05-18",
                        "posted": true,
                        "postedOn": "2023-05-18",
                        "subtype": "check",
                        "type": "debit",
                      },
                    ],
                    "limit": 10,
                    "nextPage_url": "https://production.api.apiture.com/banking/accounts/c9fc25b47d52916fc9ad/transactions?start=6117a4dcefb841cab7316cef1ac8b58c&limit=10",
                    "start": "d1b48af913464aa49fcb07065dcc0616",
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/accounts/{accountId}/transactions",
            "path-parameters": {
              "accountId": {
                "docs": "The unique identifier of this account resource. This is an opaque string.",
                "type": "root.ResourceId",
              },
            },
            "request": {
              "name": "TransactionsListTransactionsRequest",
              "query-parameters": {
                "amount": {
                  "docs": "Return only transactions whose \`amount\` is in this numeric range. This compares only the absolute value of the transaction. That is, the value \`[1000.00,1100.00)\` matches either a debit of \`-1070.25\` or a credit of \`1021.90\`.<br> Some examples of specifying an amount range: <ul> <li>\`1200.50\` match the dollar amount 1,200.50 exactly</li> <li>\`[1000.00,1200.00)\` matches items where \`1000.00 <= amount < 1200.00\`</li> <li>\`[1000.00,1199.99]\` matches items where \`1000.00 <= amount <= 1199.99\`</li> <li>\`(999.99,1200.00]\` matches items where \`999.99 < amount <= 1200.00\`</li> <li>\`[1200.50,]\` matches items where \`amount >= 1200.50\`</li> <li>\`(1200.50,)\` matches items where \`amount > 1200.50\`</li> <li>\`[,1200.50]\` matches items where \`amount <= 1200.50\`</li> <li>\`(,1200.50)\` matches items where \`amount < 1200.50\`</li> </ul>",
                  "type": "optional<root.AmountRange>",
                },
                "category": {
                  "allow-multiple": true,
                  "docs": "Filter transactions to only those whose \`category\` is in this pipe-separated list. Categories are set by a transaction cleansing service or assigned by the account holder. Categories can include names such as \`"Shopping"\`, \`"Deposit"\`, \`"Bill"\`, \`"Transfer"\`, or \`"Other"\`.",
                  "type": "optional<root.TransactionCategoryLabel>",
                },
                "checkNumber": {
                  "docs": "Return only transactions whose \`check.number\` is in this integer range. Examples: <ul> <li>\`1200\` match the integer 1,200 exactly</li> <li>\`[1000,1200)\` matches items where \`1000 <= number < 1200\`</li> <li>\`[1000,1199]\` matches items where \`1000 <= number <= 1199\`</li> <li>\`(999,1200]\` matches items where \`999 < number <= 1200\`</li> <li>\`[1200,]\` matches items where \`number >= 1200\`</li> <li>\`(1200,)\` matches items where \`number > 1200\`</li> <li>\`[,1200]\` matches items where \`number <= 1200\`</li> <li>\`(,1200)\` matches items where \`number < 1200\`</li> </ul>",
                  "type": "optional<root.CheckNumberRange>",
                },
                "createdOn": {
                  "docs": "Return only transactions whose \`createdOn\` date is in this date range. Example date ranges are the same format as the \`occurredOn\` query parameter.<br>**Warning**: The parameter \`createdOn\` was deprecated on version \`v0.6.0\` of the API. Use the \`?occurredOn=\` query parameter instead. \`createdOn\` will be removed on version \`v0.9.0\` of the API.",
                  "type": "optional<root.DateRange>",
                },
                "limit": {
                  "docs": "The maximum number of items to return in this paged response.",
                  "type": "optional<integer>",
                },
                "occurredOn": {
                  "docs": "Return only transactions whose \`occurredOn\` date is in this date range. Dates ranges use dates expressed in \`YYYY-MM-DD\` [RFC 3339](https://tools.ietf.org/html/rfc3339) \`date\` format. Each account has an implicit default transaction history range of _n_ days. This is normally 30 days but may be shorter for accounts with high activity. This _n_ day period is applied to any unbounded date ranges. The default date range is the most recent _n_ days. Example date ranges: <ul> <li> \`2023-05-19\` match transactions occurring on May 19, 2023.</li> <li> \`[2023-05-01,2023-05-31]\` match transactions occurring between May 1 and 31, 2023, inclusive</li> <li> \`[2023-05-01,2023-06-01)\` match transactions occurring in May, 2023 (on or after May 1, but before June 1)</li> <li> \`[2023-05-09,]\` match transactions _n_ days on or after May 9, 2023</li> <li> \`(2023-05-09,)\` match transactions _n_ days after May 9, 2023</li> <li> \`[,2023-05-09]\` match transactions _n_ days on or before May 9, 2023</li> <li> \`(,2023-05-09)\` match transactions _n_ days before but excluding May 9, 2023</li> </ul>",
                  "type": "optional<string>",
                },
                "posted": {
                  "docs": "Limit transactions in the response based on the transaction's \`posted\` value. If \`true\`, include only posted transactions. If \`false\`, include only non-posted transactions. If omitted, do not filter based on \`posted\`. Note that using this filter excludes balance transactions because the \`posted\` property is not set on balance transactions, so neither \`true\` or \`false\` match them.",
                  "type": "optional<boolean>",
                },
                "postedOn": {
                  "docs": "Return only transactions whose \`postedOn\` date is in this date range. Example date ranges are the same format as the \`occurredOn\` query parameter.<br>**Warning**: The parameter \`postedOn\` was deprecated on version \`v0.6.0\` of the API. Use the \`?occurredOn=\` query parameter instead. \`postedOn\` will be removed on version \`v0.9.0\` of the API.",
                  "type": "optional<root.DateRange>",
                },
                "retryCount": {
                  "docs": "When retrying the operation, pass the \`retryCount\` from the \`incompleteTransactions\` response.",
                  "type": "optional<integer>",
                },
                "start": {
                  "docs": "The location of the next item in the collection. This is an opaque cursor supplied by the API service. Omit this to start at the beginning of the collection. The client does not define this value; the API services automatically pass the \`?start=\` parameter on the \`nextPage_url\`.",
                  "type": "optional<string>",
                },
                "subtype": {
                  "allow-multiple": true,
                  "docs": "Filter transactions to only those whose \`subtype\` is in this pipe-separated list.",
                  "type": "optional<root.TransactionSubType>",
                },
                "type": {
                  "allow-multiple": true,
                  "docs": "Filter transactions to only those whose \`type\` is in this pipe-separated list.",
                  "type": "optional<root.TransactionType>",
                },
              },
            },
            "response": {
              "docs": "OK.",
              "type": "root.Transactions",
            },
          },
        },
      },
    },
    "transfers.yml": {
      "imports": {
        "root": "__package__.yml",
      },
      "service": {
        "auth": false,
        "base-path": "",
        "endpoints": {
          "createTransfer": {
            "auth": true,
            "display-name": "Create a new transfer",
            "docs": "Create a new transfer within the transfers collection. If all the necessary properties are set, the transfer is queued for processing. If the request omits the \`schedule.scheduledOn\` date, the transfer remains pending/unscheduled until the user sets it via the [\`patchTransfer\`](#op-patchTransfer) operation.

Note: This operation requires an identity challenge if the financial institution requires the user to proove their identity for some types of transfers. See the "Challenges API".",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "request": {
                  "amount": "275.00",
                  "memo": "Cover check for car repair",
                  "schedule": {
                    "amountLimit": "3456.78",
                    "frequency": "once",
                    "scheduledOn": "2022-06-28",
                  },
                  "sourceAccount": {
                    "id": "bd9b7af2-6f9b",
                    "label": "Checking *1008",
                    "location": "internal",
                  },
                  "targetAccount": {
                    "id": "88b1ca3e-d0f3",
                    "label": "Checking *1008",
                    "location": "internal",
                  },
                },
                "response": {
                  "body": {
                    "amount": "275.00",
                    "createdAt": "2022-04-18T07:21:35Z",
                    "id": "0399abed-fd3d",
                    "memo": "Cover check for car repair",
                    "processedAt": "2024-01-15T09:30:00Z",
                    "schedule": {
                      "amountLimit": "3456.78",
                      "count": 1,
                      "creditsOn": "2026-06-26",
                      "debitsOn": "2026-06-24",
                      "endsOn": "endsOn",
                      "frequency": "once",
                      "recurrenceType": "fixed",
                      "scheduledOn": "2026-06-28",
                    },
                    "sourceAccount": {
                      "id": "bd9b7af2-6f9b",
                      "label": "Premiere Checking *6789",
                      "location": "internal",
                      "type": "checking",
                    },
                    "state": "unscheduled",
                    "targetAccount": {
                      "id": "88b1ca3e-d0f3",
                      "label": "Personal Savings *4567",
                      "location": "internal",
                      "type": "savings",
                    },
                    "updatedAt": "2022-04-18T07:21:35Z",
                    "updatedBy": "updatedBy",
                  },
                },
              },
            ],
            "method": "POST",
            "path": "/transfers",
            "request": {
              "body": {
                "extends": [
                  "root.AbstractBody",
                  "root.TransferFields",
                ],
                "properties": {
                  "schedule": {
                    "docs": "When the transfer should occur and any recurrence.",
                    "type": "optional<root.TransferSchedule>",
                  },
                },
              },
              "headers": {
                "Challenge": {
                  "docs": "This operation may require a completed challenge. If the first attempt calling this operation fails with a 401 \`challengeRequired\` error, the client should complete the challenge flow as described in the Challenges API, then retry the operation with this \`Challenge\` request header using the \`challengeToken\` returned at the end of that flow. If this is passed but the value is invalid, the operation fails with a 401 status code and the \`invalidChallengeHeader\` problem type.",
                  "name": "challenge",
                  "type": "optional<root.ChallengeToken>",
                },
              },
              "name": "NewTransfer",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "Created.",
              "type": "root.Transfer",
            },
          },
          "deleteTransfer": {
            "auth": true,
            "display-name": "Delete this transfer resource",
            "docs": "Delete this transfer resource and any resources that are owned by it. Only transfers that have not been processed may be deleted.",
            "errors": [
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.ConflictError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "transferId": "transferId",
                },
              },
            ],
            "method": "DELETE",
            "path": "/transfers/{transferId}",
            "path-parameters": {
              "transferId": {
                "docs": "The unique identifier of this transfer. This is an opaque string.",
                "type": "root.ResourceId",
              },
            },
          },
          "getTransfer": {
            "auth": true,
            "display-name": "Fetch a representation of this transfer",
            "docs": "Return the JSON representation of this transfer resource.",
            "errors": [
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "transferId": "transferId",
                },
                "response": {
                  "body": {
                    "amount": "275.00",
                    "createdAt": "2022-04-18T07:21:35Z",
                    "id": "0399abed-fd3d",
                    "memo": "Cover check for car repair",
                    "processedAt": "2024-01-15T09:30:00Z",
                    "schedule": {
                      "amountLimit": "3456.78",
                      "count": 1,
                      "creditsOn": "2026-06-26",
                      "debitsOn": "2026-06-24",
                      "endsOn": "endsOn",
                      "frequency": "once",
                      "recurrenceType": "fixed",
                      "scheduledOn": "2026-06-28",
                    },
                    "sourceAccount": {
                      "id": "bd9b7af2-6f9b",
                      "label": "Premiere Checking *6789",
                      "location": "internal",
                      "type": "checking",
                    },
                    "state": "unscheduled",
                    "targetAccount": {
                      "id": "88b1ca3e-d0f3",
                      "label": "Personal Savings *4567",
                      "location": "internal",
                      "type": "savings",
                    },
                    "updatedAt": "2022-04-18T07:21:35Z",
                    "updatedBy": "updatedBy",
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/transfers/{transferId}",
            "path-parameters": {
              "transferId": {
                "docs": "The unique identifier of this transfer. This is an opaque string.",
                "type": "root.ResourceId",
              },
            },
            "response": {
              "docs": "OK.",
              "type": "root.Transfer",
            },
          },
          "listTransfers": {
            "auth": true,
            "display-name": "Return a collection of transfers",
            "docs": "Return a [paginated](https://dx.apiture.com/docs/api-documentation/concepts/pagination) collection of transfers. The [nextPage_url](https://dx.apiture.com/docs/api-documentation/concepts/links) in the response is a pagination link.",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "response": {
                  "body": {
                    "count": 1,
                    "items": [
                      {
                        "amount": "275.00",
                        "createdAt": "2022-04-18T07:21:35Z",
                        "id": "0399abed-fd3d",
                        "memo": "Cover check for car repair",
                        "processedAt": "2024-01-15T09:30:00Z",
                        "schedule": {
                          "amountLimit": "3456.78",
                          "creditsOn": "2026-06-26",
                          "debitsOn": "2026-06-24",
                          "frequency": "once",
                          "scheduledOn": "2026-06-28",
                        },
                        "sourceAccount": {
                          "id": "bd9b7af2-6f9b",
                          "label": "Premiere Checking *6789",
                          "location": "internal",
                          "type": "checking",
                        },
                        "state": "processed",
                        "targetAccount": {
                          "id": "88b1ca3e-d0f3",
                          "label": "Personal Savings *4567",
                          "location": "internal",
                          "type": "savings",
                        },
                        "updatedAt": "2022-04-18T07:21:35Z",
                        "updatedBy": "updatedBy",
                      },
                      {
                        "amount": "100.00",
                        "createdAt": "2022-04-18T07:21:35Z",
                        "id": "d62c0701-0d74",
                        "memo": "school expenses",
                        "processedAt": "2024-01-15T09:30:00Z",
                        "schedule": {
                          "amountLimit": "3456.78",
                          "count": 9,
                          "creditsOn": "2023-08-01",
                          "debitsOn": "2026-08-01",
                          "frequency": "monthly",
                          "scheduledOn": "2023-08-01",
                        },
                        "sourceAccount": {
                          "id": "bd9b7af2-6f9b",
                          "label": "Checking *6789",
                          "location": "internal",
                          "type": "checking",
                        },
                        "state": "scheduled",
                        "targetAccount": {
                          "id": "c8396f59-624b",
                          "label": "Checking *3456",
                          "location": "internal",
                          "type": "checking",
                        },
                        "updatedAt": "2022-04-18T07:21:35Z",
                        "updatedBy": "updatedBy",
                      },
                      {
                        "amount": "275.00",
                        "createdAt": "2022-04-18T07:21:35Z",
                        "id": "id",
                        "memo": "memo",
                        "processedAt": "2024-01-15T09:30:00Z",
                        "schedule": {
                          "amountLimit": "3456.78",
                          "creditsOn": "2026-06-26",
                          "debitsOn": "2026-06-24",
                          "frequency": "once",
                          "scheduledOn": "2026-06-28",
                        },
                        "sourceAccount": {
                          "id": "bd9b7af2-6f9b",
                          "label": "Checking *1008",
                        },
                        "state": "unscheduled",
                        "targetAccount": {
                          "id": "88b1ca3e-d0f3",
                          "label": "Personal Savings *4567",
                          "type": "savings",
                        },
                        "updatedAt": "2022-04-18T07:21:35Z",
                        "updatedBy": "James Bond",
                      },
                    ],
                    "limit": 10,
                    "nextPage_url": "https://production.api.apiture.com/transfers/transfers?start=6117a4dcefb841cab7316cef1ac8b58c&limit=10",
                    "start": "d1b48af913464aa49fcb07065dcc0616",
                  },
                },
              },
            ],
            "method": "GET",
            "path": "/transfers",
            "request": {
              "name": "TransfersListTransfersRequest",
              "query-parameters": {
                "creditsOn": {
                  "docs": "Return only transactions whose \`schedule.creditsOn\` (when the funds are credited to  the target account) is in this date range. Excludes any transfers that do not have a \`scheduledOn\` date. Dates ranges use dates expressed in \`YYYY-MM-DD\` [RFC 3339](https://tools.ietf.org/html/rfc3339) \`date\` format. See the \`scheduledOn\` query parameter for examples.",
                  "type": "optional<root.DateRange>",
                },
                "debitsOn": {
                  "docs": "Return only transactions whose \`schedule.debitsOn\` date (when the funds are debited from the source account) is in this date range. Excludes any transfers that do not have a \`scheduledOn\` date. Dates ranges use dates expressed in \`YYYY-MM-DD\` [RFC 3339](https://tools.ietf.org/html/rfc3339) \`date\` format. See the \`scheduledOn\` query parameter for examples.",
                  "type": "optional<root.DateRange>",
                },
                "historical": {
                  "docs": "If \`true\`, list only historical (\`state\` is \`processed\`) transfers. If \`false\`, list only transfers that have not yet finished processing. If omitted, list all transfers.",
                  "type": "optional<boolean>",
                },
                "limit": {
                  "docs": "The maximum number of items to return in this paged response.",
                  "type": "optional<integer>",
                },
                "scheduledOn": {
                  "docs": "Return only transactions whose \`schedule.scheduledOn\` date is in this date range. Excludes any transfers that do not have a \`scheduledOn\` date. Dates ranges use dates expressed in \`YYYY-MM-DD\` [RFC 3339](https://tools.ietf.org/html/rfc3339) \`date\` format. Example date ranges: <ul> <li> \`2022-05-19\` match only transfers scheduled on May 19, 2022.</li> <li> \`[2022-05-01,2022-06-01)\` in May, 2022: on or after May 1, but _before_ June 1</li> <li> \`(2022-05-01,2022-06-01)\` in May, 2022 (on or after May 1, but before June 1)</li> <li> \`[2022-05-09,]\` on or after May 9, 2022</li> <li> \`(2022-05-09,)\` after May 9, 2022</li> <li> \`[,2022-05-09]\` on or before May 9, 2022</li> <li> \`(,2022-05-09)\` before May 9, 2022</li> </ul>",
                  "type": "optional<root.DateRange>",
                },
                "start": {
                  "docs": "The location of the next item in the collection. This is an opaque cursor supplied by the API service. Omit this to start at the beginning of the collection. The client does not define this value; the API services automatically pass the \`?start=\` parameter on the \`nextPage_url\`.",
                  "type": "optional<string>",
                },
              },
            },
            "response": {
              "docs": "OK.",
              "type": "root.Transfers",
            },
          },
          "patchTransfer": {
            "auth": true,
            "display-name": "Update this transfer",
            "docs": "Perform a partial update of this transfer as per [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7396) format and processing rules. Only fields in the request body are updated on the resource; fields which are omitted are not updated.

Note: This operation requires an identity challenge if the financial institution requires the user to prove their identity for some types of transfers. See the "Challenges API".",
            "errors": [
              "root.BadRequestError",
              "root.UnauthorizedError",
              "root.ForbiddenError",
              "root.NotFoundError",
              "root.UnprocessableEntityError",
            ],
            "examples": [
              {
                "path-parameters": {
                  "transferId": "transferId",
                },
                "request": {
                  "amount": "275.00",
                  "schedule": {
                    "amountLimit": "3456.78",
                    "frequency": "once",
                    "scheduledOn": "2022-06-28",
                  },
                  "sourceAccount": {
                    "id": "e821ce54-c715",
                    "label": "Premiere Checking *6789",
                    "location": "internal",
                    "type": "checking",
                  },
                  "targetAccount": {
                    "id": "88b1ca3e-d0f3",
                    "label": "Checking *1008",
                  },
                },
                "response": {
                  "body": {
                    "amount": "275.00",
                    "createdAt": "2022-04-18T07:21:35Z",
                    "id": "0399abed-fd3d",
                    "memo": "Cover check for car repair",
                    "processedAt": "2024-01-15T09:30:00Z",
                    "schedule": {
                      "amountLimit": "3456.78",
                      "count": 1,
                      "creditsOn": "2026-06-26",
                      "debitsOn": "2026-06-24",
                      "endsOn": "endsOn",
                      "frequency": "once",
                      "recurrenceType": "fixed",
                      "scheduledOn": "2026-06-28",
                    },
                    "sourceAccount": {
                      "id": "bd9b7af2-6f9b",
                      "label": "Premiere Checking *6789",
                      "location": "internal",
                      "type": "checking",
                    },
                    "state": "unscheduled",
                    "targetAccount": {
                      "id": "88b1ca3e-d0f3",
                      "label": "Personal Savings *4567",
                      "location": "internal",
                      "type": "savings",
                    },
                    "updatedAt": "2022-04-18T07:21:35Z",
                    "updatedBy": "updatedBy",
                  },
                },
              },
            ],
            "method": "PATCH",
            "path": "/transfers/{transferId}",
            "path-parameters": {
              "transferId": {
                "docs": "The unique identifier of this transfer. This is an opaque string.",
                "type": "root.ResourceId",
              },
            },
            "request": {
              "body": {
                "extends": [
                  "root.AbstractBody",
                  "root.TransferFields",
                ],
                "properties": {
                  "schedule": {
                    "docs": "When the transfer should occur and any recurrence.",
                    "type": "optional<root.TransferSchedule>",
                  },
                },
              },
              "headers": {
                "Challenge": {
                  "docs": "This operation may require a completed challenge. If the first attempt calling this operation fails with a 401 \`challengeRequired\` error, the client should complete the challenge flow as described in the Challenges API, then retry the operation with this \`Challenge\` request header using the \`challengeToken\` returned at the end of that flow. If this is passed but the value is invalid, the operation fails with a 401 status code and the \`invalidChallengeHeader\` problem type.",
                  "name": "challenge",
                  "type": "optional<root.ChallengeToken>",
                },
              },
              "name": "TransferPatch",
              "query-parameters": undefined,
            },
            "response": {
              "docs": "OK.",
              "type": "root.Transfer",
            },
          },
        },
      },
    },
  },
  "packageMarkerFile": {
    "errors": {
      "BadRequestError": {
        "status-code": 400,
        "type": "ProblemResponse",
      },
      "ConflictError": {
        "status-code": 409,
        "type": "ProblemResponse",
      },
      "ForbiddenError": {
        "status-code": 403,
        "type": "ProblemResponse",
      },
      "NotFoundError": {
        "status-code": 404,
        "type": "ProblemResponse",
      },
      "ServiceUnavailableError": {
        "status-code": 503,
        "type": "ProblemResponse",
      },
      "TooManyRequestsError": {
        "status-code": 429,
        "type": "ProblemResponse",
      },
      "UnauthorizedError": {
        "status-code": 401,
        "type": "ProblemResponse",
      },
      "UnprocessableEntityError": {
        "status-code": 422,
        "type": "ProblemResponse",
      },
    },
    "types": {
      "AbstractBody": {
        "docs": "An abstract schema used to define other request and response body model schemas.",
        "properties": {},
      },
      "AbstractPagedBody": {
        "docs": "An abstract schema used to define paginated collections of resources. Collection classes which extend this schema define an array of \`items\` which represent a page of data.",
        "extends": [
          "AbstractBody",
          "AbstractPagedBodyFields",
        ],
        "properties": {
          "start": {
            "docs": "The opaque cursor that specifies the starting location of this page of items.",
            "type": "optional<string>",
          },
        },
      },
      "AbstractPagedBodyFields": {
        "docs": "Common properties of collection page responses.",
        "properties": {
          "limit": {
            "docs": "The number of items requested for this page response. The length of the \`items\` array may be less that \`limit\`.",
            "type": "integer",
          },
          "nextPage_url": {
            "docs": "The URL of the next page of resources. If this URL is omitted, there are no more resources in the collection.",
            "type": "optional<string>",
          },
        },
      },
      "Account": {
        "docs": "An internal customer account.",
        "extends": [
          "AbstractBody",
          "AccountFields",
        ],
        "properties": {
          "allows": {
            "docs": "Flags which indicate the permissions the current authorized user has on this account resource.",
            "type": "FullAccountPermissions",
          },
          "electronicStatements": {
            "docs": "If \`true\`, the customer has opted in to receive account statements electronically.",
            "type": "boolean",
          },
        },
      },
      "AccountAllowsFilter": {
        "docs": "Values for the \`?allows=\` filter in [\`listAccounts\`](#op-listAccounts).

<strong><code>accountAllowsFilter</code></strong> strings may have one of the following
[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):

<table>
<tr>
  <th>Value</th><th>Description</th>
</tr>

<tr>
    <td><strong><code>billPay</code></strong></td><td>Bill Pay: <p>Include each account where the caller is allowed to use the bill pay feature.</p>
</td>
    </tr>
<tr>
    <td><strong><code>transferFrom</code></strong></td><td>Transfer From: <p>Include each account where the caller is allowed to transfer money from the account.</p>
</td>
    </tr>
<tr>
    <td><strong><code>transferTo</code></strong></td><td>Transfer To: <p>Include each account where the caller is allowed to transfer money into the account.</p>
</td>
    </tr>
<tr>
    <td><strong><code>mobileCheckDeposit</code></strong></td><td>Mobile Check Deposit: <p>Include each account where the caller is allowed to deposit mobile checks.</p>
</td>
    </tr>
<tr>
    <td><strong><code>view</code></strong></td><td>View: <p>Include each account where the caller is allowed to view full account details (balances, full account number, transactions, etc).</p>
</td>
    </tr>
<tr>
    <td><strong><code>viewCards</code></strong></td><td>View Cards: <p>Include each account where the caller is allowed to view debit card details.</p>
</td>
    </tr>
<tr>
    <td><strong><code>manageCards</code></strong></td><td>Manage Cards: <p>Include each account where the caller is allowed to manage debit card details.</p>
</td>
    </tr>
</table>

",
        "enum": [
          "billPay",
          "transferFrom",
          "transferTo",
          "mobileCheckDeposit",
          "view",
          "viewCards",
          "manageCards",
        ],
      },
      "AccountBalance": {
        "docs": "The current balances of the given account.",
        "properties": {
          "available": {
            "docs": "The available balance: the funds available for use. This is the string representation of the exact decimal amount.",
            "type": "optional<CreditOrDebitValue>",
          },
          "current": {
            "docs": "The current balance. This is the balance at the end of the previous business day. This is the string representation of the exact decimal amount.",
            "type": "optional<CreditOrDebitValue>",
          },
          "currentWithPending": {
            "docs": "The current balance, with posted transactions. This is the string representation of the exact decimal amount.",
            "type": "optional<CreditOrDebitValue>",
          },
          "id": {
            "docs": "The account ID.",
            "type": "ReadOnlyResourceId",
          },
          "incomplete": {
            "docs": "If \`true\`, the response is incomplete and the client may retry the operation after the \`Retry-After\` time in order to fetch balances for any incomplete accounts in the \`items\`. The retry operation should only pass in accounts that are \`incomplete\`.",
            "type": "boolean",
          },
          "updatedAt": {
            "docs": "The time when the balance values were last updated from the banking core.",
            "type": "optional<ReadOnlyTimestamp>",
          },
        },
      },
      "AccountBalances": {
        "docs": "An array of account balances by account ID.",
        "extends": [
          "AbstractBody",
        ],
        "properties": {
          "items": {
            "docs": "An array of items, one for each of the \`?accounts=\` in the request, returned in the same order.",
            "type": "list<AccountBalance>",
          },
        },
      },
      "AccountFields": {
        "docs": "Fragment schema use to build other account schemas.",
        "properties": {
          "id": {
            "docs": "The unique identifier for this account resource. This is an immutable opaque string.",
            "type": "ReadOnlyResourceId",
          },
          "label": {
            "docs": "The human-readable label for this account. This is either the \`nickname\` (if assigned for the current customer), or the \`product.label\` concatenated with the \`maskedNumber\`.",
            "type": "string",
          },
          "location": {
            "docs": "Indicates where an account is held.",
            "type": "AccountLocation",
          },
          "maskedNumber": "MaskedAccountNumber",
          "nickname": "optional<AccountNickname>",
          "product": "ProductReference",
        },
      },
      "AccountIds": {
        "docs": "An array of account IDs.",
        "type": "list<ResourceId>",
      },
      "AccountItem": {
        "docs": "An account item in a list items in the \`accounts\` schema.",
        "properties": {
          "allows": "AccountPermissions",
          "id": {
            "docs": "The unique identifier for this account resource. This is an immutable opaque string.",
            "type": "optional<ReadOnlyResourceId>",
          },
          "label": {
            "docs": "The human-readable label for this account. This is either the \`nickname\` (if assigned for the current customer), or the \`product.label\` concatenated with the \`maskedNumber\`.",
            "type": "optional<string>",
          },
          "location": {
            "docs": "Indicates where an account is held.",
            "type": "optional<AccountLocation>",
          },
          "maskedNumber": "optional<MaskedAccountNumber>",
          "nickname": "optional<AccountNickname>",
          "product": "optional<ProductReference>",
        },
      },
      "AccountJointOwner": {
        "docs": "Representation of account joint owner resources.",
        "extends": [
          "AbstractBody",
        ],
        "properties": {
          "id": "ReadOnlyResourceId",
          "name": {
            "docs": "The full name of the joint owner.",
            "type": "string",
          },
        },
      },
      "AccountJointOwners": {
        "docs": undefined,
        "properties": {
          "items": {
            "docs": "An array containing account joint owner items.",
            "type": "list<AccountJointOwner>",
          },
        },
      },
      "AccountLocation": {
        "docs": "Indicates where an account is held:
  * \`internal\` accounts at the current financial institution;
  * \`external\` accounts at another financial institution;
  * \`outside\` accounts non-banking accounts such as brokerage and fund accounts.
Account transfers are only allowed between \`internal\` and \`external\` accounts. All accounts are considered when calculating total cash balance.",
        "enum": [
          "internal",
          "external",
          "outside",
        ],
      },
      "AccountNickname": {
        "docs": "The nickname (friendly name) the customer has given this account. Each customer can define their own nickname for the same account. If omitted, the customer has not set a nickname.",
        "type": "string",
      },
      "AccountPermissions": {
        "docs": "Flags which indicate the permissions the current authorized user has on this account item resource. Most of these properties may only be \`true\` for internal accounts. These permissions are available in account items in the [\`accounts\`](#schema-accounts) list. See [\`fullAccountPermissions\`](#schema-fullAccountPermissions) for all capabilities a customer has on an account (the \`account.allows\` object in the [\`account\`](#schema-account) object response from [\`getAccount\`](#op-getAccount).)",
        "properties": {
          "billPay": {
            "docs": "If \`true\`, the customer may use this account for Bill Pay.",
            "type": "boolean",
          },
          "manageCards": {
            "docs": "If true, the customer may manage debit cards associated with this account. This includes locking and unlocking cards, changing card controls, ordering cards, or canceling cards.",
            "type": "boolean",
          },
          "mobileCheckDeposit": {
            "docs": "If \`true\`, the customer may use this account for mobile check deposits.",
            "type": "boolean",
          },
          "transferFrom": {
            "docs": "If \`true\`, the customer may use this account as the target (deposit) account for account-to-account transfers.",
            "type": "boolean",
          },
          "transferTo": {
            "docs": "If \`true\`, the customer may use this account as the source (debit) account for account-to-account transfers.",
            "type": "boolean",
          },
          "view": {
            "docs": "If \`true\`, the customer may view the details of this account, including the account balance and transactions.",
            "type": "boolean",
          },
          "viewCards": {
            "docs": "If \`true\`, the customer may view debit cards associated with this account.",
            "type": "boolean",
          },
        },
      },
      "AccountRoutingNumber": {
        "docs": "An account ABA routing and transit number.",
        "type": "string",
      },
      "Accounts": {
        "docs": "A paginated list of the customer's accounts. This list contains internal banking accounts and external banking accounts. and outside fund accounts. The \`location\` property indicates where the account is held. Items in the list contain \`url\` links to the actual account resource which are in the \`accounts\`, \`externalAccounts\` or \`outsideAccounts\` collections.",
        "extends": [
          "AbstractBody",
        ],
        "properties": {
          "count": {
            "docs": "The total number of accounts for which the user has access. This value ignores any filters. This value is _optional_ and may be omitted if the count is not computable efficiently.",
            "type": "optional<integer>",
          },
          "items": {
            "docs": "The array of items in this page of accounts. This array may be empty.",
            "type": "list<AccountItem>",
          },
          "limit": {
            "docs": "The number of items requested for this page response. The length of the \`items\` array may be less that \`limit\`.",
            "type": "integer",
          },
          "nextPage_url": {
            "docs": "The URL of the next page of accounts. If this URL is omitted, there are no more accounts.",
            "type": "optional<string>",
          },
          "primaryAccountId": {
            "docs": "The \`id\` of the customer's primary account. This property only exists for retail customers, and only if the customer has designated a primary account.",
            "type": "optional<ReadOnlyResourceId>",
          },
          "start": {
            "docs": "The opaque cursor that specifies the starting location of this page of items.",
            "type": "optional<string>",
          },
        },
      },
      "AchAccountRisk": {
        "docs": "Describes the risk level of a payment batch's settlement account.

<strong><code>achAccountRisk</code></strong> strings may have one of the following
[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):

<table>
<tr>
  <th>Value</th><th>Description</th>
</tr>

<tr>
    <td><strong><code>early</code></strong></td><td>Early: <p>The account is debited three business days before the ACH transfer&#39;s effective date. The account balance is also checked for sufficient funds before the account is debited. A risk limit may apply for commercial accounts with an <code>early</code> risk level.</p>
</td>
    </tr>
<tr>
    <td><strong><code>normal</code></strong></td><td>Normal: <p>The account is debited two business days before the ACH transfer&#39;s effective date. The account balance is also checked for sufficient funds before the account is debited. A risk limit may apply for commercial accounts with a <code>normal</code> risk level.</p>
</td>
    </tr>
<tr>
    <td><strong><code>float</code></strong></td><td>Float: <p>The account is debited on the ACH transfer&#39;s effective date. The account balance is not checked for sufficient funds before the account is debited. A risk limit applies for commercial accounts with a <code>float</code> risk level.</p>
</td>
    </tr>
<tr>
    <td><strong><code>sameDay</code></strong></td><td>Same Day: <p>The account is credited on the ACH transfer&#39;s effective day. The account balance is not checked because <code>sameDay</code> is used for credit. A risk limit and per-transaction limit applies.</p>
</td>
    </tr>
</table>

",
        "enum": [
          "early",
          "normal",
          "float",
          "sameDay",
        ],
      },
      "AchSecCode": {
        "docs": "The ACH transfer type.

<strong><code>achSecCode</code></strong> strings may have one of the following
[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):

<table>
<tr>
  <th>Value</th><th>Description</th>
</tr>

<tr>
    <td><strong><code>arc</code></strong></td><td>Accounts Receivable</td>
    </tr>
<tr>
    <td><strong><code>boc</code></strong></td><td>Back Office Conversion</td>
    </tr>
<tr>
    <td><strong><code>ccd</code></strong></td><td>Credit or Debit</td>
    </tr>
<tr>
    <td><strong><code>cie</code></strong></td><td>Customer-Initiated</td>
    </tr>
<tr>
    <td><strong><code>ctx</code></strong></td><td>Corporate Trade Exchange</td>
    </tr>
<tr>
    <td><strong><code>pop</code></strong></td><td>Point of Purchase</td>
    </tr>
<tr>
    <td><strong><code>ppd</code></strong></td><td>Prearranged Payment and Deposit</td>
    </tr>
<tr>
    <td><strong><code>rck</code></strong></td><td>Re-Presented Check</td>
    </tr>
<tr>
    <td><strong><code>tel</code></strong></td><td>Telephone-initiated</td>
    </tr>
<tr>
    <td><strong><code>web</code></strong></td><td>Internet-initiated/Mobile</td>
    </tr>
</table>

",
        "enum": [
          "arc",
          "boc",
          "ccd",
          "cie",
          "ctx",
          "pop",
          "ppd",
          "rck",
          "tel",
          "web",
        ],
      },
      "Address": {
        "docs": "A postal address that can hold a US address or an international (non-US) postal addresses.",
        "extends": [
          "AddressFields",
        ],
        "properties": {
          "postalCode": {
            "docs": "The postal code, which varies in format by country. If \`countryCode\` is \`US\`, this should be a five digit US ZIP code or ten character ZIP+4.",
            "type": "string",
          },
          "regionCode": {
            "docs": "The state, district, or outlying area of the postal address. This is required if \`countryCode\` is \`US\` \`regionCode\` and \`regionName\` are mutually exclusive.",
            "type": "optional<string>",
          },
          "regionName": {
            "docs": "The state, district, or outlying area of the postal address. This is required if \`countryCode\` is not \`US\`. \`regionCode\` and \`regionName\` are mutually exclusive.",
            "type": "optional<string>",
          },
        },
      },
      "AddressFields": {
        "docs": "Properties of a simple address, used to compose other addresses.",
        "properties": {
          "address1": {
            "docs": "The first line of the postal address. In the US, this typically includes the building number and street name.",
            "type": "string",
          },
          "address2": {
            "docs": "The second line of the street address. This should only be used if it has a value. Typical values include building numbers, suite numbers, and other identifying information beyond the first line of the postal address.",
            "type": "optional<string>",
          },
          "countryCode": {
            "docs": "The [ISO-3611 alpha-2](https://www.iso.org/glossary-for-iso-3166.html) value for the country associated with the postal address.",
            "type": "string",
          },
          "locality": {
            "docs": "The city/town/municipality of the address.",
            "type": "string",
          },
        },
      },
      "AmountRange": {
        "docs": "A monetary amount range, supporting inclusive or exclusive endpoints. The value may have the following forms: <ul> <li>\`1200.50\` match the dollar amount 1,200.50 exactly</li> <li>\`[1000.00,1200.00)\` matches items where \`1000.00 <= amount < 1200.00\`</li> <li>\`[1000.00,1199.99]\` matches items where \`1000.00 <= amount <= 1199.99\`</li> <li>\`[999.99,1200.00]\` matches items where \`999.99 < amount < 1200.00\`</li> <li>\`[1200.50,]\` matches items where \`amount >= 1200.50\`</li> <li>\`(1200.50,)\` matches items where \`amount >= 1200.50\`</li> <li>\`[,1200.50]\` matches items where \`amount <= 1200.50\`</li> <li>\`(,1200.50)\` matches items where \`amount < 1200.50\`</li> </ul>",
        "type": "string",
      },
      "ApiProblem": {
        "docs": "API problem or error, as per [RFC 7807 application/problem+json](https://tools.ietf.org/html/rfc7807).",
        "properties": {
          "attributes": {
            "docs": "Additional optional attributes related to the problem. This data conforms to the schema associated with the error type.",
            "type": "optional<map<string, unknown>>",
          },
          "detail": {
            "docs": "A human-readable explanation specific to this occurrence of the problem.
",
            "type": "optional<string>",
          },
          "id": {
            "docs": "The unique identifier for this problem. This is an immutable opaque string.",
            "type": "optional<ReadOnlyResourceId>",
          },
          "instance": {
            "docs": "A URI reference that identifies the specific occurrence of the problem. This is the URI of an API resource that the problem is related to, with a unique error correlation ID URI fragment
",
            "type": "optional<string>",
          },
          "occurredAt": {
            "docs": "The timestamp when the problem occurred, in [RFC 3339](https://tools.ietf.org/html/rfc3339) date-time \`YYYY-MM-DDThh:mm:ss.sssZ\` format, UTC.",
            "type": "optional<ReadOnlyTimestamp>",
          },
          "problems": {
            "docs": "Optional root-causes if there are multiple problems in the request or API call processing.",
            "type": "optional<list<ApiProblem>>",
          },
          "status": {
            "docs": "The [HTTP status code](https://datatracker.ietf.org/doc/html/rfc7231#section-6) for this occurrence of the problem.
",
            "type": "optional<integer>",
          },
          "title": {
            "docs": "A short, human-readable summary of the problem type. The title is usually the same for all problem with the same \`type\`.
",
            "type": "optional<string>",
          },
          "type": {
            "docs": "A [URI reference (RFC3986)](https://tools.ietf.org/html/rfc3986) that identifies the problem type. If present, this is the URL of human-readable HTML documentation for the problem type. When this member is not present, its value is assumed to be \`"about:blank"\`.
",
            "type": "optional<string>",
          },
        },
      },
      "ChallengeFactor": {
        "docs": "An challenge factor. See [\`requiredIdentityChallenge\`](#schema-requiredIdentityChallenge) for multiple examples.",
        "properties": {
          "labels": {
            "docs": "A list of text label which identifies the channel(s) though which the user completes the challenge. For an \`sms\` or \`voice\` challenge, the only label item is the last four digits of the corresponding phone number. For an \`email\` challenge, each label is the masked email address.",
            "type": "optional<list<string>>",
          },
          "securityQuestions": "optional<ChallengeSecurityQuestions>",
          "type": "ChallengeFactorType",
        },
      },
      "ChallengeFactorType": {
        "docs": "The name of challenge factor.

<strong><code>challengeFactorType</code></strong> strings may have one of the following
[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):

<table>
<tr>
  <th>Value</th><th>Description</th>
</tr>

<tr>
    <td><strong><code>sms</code></strong></td><td>SMS: <p>One-time passcode sent to the primary mobile phone number</p>
</td>
    </tr>
<tr>
    <td><strong><code>email</code></strong></td><td>Email: <p>One-time passcode sent to the primary email address</p>
</td>
    </tr>
<tr>
    <td><strong><code>voice</code></strong></td><td>Voice: <p>One-time passcode communicated via automated voice phone call</p>
</td>
    </tr>
<tr>
    <td><strong><code>authenticatorToken</code></strong></td><td>authenticator Token: <p>One-time passcode issued by a pre-registered hardware device, such as a token key fob, or an authenticator app</p>
</td>
    </tr>
<tr>
    <td><strong><code>securityQuestions</code></strong></td><td>Security Questions: <p>Prompt with the user&#39;s security questions registered with their security profile</p>
</td>
    </tr>
</table>

",
        "enum": [
          "sms",
          "email",
          "voice",
          "securityQuestions",
          "authenticatorToken",
        ],
      },
      "ChallengePromptId": {
        "docs": "The unique ID of a prompt (such as a security question) in a challenge factor.",
        "type": "string",
      },
      "ChallengeSecurityQuestion": {
        "docs": "A single security question within the \`questions\` array of the [\`challengeSecurityQuestions\`](#schema-challengeSecurityQuestions)",
        "properties": {
          "id": {
            "docs": "The unique ID of security question prompt. This should be included in the [\`challengeVerification\`](#schema-challengeVerification) response as the \`promptId\`.",
            "type": "ChallengePromptId",
          },
          "prompt": {
            "docs": "The text prompt of this security question.",
            "type": "string",
          },
        },
      },
      "ChallengeSecurityQuestions": {
        "docs": "Describes a \`securityQuestions\` challenge. This is omitted if the challenge \`type\` is not \`securityQuestions\`.",
        "properties": {
          "questions": {
            "docs": "The array of security questions.",
            "type": "list<ChallengeSecurityQuestion>",
          },
        },
      },
      "ChallengeToken": {
        "docs": "The value of the identity \`Challenge\` request header that the client must send when retrying an operation which required a challenge.",
        "type": "string",
      },
      "CheckNumberRange": {
        "docs": "A numeric range for a checking account check number.",
        "type": "PositiveIntegerRange",
      },
      "CreditOrDebitValue": {
        "docs": "The monetary value representing a credit (positive amounts with no prefix or a \`+\` prefix) or debit (negative amounts with a \`-\` prefix). The numeric value is  represented as a string so that it can be exact with no loss of precision.<br>The schema \`creditOrDebitValue\` was added on version \`0.4.0\` of the API.",
        "type": "string",
      },
      "CutoffTime": {
        "docs": "A representation of a cutoff time for a money movement process at a financial institution.",
        "properties": {
          "time": {
            "docs": "The cutoff time for a product formatted in [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) \`time\` format: \`hh:mm\`. The time is expressed in 24 hour time and is set to the local time zone of the financial institution.",
            "type": "string",
          },
          "type": "CutoffTimeType",
        },
      },
      "CutoffTimeType": {
        "docs": "Indicates the type of a cutoff time.

<strong><code>cutoffTimeType</code></strong> strings may have one of the following
[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):

<table>
<tr>
  <th>Value</th><th>Description</th>
</tr>

<tr>
    <td><strong><code>ach</code></strong></td><td>ACH</td>
    </tr>
<tr>
    <td><strong><code>sameDayAch</code></strong></td><td>Same Day ACH</td>
    </tr>
<tr>
    <td><strong><code>domesticWireTransfer</code></strong></td><td>Domestic Wire Transfer</td>
    </tr>
<tr>
    <td><strong><code>internationalWireTransfer</code></strong></td><td>International Wire Transfer</td>
    </tr>
<tr>
    <td><strong><code>internalTransfer</code></strong></td><td>Internal Account Transfer: <p>A transfer between accounts at the same financial institution</p>
</td>
    </tr>
<tr>
    <td><strong><code>externalTransfer</code></strong></td><td>External Account Transfer: <p>A transfer to or from an account at an external financial institution</p>
</td>
    </tr>
<tr>
    <td><strong><code>billPay</code></strong></td><td>Bill Pay</td>
    </tr>
</table>

",
        "enum": [
          "ach",
          "sameDayAch",
          "domesticWireTransfer",
          "internationalWireTransfer",
          "internalTransfer",
          "externalTransfer",
          "billPay",
        ],
      },
      "CutoffTimes": {
        "docs": "A representation of financial institution cutoff times for different money movement processes. A money movement process can have multiple cutoff times. The cutoff times are sorted in ascending chronological order by money movement process.",
        "extends": [
          "AbstractBody",
        ],
        "properties": {
          "items": {
            "docs": "A list of cutoff times for a financial institution.",
            "type": "list<CutoffTime>",
          },
          "timeZoneId": {
            "docs": "The identifier of the time zone for which all of the \`items[].time\` are returned in.
The client can use this value to localize the \`items[].time\` values to the local time zone of the customer, as well as for formatting to localized names, such as \`EST\` and \`EDT\`.",
            "type": "TimeZoneId",
          },
        },
      },
      "DateRange": {
        "docs": "A date range, supporting inclusive or exclusive endpoints. Dates ranges use dates expressed in \`YYYY-MM-DD\` [RFC 3339](https://tools.ietf.org/html/rfc3339) \`date\` format. The value may have the following forms: <ul> <li>\`YYYY-MM-DD\` match the date exactly; equivalent to matching dates in the range \`[YYYY-MM-DD,YYYY-MM-DD]\`</li> <li>\`[YYYY-MM-DD,YYYY-MM-DD]\` between two dates, inclusive of the endpoints</li> <li>\`(YYYY-MM-DD,YYYY-MM-DD)\` between two dates, exclusive of the endpoints</li> <li>\`[YYYY-MM-DD,]\` on or after the date</li> <li>\`(YYYY-MM-DD,)\` after the date</li> <li>\`[,YYYY-MM-DD]\` before or on the date</li> <li>\`(,YYYY-MM-DD)\` before the date</li> </ul>",
        "type": "string",
      },
      "EligibleOverdraftAccountItem": {
        "docs": "An account that is eligible to be assigned as an overdraft protection account for another account.",
        "type": "OverdraftAccountFields",
      },
      "EligibleOverdraftAccounts": {
        "docs": "A page of zero or more accounts that are eligible to be assigned as an overdraft protection account for another account.",
        "extends": [
          "AbstractBody",
        ],
        "properties": {
          "items": "unknown",
          "limit": {
            "docs": "The number of items requested for this page response. The length of the \`items\` array may be less that \`limit\`.",
            "type": "integer",
          },
          "maximumOverdraftAccounts": {
            "docs": "The maximum number of overdraft protection accounts that may be linked to the account.",
            "type": "integer",
          },
          "nextPage_url": {
            "docs": "The URL of the next page of eligible accounts. If this URL is omitted, there are no more accounts.",
            "type": "optional<string>",
          },
          "start": {
            "docs": "The opaque cursor that specifies the starting location of this page of items.",
            "type": "optional<string>",
          },
        },
      },
      "ExternalAccountVerificationMethod": {
        "docs": "The method used to verify the customer has access to the external account.

<strong><code>externalAccountVerificationMethod</code></strong> strings may have one of the following
[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):

<table>
<tr>
  <th>Value</th><th>Description</th>
</tr>

<tr>
    <td><strong><code>instant</code></strong></td><td>Instant Account Verification: <p>Access to the external account is verified via integration with an account verification service provider.</p>
</td>
    </tr>
<tr>
    <td><strong><code>microDeposits</code></strong></td><td>Micro-Deposits: <p>Access to the external account is verified via verifying a set of micro-deposits.</p>
</td>
    </tr>
<tr>
    <td><strong><code>manual</code></strong></td><td>Manual: <p>Access to the external account is verified manually by the financial institution.</p>
</td>
    </tr>
</table>

",
        "enum": [
          "instant",
          "microDeposits",
          "manual",
        ],
      },
      "FullAccountNumber": {
        "docs": "A full account number. This is the number that the customer uses to reference the account within the financial institution.",
        "type": "string",
      },
      "FullAccountPermissions": {
        "docs": "Flags which indicate the permissions the current authorized user has on this account resource. Most of these properties may only be \`true\` for internal accounts. These permissions are available in [\`account\`](#schema-account) response from the [\`getAccount\`](#op-getAccount) operation. See [\`accountPermissions\`](#schema-accountPermissions) for the subset of permission in \`account.allows\` flags in the [\`listAccounts\`](#op-listAccounts) response.",
        "extends": [
          "AccountPermissions",
        ],
        "properties": {
          "manageJointOwners": {
            "docs": "If \`true\`, the customer can list the other joint owners on the account and invite new joint owners.",
            "type": "boolean",
          },
          "manageOverdraftAccounts": {
            "docs": "If \`true\`, the customer can list and manage overdraft account settings.",
            "type": "boolean",
          },
        },
      },
      "IncompleteAccountBalances": {
        "docs": "An array of account balances by account ID, some of which are incomplete. Use the values in \`incompleteAccounts\` and \`retryCount\` to retry the [\`listAccountBalances\`](#op-listAccountBalances) operation.",
        "extends": [
          "AbstractBody",
        ],
        "properties": {
          "incompleteAccounts": {
            "docs": "Pass these values as the \`?accounts=\` query parameter on the next retry of the [\`listAccountBalances\`](#op-listAccountBalances) operation. This value is empty if the client has reached the retry limit.",
            "type": "AccountIds",
          },
          "items": {
            "docs": "An array of items, one for each of the \`?accounts=\` in the request, returned in the same order.",
            "type": "list<AccountBalance>",
          },
          "retryCount": {
            "docs": "Pass this value as the as the \`?retryCount=\` parameter with the next retry of the [\`listAccountBalances\`](#op-listAccountBalances) operation.",
            "type": "integer",
          },
        },
      },
      "IncompleteTransactions": {
        "docs": "Response when requesting transactions that are not yet available.",
        "extends": [
          "AbstractBody",
        ],
        "properties": {
          "retryCount": {
            "docs": "Pass this value as the as the \`?retryCount=\` parameter with the next retry of the [\`listTransactions\`](#op-listTransactions) operation.",
            "type": "integer",
          },
        },
      },
      "InstitutionId": {
        "docs": "The unique immutable identifier of a financial institution.",
        "type": "string",
      },
      "InstitutionLocatorType": {
        "docs": "Indicates the type of the institution \`locator\`.

<strong><code>institutionLocatorType</code></strong> strings may have one of the following
[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):

<table>
<tr>
  <th>Value</th><th>Description</th>
</tr>

<tr>
    <td><strong><code>abaRoutingNumber</code></strong></td><td>ABA Routing Number: <p>The <a href="https://www.aba.com/about-us/routing-number">American Bankers Association routing number</a> of a financial institution</p>
</td>
    </tr>
<tr>
    <td><strong><code>swiftBicCode</code></strong></td><td>swiftBicCode: <p>The <a href="https://www.swift.com/standards/data-standards/bic-business-identifier-code">SWIFT Business Identifier Code (BIC) code</a> of a financial institution</p>
</td>
    </tr>
<tr>
    <td><strong><code>ibanAccountNumber</code></strong></td><td>IBAN: <p><a href="https://www.ecbs.org/iban.htm">International Bank Account Number (IBAN)</a></p>
</td>
    </tr>
</table>

",
        "enum": [
          "abaRoutingNumber",
          "swiftBicCode",
          "ibanAccountNumber",
        ],
      },
      "InstitutionLookupResult": {
        "docs": "Successful institution lookup result.",
        "extends": [
          "AbstractBody",
        ],
        "properties": {
          "found": {
            "docs": "\`true\` if a financial institution was found matching the requested FI locator, \`false\` if none was found.",
            "type": "boolean",
          },
          "institution": {
            "docs": "The name and other information about the financial institution, if found.",
            "type": "optional<SimpleInstitution>",
          },
          "intermediaryInstitutions": {
            "docs": "Optional intermediary institutions, if requested and if intermediary institutions are required for for international wire transfers to the beneficiary institution. This array is omitted if there none are required.",
            "type": "optional<list<SimpleInstitution>>",
          },
        },
      },
      "JointOwnerInvitation": {
        "docs": "A joint owner invitation.",
        "extends": [
          "AbstractBody",
          "JointOwnerInvitationFields",
        ],
        "properties": {
          "id": {
            "docs": "The unique ID of the invitation.",
            "type": "ReadOnlyResourceId",
          },
        },
      },
      "JointOwnerInvitationFields": {
        "docs": "Fields used to compose other joint owner invitation schemas.",
        "properties": {
          "disallowDebitCardAccess": {
            "docs": "If \`true\`, the invitee is not allowed to order or manage debit cards for the account.",
            "type": "optional<boolean>",
          },
          "emailAddress": {
            "docs": "The invitee's email address.",
            "type": "string",
          },
          "firstName": {
            "docs": "The invitee's first name.",
            "type": "string",
          },
          "lastName": {
            "docs": "The invitee's last name name.",
            "type": "string",
          },
          "sharedSecret": {
            "docs": "A string shared by the inviter with the invitee to verify their identity. This is not sent in the invitation. The inviter should share this string with the invitee though another channel.",
            "type": "string",
          },
          "taxId": {
            "docs": "The last 4 digits of the invitee's tax ID number (Social Security Number). This is not sent in the invitation email, but if the invitee enrolls in digital banking, this identification must match the last four digits of the tax ID they use to enroll.",
            "type": "optional<string>",
          },
        },
      },
      "MaskedAccountNumber": {
        "docs": "A masked account number: an asterisk \`*\` followed by one to four characters of the \`fullAccountNumber\`.",
        "type": "string",
      },
      "MonetaryValue": {
        "docs": "The monetary value, supporting only positive amounts. The numeric value is  represented as a string so that it can be exact with no loss of precision.<br>The schema \`monetaryValue\` was added on version \`0.4.0\` of the API.",
        "type": "string",
      },
      "OverdraftAccountFields": {
        "docs": "Fields of an overdraft protection account, used to compose other schemas.",
        "properties": {
          "id": {
            "docs": "The unique ID of the account resource. Use this as the \`{accountId}\` in [\`getAccount\`](#op-getAccount) or [\`listAccountBalances\`](#op-listAccountBalances).",
            "type": "optional<ResourceId>",
          },
          "label": {
            "docs": "The human-readable label for this account. This is either the \`nickname\` (if assigned for the current customer), or the \`product.label\` concatenated with the \`maskedNumber\`.",
            "type": "optional<string>",
          },
          "maskedNumber": "optional<MaskedAccountNumber>",
        },
      },
      "OverdraftAccountItem": {
        "docs": "An overdraft protection account linked to another protected account. The \`label\` and \`maskedNumber\` are informational only.",
        "type": "OverdraftAccountFields",
      },
      "OverdraftProtection": {
        "docs": "Representation of the overdraft protection settings, consisting of a list of overdraft protection accounts linked to the account identified by the \`{accountId}\`.",
        "extends": [
          "AbstractBody",
          "OverdraftProtectionFields",
        ],
        "properties": {
          "maximumOverdraftAccounts": {
            "docs": "The maximum number of overdraft protection accounts that may be linked to the account.",
            "type": "integer",
          },
        },
      },
      "OverdraftProtectionFields": {
        "docs": "Fields used to compose other overdraft protection schemas.",
        "properties": {
          "accounts": "optional<unknown>",
        },
      },
      "PositiveIntegerRange": {
        "docs": "A positive integer range, supporting inclusive or exclusive endpoints. The value may have the following forms: <ul> <li>\`1200\` match the integer 1,200 exactly</li> <li>\`[1000,1200)\` matches items where \`1000 <= number < 1200\`</li> <li>\`[1000,1199]\` matches items where\`1000 <= number <= 1199\`</li> <li>\`[999,1200]\` matches items where \`999 < number < 1200\`</li> <li>\`[1200,]\`  \`number >= 1200\`</li> <li>\`(1200,)\` greater than the value: \`number >= 1200\`</li> <li>\`[,1200]\` less than or equal to the value: \`number <= 1200\`</li> <li>\`(,1200)\` less than the value: \`number < 1200\`</li> </ul>",
        "type": "string",
      },
      "ProblemResponse": {
        "docs": "API problem or error response, as per [RFC 7807 application/problem+json](https://tools.ietf.org/html/rfc7807).",
        "extends": [
          "AbstractBody",
          "ApiProblem",
        ],
        "properties": {},
      },
      "ProductReference": {
        "docs": "A reference to a banking product.",
        "properties": {
          "code": {
            "docs": "The product's product code. Codes are unique to the financial institution.",
            "type": "string",
          },
          "description": {
            "docs": "A human-readable description of this banking product.",
            "type": "string",
          },
          "label": {
            "docs": "A human-readable label for this banking product.",
            "type": "string",
          },
          "type": {
            "docs": "The type of account.",
            "type": "ProductType",
          },
        },
      },
      "ProductType": {
        "docs": "The type (or category) of bank account.

<strong><code>productType</code></strong> strings may have one of the following
[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):

<table>
<tr>
  <th>Value</th><th>Description</th>
</tr>

<tr>
    <td><strong><code>savings</code></strong></td><td>Savings: <p>Savings Account</p>
</td>
    </tr>
<tr>
    <td><strong><code>checking</code></strong></td><td>Checking: <p>Checking Account</p>
</td>
    </tr>
<tr>
    <td><strong><code>cd</code></strong></td><td>CD: <p>Certificate of Deposit Account</p>
</td>
    </tr>
<tr>
    <td><strong><code>ira</code></strong></td><td>IRA: <p>Individual Retirement Account</p>
</td>
    </tr>
<tr>
    <td><strong><code>loan</code></strong></td><td>Loan: <p>Loan Account</p>
</td>
    </tr>
<tr>
    <td><strong><code>creditCard</code></strong></td><td>Credit Card: <p>Credit Card Account</p>
</td>
    </tr>
</table>

",
        "enum": [
          "savings",
          "checking",
          "cd",
          "ira",
          "loan",
          "creditCard",
        ],
      },
      "ReadOnlyResourceId": {
        "docs": "The unique, opaque system-assigned identifier for a resource. This case-sensitive ID is also used in URLs as path parameters or in other properties or parameters that reference a resource by ID rather than URL. Resource IDs are immutable.",
        "type": "ResourceId",
      },
      "ReadOnlyTimestamp": {
        "docs": "A readonly or derived timestamp (an instant in time) formatted in [RFC 3339](https://tools.ietf.org/html/rfc3339) \`date-time\` UTC format: \`YYYY-MM-DDThh:mm:ss.sssZ\`.<br>The schema \`readOnlyTimestamp\` was added on version \`0.4.0\` of the API.",
        "type": "datetime",
      },
      "RequiredIdentityChallenge": {
        "docs": "A request from the service for the user to verify their identity. This contains a challenge ID, the corresponding operation ID, and a list of challenge factors for identity verification. The user must complete one of these challenge factors to satisfy the challenge. This schema defines the attributes in the 401 [Unauthorized problem response](#schema-apiProblem) when the 401 problem type name is \`challengeRequired\`. See the "Challenge API" for details.",
        "properties": {
          "challengeId": {
            "docs": "The unique ID of this challenge instance. This is an opaque string. This is passed when starting a challenge factor or when validating the identity challenge responses.",
            "type": "ReadOnlyResourceId",
          },
          "factors": {
            "docs": "A list of challenge factors. The user must complete one of these challenge factors. The \`labels\` in each factor identify one or more channels the user may use, such as a list of email addresses the system may use to send a one-time passcode to the user. ***Note**: The same channel may be used by multiple factors in the array of factors. For example, the user's primary mobile phone number may be used for both an \`sms\` factor and a \`voice\` factor.",
            "type": "list<ChallengeFactor>",
          },
          "x-fern-sdk-method-name": {
            "docs": "The ID of the API operation for which the user must verify their identity. This is passed when starting a challenge factor or when validating the identity challenge responses.",
            "type": "ReadOnlyResourceId",
          },
        },
      },
      "ResourceId": {
        "docs": "The unique, opaque system identifier for a resource. This case-sensitive ID is also used as path parameters in URLs or in other properties or parameters that reference a resource by ID rather than URL.",
        "type": "string",
      },
      "SimpleInstitution": {
        "docs": "A simple representation of a financial institution.",
        "properties": {
          "address": {
            "docs": "The financial institution's postal mailing address.",
            "type": "Address",
          },
          "locator": {
            "docs": "The [American Bankers Association routing number](https://www.aba.com/about-us/routingnumber), [SWIFT Business Identifier Code (BIC) code](https://www.swift.com/standards/data-standards/bic-business-identifier-code), or [IBAN account number](https://www.ecbs.org/iban.htm) of the institution. The form of this institution locator string is set with the \`locatorType\` property.",
            "type": "string",
          },
          "locatorType": {
            "docs": "Indicates the type of this institution's \`locator\`.",
            "type": "InstitutionLocatorType",
          },
          "name": {
            "docs": "The financial institution's name.",
            "type": "string",
          },
        },
      },
      "TimeZoneId": {
        "docs": "The identifier of a time zone, as described by [RFC 7808](https://datatracker.ietf.org/doc/html/rfc7808.html#section-3.6). This value corresponds with the \`tzid\` value described in [RFC 5545](https://datatracker.ietf.org/doc/html/rfc5545#section-3.2.19) and defined by the [IANA Time Zone Database](https://www.iana.org/time-zones).",
        "type": "string",
      },
      "TimestampFields": {
        "docs": "Timestamps which describe when a resource was created or last updated.",
        "properties": {
          "createdAt": {
            "docs": "The date-time when this resource was created, in [RFC 3339](https://tools.ietf.org/html/rfc3339) date-time \`YYYY-MM-DDThh:mm:ss.sssZ\` format, UTC. This is derived and immutable.",
            "type": "optional<datetime>",
          },
          "updatedAt": {
            "docs": "The date-time when the resource was last updated, in [RFC 3339](https://tools.ietf.org/html/rfc3339) date-time \`YYYY-MM-DDThh:mm:ss.sssZ\` format, UTC. This is derived and immutable.",
            "type": "optional<datetime>",
          },
        },
      },
      "TransactionCategories": {
        "docs": undefined,
        "properties": {
          "items": {
            "docs": "An array containing transaction category items.",
            "type": "list<TransactionCategory>",
          },
        },
      },
      "TransactionCategorization": {
        "docs": "The transaction categorization.",
        "properties": {
          "id": {
            "docs": "The unique ID of this transaction's category.",
            "type": "string",
          },
          "label": "TransactionCategoryLabel",
        },
      },
      "TransactionCategory": {
        "docs": "Representation of transaction category resources.",
        "extends": [
          "AbstractBody",
          "TransactionCategorization",
        ],
        "properties": {
          "type": "TransactionCategoryType",
        },
      },
      "TransactionCategoryLabel": {
        "docs": "The label of a transaction category, such as \`"Shopping"\`, \`"Deposit"\`, \`"Bill"\`, \`"Transfer"\`, or \`"Other"\`.",
        "type": "string",
      },
      "TransactionCategoryType": {
        "docs": "Classifies a transaction category as applying to either debit or credit transactions.

<strong><code>transactionCategoryType</code></strong> strings may have one of the following
[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):

<table>
<tr>
  <th>Value</th><th>Description</th>
</tr>

<tr>
    <td><strong><code>credit</code></strong></td><td>Credit: <p>This transaction category applies to credit (expense) transactions.</p>
</td>
    </tr>
<tr>
    <td><strong><code>debit</code></strong></td><td>Debit: <p>This transaction category applies to debit (income) transactions.</p>
</td>
    </tr>
</table>

",
        "enum": [
          "credit",
          "debit",
        ],
      },
      "TransactionCheck": {
        "docs": "Describes a check associated with a transaction for a checking account. This object is only present if the transaction \`type\` is \`debit\` and the \`subtype\` is \`check\`.",
        "properties": {
          "imageBack_url": {
            "docs": "The URL for downloading the image of the front of the check.",
            "type": "optional<string>",
          },
          "imageFront_url": {
            "docs": "The URL for downloading the image of the front of the check.",
            "type": "optional<string>",
          },
          "number": {
            "docs": "The check number.",
            "type": "integer",
          },
        },
      },
      "TransactionFields": {
        "docs": "Common fields of the transaction resource used to build other model schemas.",
        "properties": {
          "amount": {
            "docs": "The transaction amount in dollars. This value is negative if the transaction is a debit and positive if it is a credit.",
            "type": "CreditOrDebitValue",
          },
          "balance": {
            "docs": "The account's running current balance as of this transaction. The \`balance\` may be omitted if the request includes filters which preclude the inclusion of a running balance.",
            "type": "optional<CreditOrDebitValue>",
          },
          "category": {
            "docs": "The transaction category, if assigned.",
            "type": "optional<TransactionCategorization>",
          },
          "check": "optional<TransactionCheck>",
          "createdOn": {
            "docs": "The date when the transaction occurred in \`YYYY-MM-DD\` [RFC 3339](https://tools.ietf.org/html/rfc3339) \`date\` format. This is derived and immutable.<br>**Warning**: The property \`createdOn\` was deprecated on version \`v2.1.0\` of the schema. Use the \`occurredOn\` property instead. \`createdOn\` will be removed on version \`v3.0.0\` of the schema.",
            "type": "optional<string>",
          },
          "description": {
            "docs": "The transaction description assigned by the transaction cleansing service.",
            "type": "optional<string>",
          },
          "id": {
            "docs": "This transaction's unique identifier.",
            "type": "string",
          },
          "memo": {
            "docs": "The user-settable transaction memo.",
            "type": "optional<string>",
          },
          "merchant": "optional<TransactionMerchant>",
          "occurredOn": {
            "docs": "The date of the transaction in \`YYYY-MM-DD\` [RFC 3339](https://tools.ietf.org/html/rfc3339) \`date\` format. This is derived and immutable.",
            "type": "string",
          },
          "posted": {
            "docs": "If \`true\`, the transaction has been posted (cleared) and applied to the account. If \`false\`, the transaction is still pending and might be canceled. \`posted\` is only valid for credit and debit transactions and omitted for balance transactions.",
            "type": "optional<boolean>",
          },
          "postedOn": {
            "docs": "The date when this transaction was posted (cleared and applied to the account balance) in [RFC 3339](https://tools.ietf.org/html/rfc3339) date \`YYYY-MM-DD\` format, UTC. This is derived and immutable and only present if \`posted\` is \`true\`.<br>**Warning**: The property \`postedOn\` was deprecated on version \`v2.1.0\` of the schema. Use the \`occurredOn\` property instead. \`postedOn\` will be removed on version \`v3.0.0\` of the schema.",
            "type": "optional<string>",
          },
          "subtype": {
            "docs": "The transaction's kind of debit or credit.",
            "type": "TransactionSubType",
          },
          "type": {
            "docs": "The transaction type. If the \`type\` is \`debit\` or \`credit\`, the \`subtype\` conveys further transaction type details.",
            "type": "TransactionType",
          },
        },
      },
      "TransactionItem": {
        "docs": "Summary representation of a transaction resource in transactions collections.",
        "extends": [
          "AbstractBody",
          "TransactionFields",
        ],
        "properties": {},
      },
      "TransactionMerchant": {
        "docs": "Describes the merchant associated with a transaction.",
        "properties": {
          "logo_url": {
            "docs": "The optional URL of the merchant's logo. This image must be an image resource (SVG, PNG, GIF, JPEG image) that does not require any authentication. The URL may contain query parameters.",
            "type": "optional<string>",
          },
          "name": {
            "docs": "The merchant\\'s name.",
            "type": "optional<string>",
          },
          "website_url": {
            "docs": "The merchant's website URL.",
            "type": "optional<string>",
          },
        },
      },
      "TransactionSubType": {
        "docs": "If the type is \`debit\` or \`credit\`, the subtype conveys further transaction type details.

<strong><code>transactionSubType</code></strong> strings may have one of the following
[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):

<table>
<tr>
  <th>Value</th><th>Description</th>
</tr>

<tr>
    <td><strong><code>check</code></strong></td><td>Check: <p>A check drawn from a checking account.</p>
</td>
    </tr>
<tr>
    <td><strong><code>other</code></strong></td><td>Other: <p>Some other transaction type.</p>
</td>
    </tr>
</table>

",
        "enum": [
          "check",
          "other",
        ],
      },
      "TransactionType": {
        "docs": "Distinguishes between balance, debit, or credit transactions.

<strong><code>transactionType</code></strong> strings may have one of the following
[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):

<table>
<tr>
  <th>Value</th><th>Description</th>
</tr>

<tr>
    <td><strong><code>balance</code></strong></td><td>Balance: <p>A pseudo-transaction that conveys the account balance.</p>
</td>
    </tr>
<tr>
    <td><strong><code>debit</code></strong></td><td>Debit: <p>A debit against the account.</p>
</td>
    </tr>
<tr>
    <td><strong><code>credit</code></strong></td><td>Credit: <p>A credit transaction.</p>
</td>
    </tr>
</table>

",
        "enum": [
          "balance",
          "debit",
          "credit",
        ],
      },
      "Transactions": {
        "docs": "Collection of transactions. The items in the collection are ordered in the \`items\` array. The response object may contain the \`nextPage_url\` pagination link.",
        "extends": [
          "AbstractPagedBody",
        ],
        "properties": {
          "count": {
            "docs": "The total number of transactions which satisfy the request filters. This is optional and only included if the service can calculate it.",
            "type": "optional<integer>",
          },
          "items": {
            "docs": "An array containing a page of transaction items.",
            "type": "optional<list<TransactionItem>>",
          },
        },
      },
      "Transfer": {
        "docs": "Representation of a transfer resource.",
        "extends": [
          "AbstractBody",
          "TransferItem",
        ],
        "properties": {},
      },
      "TransferAccountReference": {
        "docs": "A reference to a banking account used within an account to account transfer. This object may be set from an account's \`account.reference\` object.",
        "properties": {
          "id": {
            "docs": "The unique ID of a banking account.",
            "type": "ResourceId",
          },
          "label": {
            "docs": "The human-readable label for this account. This is either the \`nickname\` (if assigned for the current customer), or the \`product.label\` concatenated with the \`maskedNumber\`.",
            "type": "optional<string>",
          },
          "location": {
            "docs": "Indicates where an account is held.",
            "type": "optional<AccountLocation>",
          },
          "type": {
            "docs": "The product type of the account.",
            "type": "optional<ProductType>",
          },
        },
      },
      "TransferDateRestriction": {
        "docs": "A date where a transfer restriction occurs, and the \`reason\` it is restricted. If the \`reason\` is \`holiday\`, \`closure\` and the transfer is an ACH transfer, the object also contains either a \`debitOn\` or \`creditOn\` date or both.",
        "properties": {
          "creditOn": {
            "docs": "The date the local financial institution account is credited in [RFC 3339 \`YYYY-MM-DD\`](https://tools.ietf.org/html/rfc3339) date format. This is derived from the \`date\` based on the \`risk\` level. The credit-on date normally falls one business day after the restricted \`date\`. This property is only returned if the payment \`type\` is \`achDebit\` or \`ach\`.",
            "type": "optional<string>",
          },
          "debitOn": {
            "docs": "The date the local financial institution account is debited in [RFC 3339 \`YYYY-MM-DD\`](https://tools.ietf.org/html/rfc3339) date format. This is derived from the \`date\` based on the \`risk\` level and the transfer direction (\`achDebit\` or \`achCredit\`). The debit-on date normally falls one to three business days before the restricted \`date\`. This property is only returned if the payment \`type\` is \`achCredit\` or \`ach\`.",
            "type": "optional<string>",
          },
          "occursOn": {
            "docs": "The date that a transfers restriction occurs, is in the [ISO 8601 Date](https://en.wikipedia.org/wiki/ISO_8601#Calendar_dates) format, \`yyyy-mm-dd\`.",
            "type": "string",
          },
          "reason": {
            "docs": "Indicates why this date is restricted.",
            "type": "TransferDateRestrictionType",
          },
        },
      },
      "TransferDateRestrictionType": {
        "docs": "Indicates why a transfer date is restricted.

<strong><code>transferDateRestrictionType</code></strong> strings may have one of the following
[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):

<table>
<tr>
  <th>Value</th><th>Description</th>
</tr>

<tr>
    <td><strong><code>pastDate</code></strong></td><td>Past Date: <p>The transfer date is in the past</p>
</td>
    </tr>
<tr>
    <td><strong><code>pastCutoffTime</code></strong></td><td>Past Cutoff Time: <p>Transfers disallowed because the current time is past the financial institutions&#39; cutoff time</p>
</td>
    </tr>
<tr>
    <td><strong><code>riskRestricted</code></strong></td><td>Risk Restricted: <p>The date is restricted because the risk level requires one or more days for a debit to clear</p>
</td>
    </tr>
<tr>
    <td><strong><code>holiday</code></strong></td><td>Holiday: <p>A <a href="https://www.federalreserve.gov/aboutthefed/k8.htm">Federal Reserve System observed holiday</a></p>
</td>
    </tr>
<tr>
    <td><strong><code>closure</code></strong></td><td>Closure: <p>Financial institution closure, such as a weekend or other planned closure</p>
</td>
    </tr>
<tr>
    <td><strong><code>other</code></strong></td><td>Other: <p>Other</p>
</td>
    </tr>
</table>

",
        "enum": [
          "pastDate",
          "pastCutoffTime",
          "riskRestricted",
          "holiday",
          "closure",
          "other",
        ],
      },
      "TransferDateRestrictions": {
        "docs": "A list of the financial institution's transfer date restrictions. This is a list of weekdays and specific dates when the institution cannot perform the requested transfers.
The response may include dates prior to requested the start date, as that is useful for populating a calendar that shows the current month and the last few days of the previous month.",
        "extends": [
          "AbstractBody",
        ],
        "properties": {
          "accuracyEndsOn": {
            "docs": "The service only knows [bank holidays](https://www.federalreserve.gov/aboutthefed/k8.htm) for about two to four years in advance. This date is the end of that known holiday schedule, although the requested dates may extend well beyond this date. Any dates in the response beyond this date may omit holidays but may include other restricted dates based on the financial institution's normal scheduled closures such as Saturdays and Sundays.",
            "type": "optional<string>",
          },
          "restrictedDates": {
            "docs": "A list of restricted transfer dates as determined by the requested transfer parameters, holidays, and scheduled closures. This includes dates that correspond to normal day-of-week restrictions as listed in \`restrictedDays\`.",
            "type": "optional<list<TransferDateRestriction>>",
          },
        },
      },
      "TransferFields": {
        "docs": "Common fields of the transfer resource used to build other model schemas.",
        "properties": {
          "amount": {
            "docs": "The amount of money to transfer between accounts.",
            "type": "optional<MonetaryValue>",
          },
          "memo": {
            "docs": "A customer-defined memo to describe the transfer.",
            "type": "optional<string>",
          },
          "sourceAccount": {
            "docs": "The source account where the funds are withdrawn.",
            "type": "optional<TransferAccountReference>",
          },
          "targetAccount": {
            "docs": "The target account where the funds are deposited.",
            "type": "optional<TransferAccountReference>",
          },
        },
      },
      "TransferFrequency": {
        "docs": "For recurring transfers, the interval at which the money movement recurs.

<strong><code>transferFrequency</code></strong> strings may have one of the following
[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):

<table>
<tr>
  <th>Value</th><th>Description</th>
</tr>

<tr>
    <td><strong><code>once</code></strong></td><td>Once: <p>Transfer does not repeat</p>
</td>
    </tr>
<tr>
    <td><strong><code>occasional</code></strong></td><td>Occasional: <p>Transfer recurs but without a new scheduled date</p>
</td>
    </tr>
<tr>
    <td><strong><code>daily</code></strong></td><td>Daily: <p>Repeat daily on business days</p>
</td>
    </tr>
<tr>
    <td><strong><code>weekly</code></strong></td><td>Weekly: <p>Repeat weekly</p>
</td>
    </tr>
<tr>
    <td><strong><code>biweekly</code></strong></td><td>biweekly: <p>Repeat every two weeks (26 times a year)</p>
</td>
    </tr>
<tr>
    <td><strong><code>semimonthly</code></strong></td><td>Semimonthly: <p>Repeat twice a month (24 times a year)</p>
</td>
    </tr>
<tr>
    <td><strong><code>monthly</code></strong></td><td>Monthly: <p>Repeat monthly</p>
</td>
    </tr>
<tr>
    <td><strong><code>monthlyFirstDay</code></strong></td><td>Monthly First Day: <p>Repeat on the first business day of the month</p>
</td>
    </tr>
<tr>
    <td><strong><code>monthlyLastDay</code></strong></td><td>Monthly Last Day: <p>Repeat on the last business day of the month</p>
</td>
    </tr>
<tr>
    <td><strong><code>bimonthly</code></strong></td><td>Bimonthly: <p>Repeat every other month</p>
</td>
    </tr>
<tr>
    <td><strong><code>quarterly</code></strong></td><td>Quarterly: <p>Repeat quarterly (four times a year)</p>
</td>
    </tr>
<tr>
    <td><strong><code>semiyearly</code></strong></td><td>Semiyearly: <p>Repeat every six months (twice a year)</p>
</td>
    </tr>
<tr>
    <td><strong><code>yearly</code></strong></td><td>Yearly: <p>Repeat once every year</p>
</td>
    </tr>
</table>

",
        "enum": [
          "once",
          "occasional",
          "daily",
          "weekly",
          "biweekly",
          "semimonthly",
          "monthly",
          "monthlyFirstDay",
          "monthlyLastDay",
          "bimonthly",
          "quarterly",
          "semiyearly",
          "yearly",
        ],
      },
      "TransferItem": {
        "docs": "Summary representation of a transfer resource in transfers collections. To fetch the full representation of this transfer, use the [\`getTransfer\`](#op-getTransfer) operation, passing this item's \`id\` field as the \`transferId\` path parameter.",
        "extends": [
          "TransferFields",
          "TimestampFields",
        ],
        "properties": {
          "id": {
            "docs": "The unique identifier for this transfer resource. This is an immutable opaque string.",
            "type": "ReadOnlyResourceId",
          },
          "processedAt": {
            "docs": "The date/time the transfer was processed.",
            "type": "optional<datetime>",
          },
          "schedule": {
            "docs": "When the transfer should occur and any recurrence.",
            "type": "TransferItemSchedule",
          },
          "state": {
            "docs": "The state of this transfer resource.",
            "type": "TransferState",
          },
          "updatedBy": {
            "docs": "The full name of the banking customer who last updated the transfer.",
            "type": "optional<string>",
          },
        },
      },
      "TransferItemSchedule": {
        "docs": "A transfer's schedule: when the transfer is scheduled, its recurrence properties, and derived credit and debit dates.",
        "extends": [
          "TransferSchedule",
        ],
        "properties": {
          "creditsOn": {
            "docs": "The effective the transfer is scheduled to credit the target account, in \`YYYY-MM-DD\` [RFC 3339](https://tools.ietf.org/html/rfc3339) \`date\` format. This is derived from the \`scheduledOn\` date, based on the financial institution's transfer rules.",
            "type": "optional<string>",
          },
          "debitsOn": {
            "docs": "The effective date the transfer is scheduled to debit the source account, in \`YYYY-MM-DD\` [RFC 3339](https://tools.ietf.org/html/rfc3339) \`date\` format. This is derived from the \`scheduledOn\` date, based on the financial institution's transfer rules.",
            "type": "optional<string>",
          },
        },
      },
      "TransferRecurrenceType": {
        "docs": "Describes whether the transfer amount in the transfer varies or is fixed when the transfer recurs. This is ignored if the transfer frequency is \`once\`.

<strong><code>transferRecurrenceType</code></strong> strings may have one of the following
[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):

<table>
<tr>
  <th>Value</th><th>Description</th>
</tr>

<tr>
    <td><strong><code>fixed</code></strong></td><td>Fixed: <p>The transfer amounts are the same each time a transfer recurs</p>
</td>
    </tr>
<tr>
    <td><strong><code>variable</code></strong></td><td>Variable: <p>The transfer amounts vary and must be entered/verified each time a transfer recurs</p>
</td>
    </tr>
</table>

",
        "enum": [
          "fixed",
          "variable",
        ],
      },
      "TransferSchedule": {
        "docs": "The scheduled date when the transfer should be completed, the recurrence, if any, and other derived dates based on the scheduled date.

For recurring transfer schedules, \`endsOn\`, \`count\`, and \`amountLimit\` are mutually exclusive.",
        "properties": {
          "amountLimit": {
            "docs": "For recurring schedules (\`frequency\` is not \`once\`), this is the total dollar amount limit including the first transfer. No transfers are scheduled if they would exceed this amount. This property is ignored if \`frequency\` is \`once\`.",
            "type": "optional<MonetaryValue>",
          },
          "count": {
            "docs": "For recurring schedules (\`frequency\` is not \`once\`), this is the total number of transfers to make, including the first transfer. This property is ignored if \`frequency\` is \`once\`.",
            "type": "optional<integer>",
          },
          "endsOn": {
            "docs": "The optional date when the recurring transfer schedule ends, in \`YYYY-MM-DD\` [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. Subsequent recurring transfers may be scheduled up to and including this date, but not after. This property is ignored if \`frequency\` is \`once\`.",
            "type": "optional<string>",
          },
          "frequency": "TransferFrequency",
          "recurrenceType": "optional<TransferRecurrenceType>",
          "scheduledOn": {
            "docs": "The date the the customer scheduled the transfer to occur in \`YYYY-MM-DD\` [RFC 3339](https://tools.ietf.org/html/rfc3339) \`date\` format.",
            "type": "optional<string>",
          },
        },
      },
      "TransferScheduleDirection": {
        "docs": "Provides the direction in which a transfer flows.

<strong><code>transferScheduleDirection</code></strong> strings may have one of the following
[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):

<table>
<tr>
  <th>Value</th><th>Description</th>
</tr>

<tr>
    <td><strong><code>debit</code></strong></td><td>Debit: <p>Money is transferred from a payer to the financial institution</p>
</td>
    </tr>
<tr>
    <td><strong><code>credit</code></strong></td><td>Credit: <p>Money is transferred from the financial institution to a payee</p>
</td>
    </tr>
<tr>
    <td><strong><code>both</code></strong></td><td>Both: <p>Money is transferred both to and from a payee/payer</p>
</td>
    </tr>
</table>

",
        "enum": [
          "debit",
          "credit",
          "both",
        ],
      },
      "TransferScheduleItem": {
        "docs": "Summary representation of a transfer schedule resource in transfer schedule list.",
        "properties": {
          "effectiveOn": {
            "docs": "The effective date of the recurrence in \`YYYY-MM-DD\` [RFC 3339](https://tools.ietf.org/html/rfc3339) date format. When the effective date differs from the scheduled date, it is due to a banking holiday, weekend, or other non-business day. The date is adjusted to before the scheduled date when the transfer direction is \`credit\` and adjusted to after the scheduled date when the transfer direction is \`debit\`.",
            "type": "string",
          },
          "scheduledOn": {
            "docs": "The scheduled date of the calculated calendar recurrence in \`YYYY-MM-DD\` [RFC 3339](https://tools.ietf.org/html/rfc3339) date format.",
            "type": "string",
          },
        },
      },
      "TransferSchedules": {
        "docs": "List of transfer methods. The items in the list are ordered in the \`items\` array.",
        "extends": [
          "AbstractBody",
        ],
        "properties": {
          "items": {
            "docs": "An array containing upcoming transfer schedule items.",
            "type": "list<TransferScheduleItem>",
          },
        },
      },
      "TransferState": {
        "docs": "The state of a transfer resource.

<strong><code>transferState</code></strong> strings may have one of the following
[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):

<table>
<tr>
  <th>Value</th><th>Description</th>
</tr>

<tr>
    <td><strong><code>unscheduled</code></strong></td><td>Unscheduled: <p>A transfer which is not ready to be queued for processing</p>
</td>
    </tr>
<tr>
    <td><strong><code>pendingApproval</code></strong></td><td>Pending Approval: <p>A transfer which is awaiting approval before it can be queued for processing</p>
</td>
    </tr>
<tr>
    <td><strong><code>scheduled</code></strong></td><td>Scheduled: <p>A transfer which has been queued for processing</p>
</td>
    </tr>
<tr>
    <td><strong><code>processing</code></strong></td><td>Processing: <p>A transfer which is being processed</p>
</td>
    </tr>
<tr>
    <td><strong><code>processed</code></strong></td><td>Processed: <p>A transfer which has completed processing</p>
</td>
    </tr>
<tr>
    <td><strong><code>failed</code></strong></td><td>Failed: <p>A transfer which has cannot be processed or failed while processing</p>
</td>
    </tr>
<tr>
    <td><strong><code>other</code></strong></td><td>Other: <p>A transfer which is in some other state</p>
</td>
    </tr>
</table>

",
        "enum": [
          "unscheduled",
          "pendingApproval",
          "scheduled",
          "processing",
          "processed",
          "failed",
          "other",
        ],
      },
      "TransferTypeForDateRestrictions": {
        "docs": "Indicates the type of transfer. This determines what business rules and adjustments to make to the date restrictions.

<strong><code>transferTypeForDateRestrictions</code></strong> strings may have one of the following
[enumerated values](https://dx.apiture.com/docs/api-documentation/concepts/label-groups#enumerations):

<table>
<tr>
  <th>Value</th><th>Description</th>
</tr>

<tr>
    <td><strong><code>internal</code></strong></td><td>Internal: <p>Internal account to internal account transfer</p>
</td>
    </tr>
<tr>
    <td><strong><code>ach</code></strong></td><td>ACH: <p>An ACH transfer that includes both debit and credit transfers</p>
</td>
    </tr>
<tr>
    <td><strong><code>achCredit</code></strong></td><td>ACH Credit: <p>An ACH transfer debiting an internal account and crediting an external account</p>
</td>
    </tr>
<tr>
    <td><strong><code>achDebit</code></strong></td><td>ACH Debit: <p>An ACH transfer debiting an external account and crediting an internal account</p>
</td>
    </tr>
<tr>
    <td><strong><code>domesticWireTransfer</code></strong></td><td>Domestic Wire Transfer</td>
    </tr>
<tr>
    <td><strong><code>internationalWireTransfer</code></strong></td><td>International Wire Transfer</td>
    </tr>
</table>

",
        "enum": [
          "internal",
          "ach",
          "achDebit",
          "achCredit",
          "domesticWireTransfer",
          "internationalWireTransfer",
        ],
      },
      "Transfers": {
        "docs": "Collection of transfers. The items in the collection are ordered in the \`items\` array. The response object may contain the \`nextPage_url\` pagination link..",
        "extends": [
          "AbstractPagedBody",
        ],
        "properties": {
          "count": {
            "docs": "The number of transfers that meet the filters in the \`listTransfers\` operation. This is optional and only included if the service can calculate it efficiently.",
            "type": "optional<integer>",
          },
          "items": {
            "docs": "An array containing a page of transfer items.",
            "type": "list<TransferItem>",
          },
        },
      },
      "WireTransferInstitution": {
        "docs": "A representation of a financial institution used for wire transfers.",
        "extends": [
          "SimpleInstitution",
        ],
        "properties": {
          "localClearingCode": {
            "docs": "The clearing code used to identify the financial institution for select countries.",
            "type": "optional<string>",
          },
        },
      },
    },
  },
  "rootApiFile": {
    "auth": "apiKey",
    "auth-schemes": {
      "BearerAuthScheme": {
        "scheme": "bearer",
      },
      "apiKey": {
        "header": "API-Key",
        "name": "apiKey",
        "type": "string",
      },
    },
    "default-environment": "Default",
    "display-name": "Apiture Digital Banking",
    "environments": {
      "Default": "https://api.apiture.com/banking",
    },
    "error-discrimination": {
      "strategy": "status-code",
    },
    "name": "api",
  },
}
`;
