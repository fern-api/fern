// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as core from "../../../../core/index.js";
import * as errors from "../../../../errors/index.js";
import * as SeedApi from "../../../index.js";

export declare namespace Imdb {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Imdb {
    protected readonly _options: Imdb.Options;

    constructor(_options: Imdb.Options) {
        this._options = _options;
    }

    /**
     * Add a movie to the database using the movies/* /... path.
     *
     * @param {SeedApi.CreateMovieRequestBody} request
     * @param {Imdb.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.imdb.createMovie({
     *         "x-service-header": "x-service-header",
     *         body: {
     *             title: "title",
     *             rating: 1.1
     *         }
     *     })
     */
    public createMovie(
        request: SeedApi.CreateMovieRequestBody,
        requestOptions?: Imdb.RequestOptions,
    ): core.HttpResponsePromise<SeedApi.MovieId> {
        return core.HttpResponsePromise.fromPromise(this.__createMovie(request, requestOptions));
    }

    private async __createMovie(
        request: SeedApi.CreateMovieRequestBody,
        requestOptions?: Imdb.RequestOptions,
    ): Promise<core.WithRawResponse<SeedApi.MovieId>> {
        const { "x-service-header": xServiceHeader, body: _body } = request;
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ "x-service-header": xServiceHeader }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/movies/create-movie",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: _body,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedApi.MovieId, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedApiTimeoutError("Timeout exceeded when calling POST /movies/create-movie.");
            case "unknown":
                throw new errors.SeedApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {SeedApi.MovieId} movieId
     * @param {SeedApi.GetMovieRequest} request
     * @param {Imdb.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SeedApi.MovieDoesNotExistError}
     *
     * @example
     *     await client.imdb.getMovie("movieId", {
     *         "x-service-header": "x-service-header"
     *     })
     */
    public getMovie(
        movieId: SeedApi.MovieId,
        request: SeedApi.GetMovieRequest,
        requestOptions?: Imdb.RequestOptions,
    ): core.HttpResponsePromise<SeedApi.Movie> {
        return core.HttpResponsePromise.fromPromise(this.__getMovie(movieId, request, requestOptions));
    }

    private async __getMovie(
        movieId: SeedApi.MovieId,
        request: SeedApi.GetMovieRequest,
        requestOptions?: Imdb.RequestOptions,
    ): Promise<core.WithRawResponse<SeedApi.Movie>> {
        const { "x-service-header": xServiceHeader } = request;
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ "x-service-header": xServiceHeader }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                `/movies/${encodeURIComponent(movieId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedApi.Movie, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new SeedApi.MovieDoesNotExistError(
                        _response.error.body as SeedApi.MovieId,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SeedApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedApiTimeoutError("Timeout exceeded when calling GET /movies/{movieId}.");
            case "unknown":
                throw new errors.SeedApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {SeedApi.ListMoviesRequest} request
     * @param {Imdb.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.imdb.listMovies({
     *         "x-service-header": "x-service-header"
     *     })
     */
    public listMovies(
        request: SeedApi.ListMoviesRequest,
        requestOptions?: Imdb.RequestOptions,
    ): core.HttpResponsePromise<SeedApi.Movie[]> {
        return core.HttpResponsePromise.fromPromise(this.__listMovies(request, requestOptions));
    }

    private async __listMovies(
        request: SeedApi.ListMoviesRequest,
        requestOptions?: Imdb.RequestOptions,
    ): Promise<core.WithRawResponse<SeedApi.Movie[]>> {
        const { "x-service-header": xServiceHeader } = request;
        const _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ "x-service-header": xServiceHeader }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)),
                "/movies/",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as SeedApi.Movie[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SeedApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SeedApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SeedApiTimeoutError("Timeout exceeded when calling GET /movies/.");
            case "unknown":
                throw new errors.SeedApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
