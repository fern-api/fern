/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio, Pdf, Video, FunctionLog } from
"@boundaryml/baml"
import { toBamlError, HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type * as types from "./types"
import type {DiffAnalysisResult, VersionBump} from "./types"
import type TypeBuilder from "./type_builder"
import type * as events from "./events"

type TickReason = "Unknown";

type BamlCallOptions<EventsT = never> = {
tb?: TypeBuilder
clientRegistry?: ClientRegistry
env?: Record<string, string | undefined>
  onTick?: (reason: TickReason, log: FunctionLog | null) => void
  events?: EventsT
  }

  export class AsyncHttpRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  async AnalyzeSdkDiff(
  git_diff: string,
  __baml_options__?: BamlCallOptions<never>
  ): Promise<HTTPRequest> {
    try {
    const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
    const env: Record<string, string> = Object.fromEntries(
      Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
      );
      return await this.runtime.buildRequest(
      "AnalyzeSdkDiff",
      {
      "git_diff": git_diff
      },
      this.ctxManager.cloneContext(),
      __baml_options__?.tb?.__tb(),
      __baml_options__?.clientRegistry,
      false,
      env
      )
      } catch (error) {
      throw toBamlError(error);
      }
      }
      
      }

      export class AsyncHttpStreamRequest {
      constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

      
      async AnalyzeSdkDiff(
      git_diff: string,
      __baml_options__?: BamlCallOptions<never>
      ): Promise<HTTPRequest> {
        try {
        const rawEnv = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
        const env: Record<string, string> = Object.fromEntries(
          Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [string, string][]
          );
          return await this.runtime.buildRequest(
          "AnalyzeSdkDiff",
          {
          "git_diff": git_diff
          },
          this.ctxManager.cloneContext(),
          __baml_options__?.tb?.__tb(),
          __baml_options__?.clientRegistry,
          true,
          env
          )
          } catch (error) {
          throw toBamlError(error);
          }
          }
          
          }