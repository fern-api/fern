import { IntermediateRepresentation } from "@fern-api/ir-sdk";
import { v4 as uuidv4 } from "uuid";


import { injectAutogeneratedExamples, generateEndpointV1Example } from "@fern-api/ir-utils";


export interface WireMockStubMapping {
    mappings: unknown[];
    meta?: {
        total: number;
    };
}

interface WireMockMapping {
    id: string;
    name: string;
    request: {
        urlPathTemplate: string;
        method: string;
        pathParameters?: Record<string, { equalTo: string }>;
        formParameters?: Record<string, unknown>;
    };
    response: {
        status: number;
        body: string;
        headers: Record<string, string>;
    };
    uuid: string;
    persistent: boolean;
    priority?: number;
    metadata: {
        mocklab: {
            created: {
                at: string;
                via: string;
            };
        };
    };
    postServeActions?: unknown[];
}

interface WireMockFile {
    mappings: WireMockMapping[];
    meta?: {
        total: number;
    };
}


export function convertToWireMock(ir: IntermediateRepresentation): WireMockStubMapping {
    const mappings: WireMockMapping[] = [];

    // Iterate through all services and their endpoints
    for (const service of Object.values(ir.services)) {
        for (const endpoint of service.endpoints) {
            // Process user-specified examples
            for (const exampleWrapper of endpoint.userSpecifiedExamples) {
                const example = exampleWrapper.example;
                const mapping = convertExampleToMapping(ir, service, endpoint, example);
                if (mapping) {
                    mappings.push(mapping);
                }
            }

            // Optionally process autogenerated examples
            for (const exampleWrapper of endpoint.autogeneratedExamples) {
                const example = exampleWrapper.example;
                const mapping = convertExampleToMapping(ir, service, endpoint, example);
                if (mapping) {
                    mappings.push(mapping);
                }
            }
        }
    }

    const wiremockFile: WireMockFile = {
        mappings,
        meta: {
            total: mappings.length
        }
    };

    return wiremockFile
}

function convertExampleToMapping(
    ir: IntermediateRepresentation,
    service: any,
    endpoint: any,
    example: any
): WireMockMapping | null {
    const uuid = uuidv4();

    // Build URL path template
    const urlPathTemplate = buildUrlPathTemplate(endpoint);

    // Extract path parameters from example
    const pathParameters: Record<string, { equalTo: string }> = {};
    for (const param of example.endpointPathParameters || []) {
        const paramValue = extractExampleValue(param.value);
        if (paramValue !== null) {
            const paramName = param.name?.originalName || param.name?.name?.originalName;
            if (paramName) {
                pathParameters[paramName] = { equalTo: String(paramValue) };
            }
        }
    }

    // Determine response status and body
    let status = 200;
    let bodyObj: any = null;

    if (example.response) {
        if (example.response.type === "ok") {
            status = 200;
            if (example.response.value?.type === "body" && example.response.value.value) {
                bodyObj = example.response.value.value.jsonExample;
            }
        } else if (example.response.type === "error") {
            // Extract status code from error
            const errorName = example.response.error?.name?.originalName;
            if (errorName === "NotFoundError") {
                status = 404;
            } else if (errorName === "InternalServerError") {
                status = 500;
            }
            bodyObj = example.response.body?.jsonExample || "";
        }
    }

    // Format body
    let body = "";
    if (bodyObj !== null && bodyObj !== undefined) {
        if (typeof bodyObj === "object") {
            body = JSON.stringify(bodyObj, null, 2).split("\n").map(line => "  " + line).join("\n");
            body = "{\n" + body.substring(4, body.length - 2) + "\n}";
        } else {
            body = String(bodyObj);
        }
    }

    // Build descriptive name
    const endpointName = endpoint.displayName || endpoint.name.originalName;
    const exampleName = example.name || "default";
    const name = `${endpointName} - ${exampleName}`;

    const mapping: WireMockMapping = {
        id: uuid,
        name,
        request: {
            urlPathTemplate,
            method: endpoint.method,
            pathParameters: Object.keys(pathParameters).length > 0 ? pathParameters : undefined,
            formParameters: {}
        },
        response: {
            status,
            body,
            headers: {
                "Content-Type": "application/json"
            }
        },
        uuid,
        persistent: true,
        priority: 3,
        metadata: {
            mocklab: {
                created: {
                    at: new Date().toISOString(),
                    via: "SYSTEM"
                }
            }
        }
    };

    // Add postServeActions for certain mappings
    if (endpoint.method === "GET" && !mapping.request.pathParameters) {
        mapping.postServeActions = [];
    }

    // Remove formParameters if empty
    if (Object.keys(mapping.request.formParameters || {}).length === 0) {
        delete mapping.request.formParameters;
    }

    return mapping;
}

function buildUrlPathTemplate(endpoint: any): string {
    let path = endpoint.path.head;
    for (const part of endpoint.path.parts || []) {
        path += `{${part.pathParameter}}${part.tail}`;
    }
    return path;
}

function extractExampleValue(exampleValue: any): any {
    if (!exampleValue) return null;

    // Try to get the jsonExample directly
    if (exampleValue.jsonExample !== undefined) {
        return exampleValue.jsonExample;
    }

    // Navigate through shape if needed
    if (exampleValue.shape) {
        if (exampleValue.shape.type === "primitive" && exampleValue.shape.primitive) {
            const primitiveType = exampleValue.shape.primitive.type;
            return exampleValue.shape.primitive[primitiveType];
        }
        if (exampleValue.shape.type === "container" && exampleValue.shape.container?.optional) {
            return extractExampleValue(exampleValue.shape.container.optional);
        }
    }

    return null;
}
