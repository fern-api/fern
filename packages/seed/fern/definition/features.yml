types:
  FeatureImplementation:
    discriminated: false
    union: 
      - boolean
      - FeatureImplementationWithDetails
  
  FeatureImplementationWithDetails:
    properties:
      isImplemented:
        type: boolean
        docs: |
          If the feature is implemented in the generator, this doesn't include partial generation.
      details:
        type: optional<string>
        docs: |
          Any useful information about the implementation status, if it's begun, if it's behind
          a feature flag, etc.
  
  GeneratorFeatures:
    docs: |
      Based on the features outlined within https://www.notion.so/buildwithfern/Generator-Features-2cc7e6c87fc54738843940d35af5c6a4?pvs=4
    properties:
      requestOptions:
        type: FeatureImplementation
        docs: |
          Every endpoint should have an optional final parameter where the user can configure request level options.
          Those should include: authentication, headers, query, and body parameter overrides and inclusions, as well
          as reties and timeouts.
      idempotency:
        type: FeatureImplementation
        docs: |
          Certain endpoints should have the ability to include an idempotency keys in the headers, to allow for safe retries.
          In implementation, details can be found in the `idempotencyHeaders` field of the `IntermediateRepresentation`.
      autoPagination:
        type: FeatureImplementation
        docs: SDK clients return an iterator that handles the pagination for the consumer.
      oauth:
        type: FeatureImplementation
        docs: |
          The SDK should wrap the OAuth2 flow, and provide a way to automatically retrieve, refresh, and use the token.
      authEnvVarScanning:
        type: FeatureImplementation
        docs: |
          The SDK should allow for the defaulting of authentication headers from environment variables. Each authentication scheme
          has a corresponding envvar property within it's Fern definition (`tokenEnvVar` in the BearerAuthScheme definition, for example).
      websocket:
        type: FeatureImplementation
        docs: |
          Currently we parse AsyncAPI specs to allow for configuration of event driven communication (like websockets). SDKs must
          consume these definitions and support these protocols.
      streamingJson:
        type: FeatureImplementation
        docs: | 
          Primarly used for chat completion.
          Support streaming json responses, and provide a way to consume them. This 
      fileUpload:
        type: FeatureImplementation
        docs: |
          Support uploading files via multipart/form-data.
      fileDownload:
        type: FeatureImplementation
        docs: |
          Support downloading files. 
      snippets:
        type: FeatureImplementation
        docs: |
          Generated code snippets for each endpoint are written to a snippets.json file.
      errors:
        type: FeatureImplementation
        docs: |
          The SDK should support the creation of custom exceptions and handling them within the SDK. For example, we should be: creating a top level error
          following the pattern OrganizationError which includes a status code and body, which should be thrown for API errors (e.g. do not throw the generic
          error from the request client), we should additionally create basic error types out of the box for common issues: JSON parsing and timeout errors.
      forwardCompatibleEnums:
        type: FeatureImplementation
        docs: |
          The SDK should support forward compatible enums, meaning the SDK should pass through "unknown" enum values as strings. 
          This means that if the API adds a new enum value, the SDK handles it without need for upgrade.
      additionalProperties:
        type: FeatureImplementation
        docs: |
          The SDK should provide a way to access additional properties on the response object. 
          This is useful for when the API adds new fields to the response object and the user wants to grab them without upgrading the SDK.
      whitelabel: 
        type: FeatureImplementation
        docs: | 
          Whether the generator supports reading the whitelable configuration. 
          If true, the generator will not mention `fern` in the hader of the 
          generated code. 

          Instead of `This file was auto-generated by Fern from our API Definition`, 
          the header will read `This file was auto-generated from our API Definition`.
