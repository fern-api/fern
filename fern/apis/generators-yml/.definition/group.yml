imports:
  generators: ./generators.yml
  license: ./license.yml
  reviewers: ./reviewers.yml
types:
  GeneratorAPISettingsSchema:
    properties:
      settings: optional<generators.APIDefinitionSettingsSchema>
  GeneratorGroupSchema:
    properties:
      audiences:
        type: optional<list<string>>
      generators:
        type: list<GeneratorInvocationSchema>
      metadata:
        type: optional<generators.OutputMetadataSchema>
      reviewers:
        type: optional<reviewers.ReviewersSchema>
  GeneratorInvocationSchema:
    properties:
      api:
        docs: Override API import settings (this is applied across all specs)
        type: optional<GeneratorAPISettingsSchema>
      config: unknown
      disable-examples:
        docs: Temporary way to unblock example serialization.
        type: optional<boolean>
      github: optional<GithubConfigurationSchema>
      ir-version:
        docs: Overrides the version of the IR used by the generator.
        type: optional<string>
      keywords:
        docs: Overrides the keywords that require safe name variants.
        type: optional<list<string>>
      metadata: optional<GeneratorPublishMetadataSchema>
      name: string
      output: optional<GeneratorOutputSchema>
      publish-metadata:
        docs: Deprecated, use `metadata` on the output block instead.
        type: optional<GeneratorPublishMetadataSchema>
      smart-casing:
        docs: Feature flag used to enable better IR naming.
        type: optional<boolean>
      snippets:
        docs: Configures snippets for a particular generator.
        type: optional<GeneratorSnippetsSchema>
      version: string
  GeneratorOutputSchema:
    discriminant: location
    union:
      local-file-system: LocalFileSystemOutputLocationSchema
      maven: MavenOutputLocationSchema
      npm: NpmOutputLocationSchema
      nuget: NugetOutputLocationSchema
      postman: PostmanOutputLocationSchema
      pypi: PypiOutputLocationSchema
      rubygems: RubyGemsOutputLocationSchema
  GeneratorPublishMetadataSchema:
    properties:
      author: optional<string>
      email: optional<string>
      license: optional<license.GithubLicenseSchema>
      package-description: optional<string>
      reference-url: optional<string>
  GeneratorSnippetsSchema:
    properties:
      path:
        docs: The path to the generated snippets file.
        type: string
  GithubCommitAndReleaseMode:
    enum:
      - commit
      - release
  GithubCommitAndReleaseSchema:
    properties:
      license: optional<license.GithubLicenseSchema>
      mode: optional<GithubCommitAndReleaseMode>
      repository: string
  GithubConfigurationSchema:
    discriminated: false
    union:
      - GithubCommitAndReleaseSchema
      - GithubPullRequestSchema
      - GithubPushSchema
  GithubPullRequestSchema:
    properties:
      branch: optional<string>
      license: optional<license.GithubLicenseSchema>
      mode: literal<"pull-request">
      repository: string
      reviewers: optional<reviewers.ReviewersSchema>
  GithubPushSchema:
    properties:
      branch: optional<string>
      license: optional<license.GithubLicenseSchema>
      mode: literal<"push">
      repository: string
  LocalFileSystemOutputLocationSchema:
    properties:
      path: string
  MavenOutputLocationSchema:
    properties:
      coordinate: string
      password: optional<string>
      signature: optional<MavenOutputSignatureSchema>
      url: optional<string>
      username: optional<string>
  MavenOutputSignatureSchema:
    properties:
      keyId: string
      password: string
      secretKey: string
  NpmOutputLocationSchema:
    properties:
      package-name: string
      token: optional<string>
      url: optional<string>
  NugetOutputLocationSchema:
    properties:
      api-key: optional<string>
      package-name: string
      url: optional<string>
  PostmanOutputLocationSchema:
    properties:
      api-key: string
      collection-id: optional<string>
      workspace-id: string
  PypiOutputLocationSchema:
    properties:
      metadata: optional<PypiOutputMetadataSchema>
      package-name: string
      password: optional<string>
      token: optional<string>
      url: optional<string>
      username: optional<string>
  PypiOutputMetadataSchema:
    extends: generators.OutputMetadataSchema
    properties:
      documentation-link: optional<string>
      homepage-link: optional<string>
      keywords: optional<list<string>>
  RubyGemsOutputLocationSchema:
    docs: >
      It is worth noting that RubyGems API keys need to have the "Push rubygem"
      permission.

      Ideally it is also permissioned with index and yank rubygem permissions.

      Additionally if the creator of the API key has MFA enabled, they must be
      sure to update their MFA

      settings to not require MFA for API key usage ("UI and gem signin").
    properties:
      api-key: optional<string>
      package-name: string
      url: optional<string>
