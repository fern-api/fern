diff --git a/seed/ts-express/alias-extends/core/schemas/Schema.ts b/seed/ts-express/alias-extends/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/alias-extends/core/schemas/Schema.ts
+++ b/seed/ts-express/alias-extends/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/alias-extends/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/date/date.ts b/seed/ts-express/alias-extends/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/enum/enum.ts b/seed/ts-express/alias-extends/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/index.ts b/seed/ts-express/alias-extends/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/index.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/alias-extends/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/alias-extends/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/list/list.ts b/seed/ts-express/alias-extends/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/alias-extends/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/alias-extends/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/alias-extends/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/object-like/types.ts b/seed/ts-express/alias-extends/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/object/object.ts b/seed/ts-express/alias-extends/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/alias-extends/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/object/property.ts b/seed/ts-express/alias-extends/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/object/types.ts b/seed/ts-express/alias-extends/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/primitives/any.ts b/seed/ts-express/alias-extends/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/alias-extends/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/primitives/number.ts b/seed/ts-express/alias-extends/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/primitives/string.ts b/seed/ts-express/alias-extends/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/alias-extends/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/record/record.ts b/seed/ts-express/alias-extends/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/record/types.ts b/seed/ts-express/alias-extends/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/alias-extends/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/alias-extends/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/alias-extends/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/alias-extends/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/set/set.ts b/seed/ts-express/alias-extends/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/alias-extends/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/alias-extends/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/union/types.ts b/seed/ts-express/alias-extends/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/alias-extends/core/schemas/builders/union/union.ts b/seed/ts-express/alias-extends/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/alias-extends/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/alias-extends/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/alias-extends/core/schemas/index.ts b/seed/ts-express/alias-extends/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/alias-extends/core/schemas/index.ts
+++ b/seed/ts-express/alias-extends/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/alias-extends/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/alias-extends/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/alias-extends/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/alias-extends/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/alias-extends/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/alias-extends/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/alias-extends/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/alias-extends/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/alias/core/schemas/Schema.ts b/seed/ts-express/alias/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/alias/core/schemas/Schema.ts
+++ b/seed/ts-express/alias/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/alias/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/alias/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/alias/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/alias/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/alias/core/schemas/builders/date/date.ts b/seed/ts-express/alias/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/alias/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/alias/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/alias/core/schemas/builders/enum/enum.ts b/seed/ts-express/alias/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/alias/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/alias/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/alias/core/schemas/builders/index.ts b/seed/ts-express/alias/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/alias/core/schemas/builders/index.ts
+++ b/seed/ts-express/alias/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/alias/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/alias/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/alias/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/alias/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/alias/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/alias/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/alias/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/alias/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/alias/core/schemas/builders/list/list.ts b/seed/ts-express/alias/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/alias/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/alias/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/alias/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/alias/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/alias/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/alias/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/alias/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/alias/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/alias/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/alias/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/alias/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/alias/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/alias/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/alias/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/alias/core/schemas/builders/object-like/types.ts b/seed/ts-express/alias/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/alias/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/alias/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/alias/core/schemas/builders/object/object.ts b/seed/ts-express/alias/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/alias/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/alias/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/alias/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/alias/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/alias/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/alias/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/alias/core/schemas/builders/object/property.ts b/seed/ts-express/alias/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/alias/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/alias/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/alias/core/schemas/builders/object/types.ts b/seed/ts-express/alias/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/alias/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/alias/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/alias/core/schemas/builders/primitives/any.ts b/seed/ts-express/alias/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/alias/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/alias/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/alias/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/alias/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/alias/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/alias/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/alias/core/schemas/builders/primitives/number.ts b/seed/ts-express/alias/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/alias/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/alias/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/alias/core/schemas/builders/primitives/string.ts b/seed/ts-express/alias/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/alias/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/alias/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/alias/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/alias/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/alias/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/alias/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/alias/core/schemas/builders/record/record.ts b/seed/ts-express/alias/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/alias/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/alias/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/alias/core/schemas/builders/record/types.ts b/seed/ts-express/alias/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/alias/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/alias/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/alias/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/alias/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/alias/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/alias/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/alias/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/alias/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/alias/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/alias/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/alias/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/alias/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/alias/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/alias/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/alias/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/alias/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/alias/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/alias/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/alias/core/schemas/builders/set/set.ts b/seed/ts-express/alias/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/alias/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/alias/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/alias/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/alias/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/alias/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/alias/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/alias/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/alias/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/alias/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/alias/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/alias/core/schemas/builders/union/types.ts b/seed/ts-express/alias/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/alias/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/alias/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/alias/core/schemas/builders/union/union.ts b/seed/ts-express/alias/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/alias/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/alias/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/alias/core/schemas/index.ts b/seed/ts-express/alias/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/alias/core/schemas/index.ts
+++ b/seed/ts-express/alias/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/alias/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/alias/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/alias/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/alias/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/alias/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/alias/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/alias/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/alias/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/any-auth/core/schemas/Schema.ts b/seed/ts-express/any-auth/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/any-auth/core/schemas/Schema.ts
+++ b/seed/ts-express/any-auth/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/any-auth/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/any-auth/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/any-auth/core/schemas/builders/date/date.ts b/seed/ts-express/any-auth/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/any-auth/core/schemas/builders/enum/enum.ts b/seed/ts-express/any-auth/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/any-auth/core/schemas/builders/index.ts b/seed/ts-express/any-auth/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/index.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/any-auth/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/any-auth/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/any-auth/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/any-auth/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/any-auth/core/schemas/builders/list/list.ts b/seed/ts-express/any-auth/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/any-auth/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/any-auth/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/any-auth/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/any-auth/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/any-auth/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/any-auth/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/any-auth/core/schemas/builders/object-like/types.ts b/seed/ts-express/any-auth/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/any-auth/core/schemas/builders/object/object.ts b/seed/ts-express/any-auth/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/any-auth/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/any-auth/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/any-auth/core/schemas/builders/object/property.ts b/seed/ts-express/any-auth/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/any-auth/core/schemas/builders/object/types.ts b/seed/ts-express/any-auth/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/any-auth/core/schemas/builders/primitives/any.ts b/seed/ts-express/any-auth/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/any-auth/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/any-auth/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/any-auth/core/schemas/builders/primitives/number.ts b/seed/ts-express/any-auth/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/any-auth/core/schemas/builders/primitives/string.ts b/seed/ts-express/any-auth/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/any-auth/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/any-auth/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/any-auth/core/schemas/builders/record/record.ts b/seed/ts-express/any-auth/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/any-auth/core/schemas/builders/record/types.ts b/seed/ts-express/any-auth/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/any-auth/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/any-auth/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/any-auth/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/any-auth/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/any-auth/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/any-auth/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/any-auth/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/any-auth/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/any-auth/core/schemas/builders/set/set.ts b/seed/ts-express/any-auth/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/any-auth/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/any-auth/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/any-auth/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/any-auth/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/any-auth/core/schemas/builders/union/types.ts b/seed/ts-express/any-auth/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/any-auth/core/schemas/builders/union/union.ts b/seed/ts-express/any-auth/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/any-auth/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/any-auth/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/any-auth/core/schemas/index.ts b/seed/ts-express/any-auth/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/any-auth/core/schemas/index.ts
+++ b/seed/ts-express/any-auth/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/any-auth/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/any-auth/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/any-auth/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/any-auth/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/any-auth/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/any-auth/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/any-auth/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/any-auth/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/audiences/core/schemas/Schema.ts b/seed/ts-express/audiences/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/audiences/core/schemas/Schema.ts
+++ b/seed/ts-express/audiences/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/audiences/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/audiences/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/audiences/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/audiences/core/schemas/builders/date/date.ts b/seed/ts-express/audiences/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/audiences/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/audiences/core/schemas/builders/enum/enum.ts b/seed/ts-express/audiences/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/audiences/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/audiences/core/schemas/builders/index.ts b/seed/ts-express/audiences/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/audiences/core/schemas/builders/index.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/audiences/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/audiences/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/audiences/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/audiences/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/audiences/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/audiences/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/audiences/core/schemas/builders/list/list.ts b/seed/ts-express/audiences/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/audiences/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/audiences/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/audiences/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/audiences/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/audiences/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/audiences/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/audiences/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/audiences/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/audiences/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/audiences/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/audiences/core/schemas/builders/object-like/types.ts b/seed/ts-express/audiences/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/audiences/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/audiences/core/schemas/builders/object/object.ts b/seed/ts-express/audiences/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/audiences/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/audiences/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/audiences/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/audiences/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/audiences/core/schemas/builders/object/property.ts b/seed/ts-express/audiences/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/audiences/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/audiences/core/schemas/builders/object/types.ts b/seed/ts-express/audiences/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/audiences/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/audiences/core/schemas/builders/primitives/any.ts b/seed/ts-express/audiences/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/audiences/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/audiences/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/audiences/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/audiences/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/audiences/core/schemas/builders/primitives/number.ts b/seed/ts-express/audiences/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/audiences/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/audiences/core/schemas/builders/primitives/string.ts b/seed/ts-express/audiences/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/audiences/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/audiences/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/audiences/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/audiences/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/audiences/core/schemas/builders/record/record.ts b/seed/ts-express/audiences/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/audiences/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/audiences/core/schemas/builders/record/types.ts b/seed/ts-express/audiences/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/audiences/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/audiences/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/audiences/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/audiences/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/audiences/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/audiences/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/audiences/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/audiences/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/audiences/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/audiences/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/audiences/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/audiences/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/audiences/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/audiences/core/schemas/builders/set/set.ts b/seed/ts-express/audiences/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/audiences/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/audiences/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/audiences/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/audiences/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/audiences/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/audiences/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/audiences/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/audiences/core/schemas/builders/union/types.ts b/seed/ts-express/audiences/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/audiences/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/audiences/core/schemas/builders/union/union.ts b/seed/ts-express/audiences/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/audiences/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/audiences/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/audiences/core/schemas/index.ts b/seed/ts-express/audiences/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/audiences/core/schemas/index.ts
+++ b/seed/ts-express/audiences/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/audiences/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/audiences/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/audiences/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/audiences/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/audiences/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/audiences/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/audiences/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/audiences/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/Schema.ts b/seed/ts-express/auth-environment-variables/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/Schema.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/date/date.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/enum/enum.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/index.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/index.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/list/list.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/object-like/types.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/object/object.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/object/property.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/object/types.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/primitives/any.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/primitives/number.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/primitives/string.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/record/record.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/record/types.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/set/set.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/union/types.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/builders/union/union.ts b/seed/ts-express/auth-environment-variables/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/index.ts b/seed/ts-express/auth-environment-variables/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/index.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/auth-environment-variables/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/auth-environment-variables/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/auth-environment-variables/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/auth-environment-variables/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/auth-environment-variables/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/Schema.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/Schema.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/date/date.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/enum/enum.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/index.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/index.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/list/list.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object-like/types.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object/object.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object/property.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object/types.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/primitives/any.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/primitives/number.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/primitives/string.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/record/record.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/record/types.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/set/set.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/union/types.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/union/union.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/index.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/index.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/basic-auth-environment-variables/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/basic-auth-environment-variables/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/basic-auth-environment-variables/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/basic-auth-environment-variables/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/basic-auth/core/schemas/Schema.ts b/seed/ts-express/basic-auth/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/basic-auth/core/schemas/Schema.ts
+++ b/seed/ts-express/basic-auth/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/basic-auth/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/date/date.ts b/seed/ts-express/basic-auth/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/enum/enum.ts b/seed/ts-express/basic-auth/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/index.ts b/seed/ts-express/basic-auth/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/index.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/basic-auth/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/basic-auth/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/list/list.ts b/seed/ts-express/basic-auth/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/basic-auth/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/basic-auth/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/basic-auth/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/object-like/types.ts b/seed/ts-express/basic-auth/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/object/object.ts b/seed/ts-express/basic-auth/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/basic-auth/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/object/property.ts b/seed/ts-express/basic-auth/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/object/types.ts b/seed/ts-express/basic-auth/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/primitives/any.ts b/seed/ts-express/basic-auth/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/basic-auth/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/primitives/number.ts b/seed/ts-express/basic-auth/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/primitives/string.ts b/seed/ts-express/basic-auth/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/basic-auth/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/record/record.ts b/seed/ts-express/basic-auth/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/record/types.ts b/seed/ts-express/basic-auth/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/basic-auth/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/basic-auth/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/basic-auth/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/basic-auth/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/set/set.ts b/seed/ts-express/basic-auth/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/basic-auth/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/basic-auth/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/union/types.ts b/seed/ts-express/basic-auth/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/basic-auth/core/schemas/builders/union/union.ts b/seed/ts-express/basic-auth/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/basic-auth/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/basic-auth/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/basic-auth/core/schemas/index.ts b/seed/ts-express/basic-auth/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/basic-auth/core/schemas/index.ts
+++ b/seed/ts-express/basic-auth/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/basic-auth/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/basic-auth/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/basic-auth/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/basic-auth/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/basic-auth/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/basic-auth/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/basic-auth/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/basic-auth/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/Schema.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/Schema.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/date/date.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/enum/enum.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/index.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/index.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/list/list.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object-like/types.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object/object.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object/property.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object/types.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/primitives/any.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/primitives/number.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/primitives/string.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/record/record.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/record/types.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/set/set.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/union/types.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/union/union.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/index.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/index.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/bearer-token-environment-variable/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/bearer-token-environment-variable/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/bearer-token-environment-variable/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/bearer-token-environment-variable/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/Schema.ts b/seed/ts-express/circular-references-advanced/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/Schema.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/date/date.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/enum/enum.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/index.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/index.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/list/list.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/object-like/types.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/object/object.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/object/property.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/object/types.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/primitives/any.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/primitives/number.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/primitives/string.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/record/record.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/record/types.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/set/set.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/union/types.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/builders/union/union.ts b/seed/ts-express/circular-references-advanced/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/index.ts b/seed/ts-express/circular-references-advanced/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/index.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/circular-references-advanced/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/circular-references-advanced/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/circular-references-advanced/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/circular-references-advanced/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/circular-references-advanced/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/circular-references/core/schemas/Schema.ts b/seed/ts-express/circular-references/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/circular-references/core/schemas/Schema.ts
+++ b/seed/ts-express/circular-references/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/circular-references/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/circular-references/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/circular-references/core/schemas/builders/date/date.ts b/seed/ts-express/circular-references/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/circular-references/core/schemas/builders/enum/enum.ts b/seed/ts-express/circular-references/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/circular-references/core/schemas/builders/index.ts b/seed/ts-express/circular-references/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/index.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/circular-references/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/circular-references/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/circular-references/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/circular-references/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/circular-references/core/schemas/builders/list/list.ts b/seed/ts-express/circular-references/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/circular-references/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/circular-references/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/circular-references/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/circular-references/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/circular-references/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/circular-references/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/circular-references/core/schemas/builders/object-like/types.ts b/seed/ts-express/circular-references/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/circular-references/core/schemas/builders/object/object.ts b/seed/ts-express/circular-references/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/circular-references/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/circular-references/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/circular-references/core/schemas/builders/object/property.ts b/seed/ts-express/circular-references/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/circular-references/core/schemas/builders/object/types.ts b/seed/ts-express/circular-references/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/circular-references/core/schemas/builders/primitives/any.ts b/seed/ts-express/circular-references/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/circular-references/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/circular-references/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/circular-references/core/schemas/builders/primitives/number.ts b/seed/ts-express/circular-references/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/circular-references/core/schemas/builders/primitives/string.ts b/seed/ts-express/circular-references/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/circular-references/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/circular-references/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/circular-references/core/schemas/builders/record/record.ts b/seed/ts-express/circular-references/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/circular-references/core/schemas/builders/record/types.ts b/seed/ts-express/circular-references/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/circular-references/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/circular-references/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/circular-references/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/circular-references/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/circular-references/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/circular-references/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/circular-references/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/circular-references/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/circular-references/core/schemas/builders/set/set.ts b/seed/ts-express/circular-references/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/circular-references/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/circular-references/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/circular-references/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/circular-references/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/circular-references/core/schemas/builders/union/types.ts b/seed/ts-express/circular-references/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/circular-references/core/schemas/builders/union/union.ts b/seed/ts-express/circular-references/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/circular-references/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/circular-references/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/circular-references/core/schemas/index.ts b/seed/ts-express/circular-references/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/circular-references/core/schemas/index.ts
+++ b/seed/ts-express/circular-references/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/circular-references/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/circular-references/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/circular-references/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/circular-references/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/circular-references/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/circular-references/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/circular-references/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/circular-references/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/client-side-params/core/schemas/Schema.ts b/seed/ts-express/client-side-params/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/client-side-params/core/schemas/Schema.ts
+++ b/seed/ts-express/client-side-params/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/client-side-params/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/date/date.ts b/seed/ts-express/client-side-params/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/enum/enum.ts b/seed/ts-express/client-side-params/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/index.ts b/seed/ts-express/client-side-params/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/index.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/client-side-params/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/client-side-params/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/list/list.ts b/seed/ts-express/client-side-params/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/client-side-params/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/client-side-params/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/client-side-params/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/object-like/types.ts b/seed/ts-express/client-side-params/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/object/object.ts b/seed/ts-express/client-side-params/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/client-side-params/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/object/property.ts b/seed/ts-express/client-side-params/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/object/types.ts b/seed/ts-express/client-side-params/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/primitives/any.ts b/seed/ts-express/client-side-params/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/client-side-params/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/primitives/number.ts b/seed/ts-express/client-side-params/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/primitives/string.ts b/seed/ts-express/client-side-params/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/client-side-params/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/record/record.ts b/seed/ts-express/client-side-params/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/record/types.ts b/seed/ts-express/client-side-params/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/client-side-params/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/client-side-params/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/client-side-params/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/client-side-params/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/set/set.ts b/seed/ts-express/client-side-params/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/client-side-params/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/client-side-params/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/union/types.ts b/seed/ts-express/client-side-params/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/client-side-params/core/schemas/builders/union/union.ts b/seed/ts-express/client-side-params/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/client-side-params/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/client-side-params/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/client-side-params/core/schemas/index.ts b/seed/ts-express/client-side-params/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/client-side-params/core/schemas/index.ts
+++ b/seed/ts-express/client-side-params/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/client-side-params/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/client-side-params/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/client-side-params/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/client-side-params/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/client-side-params/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/client-side-params/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/client-side-params/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/client-side-params/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/content-type/core/schemas/Schema.ts b/seed/ts-express/content-type/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/content-type/core/schemas/Schema.ts
+++ b/seed/ts-express/content-type/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/content-type/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/content-type/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/content-type/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/content-type/core/schemas/builders/date/date.ts b/seed/ts-express/content-type/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/content-type/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/content-type/core/schemas/builders/enum/enum.ts b/seed/ts-express/content-type/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/content-type/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/content-type/core/schemas/builders/index.ts b/seed/ts-express/content-type/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/content-type/core/schemas/builders/index.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/content-type/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/content-type/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/content-type/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/content-type/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/content-type/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/content-type/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/content-type/core/schemas/builders/list/list.ts b/seed/ts-express/content-type/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/content-type/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/content-type/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/content-type/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/content-type/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/content-type/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/content-type/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/content-type/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/content-type/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/content-type/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/content-type/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/content-type/core/schemas/builders/object-like/types.ts b/seed/ts-express/content-type/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/content-type/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/content-type/core/schemas/builders/object/object.ts b/seed/ts-express/content-type/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/content-type/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/content-type/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/content-type/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/content-type/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/content-type/core/schemas/builders/object/property.ts b/seed/ts-express/content-type/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/content-type/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/content-type/core/schemas/builders/object/types.ts b/seed/ts-express/content-type/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/content-type/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/content-type/core/schemas/builders/primitives/any.ts b/seed/ts-express/content-type/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/content-type/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/content-type/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/content-type/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/content-type/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/content-type/core/schemas/builders/primitives/number.ts b/seed/ts-express/content-type/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/content-type/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/content-type/core/schemas/builders/primitives/string.ts b/seed/ts-express/content-type/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/content-type/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/content-type/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/content-type/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/content-type/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/content-type/core/schemas/builders/record/record.ts b/seed/ts-express/content-type/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/content-type/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/content-type/core/schemas/builders/record/types.ts b/seed/ts-express/content-type/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/content-type/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/content-type/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/content-type/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/content-type/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/content-type/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/content-type/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/content-type/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/content-type/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/content-type/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/content-type/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/content-type/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/content-type/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/content-type/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/content-type/core/schemas/builders/set/set.ts b/seed/ts-express/content-type/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/content-type/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/content-type/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/content-type/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/content-type/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/content-type/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/content-type/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/content-type/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/content-type/core/schemas/builders/union/types.ts b/seed/ts-express/content-type/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/content-type/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/content-type/core/schemas/builders/union/union.ts b/seed/ts-express/content-type/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/content-type/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/content-type/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/content-type/core/schemas/index.ts b/seed/ts-express/content-type/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/content-type/core/schemas/index.ts
+++ b/seed/ts-express/content-type/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/content-type/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/content-type/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/content-type/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/content-type/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/content-type/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/content-type/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/content-type/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/content-type/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/Schema.ts b/seed/ts-express/cross-package-type-names/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/Schema.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/date/date.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/enum/enum.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/index.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/index.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/list/list.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/object-like/types.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/object/object.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/object/property.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/object/types.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/primitives/any.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/primitives/number.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/primitives/string.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/record/record.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/record/types.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/set/set.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/union/types.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/builders/union/union.ts b/seed/ts-express/cross-package-type-names/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/index.ts b/seed/ts-express/cross-package-type-names/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/index.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/cross-package-type-names/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/cross-package-type-names/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/cross-package-type-names/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/cross-package-type-names/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/cross-package-type-names/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/custom-auth/core/schemas/Schema.ts b/seed/ts-express/custom-auth/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/custom-auth/core/schemas/Schema.ts
+++ b/seed/ts-express/custom-auth/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/custom-auth/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/date/date.ts b/seed/ts-express/custom-auth/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/enum/enum.ts b/seed/ts-express/custom-auth/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/index.ts b/seed/ts-express/custom-auth/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/index.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/custom-auth/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/custom-auth/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/list/list.ts b/seed/ts-express/custom-auth/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/custom-auth/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/custom-auth/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/custom-auth/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/object-like/types.ts b/seed/ts-express/custom-auth/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/object/object.ts b/seed/ts-express/custom-auth/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/custom-auth/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/object/property.ts b/seed/ts-express/custom-auth/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/object/types.ts b/seed/ts-express/custom-auth/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/primitives/any.ts b/seed/ts-express/custom-auth/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/custom-auth/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/primitives/number.ts b/seed/ts-express/custom-auth/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/primitives/string.ts b/seed/ts-express/custom-auth/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/custom-auth/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/record/record.ts b/seed/ts-express/custom-auth/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/record/types.ts b/seed/ts-express/custom-auth/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/custom-auth/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/custom-auth/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/custom-auth/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/custom-auth/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/set/set.ts b/seed/ts-express/custom-auth/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/custom-auth/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/custom-auth/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/union/types.ts b/seed/ts-express/custom-auth/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/custom-auth/core/schemas/builders/union/union.ts b/seed/ts-express/custom-auth/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/custom-auth/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/custom-auth/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/custom-auth/core/schemas/index.ts b/seed/ts-express/custom-auth/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/custom-auth/core/schemas/index.ts
+++ b/seed/ts-express/custom-auth/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/custom-auth/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/custom-auth/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/custom-auth/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/custom-auth/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/custom-auth/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/custom-auth/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/custom-auth/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/custom-auth/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/empty-clients/core/schemas/Schema.ts b/seed/ts-express/empty-clients/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/empty-clients/core/schemas/Schema.ts
+++ b/seed/ts-express/empty-clients/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/empty-clients/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/date/date.ts b/seed/ts-express/empty-clients/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/enum/enum.ts b/seed/ts-express/empty-clients/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/index.ts b/seed/ts-express/empty-clients/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/index.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/empty-clients/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/empty-clients/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/list/list.ts b/seed/ts-express/empty-clients/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/empty-clients/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/empty-clients/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/empty-clients/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/object-like/types.ts b/seed/ts-express/empty-clients/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/object/object.ts b/seed/ts-express/empty-clients/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/empty-clients/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/object/property.ts b/seed/ts-express/empty-clients/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/object/types.ts b/seed/ts-express/empty-clients/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/primitives/any.ts b/seed/ts-express/empty-clients/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/empty-clients/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/primitives/number.ts b/seed/ts-express/empty-clients/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/primitives/string.ts b/seed/ts-express/empty-clients/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/empty-clients/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/record/record.ts b/seed/ts-express/empty-clients/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/record/types.ts b/seed/ts-express/empty-clients/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/empty-clients/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/empty-clients/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/empty-clients/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/empty-clients/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/set/set.ts b/seed/ts-express/empty-clients/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/empty-clients/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/empty-clients/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/union/types.ts b/seed/ts-express/empty-clients/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/empty-clients/core/schemas/builders/union/union.ts b/seed/ts-express/empty-clients/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/empty-clients/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/empty-clients/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/empty-clients/core/schemas/index.ts b/seed/ts-express/empty-clients/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/empty-clients/core/schemas/index.ts
+++ b/seed/ts-express/empty-clients/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/empty-clients/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/empty-clients/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/empty-clients/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/empty-clients/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/empty-clients/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/empty-clients/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/empty-clients/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/empty-clients/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/enum/core/schemas/Schema.ts b/seed/ts-express/enum/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/enum/core/schemas/Schema.ts
+++ b/seed/ts-express/enum/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/enum/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/enum/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/enum/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/enum/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/enum/core/schemas/builders/date/date.ts b/seed/ts-express/enum/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/enum/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/enum/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/enum/core/schemas/builders/enum/enum.ts b/seed/ts-express/enum/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/enum/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/enum/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/enum/core/schemas/builders/index.ts b/seed/ts-express/enum/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/enum/core/schemas/builders/index.ts
+++ b/seed/ts-express/enum/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/enum/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/enum/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/enum/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/enum/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/enum/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/enum/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/enum/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/enum/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/enum/core/schemas/builders/list/list.ts b/seed/ts-express/enum/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/enum/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/enum/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/enum/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/enum/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/enum/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/enum/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/enum/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/enum/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/enum/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/enum/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/enum/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/enum/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/enum/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/enum/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/enum/core/schemas/builders/object-like/types.ts b/seed/ts-express/enum/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/enum/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/enum/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/enum/core/schemas/builders/object/object.ts b/seed/ts-express/enum/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/enum/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/enum/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/enum/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/enum/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/enum/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/enum/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/enum/core/schemas/builders/object/property.ts b/seed/ts-express/enum/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/enum/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/enum/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/enum/core/schemas/builders/object/types.ts b/seed/ts-express/enum/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/enum/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/enum/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/enum/core/schemas/builders/primitives/any.ts b/seed/ts-express/enum/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/enum/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/enum/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/enum/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/enum/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/enum/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/enum/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/enum/core/schemas/builders/primitives/number.ts b/seed/ts-express/enum/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/enum/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/enum/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/enum/core/schemas/builders/primitives/string.ts b/seed/ts-express/enum/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/enum/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/enum/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/enum/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/enum/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/enum/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/enum/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/enum/core/schemas/builders/record/record.ts b/seed/ts-express/enum/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/enum/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/enum/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/enum/core/schemas/builders/record/types.ts b/seed/ts-express/enum/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/enum/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/enum/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/enum/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/enum/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/enum/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/enum/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/enum/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/enum/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/enum/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/enum/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/enum/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/enum/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/enum/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/enum/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/enum/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/enum/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/enum/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/enum/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/enum/core/schemas/builders/set/set.ts b/seed/ts-express/enum/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/enum/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/enum/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/enum/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/enum/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/enum/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/enum/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/enum/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/enum/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/enum/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/enum/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/enum/core/schemas/builders/union/types.ts b/seed/ts-express/enum/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/enum/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/enum/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/enum/core/schemas/builders/union/union.ts b/seed/ts-express/enum/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/enum/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/enum/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/enum/core/schemas/index.ts b/seed/ts-express/enum/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/enum/core/schemas/index.ts
+++ b/seed/ts-express/enum/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/enum/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/enum/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/enum/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/enum/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/enum/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/enum/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/enum/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/enum/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/error-property/core/schemas/Schema.ts b/seed/ts-express/error-property/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/error-property/core/schemas/Schema.ts
+++ b/seed/ts-express/error-property/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/error-property/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/error-property/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/error-property/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/error-property/core/schemas/builders/date/date.ts b/seed/ts-express/error-property/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/error-property/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/error-property/core/schemas/builders/enum/enum.ts b/seed/ts-express/error-property/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/error-property/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/error-property/core/schemas/builders/index.ts b/seed/ts-express/error-property/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/error-property/core/schemas/builders/index.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/error-property/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/error-property/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/error-property/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/error-property/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/error-property/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/error-property/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/error-property/core/schemas/builders/list/list.ts b/seed/ts-express/error-property/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/error-property/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/error-property/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/error-property/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/error-property/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/error-property/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/error-property/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/error-property/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/error-property/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/error-property/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/error-property/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/error-property/core/schemas/builders/object-like/types.ts b/seed/ts-express/error-property/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/error-property/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/error-property/core/schemas/builders/object/object.ts b/seed/ts-express/error-property/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/error-property/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/error-property/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/error-property/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/error-property/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/error-property/core/schemas/builders/object/property.ts b/seed/ts-express/error-property/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/error-property/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/error-property/core/schemas/builders/object/types.ts b/seed/ts-express/error-property/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/error-property/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/error-property/core/schemas/builders/primitives/any.ts b/seed/ts-express/error-property/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/error-property/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/error-property/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/error-property/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/error-property/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/error-property/core/schemas/builders/primitives/number.ts b/seed/ts-express/error-property/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/error-property/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/error-property/core/schemas/builders/primitives/string.ts b/seed/ts-express/error-property/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/error-property/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/error-property/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/error-property/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/error-property/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/error-property/core/schemas/builders/record/record.ts b/seed/ts-express/error-property/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/error-property/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/error-property/core/schemas/builders/record/types.ts b/seed/ts-express/error-property/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/error-property/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/error-property/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/error-property/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/error-property/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/error-property/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/error-property/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/error-property/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/error-property/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/error-property/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/error-property/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/error-property/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/error-property/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/error-property/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/error-property/core/schemas/builders/set/set.ts b/seed/ts-express/error-property/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/error-property/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/error-property/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/error-property/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/error-property/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/error-property/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/error-property/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/error-property/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/error-property/core/schemas/builders/union/types.ts b/seed/ts-express/error-property/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/error-property/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/error-property/core/schemas/builders/union/union.ts b/seed/ts-express/error-property/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/error-property/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/error-property/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/error-property/core/schemas/index.ts b/seed/ts-express/error-property/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/error-property/core/schemas/index.ts
+++ b/seed/ts-express/error-property/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/error-property/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/error-property/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/error-property/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/error-property/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/error-property/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/error-property/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/error-property/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/error-property/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/errors/core/schemas/Schema.ts b/seed/ts-express/errors/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/errors/core/schemas/Schema.ts
+++ b/seed/ts-express/errors/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/errors/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/errors/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/errors/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/errors/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/errors/core/schemas/builders/date/date.ts b/seed/ts-express/errors/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/errors/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/errors/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/errors/core/schemas/builders/enum/enum.ts b/seed/ts-express/errors/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/errors/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/errors/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/errors/core/schemas/builders/index.ts b/seed/ts-express/errors/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/errors/core/schemas/builders/index.ts
+++ b/seed/ts-express/errors/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/errors/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/errors/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/errors/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/errors/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/errors/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/errors/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/errors/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/errors/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/errors/core/schemas/builders/list/list.ts b/seed/ts-express/errors/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/errors/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/errors/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/errors/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/errors/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/errors/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/errors/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/errors/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/errors/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/errors/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/errors/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/errors/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/errors/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/errors/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/errors/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/errors/core/schemas/builders/object-like/types.ts b/seed/ts-express/errors/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/errors/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/errors/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/errors/core/schemas/builders/object/object.ts b/seed/ts-express/errors/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/errors/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/errors/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/errors/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/errors/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/errors/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/errors/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/errors/core/schemas/builders/object/property.ts b/seed/ts-express/errors/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/errors/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/errors/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/errors/core/schemas/builders/object/types.ts b/seed/ts-express/errors/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/errors/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/errors/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/errors/core/schemas/builders/primitives/any.ts b/seed/ts-express/errors/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/errors/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/errors/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/errors/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/errors/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/errors/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/errors/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/errors/core/schemas/builders/primitives/number.ts b/seed/ts-express/errors/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/errors/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/errors/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/errors/core/schemas/builders/primitives/string.ts b/seed/ts-express/errors/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/errors/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/errors/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/errors/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/errors/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/errors/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/errors/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/errors/core/schemas/builders/record/record.ts b/seed/ts-express/errors/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/errors/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/errors/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/errors/core/schemas/builders/record/types.ts b/seed/ts-express/errors/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/errors/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/errors/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/errors/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/errors/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/errors/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/errors/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/errors/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/errors/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/errors/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/errors/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/errors/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/errors/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/errors/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/errors/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/errors/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/errors/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/errors/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/errors/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/errors/core/schemas/builders/set/set.ts b/seed/ts-express/errors/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/errors/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/errors/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/errors/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/errors/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/errors/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/errors/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/errors/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/errors/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/errors/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/errors/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/errors/core/schemas/builders/union/types.ts b/seed/ts-express/errors/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/errors/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/errors/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/errors/core/schemas/builders/union/union.ts b/seed/ts-express/errors/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/errors/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/errors/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/errors/core/schemas/index.ts b/seed/ts-express/errors/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/errors/core/schemas/index.ts
+++ b/seed/ts-express/errors/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/errors/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/errors/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/errors/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/errors/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/errors/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/errors/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/errors/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/errors/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/examples/core/schemas/Schema.ts b/seed/ts-express/examples/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/examples/core/schemas/Schema.ts
+++ b/seed/ts-express/examples/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/examples/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/examples/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/examples/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/examples/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/examples/core/schemas/builders/date/date.ts b/seed/ts-express/examples/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/examples/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/examples/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/examples/core/schemas/builders/enum/enum.ts b/seed/ts-express/examples/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/examples/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/examples/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/examples/core/schemas/builders/index.ts b/seed/ts-express/examples/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/examples/core/schemas/builders/index.ts
+++ b/seed/ts-express/examples/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/examples/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/examples/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/examples/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/examples/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/examples/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/examples/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/examples/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/examples/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/examples/core/schemas/builders/list/list.ts b/seed/ts-express/examples/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/examples/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/examples/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/examples/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/examples/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/examples/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/examples/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/examples/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/examples/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/examples/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/examples/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/examples/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/examples/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/examples/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/examples/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/examples/core/schemas/builders/object-like/types.ts b/seed/ts-express/examples/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/examples/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/examples/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/examples/core/schemas/builders/object/object.ts b/seed/ts-express/examples/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/examples/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/examples/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/examples/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/examples/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/examples/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/examples/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/examples/core/schemas/builders/object/property.ts b/seed/ts-express/examples/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/examples/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/examples/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/examples/core/schemas/builders/object/types.ts b/seed/ts-express/examples/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/examples/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/examples/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/examples/core/schemas/builders/primitives/any.ts b/seed/ts-express/examples/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/examples/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/examples/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/examples/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/examples/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/examples/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/examples/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/examples/core/schemas/builders/primitives/number.ts b/seed/ts-express/examples/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/examples/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/examples/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/examples/core/schemas/builders/primitives/string.ts b/seed/ts-express/examples/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/examples/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/examples/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/examples/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/examples/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/examples/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/examples/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/examples/core/schemas/builders/record/record.ts b/seed/ts-express/examples/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/examples/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/examples/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/examples/core/schemas/builders/record/types.ts b/seed/ts-express/examples/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/examples/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/examples/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/examples/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/examples/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/examples/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/examples/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/examples/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/examples/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/examples/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/examples/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/examples/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/examples/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/examples/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/examples/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/examples/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/examples/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/examples/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/examples/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/examples/core/schemas/builders/set/set.ts b/seed/ts-express/examples/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/examples/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/examples/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/examples/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/examples/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/examples/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/examples/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/examples/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/examples/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/examples/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/examples/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/examples/core/schemas/builders/union/types.ts b/seed/ts-express/examples/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/examples/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/examples/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/examples/core/schemas/builders/union/union.ts b/seed/ts-express/examples/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/examples/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/examples/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/examples/core/schemas/index.ts b/seed/ts-express/examples/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/examples/core/schemas/index.ts
+++ b/seed/ts-express/examples/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/examples/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/examples/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/examples/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/examples/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/examples/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/examples/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/examples/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/examples/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/Schema.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/Schema.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/date/date.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/enum/enum.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/index.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/index.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/list/list.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object-like/types.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object/object.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object/property.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object/types.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/primitives/any.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/primitives/number.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/primitives/string.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/record/record.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/record/types.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/set/set.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/union/types.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/union/union.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/index.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/index.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/exhaustive/allow-extra-fields/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/Schema.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/Schema.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/date/date.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/enum/enum.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/index.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/index.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/list/list.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object-like/types.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object/object.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object/property.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object/types.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/primitives/any.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/primitives/number.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/primitives/string.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/record/record.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/record/types.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/set/set.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/union/types.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/union/union.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/index.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/index.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/exhaustive/no-custom-config/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/exhaustive/no-custom-config/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/exhaustive/no-custom-config/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/exhaustive/no-custom-config/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/Schema.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/Schema.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/date/date.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/enum/enum.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/index.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/index.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/list/list.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object-like/types.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object/object.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object/property.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object/types.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/primitives/any.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/primitives/number.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/primitives/string.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/record/record.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/record/types.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/set/set.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/union/types.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/union/union.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/index.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/index.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/exhaustive/no-optional-properties/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/exhaustive/no-optional-properties/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/Schema.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/Schema.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/date/date.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/enum/enum.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/index.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/index.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/list/list.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object-like/types.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object/object.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object/property.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object/types.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/primitives/any.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/primitives/number.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/primitives/string.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/record/record.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/record/types.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/set/set.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/union/types.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/union/union.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/index.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/index.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/exhaustive/retain-original-casing/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/exhaustive/retain-original-casing/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/Schema.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/Schema.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/date/date.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/enum/enum.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/index.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/index.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/list/list.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object-like/types.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object/object.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object/property.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object/types.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/primitives/any.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/primitives/number.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/primitives/string.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/record/record.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/record/types.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/set/set.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/union/types.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/union/union.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/index.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/index.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/exhaustive/test-package-path/test-packagePath/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/Schema.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/Schema.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/date/date.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/enum/enum.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/index.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/index.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/list/list.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object-like/types.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object/object.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object/property.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object/types.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/primitives/any.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/primitives/number.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/primitives/string.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/record/record.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/record/types.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/set/set.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/union/types.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/union/union.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/index.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/index.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/exhaustive/union-utils/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/exhaustive/union-utils/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/exhaustive/union-utils/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/exhaustive/union-utils/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/extends/core/schemas/Schema.ts b/seed/ts-express/extends/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/extends/core/schemas/Schema.ts
+++ b/seed/ts-express/extends/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/extends/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/extends/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/extends/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/extends/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/extends/core/schemas/builders/date/date.ts b/seed/ts-express/extends/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/extends/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/extends/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/extends/core/schemas/builders/enum/enum.ts b/seed/ts-express/extends/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/extends/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/extends/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/extends/core/schemas/builders/index.ts b/seed/ts-express/extends/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/extends/core/schemas/builders/index.ts
+++ b/seed/ts-express/extends/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/extends/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/extends/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/extends/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/extends/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/extends/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/extends/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/extends/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/extends/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/extends/core/schemas/builders/list/list.ts b/seed/ts-express/extends/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/extends/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/extends/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/extends/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/extends/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/extends/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/extends/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/extends/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/extends/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/extends/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/extends/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/extends/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/extends/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/extends/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/extends/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/extends/core/schemas/builders/object-like/types.ts b/seed/ts-express/extends/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/extends/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/extends/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/extends/core/schemas/builders/object/object.ts b/seed/ts-express/extends/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/extends/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/extends/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/extends/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/extends/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/extends/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/extends/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/extends/core/schemas/builders/object/property.ts b/seed/ts-express/extends/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/extends/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/extends/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/extends/core/schemas/builders/object/types.ts b/seed/ts-express/extends/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/extends/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/extends/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/extends/core/schemas/builders/primitives/any.ts b/seed/ts-express/extends/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/extends/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/extends/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/extends/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/extends/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/extends/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/extends/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/extends/core/schemas/builders/primitives/number.ts b/seed/ts-express/extends/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/extends/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/extends/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/extends/core/schemas/builders/primitives/string.ts b/seed/ts-express/extends/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/extends/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/extends/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/extends/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/extends/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/extends/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/extends/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/extends/core/schemas/builders/record/record.ts b/seed/ts-express/extends/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/extends/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/extends/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/extends/core/schemas/builders/record/types.ts b/seed/ts-express/extends/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/extends/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/extends/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/extends/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/extends/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/extends/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/extends/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/extends/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/extends/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/extends/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/extends/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/extends/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/extends/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/extends/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/extends/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/extends/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/extends/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/extends/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/extends/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/extends/core/schemas/builders/set/set.ts b/seed/ts-express/extends/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/extends/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/extends/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/extends/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/extends/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/extends/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/extends/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/extends/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/extends/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/extends/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/extends/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/extends/core/schemas/builders/union/types.ts b/seed/ts-express/extends/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/extends/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/extends/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/extends/core/schemas/builders/union/union.ts b/seed/ts-express/extends/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/extends/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/extends/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/extends/core/schemas/index.ts b/seed/ts-express/extends/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/extends/core/schemas/index.ts
+++ b/seed/ts-express/extends/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/extends/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/extends/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/extends/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/extends/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/extends/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/extends/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/extends/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/extends/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/extra-properties/api/resources/user/types/User.ts b/seed/ts-express/extra-properties/api/resources/user/types/User.ts
index 9f287ac33..bcf749c4a 100644
--- a/seed/ts-express/extra-properties/api/resources/user/types/User.ts
+++ b/seed/ts-express/extra-properties/api/resources/user/types/User.ts
@@ -1,5 +1,11 @@
 // This file was auto-generated by Fern from our API Definition.
 
+/**
+ * @example
+ *     {
+ *         name: "Alice"
+ *     }
+ */
 export interface User {
     name: string;
     /** Accepts any additional properties */
diff --git a/seed/ts-express/extra-properties/core/schemas/Schema.ts b/seed/ts-express/extra-properties/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/extra-properties/core/schemas/Schema.ts
+++ b/seed/ts-express/extra-properties/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/extra-properties/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/date/date.ts b/seed/ts-express/extra-properties/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/enum/enum.ts b/seed/ts-express/extra-properties/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/index.ts b/seed/ts-express/extra-properties/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/index.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/extra-properties/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/extra-properties/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/list/list.ts b/seed/ts-express/extra-properties/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/extra-properties/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/extra-properties/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/extra-properties/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/object-like/types.ts b/seed/ts-express/extra-properties/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/object/object.ts b/seed/ts-express/extra-properties/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/extra-properties/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/object/property.ts b/seed/ts-express/extra-properties/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/object/types.ts b/seed/ts-express/extra-properties/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/primitives/any.ts b/seed/ts-express/extra-properties/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/extra-properties/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/primitives/number.ts b/seed/ts-express/extra-properties/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/primitives/string.ts b/seed/ts-express/extra-properties/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/extra-properties/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/record/record.ts b/seed/ts-express/extra-properties/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/record/types.ts b/seed/ts-express/extra-properties/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/extra-properties/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/extra-properties/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/extra-properties/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/extra-properties/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/set/set.ts b/seed/ts-express/extra-properties/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/extra-properties/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/extra-properties/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/union/types.ts b/seed/ts-express/extra-properties/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/extra-properties/core/schemas/builders/union/union.ts b/seed/ts-express/extra-properties/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/extra-properties/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/extra-properties/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/extra-properties/core/schemas/index.ts b/seed/ts-express/extra-properties/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/extra-properties/core/schemas/index.ts
+++ b/seed/ts-express/extra-properties/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/extra-properties/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/extra-properties/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/extra-properties/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/extra-properties/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/extra-properties/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/extra-properties/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/extra-properties/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/extra-properties/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/folders/core/schemas/Schema.ts b/seed/ts-express/folders/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/folders/core/schemas/Schema.ts
+++ b/seed/ts-express/folders/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/folders/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/folders/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/folders/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/folders/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/folders/core/schemas/builders/date/date.ts b/seed/ts-express/folders/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/folders/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/folders/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/folders/core/schemas/builders/enum/enum.ts b/seed/ts-express/folders/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/folders/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/folders/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/folders/core/schemas/builders/index.ts b/seed/ts-express/folders/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/folders/core/schemas/builders/index.ts
+++ b/seed/ts-express/folders/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/folders/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/folders/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/folders/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/folders/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/folders/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/folders/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/folders/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/folders/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/folders/core/schemas/builders/list/list.ts b/seed/ts-express/folders/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/folders/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/folders/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/folders/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/folders/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/folders/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/folders/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/folders/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/folders/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/folders/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/folders/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/folders/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/folders/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/folders/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/folders/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/folders/core/schemas/builders/object-like/types.ts b/seed/ts-express/folders/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/folders/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/folders/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/folders/core/schemas/builders/object/object.ts b/seed/ts-express/folders/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/folders/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/folders/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/folders/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/folders/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/folders/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/folders/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/folders/core/schemas/builders/object/property.ts b/seed/ts-express/folders/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/folders/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/folders/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/folders/core/schemas/builders/object/types.ts b/seed/ts-express/folders/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/folders/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/folders/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/folders/core/schemas/builders/primitives/any.ts b/seed/ts-express/folders/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/folders/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/folders/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/folders/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/folders/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/folders/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/folders/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/folders/core/schemas/builders/primitives/number.ts b/seed/ts-express/folders/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/folders/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/folders/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/folders/core/schemas/builders/primitives/string.ts b/seed/ts-express/folders/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/folders/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/folders/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/folders/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/folders/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/folders/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/folders/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/folders/core/schemas/builders/record/record.ts b/seed/ts-express/folders/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/folders/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/folders/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/folders/core/schemas/builders/record/types.ts b/seed/ts-express/folders/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/folders/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/folders/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/folders/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/folders/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/folders/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/folders/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/folders/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/folders/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/folders/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/folders/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/folders/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/folders/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/folders/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/folders/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/folders/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/folders/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/folders/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/folders/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/folders/core/schemas/builders/set/set.ts b/seed/ts-express/folders/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/folders/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/folders/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/folders/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/folders/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/folders/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/folders/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/folders/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/folders/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/folders/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/folders/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/folders/core/schemas/builders/union/types.ts b/seed/ts-express/folders/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/folders/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/folders/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/folders/core/schemas/builders/union/union.ts b/seed/ts-express/folders/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/folders/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/folders/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/folders/core/schemas/index.ts b/seed/ts-express/folders/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/folders/core/schemas/index.ts
+++ b/seed/ts-express/folders/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/folders/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/folders/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/folders/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/folders/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/folders/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/folders/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/folders/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/folders/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/http-head/core/schemas/Schema.ts b/seed/ts-express/http-head/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/http-head/core/schemas/Schema.ts
+++ b/seed/ts-express/http-head/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/http-head/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/http-head/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/http-head/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/http-head/core/schemas/builders/date/date.ts b/seed/ts-express/http-head/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/http-head/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/http-head/core/schemas/builders/enum/enum.ts b/seed/ts-express/http-head/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/http-head/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/http-head/core/schemas/builders/index.ts b/seed/ts-express/http-head/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/http-head/core/schemas/builders/index.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/http-head/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/http-head/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/http-head/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/http-head/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/http-head/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/http-head/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/http-head/core/schemas/builders/list/list.ts b/seed/ts-express/http-head/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/http-head/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/http-head/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/http-head/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/http-head/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/http-head/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/http-head/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/http-head/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/http-head/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/http-head/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/http-head/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/http-head/core/schemas/builders/object-like/types.ts b/seed/ts-express/http-head/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/http-head/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/http-head/core/schemas/builders/object/object.ts b/seed/ts-express/http-head/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/http-head/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/http-head/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/http-head/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/http-head/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/http-head/core/schemas/builders/object/property.ts b/seed/ts-express/http-head/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/http-head/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/http-head/core/schemas/builders/object/types.ts b/seed/ts-express/http-head/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/http-head/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/http-head/core/schemas/builders/primitives/any.ts b/seed/ts-express/http-head/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/http-head/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/http-head/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/http-head/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/http-head/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/http-head/core/schemas/builders/primitives/number.ts b/seed/ts-express/http-head/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/http-head/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/http-head/core/schemas/builders/primitives/string.ts b/seed/ts-express/http-head/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/http-head/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/http-head/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/http-head/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/http-head/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/http-head/core/schemas/builders/record/record.ts b/seed/ts-express/http-head/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/http-head/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/http-head/core/schemas/builders/record/types.ts b/seed/ts-express/http-head/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/http-head/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/http-head/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/http-head/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/http-head/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/http-head/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/http-head/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/http-head/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/http-head/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/http-head/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/http-head/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/http-head/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/http-head/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/http-head/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/http-head/core/schemas/builders/set/set.ts b/seed/ts-express/http-head/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/http-head/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/http-head/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/http-head/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/http-head/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/http-head/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/http-head/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/http-head/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/http-head/core/schemas/builders/union/types.ts b/seed/ts-express/http-head/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/http-head/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/http-head/core/schemas/builders/union/union.ts b/seed/ts-express/http-head/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/http-head/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/http-head/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/http-head/core/schemas/index.ts b/seed/ts-express/http-head/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/http-head/core/schemas/index.ts
+++ b/seed/ts-express/http-head/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/http-head/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/http-head/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/http-head/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/http-head/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/http-head/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/http-head/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/http-head/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/http-head/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/idempotency-headers/core/schemas/Schema.ts b/seed/ts-express/idempotency-headers/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/Schema.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/date/date.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/enum/enum.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/index.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/index.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/list/list.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/object-like/types.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/object/object.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/object/property.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/object/types.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/primitives/any.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/primitives/number.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/primitives/string.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/record/record.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/record/types.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/set/set.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/union/types.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/idempotency-headers/core/schemas/builders/union/union.ts b/seed/ts-express/idempotency-headers/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/idempotency-headers/core/schemas/index.ts b/seed/ts-express/idempotency-headers/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/index.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/idempotency-headers/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/idempotency-headers/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/idempotency-headers/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/idempotency-headers/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/idempotency-headers/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/idempotency-headers/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/Schema.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/Schema.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/date/date.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/enum/enum.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/index.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/index.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/list/list.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object-like/types.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object/object.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object/property.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object/types.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/primitives/any.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/primitives/number.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/primitives/string.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/record/record.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/record/types.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/set/set.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/union/types.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/union/union.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/index.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/index.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/imdb/no-custom-config/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/imdb/no-custom-config/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/imdb/no-custom-config/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/imdb/no-custom-config/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/Schema.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/Schema.d.ts
index 16acf029f..19b7a567c 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/Schema.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/Schema.d.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 export type inferRaw<S extends Schema> = S extends Schema<infer Raw, any> ? Raw : never;
 export type inferParsed<S extends Schema> = S extends Schema<any, infer Parsed> ? Parsed : never;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/bigint/bigint.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/bigint/bigint.d.ts
index 57a5d4477..03ff3797d 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/bigint/bigint.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/bigint/bigint.d.ts
@@ -1,2 +1,2 @@
-import { Schema } from "../../Schema";
+import { type Schema } from "../../Schema";
 export declare function bigint(): Schema<bigint | number, bigint>;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/bigint/bigint.js b/seed/ts-express/imdb/output-compiled/core/schemas/builders/bigint/bigint.js
index 157c4a11e..3c8fb0a77 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/bigint/bigint.js
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/bigint/bigint.js
@@ -4,7 +4,7 @@ exports.bigint = bigint;
 const Schema_1 = require("../../Schema");
 const getErrorMessageForIncorrectType_1 = require("../../utils/getErrorMessageForIncorrectType");
 const maybeSkipValidation_1 = require("../../utils/maybeSkipValidation");
-const schema_utils_1 = require("../schema-utils");
+const index_1 = require("../schema-utils/index");
 function bigint() {
     const baseSchema = {
         parse: (raw, { breadcrumbsPrefix = [] } = {}) => {
@@ -49,5 +49,5 @@ function bigint() {
         },
         getType: () => Schema_1.SchemaType.BIGINT,
     };
-    return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
+    return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, index_1.getSchemaUtils)(baseSchema));
 }
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/date/date.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/date/date.d.ts
index 26359d1c5..2bcfcba3e 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/date/date.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/date/date.d.ts
@@ -1,2 +1,2 @@
-import { Schema } from "../../Schema";
+import { type Schema } from "../../Schema";
 export declare function date(): Schema<string, Date>;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/date/date.js b/seed/ts-express/imdb/output-compiled/core/schemas/builders/date/date.js
index 8597e333d..a9f264c0e 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/date/date.js
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/date/date.js
@@ -4,7 +4,7 @@ exports.date = date;
 const Schema_1 = require("../../Schema");
 const getErrorMessageForIncorrectType_1 = require("../../utils/getErrorMessageForIncorrectType");
 const maybeSkipValidation_1 = require("../../utils/maybeSkipValidation");
-const schema_utils_1 = require("../schema-utils");
+const index_1 = require("../schema-utils/index");
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX = /^([+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([.,]\d+(?!:))?)?(\17[0-5]\d([.,]\d+)?)?([zZ]|([+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;
 function date() {
@@ -58,5 +58,5 @@ function date() {
         },
         getType: () => Schema_1.SchemaType.DATE,
     };
-    return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
+    return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, index_1.getSchemaUtils)(baseSchema));
 }
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/enum/enum.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/enum/enum.d.ts
index b5d6f40a3..f77724803 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/enum/enum.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/enum/enum.d.ts
@@ -1,2 +1,2 @@
-import { Schema } from "../../Schema";
+import { type Schema } from "../../Schema";
 export declare function enum_<U extends string, E extends U[]>(values: E): Schema<E[number], E[number]>;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/index.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/index.d.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/index.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/index.d.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/index.js b/seed/ts-express/imdb/output-compiled/core/schemas/builders/index.js
index eb8d9805d..93e472b11 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/index.js
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/index.js
@@ -14,17 +14,17 @@ var __exportStar = (this && this.__exportStar) || function(m, exports) {
     for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
 };
 Object.defineProperty(exports, "__esModule", { value: true });
-__exportStar(require("./bigint"), exports);
-__exportStar(require("./date"), exports);
-__exportStar(require("./enum"), exports);
-__exportStar(require("./lazy"), exports);
-__exportStar(require("./list"), exports);
-__exportStar(require("./literals"), exports);
-__exportStar(require("./object"), exports);
-__exportStar(require("./object-like"), exports);
-__exportStar(require("./primitives"), exports);
-__exportStar(require("./record"), exports);
-__exportStar(require("./schema-utils"), exports);
-__exportStar(require("./set"), exports);
-__exportStar(require("./undiscriminated-union"), exports);
-__exportStar(require("./union"), exports);
+__exportStar(require("./bigint/index"), exports);
+__exportStar(require("./date/index"), exports);
+__exportStar(require("./enum/index"), exports);
+__exportStar(require("./lazy/index"), exports);
+__exportStar(require("./list/index"), exports);
+__exportStar(require("./literals/index"), exports);
+__exportStar(require("./object/index"), exports);
+__exportStar(require("./object-like/index"), exports);
+__exportStar(require("./primitives/index"), exports);
+__exportStar(require("./record/index"), exports);
+__exportStar(require("./schema-utils/index"), exports);
+__exportStar(require("./set/index"), exports);
+__exportStar(require("./undiscriminated-union/index"), exports);
+__exportStar(require("./union/index"), exports);
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/lazy/lazy.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/lazy/lazy.d.ts
index 23a4a17ad..4a7788431 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/lazy/lazy.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/lazy/lazy.d.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 export declare function lazy<Raw, Parsed>(getter: SchemaGetter<Schema<Raw, Parsed>>): Schema<Raw, Parsed>;
 export declare function constructLazyBaseSchema<Raw, Parsed>(getter: SchemaGetter<Schema<Raw, Parsed>>): BaseSchema<Raw, Parsed>;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/lazy/lazy.js b/seed/ts-express/imdb/output-compiled/core/schemas/builders/lazy/lazy.js
index d55d34d9f..372bb502c 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/lazy/lazy.js
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/lazy/lazy.js
@@ -3,10 +3,10 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.lazy = lazy;
 exports.constructLazyBaseSchema = constructLazyBaseSchema;
 exports.getMemoizedSchema = getMemoizedSchema;
-const schema_utils_1 = require("../schema-utils");
+const index_1 = require("../schema-utils/index");
 function lazy(getter) {
     const baseSchema = constructLazyBaseSchema(getter);
-    return Object.assign(Object.assign({}, baseSchema), (0, schema_utils_1.getSchemaUtils)(baseSchema));
+    return Object.assign(Object.assign({}, baseSchema), (0, index_1.getSchemaUtils)(baseSchema));
 }
 function constructLazyBaseSchema(getter) {
     return {
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/lazy/lazyObject.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/lazy/lazyObject.d.ts
index 0276841da..1c4b043bc 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/lazy/lazyObject.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/lazy/lazyObject.d.ts
@@ -1,3 +1,3 @@
-import { ObjectSchema } from "../object/types";
-import { SchemaGetter } from "./lazy";
+import type { ObjectSchema } from "../object/types";
+import { type SchemaGetter } from "./lazy";
 export declare function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed>;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/lazy/lazyObject.js b/seed/ts-express/imdb/output-compiled/core/schemas/builders/lazy/lazyObject.js
index ed0096632..916cd4d74 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/lazy/lazyObject.js
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/lazy/lazyObject.js
@@ -1,11 +1,11 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.lazyObject = lazyObject;
-const object_1 = require("../object");
-const object_like_1 = require("../object-like");
-const schema_utils_1 = require("../schema-utils");
+const index_1 = require("../object/index");
+const index_2 = require("../object-like/index");
+const index_3 = require("../schema-utils/index");
 const lazy_1 = require("./lazy");
 function lazyObject(getter) {
     const baseSchema = Object.assign(Object.assign({}, (0, lazy_1.constructLazyBaseSchema)(getter)), { _getRawProperties: () => (0, lazy_1.getMemoizedSchema)(getter)._getRawProperties(), _getParsedProperties: () => (0, lazy_1.getMemoizedSchema)(getter)._getParsedProperties() });
-    return Object.assign(Object.assign(Object.assign(Object.assign({}, baseSchema), (0, schema_utils_1.getSchemaUtils)(baseSchema)), (0, object_like_1.getObjectLikeUtils)(baseSchema)), (0, object_1.getObjectUtils)(baseSchema));
+    return Object.assign(Object.assign(Object.assign(Object.assign({}, baseSchema), (0, index_3.getSchemaUtils)(baseSchema)), (0, index_2.getObjectLikeUtils)(baseSchema)), (0, index_1.getObjectUtils)(baseSchema));
 }
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/list/list.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/list/list.d.ts
index 66db572f9..c8b7cc42c 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/list/list.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/list/list.d.ts
@@ -1,2 +1,2 @@
-import { Schema } from "../../Schema";
+import { type Schema } from "../../Schema";
 export declare function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]>;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/list/list.js b/seed/ts-express/imdb/output-compiled/core/schemas/builders/list/list.js
index 32ecaaa6f..464a6d952 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/list/list.js
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/list/list.js
@@ -4,7 +4,7 @@ exports.list = list;
 const Schema_1 = require("../../Schema");
 const getErrorMessageForIncorrectType_1 = require("../../utils/getErrorMessageForIncorrectType");
 const maybeSkipValidation_1 = require("../../utils/maybeSkipValidation");
-const schema_utils_1 = require("../schema-utils");
+const index_1 = require("../schema-utils/index");
 function list(schema) {
     const baseSchema = {
         parse: (raw, opts) => validateAndTransformArray(raw, (item, index) => {
@@ -17,7 +17,7 @@ function list(schema) {
         }),
         getType: () => Schema_1.SchemaType.LIST,
     };
-    return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
+    return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, index_1.getSchemaUtils)(baseSchema));
 }
 function validateAndTransformArray(value, transformItem) {
     if (!Array.isArray(value)) {
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/literals/booleanLiteral.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/literals/booleanLiteral.d.ts
index e975bcd96..919d12587 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/literals/booleanLiteral.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/literals/booleanLiteral.d.ts
@@ -1,2 +1,2 @@
-import { Schema } from "../../Schema";
+import { type Schema } from "../../Schema";
 export declare function booleanLiteral<V extends boolean>(literal: V): Schema<V, V>;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/literals/stringLiteral.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/literals/stringLiteral.d.ts
index 2fb94be5f..2678512d9 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/literals/stringLiteral.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/literals/stringLiteral.d.ts
@@ -1,2 +1,2 @@
-import { Schema } from "../../Schema";
+import { type Schema } from "../../Schema";
 export declare function stringLiteral<V extends string>(literal: V): Schema<V, V>;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/object-like/getObjectLikeUtils.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/object-like/getObjectLikeUtils.d.ts
index 47fa3aa2c..3152216a3 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/object-like/getObjectLikeUtils.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/object-like/getObjectLikeUtils.d.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import type { BaseSchema } from "../../Schema";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 export declare function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed>;
 /**
  * object-like utils are defined in one file to resolve issues with circular imports
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/object-like/getObjectLikeUtils.js b/seed/ts-express/imdb/output-compiled/core/schemas/builders/object-like/getObjectLikeUtils.js
index a7c39af23..2611c1f16 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/object-like/getObjectLikeUtils.js
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/object-like/getObjectLikeUtils.js
@@ -5,7 +5,7 @@ exports.withParsedProperties = withParsedProperties;
 const filterObject_1 = require("../../utils/filterObject");
 const getErrorMessageForIncorrectType_1 = require("../../utils/getErrorMessageForIncorrectType");
 const isPlainObject_1 = require("../../utils/isPlainObject");
-const schema_utils_1 = require("../schema-utils");
+const index_1 = require("../schema-utils/index");
 function getObjectLikeUtils(schema) {
     return {
         withParsedProperties: (properties) => withParsedProperties(schema, properties),
@@ -49,5 +49,5 @@ function withParsedProperties(objectLike, properties) {
         },
         getType: () => objectLike.getType(),
     };
-    return Object.assign(Object.assign(Object.assign({}, objectSchema), (0, schema_utils_1.getSchemaUtils)(objectSchema)), getObjectLikeUtils(objectSchema));
+    return Object.assign(Object.assign(Object.assign({}, objectSchema), (0, index_1.getSchemaUtils)(objectSchema)), getObjectLikeUtils(objectSchema));
 }
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/object-like/types.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/object-like/types.d.ts
index 12344b9bb..c76f9d894 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/object-like/types.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/object-like/types.d.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> & BaseSchema<Raw, Parsed> & ObjectLikeUtils<Raw, Parsed>;
 export interface ObjectLikeUtils<Raw, Parsed> {
     withParsedProperties: <T extends Record<string, any>>(properties: {
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/object/object.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/object/object.d.ts
index 9f22bb098..30eefbe1b 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/object/object.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/object/object.d.ts
@@ -1,3 +1,3 @@
-import { BaseObjectSchema, inferObjectSchemaFromPropertySchemas, ObjectUtils, PropertySchemas } from "./types";
+import type { BaseObjectSchema, inferObjectSchemaFromPropertySchemas, ObjectUtils, PropertySchemas } from "./types";
 export declare function object<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(schemas: T): inferObjectSchemaFromPropertySchemas<T>;
 export declare function getObjectUtils<Raw, Parsed>(schema: BaseObjectSchema<Raw, Parsed>): ObjectUtils<Raw, Parsed>;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/object/object.js b/seed/ts-express/imdb/output-compiled/core/schemas/builders/object/object.js
index d596c17a9..08f91d0ad 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/object/object.js
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/object/object.js
@@ -10,8 +10,8 @@ const isPlainObject_1 = require("../../utils/isPlainObject");
 const keys_1 = require("../../utils/keys");
 const maybeSkipValidation_1 = require("../../utils/maybeSkipValidation");
 const partition_1 = require("../../utils/partition");
-const object_like_1 = require("../object-like");
-const schema_utils_1 = require("../schema-utils");
+const index_1 = require("../object-like/index");
+const index_2 = require("../schema-utils/index");
 const property_1 = require("./property");
 function object(schemas) {
     const baseSchema = {
@@ -103,7 +103,7 @@ function object(schemas) {
         },
         getType: () => Schema_1.SchemaType.OBJECT,
     };
-    return Object.assign(Object.assign(Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema)), (0, object_like_1.getObjectLikeUtils)(baseSchema)), getObjectUtils(baseSchema));
+    return Object.assign(Object.assign(Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, index_2.getSchemaUtils)(baseSchema)), (0, index_1.getObjectLikeUtils)(baseSchema)), getObjectUtils(baseSchema));
 }
 function validateAndTransformObject({ value, requiredKeys, getProperty, unrecognizedObjectKeys = "fail", skipValidation = false, breadcrumbsPrefix = [], }) {
     if (!(0, isPlainObject_1.isPlainObject)(value)) {
@@ -192,7 +192,7 @@ function getObjectUtils(schema) {
                 },
                 getType: () => Schema_1.SchemaType.OBJECT,
             };
-            return Object.assign(Object.assign(Object.assign(Object.assign({}, baseSchema), (0, schema_utils_1.getSchemaUtils)(baseSchema)), (0, object_like_1.getObjectLikeUtils)(baseSchema)), getObjectUtils(baseSchema));
+            return Object.assign(Object.assign(Object.assign(Object.assign({}, baseSchema), (0, index_2.getSchemaUtils)(baseSchema)), (0, index_1.getObjectLikeUtils)(baseSchema)), getObjectUtils(baseSchema));
         },
         passthrough: () => {
             const baseSchema = {
@@ -220,7 +220,7 @@ function getObjectUtils(schema) {
                 },
                 getType: () => Schema_1.SchemaType.OBJECT,
             };
-            return Object.assign(Object.assign(Object.assign(Object.assign({}, baseSchema), (0, schema_utils_1.getSchemaUtils)(baseSchema)), (0, object_like_1.getObjectLikeUtils)(baseSchema)), getObjectUtils(baseSchema));
+            return Object.assign(Object.assign(Object.assign(Object.assign({}, baseSchema), (0, index_2.getSchemaUtils)(baseSchema)), (0, index_1.getObjectLikeUtils)(baseSchema)), getObjectUtils(baseSchema));
         },
     };
 }
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/object/objectWithoutOptionalProperties.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/object/objectWithoutOptionalProperties.d.ts
index 1b28f7d64..785f5fbfa 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/object/objectWithoutOptionalProperties.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/object/objectWithoutOptionalProperties.d.ts
@@ -1,4 +1,4 @@
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
 export declare function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(schemas: T): inferObjectWithoutOptionalPropertiesSchemaFromPropertySchemas<T>;
 export type inferObjectWithoutOptionalPropertiesSchemaFromPropertySchemas<T extends PropertySchemas<keyof T>> = ObjectSchema<inferRawObjectFromPropertySchemas<T>, inferParsedObjectWithoutOptionalPropertiesFromPropertySchemas<T>>;
 export type inferParsedObjectWithoutOptionalPropertiesFromPropertySchemas<T extends PropertySchemas<keyof T>> = {
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/object/property.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/object/property.d.ts
index a334cf486..9c3464196 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/object/property.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/object/property.d.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 export declare function property<RawKey extends string, RawValue, ParsedValue>(rawKey: RawKey, valueSchema: Schema<RawValue, ParsedValue>): Property<RawKey, RawValue, ParsedValue>;
 export interface Property<RawKey extends string, RawValue, ParsedValue> {
     rawKey: RawKey;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/object/types.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/object/types.d.ts
index c679816dd..8c9465789 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/object/types.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/object/types.d.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> & ObjectLikeUtils<Raw, Parsed> & ObjectUtils<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 export interface BaseObjectSchema<Raw, Parsed> extends BaseSchema<Raw, Parsed> {
     _getRawProperties: () => (keyof Raw)[];
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/primitives/any.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/primitives/any.d.ts
index 558ae796e..5a6cc241c 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/primitives/any.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/primitives/any.d.ts
@@ -1,2 +1,2 @@
-import { Schema } from "../../Schema";
+import { type Schema } from "../../Schema";
 export declare const any: () => Schema<any, any>;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/primitives/boolean.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/primitives/boolean.d.ts
index a250c2e35..d172de55f 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/primitives/boolean.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/primitives/boolean.d.ts
@@ -1,2 +1,2 @@
-import { Schema } from "../../Schema";
+import { type Schema } from "../../Schema";
 export declare const boolean: () => Schema<boolean, boolean>;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/primitives/number.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/primitives/number.d.ts
index afb9829f2..0aa408dc6 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/primitives/number.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/primitives/number.d.ts
@@ -1,2 +1,2 @@
-import { Schema } from "../../Schema";
+import { type Schema } from "../../Schema";
 export declare const number: () => Schema<number, number>;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/primitives/string.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/primitives/string.d.ts
index f6feecd46..a21a4f453 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/primitives/string.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/primitives/string.d.ts
@@ -1,2 +1,2 @@
-import { Schema } from "../../Schema";
+import { type Schema } from "../../Schema";
 export declare const string: () => Schema<string, string>;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/primitives/unknown.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/primitives/unknown.d.ts
index 30dfbcac4..fbeeeb7ea 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/primitives/unknown.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/primitives/unknown.d.ts
@@ -1,2 +1,2 @@
-import { Schema } from "../../Schema";
+import { type Schema } from "../../Schema";
 export declare const unknown: () => Schema<unknown, unknown>;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/record/record.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/record/record.d.ts
index 843be2078..71489be15 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/record/record.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/record/record.d.ts
@@ -1,3 +1,3 @@
-import { Schema } from "../../Schema";
-import { RecordSchema } from "./types";
+import { type Schema } from "../../Schema";
+import type { RecordSchema } from "./types";
 export declare function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(keySchema: Schema<RawKey, ParsedKey>, valueSchema: Schema<RawValue, ParsedValue>): RecordSchema<RawKey, RawValue, ParsedKey, ParsedValue>;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/record/record.js b/seed/ts-express/imdb/output-compiled/core/schemas/builders/record/record.js
index 175d1c8a3..a2b6b85d2 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/record/record.js
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/record/record.js
@@ -6,7 +6,7 @@ const entries_1 = require("../../utils/entries");
 const getErrorMessageForIncorrectType_1 = require("../../utils/getErrorMessageForIncorrectType");
 const isPlainObject_1 = require("../../utils/isPlainObject");
 const maybeSkipValidation_1 = require("../../utils/maybeSkipValidation");
-const schema_utils_1 = require("../schema-utils");
+const index_1 = require("../schema-utils/index");
 function record(keySchema, valueSchema) {
     const baseSchema = {
         parse: (raw, opts) => {
@@ -41,7 +41,7 @@ function record(keySchema, valueSchema) {
         },
         getType: () => Schema_1.SchemaType.RECORD,
     };
-    return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
+    return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, index_1.getSchemaUtils)(baseSchema));
 }
 function validateAndTransformRecord({ value, isKeyNumeric, transformKey, transformValue, breadcrumbsPrefix = [], }) {
     if (!(0, isPlainObject_1.isPlainObject)(value)) {
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/record/types.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/record/types.d.ts
index 571be7936..4013c12db 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/record/types.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/record/types.d.ts
@@ -1,4 +1,4 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 export type RecordSchema<RawKey extends string | number, RawValue, ParsedKey extends string | number, ParsedValue> = BaseRecordSchema<RawKey, RawValue, ParsedKey, ParsedValue> & SchemaUtils<Record<RawKey, RawValue>, Record<ParsedKey, ParsedValue>>;
 export type BaseRecordSchema<RawKey extends string | number, RawValue, ParsedKey extends string | number, ParsedValue> = BaseSchema<Record<RawKey, RawValue>, Record<ParsedKey, ParsedValue>>;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/schema-utils/JsonError.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/schema-utils/JsonError.d.ts
index 40796c8fc..689b9b337 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/schema-utils/JsonError.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/schema-utils/JsonError.d.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 export declare class JsonError extends Error {
     readonly errors: ValidationError[];
     constructor(errors: ValidationError[]);
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/schema-utils/ParseError.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/schema-utils/ParseError.d.ts
index 182193e4d..733c2ca84 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/schema-utils/ParseError.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/schema-utils/ParseError.d.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 export declare class ParseError extends Error {
     readonly errors: ValidationError[];
     constructor(errors: ValidationError[]);
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/schema-utils/getSchemaUtils.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/schema-utils/getSchemaUtils.d.ts
index 11990c254..b3d87f5cb 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/schema-utils/getSchemaUtils.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/schema-utils/getSchemaUtils.d.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions } from "../../Schema";
 export interface SchemaUtils<Raw, Parsed> {
     nullable: () => Schema<Raw | null, Parsed | null>;
     optional: () => Schema<Raw | null | undefined, Parsed | undefined>;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/schema-utils/stringifyValidationErrors.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/schema-utils/stringifyValidationErrors.d.ts
index e24cad9c2..17f2df111 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/schema-utils/stringifyValidationErrors.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/schema-utils/stringifyValidationErrors.d.ts
@@ -1,2 +1,2 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 export declare function stringifyValidationError(error: ValidationError): string;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/set/set.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/set/set.d.ts
index d96a62c52..98d0c3cb3 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/set/set.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/set/set.d.ts
@@ -1,2 +1,2 @@
-import { Schema } from "../../Schema";
+import { type Schema } from "../../Schema";
 export declare function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>>;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/set/set.js b/seed/ts-express/imdb/output-compiled/core/schemas/builders/set/set.js
index 1b5fae11b..8497208b2 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/set/set.js
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/set/set.js
@@ -4,10 +4,10 @@ exports.set = set;
 const Schema_1 = require("../../Schema");
 const getErrorMessageForIncorrectType_1 = require("../../utils/getErrorMessageForIncorrectType");
 const maybeSkipValidation_1 = require("../../utils/maybeSkipValidation");
-const list_1 = require("../list");
-const schema_utils_1 = require("../schema-utils");
+const index_1 = require("../list/index");
+const index_2 = require("../schema-utils/index");
 function set(schema) {
-    const listSchema = (0, list_1.list)(schema);
+    const listSchema = (0, index_1.list)(schema);
     const baseSchema = {
         parse: (raw, opts) => {
             const parsedList = listSchema.parse(raw, opts);
@@ -39,5 +39,5 @@ function set(schema) {
         },
         getType: () => Schema_1.SchemaType.SET,
     };
-    return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
+    return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, index_2.getSchemaUtils)(baseSchema));
 }
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/undiscriminated-union/types.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/undiscriminated-union/types.d.ts
index 041dd9271..965c3cb01 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/undiscriminated-union/types.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/undiscriminated-union/types.d.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<inferRawUnidiscriminatedUnionSchema<Schemas>, inferParsedUnidiscriminatedUnionSchema<Schemas>>;
 export type inferRawUnidiscriminatedUnionSchema<Schemas extends [...Schema[]]> = inferRaw<Schemas[number]>;
 export type inferParsedUnidiscriminatedUnionSchema<Schemas extends [...Schema[]]> = inferParsed<Schemas[number]>;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.d.ts
index c7c0e8b4c..4c5a45ba1 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.d.ts
@@ -1,3 +1,3 @@
-import { Schema } from "../../Schema";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { type Schema } from "../../Schema";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 export declare function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(schemas: Schemas): Schema<inferRawUnidiscriminatedUnionSchema<Schemas>, inferParsedUnidiscriminatedUnionSchema<Schemas>>;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.js b/seed/ts-express/imdb/output-compiled/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.js
index 46f0f4198..94a88300b 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.js
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.js
@@ -3,7 +3,7 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.undiscriminatedUnion = undiscriminatedUnion;
 const Schema_1 = require("../../Schema");
 const maybeSkipValidation_1 = require("../../utils/maybeSkipValidation");
-const schema_utils_1 = require("../schema-utils");
+const index_1 = require("../schema-utils/index");
 function undiscriminatedUnion(schemas) {
     const baseSchema = {
         parse: (raw, opts) => {
@@ -14,7 +14,7 @@ function undiscriminatedUnion(schemas) {
         },
         getType: () => Schema_1.SchemaType.UNDISCRIMINATED_UNION,
     };
-    return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
+    return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, index_1.getSchemaUtils)(baseSchema));
 }
 function validateAndTransformUndiscriminatedUnion(transform, schemas, opts) {
     const errors = [];
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/union/types.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/union/types.d.ts
index c16d34bdd..e06680c49 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/union/types.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/union/types.d.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
 };
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/union/union.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/builders/union/union.d.ts
index 6ebd091ab..957b25839 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/union/union.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/union/union.d.ts
@@ -1,4 +1,4 @@
-import { ObjectLikeSchema } from "../object-like";
-import { Discriminant } from "./discriminant";
-import { inferParsedUnion, inferRawUnion, UnionSubtypes } from "./types";
+import { type ObjectLikeSchema } from "../object-like";
+import type { Discriminant } from "./discriminant";
+import type { inferParsedUnion, inferRawUnion, UnionSubtypes } from "./types";
 export declare function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(discriminant: D, union: U): ObjectLikeSchema<inferRawUnion<D, U>, inferParsedUnion<D, U>>;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/builders/union/union.js b/seed/ts-express/imdb/output-compiled/core/schemas/builders/union/union.js
index 4d7b97e6d..f608f67ed 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/builders/union/union.js
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/builders/union/union.js
@@ -17,15 +17,15 @@ const getErrorMessageForIncorrectType_1 = require("../../utils/getErrorMessageFo
 const isPlainObject_1 = require("../../utils/isPlainObject");
 const keys_1 = require("../../utils/keys");
 const maybeSkipValidation_1 = require("../../utils/maybeSkipValidation");
-const enum_1 = require("../enum");
+const index_1 = require("../enum/index");
 const object_like_1 = require("../object-like");
-const schema_utils_1 = require("../schema-utils");
+const index_2 = require("../schema-utils/index");
 function union(discriminant, union) {
     const rawDiscriminant = typeof discriminant === "string" ? discriminant : discriminant.rawDiscriminant;
     const parsedDiscriminant = typeof discriminant === "string"
         ? discriminant
         : discriminant.parsedDiscriminant;
-    const discriminantValueSchema = (0, enum_1.enum_)((0, keys_1.keys)(union));
+    const discriminantValueSchema = (0, index_1.enum_)((0, keys_1.keys)(union));
     const baseSchema = {
         parse: (raw, opts) => {
             return transformAndValidateUnion({
@@ -65,7 +65,7 @@ function union(discriminant, union) {
         },
         getType: () => Schema_1.SchemaType.UNION,
     };
-    return Object.assign(Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema)), (0, object_like_1.getObjectLikeUtils)(baseSchema));
+    return Object.assign(Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, index_2.getSchemaUtils)(baseSchema)), (0, object_like_1.getObjectLikeUtils)(baseSchema));
 }
 function transformAndValidateUnion({ value, discriminant, transformedDiscriminant, transformDiscriminantValue, getAdditionalPropertiesSchema, allowUnrecognizedUnionMembers = false, transformAdditionalProperties, breadcrumbsPrefix = [], }) {
     if (!(0, isPlainObject_1.isPlainObject)(value)) {
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/index.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/index.d.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/index.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/index.d.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/index.js b/seed/ts-express/imdb/output-compiled/core/schemas/index.js
index 3b189fb49..1a8c0baa2 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/index.js
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/index.js
@@ -14,4 +14,4 @@ var __exportStar = (this && this.__exportStar) || function(m, exports) {
     for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
 };
 Object.defineProperty(exports, "__esModule", { value: true });
-__exportStar(require("./builders"), exports);
+__exportStar(require("./builders/index"), exports);
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/utils/createIdentitySchemaCreator.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/utils/createIdentitySchemaCreator.d.ts
index 362c9e27b..97c4bdd05 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/utils/createIdentitySchemaCreator.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/utils/createIdentitySchemaCreator.d.ts
@@ -1,2 +1,2 @@
-import { MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 export declare function createIdentitySchemaCreator<T>(schemaType: SchemaType, validate: (value: unknown, opts?: SchemaOptions) => MaybeValid<T>): () => Schema<T, T>;
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/utils/createIdentitySchemaCreator.js b/seed/ts-express/imdb/output-compiled/core/schemas/utils/createIdentitySchemaCreator.js
index 5064c1514..ac656c4ce 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/utils/createIdentitySchemaCreator.js
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/utils/createIdentitySchemaCreator.js
@@ -1,7 +1,7 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.createIdentitySchemaCreator = createIdentitySchemaCreator;
-const schema_utils_1 = require("../builders/schema-utils");
+const index_1 = require("../builders/schema-utils/index");
 const maybeSkipValidation_1 = require("./maybeSkipValidation");
 function createIdentitySchemaCreator(schemaType, validate) {
     return () => {
@@ -10,6 +10,6 @@ function createIdentitySchemaCreator(schemaType, validate) {
             json: validate,
             getType: () => schemaType,
         };
-        return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, schema_utils_1.getSchemaUtils)(baseSchema));
+        return Object.assign(Object.assign({}, (0, maybeSkipValidation_1.maybeSkipValidation)(baseSchema)), (0, index_1.getSchemaUtils)(baseSchema));
     };
 }
diff --git a/seed/ts-express/imdb/output-compiled/core/schemas/utils/maybeSkipValidation.d.ts b/seed/ts-express/imdb/output-compiled/core/schemas/utils/maybeSkipValidation.d.ts
index 3b0dc64ca..9b9c27a78 100644
--- a/seed/ts-express/imdb/output-compiled/core/schemas/utils/maybeSkipValidation.d.ts
+++ b/seed/ts-express/imdb/output-compiled/core/schemas/utils/maybeSkipValidation.d.ts
@@ -1,2 +1,2 @@
-import { BaseSchema } from "../Schema";
+import type { BaseSchema } from "../Schema";
 export declare function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S;
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/Schema.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/Schema.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/date/date.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/enum/enum.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/index.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/index.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/list/list.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object-like/types.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object/object.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object/property.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object/types.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/primitives/any.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/primitives/number.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/primitives/string.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/record/record.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/record/types.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/set/set.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/union/types.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/union/union.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/index.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/index.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/imdb/skip-request-validation/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/imdb/skip-request-validation/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/imdb/skip-request-validation/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/imdb/skip-request-validation/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/Schema.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/Schema.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/date/date.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/enum/enum.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/index.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/index.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/list/list.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object-like/types.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object/object.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object/property.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object/types.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/primitives/any.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/primitives/number.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/primitives/string.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/record/record.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/record/types.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/set/set.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/union/types.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/union/union.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/index.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/index.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/imdb/skip-response-validation/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/imdb/skip-response-validation/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/imdb/skip-response-validation/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/imdb/skip-response-validation/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/Schema.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/Schema.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/date/date.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/enum/enum.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/index.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/index.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/list/list.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object-like/types.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object/object.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object/property.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object/types.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/primitives/any.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/primitives/number.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/primitives/string.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/record/record.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/record/types.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/set/set.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/union/types.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/union/union.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/index.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/index.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/imdb/validation-status-code/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/imdb/validation-status-code/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/imdb/validation-status-code/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/imdb/validation-status-code/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/Schema.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/Schema.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/date/date.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/enum/enum.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/index.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/index.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/list/list.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object-like/types.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object/object.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object/property.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object/types.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/primitives/any.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/primitives/number.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/primitives/string.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/record/record.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/record/types.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/set/set.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/union/types.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/union/union.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/index.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/index.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/inferred-auth-explicit/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/inferred-auth-explicit/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/inferred-auth-explicit/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/inferred-auth-explicit/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/Schema.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/Schema.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/date/date.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/enum/enum.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/index.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/index.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/list/list.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object-like/types.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object/object.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object/property.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object/types.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/primitives/any.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/primitives/number.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/primitives/string.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/record/record.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/record/types.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/set/set.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/union/types.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/union/union.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/index.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/index.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/inferred-auth-implicit-no-expiry/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/Schema.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/Schema.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/date/date.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/enum/enum.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/index.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/index.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/list/list.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object-like/types.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object/object.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object/property.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object/types.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/primitives/any.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/primitives/number.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/primitives/string.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/record/record.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/record/types.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/set/set.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/union/types.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/union/union.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/index.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/index.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/inferred-auth-implicit/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/inferred-auth-implicit/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/inferred-auth-implicit/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/inferred-auth-implicit/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/license/core/schemas/Schema.ts b/seed/ts-express/license/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/license/core/schemas/Schema.ts
+++ b/seed/ts-express/license/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/license/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/license/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/license/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/license/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/license/core/schemas/builders/date/date.ts b/seed/ts-express/license/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/license/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/license/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/license/core/schemas/builders/enum/enum.ts b/seed/ts-express/license/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/license/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/license/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/license/core/schemas/builders/index.ts b/seed/ts-express/license/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/license/core/schemas/builders/index.ts
+++ b/seed/ts-express/license/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/license/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/license/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/license/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/license/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/license/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/license/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/license/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/license/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/license/core/schemas/builders/list/list.ts b/seed/ts-express/license/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/license/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/license/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/license/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/license/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/license/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/license/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/license/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/license/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/license/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/license/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/license/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/license/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/license/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/license/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/license/core/schemas/builders/object-like/types.ts b/seed/ts-express/license/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/license/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/license/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/license/core/schemas/builders/object/object.ts b/seed/ts-express/license/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/license/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/license/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/license/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/license/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/license/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/license/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/license/core/schemas/builders/object/property.ts b/seed/ts-express/license/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/license/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/license/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/license/core/schemas/builders/object/types.ts b/seed/ts-express/license/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/license/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/license/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/license/core/schemas/builders/primitives/any.ts b/seed/ts-express/license/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/license/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/license/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/license/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/license/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/license/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/license/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/license/core/schemas/builders/primitives/number.ts b/seed/ts-express/license/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/license/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/license/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/license/core/schemas/builders/primitives/string.ts b/seed/ts-express/license/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/license/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/license/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/license/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/license/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/license/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/license/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/license/core/schemas/builders/record/record.ts b/seed/ts-express/license/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/license/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/license/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/license/core/schemas/builders/record/types.ts b/seed/ts-express/license/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/license/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/license/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/license/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/license/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/license/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/license/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/license/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/license/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/license/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/license/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/license/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/license/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/license/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/license/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/license/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/license/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/license/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/license/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/license/core/schemas/builders/set/set.ts b/seed/ts-express/license/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/license/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/license/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/license/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/license/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/license/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/license/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/license/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/license/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/license/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/license/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/license/core/schemas/builders/union/types.ts b/seed/ts-express/license/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/license/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/license/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/license/core/schemas/builders/union/union.ts b/seed/ts-express/license/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/license/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/license/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/license/core/schemas/index.ts b/seed/ts-express/license/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/license/core/schemas/index.ts
+++ b/seed/ts-express/license/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/license/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/license/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/license/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/license/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/license/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/license/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/license/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/license/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/literal/core/schemas/Schema.ts b/seed/ts-express/literal/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/literal/core/schemas/Schema.ts
+++ b/seed/ts-express/literal/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/literal/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/literal/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/literal/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/literal/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/literal/core/schemas/builders/date/date.ts b/seed/ts-express/literal/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/literal/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/literal/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/literal/core/schemas/builders/enum/enum.ts b/seed/ts-express/literal/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/literal/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/literal/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/literal/core/schemas/builders/index.ts b/seed/ts-express/literal/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/literal/core/schemas/builders/index.ts
+++ b/seed/ts-express/literal/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/literal/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/literal/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/literal/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/literal/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/literal/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/literal/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/literal/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/literal/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/literal/core/schemas/builders/list/list.ts b/seed/ts-express/literal/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/literal/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/literal/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/literal/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/literal/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/literal/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/literal/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/literal/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/literal/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/literal/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/literal/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/literal/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/literal/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/literal/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/literal/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/literal/core/schemas/builders/object-like/types.ts b/seed/ts-express/literal/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/literal/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/literal/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/literal/core/schemas/builders/object/object.ts b/seed/ts-express/literal/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/literal/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/literal/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/literal/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/literal/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/literal/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/literal/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/literal/core/schemas/builders/object/property.ts b/seed/ts-express/literal/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/literal/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/literal/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/literal/core/schemas/builders/object/types.ts b/seed/ts-express/literal/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/literal/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/literal/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/literal/core/schemas/builders/primitives/any.ts b/seed/ts-express/literal/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/literal/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/literal/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/literal/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/literal/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/literal/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/literal/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/literal/core/schemas/builders/primitives/number.ts b/seed/ts-express/literal/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/literal/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/literal/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/literal/core/schemas/builders/primitives/string.ts b/seed/ts-express/literal/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/literal/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/literal/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/literal/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/literal/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/literal/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/literal/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/literal/core/schemas/builders/record/record.ts b/seed/ts-express/literal/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/literal/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/literal/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/literal/core/schemas/builders/record/types.ts b/seed/ts-express/literal/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/literal/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/literal/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/literal/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/literal/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/literal/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/literal/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/literal/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/literal/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/literal/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/literal/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/literal/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/literal/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/literal/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/literal/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/literal/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/literal/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/literal/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/literal/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/literal/core/schemas/builders/set/set.ts b/seed/ts-express/literal/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/literal/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/literal/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/literal/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/literal/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/literal/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/literal/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/literal/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/literal/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/literal/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/literal/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/literal/core/schemas/builders/union/types.ts b/seed/ts-express/literal/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/literal/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/literal/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/literal/core/schemas/builders/union/union.ts b/seed/ts-express/literal/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/literal/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/literal/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/literal/core/schemas/index.ts b/seed/ts-express/literal/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/literal/core/schemas/index.ts
+++ b/seed/ts-express/literal/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/literal/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/literal/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/literal/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/literal/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/literal/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/literal/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/literal/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/literal/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/literals-unions/core/schemas/Schema.ts b/seed/ts-express/literals-unions/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/literals-unions/core/schemas/Schema.ts
+++ b/seed/ts-express/literals-unions/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/literals-unions/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/date/date.ts b/seed/ts-express/literals-unions/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/enum/enum.ts b/seed/ts-express/literals-unions/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/index.ts b/seed/ts-express/literals-unions/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/index.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/literals-unions/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/literals-unions/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/list/list.ts b/seed/ts-express/literals-unions/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/literals-unions/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/literals-unions/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/literals-unions/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/object-like/types.ts b/seed/ts-express/literals-unions/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/object/object.ts b/seed/ts-express/literals-unions/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/literals-unions/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/object/property.ts b/seed/ts-express/literals-unions/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/object/types.ts b/seed/ts-express/literals-unions/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/primitives/any.ts b/seed/ts-express/literals-unions/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/literals-unions/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/primitives/number.ts b/seed/ts-express/literals-unions/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/primitives/string.ts b/seed/ts-express/literals-unions/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/literals-unions/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/record/record.ts b/seed/ts-express/literals-unions/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/record/types.ts b/seed/ts-express/literals-unions/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/literals-unions/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/literals-unions/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/literals-unions/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/literals-unions/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/set/set.ts b/seed/ts-express/literals-unions/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/literals-unions/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/literals-unions/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/union/types.ts b/seed/ts-express/literals-unions/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/literals-unions/core/schemas/builders/union/union.ts b/seed/ts-express/literals-unions/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/literals-unions/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/literals-unions/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/literals-unions/core/schemas/index.ts b/seed/ts-express/literals-unions/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/literals-unions/core/schemas/index.ts
+++ b/seed/ts-express/literals-unions/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/literals-unions/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/literals-unions/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/literals-unions/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/literals-unions/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/literals-unions/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/literals-unions/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/literals-unions/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/literals-unions/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/Schema.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/Schema.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/date/date.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/enum/enum.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/index.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/index.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/list/list.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object-like/types.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object/object.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object/property.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object/types.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/primitives/any.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/primitives/number.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/primitives/string.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/record/record.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/record/types.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/set/set.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/union/types.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/union/union.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/index.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/index.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/mixed-case/no-custom-config/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/mixed-case/no-custom-config/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/mixed-case/no-custom-config/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/mixed-case/no-custom-config/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/Schema.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/Schema.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/date/date.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/enum/enum.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/index.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/index.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/list/list.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object-like/types.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object/object.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object/property.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object/types.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/primitives/any.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/primitives/number.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/primitives/string.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/record/record.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/record/types.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/set/set.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/union/types.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/union/union.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/index.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/index.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/mixed-case/retain-original-casing/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/mixed-case/retain-original-casing/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/Schema.ts b/seed/ts-express/mixed-file-directory/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/Schema.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/date/date.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/enum/enum.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/index.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/index.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/list/list.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/object-like/types.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/object/object.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/object/property.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/object/types.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/primitives/any.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/primitives/number.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/primitives/string.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/record/record.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/record/types.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/set/set.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/union/types.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/builders/union/union.ts b/seed/ts-express/mixed-file-directory/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/index.ts b/seed/ts-express/mixed-file-directory/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/index.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/mixed-file-directory/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/mixed-file-directory/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/mixed-file-directory/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/mixed-file-directory/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/mixed-file-directory/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/multi-line-docs/core/schemas/Schema.ts b/seed/ts-express/multi-line-docs/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/Schema.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/date/date.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/enum/enum.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/index.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/index.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/list/list.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/object-like/types.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/object/object.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/object/property.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/object/types.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/primitives/any.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/primitives/number.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/primitives/string.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/record/record.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/record/types.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/set/set.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/union/types.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/multi-line-docs/core/schemas/builders/union/union.ts b/seed/ts-express/multi-line-docs/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/multi-line-docs/core/schemas/index.ts b/seed/ts-express/multi-line-docs/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/index.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/multi-line-docs/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/multi-line-docs/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/multi-line-docs/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/multi-line-docs/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/multi-line-docs/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/multi-line-docs/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/Schema.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/Schema.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/date/date.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/enum/enum.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/index.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/index.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/list/list.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object-like/types.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object/object.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object/property.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object/types.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/primitives/any.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/primitives/number.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/primitives/string.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/record/record.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/record/types.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/set/set.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/union/types.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/union/union.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/index.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/index.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/multi-url-environment-no-default/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/multi-url-environment-no-default/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/multi-url-environment-no-default/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/multi-url-environment-no-default/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/multi-url-environment/core/schemas/Schema.ts b/seed/ts-express/multi-url-environment/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/Schema.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/date/date.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/enum/enum.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/index.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/index.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/list/list.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/object-like/types.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/object/object.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/object/property.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/object/types.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/primitives/any.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/primitives/number.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/primitives/string.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/record/record.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/record/types.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/set/set.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/union/types.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/multi-url-environment/core/schemas/builders/union/union.ts b/seed/ts-express/multi-url-environment/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/multi-url-environment/core/schemas/index.ts b/seed/ts-express/multi-url-environment/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/index.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/multi-url-environment/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/multi-url-environment/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/multi-url-environment/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/multi-url-environment/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/multi-url-environment/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/multi-url-environment/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/no-environment/core/schemas/Schema.ts b/seed/ts-express/no-environment/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/no-environment/core/schemas/Schema.ts
+++ b/seed/ts-express/no-environment/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/no-environment/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/no-environment/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/no-environment/core/schemas/builders/date/date.ts b/seed/ts-express/no-environment/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/no-environment/core/schemas/builders/enum/enum.ts b/seed/ts-express/no-environment/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/no-environment/core/schemas/builders/index.ts b/seed/ts-express/no-environment/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/index.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/no-environment/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/no-environment/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/no-environment/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/no-environment/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/no-environment/core/schemas/builders/list/list.ts b/seed/ts-express/no-environment/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/no-environment/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/no-environment/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/no-environment/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/no-environment/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/no-environment/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/no-environment/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/no-environment/core/schemas/builders/object-like/types.ts b/seed/ts-express/no-environment/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/no-environment/core/schemas/builders/object/object.ts b/seed/ts-express/no-environment/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/no-environment/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/no-environment/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/no-environment/core/schemas/builders/object/property.ts b/seed/ts-express/no-environment/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/no-environment/core/schemas/builders/object/types.ts b/seed/ts-express/no-environment/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/no-environment/core/schemas/builders/primitives/any.ts b/seed/ts-express/no-environment/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/no-environment/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/no-environment/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/no-environment/core/schemas/builders/primitives/number.ts b/seed/ts-express/no-environment/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/no-environment/core/schemas/builders/primitives/string.ts b/seed/ts-express/no-environment/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/no-environment/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/no-environment/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/no-environment/core/schemas/builders/record/record.ts b/seed/ts-express/no-environment/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/no-environment/core/schemas/builders/record/types.ts b/seed/ts-express/no-environment/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/no-environment/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/no-environment/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/no-environment/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/no-environment/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/no-environment/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/no-environment/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/no-environment/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/no-environment/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/no-environment/core/schemas/builders/set/set.ts b/seed/ts-express/no-environment/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/no-environment/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/no-environment/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/no-environment/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/no-environment/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/no-environment/core/schemas/builders/union/types.ts b/seed/ts-express/no-environment/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/no-environment/core/schemas/builders/union/union.ts b/seed/ts-express/no-environment/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/no-environment/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/no-environment/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/no-environment/core/schemas/index.ts b/seed/ts-express/no-environment/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/no-environment/core/schemas/index.ts
+++ b/seed/ts-express/no-environment/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/no-environment/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/no-environment/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/no-environment/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/no-environment/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/no-environment/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/no-environment/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/no-environment/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/no-environment/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/nullable-optional/core/schemas/Schema.ts b/seed/ts-express/nullable-optional/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/nullable-optional/core/schemas/Schema.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/nullable-optional/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/date/date.ts b/seed/ts-express/nullable-optional/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/enum/enum.ts b/seed/ts-express/nullable-optional/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/index.ts b/seed/ts-express/nullable-optional/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/index.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/nullable-optional/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/nullable-optional/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/list/list.ts b/seed/ts-express/nullable-optional/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/nullable-optional/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/nullable-optional/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/nullable-optional/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/object-like/types.ts b/seed/ts-express/nullable-optional/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/object/object.ts b/seed/ts-express/nullable-optional/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/nullable-optional/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/object/property.ts b/seed/ts-express/nullable-optional/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/object/types.ts b/seed/ts-express/nullable-optional/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/primitives/any.ts b/seed/ts-express/nullable-optional/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/nullable-optional/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/primitives/number.ts b/seed/ts-express/nullable-optional/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/primitives/string.ts b/seed/ts-express/nullable-optional/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/nullable-optional/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/record/record.ts b/seed/ts-express/nullable-optional/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/record/types.ts b/seed/ts-express/nullable-optional/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/nullable-optional/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/nullable-optional/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/nullable-optional/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/nullable-optional/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/set/set.ts b/seed/ts-express/nullable-optional/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/nullable-optional/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/nullable-optional/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/union/types.ts b/seed/ts-express/nullable-optional/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/nullable-optional/core/schemas/builders/union/union.ts b/seed/ts-express/nullable-optional/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/nullable-optional/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/nullable-optional/core/schemas/index.ts b/seed/ts-express/nullable-optional/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/nullable-optional/core/schemas/index.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/nullable-optional/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/nullable-optional/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/nullable-optional/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/nullable-optional/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/nullable-optional/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/nullable-optional/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/nullable-optional/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/nullable/core/schemas/Schema.ts b/seed/ts-express/nullable/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/nullable/core/schemas/Schema.ts
+++ b/seed/ts-express/nullable/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/nullable/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/nullable/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/nullable/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/nullable/core/schemas/builders/date/date.ts b/seed/ts-express/nullable/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/nullable/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/nullable/core/schemas/builders/enum/enum.ts b/seed/ts-express/nullable/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/nullable/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/nullable/core/schemas/builders/index.ts b/seed/ts-express/nullable/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/nullable/core/schemas/builders/index.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/nullable/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/nullable/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/nullable/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/nullable/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/nullable/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/nullable/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/nullable/core/schemas/builders/list/list.ts b/seed/ts-express/nullable/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/nullable/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/nullable/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/nullable/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/nullable/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/nullable/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/nullable/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/nullable/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/nullable/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/nullable/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/nullable/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/nullable/core/schemas/builders/object-like/types.ts b/seed/ts-express/nullable/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/nullable/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/nullable/core/schemas/builders/object/object.ts b/seed/ts-express/nullable/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/nullable/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/nullable/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/nullable/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/nullable/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/nullable/core/schemas/builders/object/property.ts b/seed/ts-express/nullable/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/nullable/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/nullable/core/schemas/builders/object/types.ts b/seed/ts-express/nullable/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/nullable/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/nullable/core/schemas/builders/primitives/any.ts b/seed/ts-express/nullable/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/nullable/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/nullable/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/nullable/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/nullable/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/nullable/core/schemas/builders/primitives/number.ts b/seed/ts-express/nullable/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/nullable/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/nullable/core/schemas/builders/primitives/string.ts b/seed/ts-express/nullable/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/nullable/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/nullable/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/nullable/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/nullable/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/nullable/core/schemas/builders/record/record.ts b/seed/ts-express/nullable/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/nullable/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/nullable/core/schemas/builders/record/types.ts b/seed/ts-express/nullable/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/nullable/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/nullable/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/nullable/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/nullable/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/nullable/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/nullable/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/nullable/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/nullable/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/nullable/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/nullable/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/nullable/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/nullable/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/nullable/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/nullable/core/schemas/builders/set/set.ts b/seed/ts-express/nullable/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/nullable/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/nullable/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/nullable/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/nullable/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/nullable/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/nullable/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/nullable/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/nullable/core/schemas/builders/union/types.ts b/seed/ts-express/nullable/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/nullable/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/nullable/core/schemas/builders/union/union.ts b/seed/ts-express/nullable/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/nullable/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/nullable/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/nullable/core/schemas/index.ts b/seed/ts-express/nullable/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/nullable/core/schemas/index.ts
+++ b/seed/ts-express/nullable/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/nullable/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/nullable/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/nullable/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/nullable/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/nullable/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/nullable/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/nullable/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/nullable/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/Schema.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/Schema.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/date/date.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/enum/enum.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/index.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/index.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/list/list.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object-like/types.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object/object.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object/property.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object/types.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/primitives/any.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/primitives/number.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/primitives/string.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/record/record.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/record/types.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/set/set.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/union/types.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/union/union.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/index.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/index.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/oauth-client-credentials-custom/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/oauth-client-credentials-custom/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/oauth-client-credentials-custom/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/oauth-client-credentials-custom/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/Schema.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/Schema.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/date/date.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/enum/enum.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/index.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/index.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/list/list.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object-like/types.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object/object.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object/property.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object/types.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/primitives/any.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/primitives/number.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/primitives/string.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/record/record.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/record/types.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/set/set.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/union/types.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/union/union.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/index.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/index.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/oauth-client-credentials-default/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/oauth-client-credentials-default/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/oauth-client-credentials-default/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/oauth-client-credentials-default/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/Schema.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/Schema.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/date/date.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/enum/enum.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/index.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/index.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/list/list.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object-like/types.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object/object.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object/property.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object/types.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/primitives/any.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/primitives/number.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/primitives/string.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/record/record.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/record/types.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/set/set.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/union/types.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/union/union.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/index.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/index.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/oauth-client-credentials-environment-variables/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/Schema.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/Schema.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/date/date.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/enum/enum.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/index.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/index.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/list/list.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object-like/types.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object/object.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object/property.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object/types.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/primitives/any.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/primitives/number.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/primitives/string.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/record/record.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/record/types.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/set/set.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/union/types.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/union/union.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/index.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/index.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/oauth-client-credentials-nested-root/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/Schema.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/Schema.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/date/date.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/enum/enum.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/index.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/index.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/list/list.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object-like/types.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object/object.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object/property.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object/types.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/primitives/any.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/primitives/number.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/primitives/string.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/record/record.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/record/types.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/set/set.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/union/types.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/union/union.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/index.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/index.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/oauth-client-credentials-with-variables/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/Schema.ts b/seed/ts-express/oauth-client-credentials/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/Schema.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/date/date.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/enum/enum.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/index.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/index.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/list/list.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/object-like/types.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/object/object.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/object/property.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/object/types.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/primitives/any.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/primitives/number.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/primitives/string.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/record/record.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/record/types.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/set/set.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/union/types.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/builders/union/union.ts b/seed/ts-express/oauth-client-credentials/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/index.ts b/seed/ts-express/oauth-client-credentials/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/index.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/oauth-client-credentials/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/oauth-client-credentials/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/oauth-client-credentials/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/oauth-client-credentials/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/oauth-client-credentials/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/object/core/schemas/Schema.ts b/seed/ts-express/object/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/object/core/schemas/Schema.ts
+++ b/seed/ts-express/object/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/object/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/object/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/object/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/object/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/object/core/schemas/builders/date/date.ts b/seed/ts-express/object/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/object/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/object/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/object/core/schemas/builders/enum/enum.ts b/seed/ts-express/object/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/object/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/object/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/object/core/schemas/builders/index.ts b/seed/ts-express/object/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/object/core/schemas/builders/index.ts
+++ b/seed/ts-express/object/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/object/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/object/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/object/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/object/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/object/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/object/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/object/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/object/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/object/core/schemas/builders/list/list.ts b/seed/ts-express/object/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/object/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/object/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/object/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/object/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/object/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/object/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/object/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/object/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/object/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/object/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/object/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/object/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/object/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/object/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/object/core/schemas/builders/object-like/types.ts b/seed/ts-express/object/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/object/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/object/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/object/core/schemas/builders/object/object.ts b/seed/ts-express/object/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/object/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/object/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/object/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/object/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/object/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/object/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/object/core/schemas/builders/object/property.ts b/seed/ts-express/object/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/object/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/object/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/object/core/schemas/builders/object/types.ts b/seed/ts-express/object/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/object/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/object/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/object/core/schemas/builders/primitives/any.ts b/seed/ts-express/object/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/object/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/object/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/object/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/object/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/object/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/object/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/object/core/schemas/builders/primitives/number.ts b/seed/ts-express/object/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/object/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/object/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/object/core/schemas/builders/primitives/string.ts b/seed/ts-express/object/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/object/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/object/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/object/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/object/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/object/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/object/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/object/core/schemas/builders/record/record.ts b/seed/ts-express/object/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/object/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/object/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/object/core/schemas/builders/record/types.ts b/seed/ts-express/object/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/object/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/object/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/object/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/object/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/object/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/object/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/object/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/object/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/object/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/object/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/object/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/object/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/object/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/object/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/object/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/object/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/object/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/object/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/object/core/schemas/builders/set/set.ts b/seed/ts-express/object/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/object/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/object/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/object/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/object/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/object/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/object/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/object/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/object/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/object/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/object/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/object/core/schemas/builders/union/types.ts b/seed/ts-express/object/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/object/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/object/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/object/core/schemas/builders/union/union.ts b/seed/ts-express/object/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/object/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/object/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/object/core/schemas/index.ts b/seed/ts-express/object/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/object/core/schemas/index.ts
+++ b/seed/ts-express/object/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/object/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/object/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/object/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/object/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/object/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/object/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/object/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/object/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/objects-with-imports/core/schemas/Schema.ts b/seed/ts-express/objects-with-imports/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/Schema.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/date/date.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/enum/enum.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/index.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/index.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/list/list.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/object-like/types.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/object/object.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/object/property.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/object/types.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/primitives/any.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/primitives/number.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/primitives/string.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/record/record.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/record/types.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/set/set.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/union/types.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/objects-with-imports/core/schemas/builders/union/union.ts b/seed/ts-express/objects-with-imports/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/objects-with-imports/core/schemas/index.ts b/seed/ts-express/objects-with-imports/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/index.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/objects-with-imports/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/objects-with-imports/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/objects-with-imports/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/objects-with-imports/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/objects-with-imports/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/objects-with-imports/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/optional/core/schemas/Schema.ts b/seed/ts-express/optional/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/optional/core/schemas/Schema.ts
+++ b/seed/ts-express/optional/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/optional/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/optional/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/optional/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/optional/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/optional/core/schemas/builders/date/date.ts b/seed/ts-express/optional/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/optional/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/optional/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/optional/core/schemas/builders/enum/enum.ts b/seed/ts-express/optional/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/optional/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/optional/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/optional/core/schemas/builders/index.ts b/seed/ts-express/optional/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/optional/core/schemas/builders/index.ts
+++ b/seed/ts-express/optional/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/optional/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/optional/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/optional/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/optional/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/optional/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/optional/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/optional/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/optional/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/optional/core/schemas/builders/list/list.ts b/seed/ts-express/optional/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/optional/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/optional/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/optional/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/optional/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/optional/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/optional/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/optional/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/optional/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/optional/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/optional/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/optional/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/optional/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/optional/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/optional/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/optional/core/schemas/builders/object-like/types.ts b/seed/ts-express/optional/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/optional/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/optional/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/optional/core/schemas/builders/object/object.ts b/seed/ts-express/optional/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/optional/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/optional/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/optional/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/optional/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/optional/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/optional/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/optional/core/schemas/builders/object/property.ts b/seed/ts-express/optional/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/optional/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/optional/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/optional/core/schemas/builders/object/types.ts b/seed/ts-express/optional/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/optional/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/optional/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/optional/core/schemas/builders/primitives/any.ts b/seed/ts-express/optional/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/optional/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/optional/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/optional/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/optional/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/optional/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/optional/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/optional/core/schemas/builders/primitives/number.ts b/seed/ts-express/optional/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/optional/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/optional/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/optional/core/schemas/builders/primitives/string.ts b/seed/ts-express/optional/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/optional/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/optional/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/optional/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/optional/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/optional/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/optional/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/optional/core/schemas/builders/record/record.ts b/seed/ts-express/optional/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/optional/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/optional/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/optional/core/schemas/builders/record/types.ts b/seed/ts-express/optional/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/optional/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/optional/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/optional/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/optional/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/optional/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/optional/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/optional/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/optional/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/optional/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/optional/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/optional/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/optional/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/optional/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/optional/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/optional/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/optional/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/optional/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/optional/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/optional/core/schemas/builders/set/set.ts b/seed/ts-express/optional/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/optional/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/optional/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/optional/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/optional/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/optional/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/optional/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/optional/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/optional/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/optional/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/optional/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/optional/core/schemas/builders/union/types.ts b/seed/ts-express/optional/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/optional/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/optional/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/optional/core/schemas/builders/union/union.ts b/seed/ts-express/optional/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/optional/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/optional/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/optional/core/schemas/index.ts b/seed/ts-express/optional/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/optional/core/schemas/index.ts
+++ b/seed/ts-express/optional/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/optional/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/optional/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/optional/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/optional/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/optional/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/optional/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/optional/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/optional/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/package-yml/core/schemas/Schema.ts b/seed/ts-express/package-yml/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/package-yml/core/schemas/Schema.ts
+++ b/seed/ts-express/package-yml/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/package-yml/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/package-yml/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/package-yml/core/schemas/builders/date/date.ts b/seed/ts-express/package-yml/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/package-yml/core/schemas/builders/enum/enum.ts b/seed/ts-express/package-yml/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/package-yml/core/schemas/builders/index.ts b/seed/ts-express/package-yml/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/index.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/package-yml/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/package-yml/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/package-yml/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/package-yml/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/package-yml/core/schemas/builders/list/list.ts b/seed/ts-express/package-yml/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/package-yml/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/package-yml/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/package-yml/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/package-yml/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/package-yml/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/package-yml/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/package-yml/core/schemas/builders/object-like/types.ts b/seed/ts-express/package-yml/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/package-yml/core/schemas/builders/object/object.ts b/seed/ts-express/package-yml/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/package-yml/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/package-yml/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/package-yml/core/schemas/builders/object/property.ts b/seed/ts-express/package-yml/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/package-yml/core/schemas/builders/object/types.ts b/seed/ts-express/package-yml/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/package-yml/core/schemas/builders/primitives/any.ts b/seed/ts-express/package-yml/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/package-yml/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/package-yml/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/package-yml/core/schemas/builders/primitives/number.ts b/seed/ts-express/package-yml/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/package-yml/core/schemas/builders/primitives/string.ts b/seed/ts-express/package-yml/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/package-yml/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/package-yml/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/package-yml/core/schemas/builders/record/record.ts b/seed/ts-express/package-yml/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/package-yml/core/schemas/builders/record/types.ts b/seed/ts-express/package-yml/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/package-yml/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/package-yml/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/package-yml/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/package-yml/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/package-yml/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/package-yml/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/package-yml/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/package-yml/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/package-yml/core/schemas/builders/set/set.ts b/seed/ts-express/package-yml/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/package-yml/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/package-yml/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/package-yml/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/package-yml/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/package-yml/core/schemas/builders/union/types.ts b/seed/ts-express/package-yml/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/package-yml/core/schemas/builders/union/union.ts b/seed/ts-express/package-yml/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/package-yml/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/package-yml/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/package-yml/core/schemas/index.ts b/seed/ts-express/package-yml/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/package-yml/core/schemas/index.ts
+++ b/seed/ts-express/package-yml/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/package-yml/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/package-yml/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/package-yml/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/package-yml/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/package-yml/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/package-yml/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/package-yml/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/package-yml/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/pagination-custom/core/schemas/Schema.ts b/seed/ts-express/pagination-custom/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/pagination-custom/core/schemas/Schema.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/pagination-custom/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/date/date.ts b/seed/ts-express/pagination-custom/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/enum/enum.ts b/seed/ts-express/pagination-custom/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/index.ts b/seed/ts-express/pagination-custom/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/index.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/pagination-custom/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/pagination-custom/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/list/list.ts b/seed/ts-express/pagination-custom/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/pagination-custom/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/pagination-custom/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/pagination-custom/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/object-like/types.ts b/seed/ts-express/pagination-custom/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/object/object.ts b/seed/ts-express/pagination-custom/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/pagination-custom/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/object/property.ts b/seed/ts-express/pagination-custom/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/object/types.ts b/seed/ts-express/pagination-custom/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/primitives/any.ts b/seed/ts-express/pagination-custom/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/pagination-custom/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/primitives/number.ts b/seed/ts-express/pagination-custom/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/primitives/string.ts b/seed/ts-express/pagination-custom/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/pagination-custom/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/record/record.ts b/seed/ts-express/pagination-custom/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/record/types.ts b/seed/ts-express/pagination-custom/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/pagination-custom/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/pagination-custom/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/pagination-custom/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/pagination-custom/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/set/set.ts b/seed/ts-express/pagination-custom/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/pagination-custom/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/pagination-custom/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/union/types.ts b/seed/ts-express/pagination-custom/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/pagination-custom/core/schemas/builders/union/union.ts b/seed/ts-express/pagination-custom/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/pagination-custom/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/pagination-custom/core/schemas/index.ts b/seed/ts-express/pagination-custom/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/pagination-custom/core/schemas/index.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/pagination-custom/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/pagination-custom/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/pagination-custom/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/pagination-custom/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/pagination-custom/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/pagination-custom/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/pagination-custom/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/pagination/core/schemas/Schema.ts b/seed/ts-express/pagination/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/pagination/core/schemas/Schema.ts
+++ b/seed/ts-express/pagination/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/pagination/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/pagination/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/pagination/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/pagination/core/schemas/builders/date/date.ts b/seed/ts-express/pagination/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/pagination/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/pagination/core/schemas/builders/enum/enum.ts b/seed/ts-express/pagination/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/pagination/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/pagination/core/schemas/builders/index.ts b/seed/ts-express/pagination/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/pagination/core/schemas/builders/index.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/pagination/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/pagination/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/pagination/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/pagination/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/pagination/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/pagination/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/pagination/core/schemas/builders/list/list.ts b/seed/ts-express/pagination/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/pagination/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/pagination/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/pagination/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/pagination/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/pagination/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/pagination/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/pagination/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/pagination/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/pagination/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/pagination/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/pagination/core/schemas/builders/object-like/types.ts b/seed/ts-express/pagination/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/pagination/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/pagination/core/schemas/builders/object/object.ts b/seed/ts-express/pagination/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/pagination/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/pagination/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/pagination/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/pagination/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/pagination/core/schemas/builders/object/property.ts b/seed/ts-express/pagination/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/pagination/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/pagination/core/schemas/builders/object/types.ts b/seed/ts-express/pagination/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/pagination/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/pagination/core/schemas/builders/primitives/any.ts b/seed/ts-express/pagination/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/pagination/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/pagination/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/pagination/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/pagination/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/pagination/core/schemas/builders/primitives/number.ts b/seed/ts-express/pagination/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/pagination/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/pagination/core/schemas/builders/primitives/string.ts b/seed/ts-express/pagination/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/pagination/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/pagination/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/pagination/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/pagination/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/pagination/core/schemas/builders/record/record.ts b/seed/ts-express/pagination/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/pagination/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/pagination/core/schemas/builders/record/types.ts b/seed/ts-express/pagination/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/pagination/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/pagination/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/pagination/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/pagination/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/pagination/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/pagination/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/pagination/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/pagination/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/pagination/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/pagination/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/pagination/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/pagination/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/pagination/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/pagination/core/schemas/builders/set/set.ts b/seed/ts-express/pagination/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/pagination/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/pagination/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/pagination/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/pagination/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/pagination/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/pagination/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/pagination/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/pagination/core/schemas/builders/union/types.ts b/seed/ts-express/pagination/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/pagination/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/pagination/core/schemas/builders/union/union.ts b/seed/ts-express/pagination/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/pagination/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/pagination/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/pagination/core/schemas/index.ts b/seed/ts-express/pagination/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/pagination/core/schemas/index.ts
+++ b/seed/ts-express/pagination/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/pagination/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/pagination/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/pagination/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/pagination/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/pagination/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/pagination/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/pagination/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/pagination/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/path-parameters/core/schemas/Schema.ts b/seed/ts-express/path-parameters/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/path-parameters/core/schemas/Schema.ts
+++ b/seed/ts-express/path-parameters/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/path-parameters/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/date/date.ts b/seed/ts-express/path-parameters/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/enum/enum.ts b/seed/ts-express/path-parameters/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/index.ts b/seed/ts-express/path-parameters/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/index.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/path-parameters/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/path-parameters/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/list/list.ts b/seed/ts-express/path-parameters/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/path-parameters/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/path-parameters/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/path-parameters/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/object-like/types.ts b/seed/ts-express/path-parameters/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/object/object.ts b/seed/ts-express/path-parameters/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/path-parameters/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/object/property.ts b/seed/ts-express/path-parameters/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/object/types.ts b/seed/ts-express/path-parameters/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/primitives/any.ts b/seed/ts-express/path-parameters/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/path-parameters/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/primitives/number.ts b/seed/ts-express/path-parameters/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/primitives/string.ts b/seed/ts-express/path-parameters/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/path-parameters/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/record/record.ts b/seed/ts-express/path-parameters/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/record/types.ts b/seed/ts-express/path-parameters/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/path-parameters/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/path-parameters/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/path-parameters/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/path-parameters/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/set/set.ts b/seed/ts-express/path-parameters/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/path-parameters/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/path-parameters/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/union/types.ts b/seed/ts-express/path-parameters/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/path-parameters/core/schemas/builders/union/union.ts b/seed/ts-express/path-parameters/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/path-parameters/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/path-parameters/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/path-parameters/core/schemas/index.ts b/seed/ts-express/path-parameters/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/path-parameters/core/schemas/index.ts
+++ b/seed/ts-express/path-parameters/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/path-parameters/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/path-parameters/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/path-parameters/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/path-parameters/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/path-parameters/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/path-parameters/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/path-parameters/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/path-parameters/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/property-access/core/schemas/Schema.ts b/seed/ts-express/property-access/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/property-access/core/schemas/Schema.ts
+++ b/seed/ts-express/property-access/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/property-access/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/property-access/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/property-access/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/property-access/core/schemas/builders/date/date.ts b/seed/ts-express/property-access/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/property-access/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/property-access/core/schemas/builders/enum/enum.ts b/seed/ts-express/property-access/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/property-access/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/property-access/core/schemas/builders/index.ts b/seed/ts-express/property-access/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/property-access/core/schemas/builders/index.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/property-access/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/property-access/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/property-access/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/property-access/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/property-access/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/property-access/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/property-access/core/schemas/builders/list/list.ts b/seed/ts-express/property-access/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/property-access/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/property-access/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/property-access/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/property-access/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/property-access/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/property-access/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/property-access/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/property-access/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/property-access/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/property-access/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/property-access/core/schemas/builders/object-like/types.ts b/seed/ts-express/property-access/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/property-access/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/property-access/core/schemas/builders/object/object.ts b/seed/ts-express/property-access/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/property-access/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/property-access/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/property-access/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/property-access/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/property-access/core/schemas/builders/object/property.ts b/seed/ts-express/property-access/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/property-access/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/property-access/core/schemas/builders/object/types.ts b/seed/ts-express/property-access/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/property-access/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/property-access/core/schemas/builders/primitives/any.ts b/seed/ts-express/property-access/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/property-access/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/property-access/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/property-access/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/property-access/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/property-access/core/schemas/builders/primitives/number.ts b/seed/ts-express/property-access/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/property-access/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/property-access/core/schemas/builders/primitives/string.ts b/seed/ts-express/property-access/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/property-access/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/property-access/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/property-access/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/property-access/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/property-access/core/schemas/builders/record/record.ts b/seed/ts-express/property-access/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/property-access/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/property-access/core/schemas/builders/record/types.ts b/seed/ts-express/property-access/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/property-access/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/property-access/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/property-access/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/property-access/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/property-access/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/property-access/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/property-access/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/property-access/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/property-access/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/property-access/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/property-access/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/property-access/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/property-access/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/property-access/core/schemas/builders/set/set.ts b/seed/ts-express/property-access/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/property-access/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/property-access/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/property-access/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/property-access/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/property-access/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/property-access/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/property-access/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/property-access/core/schemas/builders/union/types.ts b/seed/ts-express/property-access/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/property-access/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/property-access/core/schemas/builders/union/union.ts b/seed/ts-express/property-access/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/property-access/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/property-access/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/property-access/core/schemas/index.ts b/seed/ts-express/property-access/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/property-access/core/schemas/index.ts
+++ b/seed/ts-express/property-access/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/property-access/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/property-access/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/property-access/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/property-access/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/property-access/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/property-access/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/property-access/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/property-access/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/Schema.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/Schema.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/date/date.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/enum/enum.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/index.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/index.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/list/list.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object-like/types.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object/object.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object/property.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object/types.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/primitives/any.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/primitives/number.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/primitives/string.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/record/record.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/record/types.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/set/set.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/union/types.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/union/union.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/index.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/index.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/query-parameters-openapi-as-objects/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/Schema.ts b/seed/ts-express/query-parameters-openapi/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/Schema.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/date/date.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/enum/enum.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/index.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/index.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/list/list.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/object-like/types.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/object/object.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/object/property.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/object/types.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/primitives/any.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/primitives/number.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/primitives/string.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/record/record.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/record/types.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/set/set.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/union/types.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/builders/union/union.ts b/seed/ts-express/query-parameters-openapi/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/index.ts b/seed/ts-express/query-parameters-openapi/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/index.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/query-parameters-openapi/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/query-parameters-openapi/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/query-parameters-openapi/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/query-parameters-openapi/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/query-parameters-openapi/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/query-parameters/core/schemas/Schema.ts b/seed/ts-express/query-parameters/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/query-parameters/core/schemas/Schema.ts
+++ b/seed/ts-express/query-parameters/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/query-parameters/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/date/date.ts b/seed/ts-express/query-parameters/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/enum/enum.ts b/seed/ts-express/query-parameters/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/index.ts b/seed/ts-express/query-parameters/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/index.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/query-parameters/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/query-parameters/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/list/list.ts b/seed/ts-express/query-parameters/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/query-parameters/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/query-parameters/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/query-parameters/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/object-like/types.ts b/seed/ts-express/query-parameters/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/object/object.ts b/seed/ts-express/query-parameters/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/query-parameters/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/object/property.ts b/seed/ts-express/query-parameters/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/object/types.ts b/seed/ts-express/query-parameters/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/primitives/any.ts b/seed/ts-express/query-parameters/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/query-parameters/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/primitives/number.ts b/seed/ts-express/query-parameters/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/primitives/string.ts b/seed/ts-express/query-parameters/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/query-parameters/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/record/record.ts b/seed/ts-express/query-parameters/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/record/types.ts b/seed/ts-express/query-parameters/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/query-parameters/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/query-parameters/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/query-parameters/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/query-parameters/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/set/set.ts b/seed/ts-express/query-parameters/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/query-parameters/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/query-parameters/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/union/types.ts b/seed/ts-express/query-parameters/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/query-parameters/core/schemas/builders/union/union.ts b/seed/ts-express/query-parameters/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/query-parameters/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/query-parameters/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/query-parameters/core/schemas/index.ts b/seed/ts-express/query-parameters/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/query-parameters/core/schemas/index.ts
+++ b/seed/ts-express/query-parameters/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/query-parameters/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/query-parameters/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/query-parameters/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/query-parameters/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/query-parameters/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/query-parameters/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/query-parameters/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/query-parameters/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/request-parameters/core/schemas/Schema.ts b/seed/ts-express/request-parameters/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/request-parameters/core/schemas/Schema.ts
+++ b/seed/ts-express/request-parameters/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/request-parameters/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/date/date.ts b/seed/ts-express/request-parameters/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/enum/enum.ts b/seed/ts-express/request-parameters/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/index.ts b/seed/ts-express/request-parameters/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/index.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/request-parameters/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/request-parameters/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/list/list.ts b/seed/ts-express/request-parameters/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/request-parameters/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/request-parameters/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/request-parameters/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/object-like/types.ts b/seed/ts-express/request-parameters/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/object/object.ts b/seed/ts-express/request-parameters/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/request-parameters/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/object/property.ts b/seed/ts-express/request-parameters/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/object/types.ts b/seed/ts-express/request-parameters/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/primitives/any.ts b/seed/ts-express/request-parameters/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/request-parameters/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/primitives/number.ts b/seed/ts-express/request-parameters/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/primitives/string.ts b/seed/ts-express/request-parameters/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/request-parameters/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/record/record.ts b/seed/ts-express/request-parameters/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/record/types.ts b/seed/ts-express/request-parameters/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/request-parameters/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/request-parameters/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/request-parameters/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/request-parameters/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/set/set.ts b/seed/ts-express/request-parameters/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/request-parameters/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/request-parameters/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/union/types.ts b/seed/ts-express/request-parameters/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/request-parameters/core/schemas/builders/union/union.ts b/seed/ts-express/request-parameters/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/request-parameters/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/request-parameters/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/request-parameters/core/schemas/index.ts b/seed/ts-express/request-parameters/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/request-parameters/core/schemas/index.ts
+++ b/seed/ts-express/request-parameters/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/request-parameters/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/request-parameters/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/request-parameters/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/request-parameters/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/request-parameters/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/request-parameters/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/request-parameters/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/request-parameters/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/required-nullable/core/schemas/Schema.ts b/seed/ts-express/required-nullable/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/required-nullable/core/schemas/Schema.ts
+++ b/seed/ts-express/required-nullable/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/required-nullable/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/date/date.ts b/seed/ts-express/required-nullable/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/enum/enum.ts b/seed/ts-express/required-nullable/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/index.ts b/seed/ts-express/required-nullable/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/index.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/required-nullable/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/required-nullable/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/list/list.ts b/seed/ts-express/required-nullable/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/required-nullable/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/required-nullable/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/required-nullable/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/object-like/types.ts b/seed/ts-express/required-nullable/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/object/object.ts b/seed/ts-express/required-nullable/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/required-nullable/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/object/property.ts b/seed/ts-express/required-nullable/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/object/types.ts b/seed/ts-express/required-nullable/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/primitives/any.ts b/seed/ts-express/required-nullable/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/required-nullable/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/primitives/number.ts b/seed/ts-express/required-nullable/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/primitives/string.ts b/seed/ts-express/required-nullable/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/required-nullable/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/record/record.ts b/seed/ts-express/required-nullable/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/record/types.ts b/seed/ts-express/required-nullable/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/required-nullable/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/required-nullable/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/required-nullable/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/required-nullable/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/set/set.ts b/seed/ts-express/required-nullable/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/required-nullable/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/required-nullable/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/union/types.ts b/seed/ts-express/required-nullable/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/required-nullable/core/schemas/builders/union/union.ts b/seed/ts-express/required-nullable/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/required-nullable/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/required-nullable/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/required-nullable/core/schemas/index.ts b/seed/ts-express/required-nullable/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/required-nullable/core/schemas/index.ts
+++ b/seed/ts-express/required-nullable/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/required-nullable/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/required-nullable/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/required-nullable/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/required-nullable/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/required-nullable/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/required-nullable/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/required-nullable/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/required-nullable/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/reserved-keywords/core/schemas/Schema.ts b/seed/ts-express/reserved-keywords/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/Schema.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/date/date.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/enum/enum.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/index.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/index.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/list/list.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/object-like/types.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/object/object.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/object/property.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/object/types.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/primitives/any.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/primitives/number.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/primitives/string.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/record/record.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/record/types.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/set/set.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/union/types.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/reserved-keywords/core/schemas/builders/union/union.ts b/seed/ts-express/reserved-keywords/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/reserved-keywords/core/schemas/index.ts b/seed/ts-express/reserved-keywords/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/index.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/reserved-keywords/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/reserved-keywords/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/reserved-keywords/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/reserved-keywords/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/reserved-keywords/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/reserved-keywords/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/response-property/core/schemas/Schema.ts b/seed/ts-express/response-property/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/response-property/core/schemas/Schema.ts
+++ b/seed/ts-express/response-property/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/response-property/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/response-property/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/response-property/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/response-property/core/schemas/builders/date/date.ts b/seed/ts-express/response-property/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/response-property/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/response-property/core/schemas/builders/enum/enum.ts b/seed/ts-express/response-property/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/response-property/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/response-property/core/schemas/builders/index.ts b/seed/ts-express/response-property/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/response-property/core/schemas/builders/index.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/response-property/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/response-property/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/response-property/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/response-property/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/response-property/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/response-property/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/response-property/core/schemas/builders/list/list.ts b/seed/ts-express/response-property/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/response-property/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/response-property/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/response-property/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/response-property/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/response-property/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/response-property/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/response-property/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/response-property/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/response-property/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/response-property/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/response-property/core/schemas/builders/object-like/types.ts b/seed/ts-express/response-property/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/response-property/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/response-property/core/schemas/builders/object/object.ts b/seed/ts-express/response-property/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/response-property/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/response-property/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/response-property/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/response-property/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/response-property/core/schemas/builders/object/property.ts b/seed/ts-express/response-property/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/response-property/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/response-property/core/schemas/builders/object/types.ts b/seed/ts-express/response-property/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/response-property/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/response-property/core/schemas/builders/primitives/any.ts b/seed/ts-express/response-property/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/response-property/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/response-property/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/response-property/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/response-property/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/response-property/core/schemas/builders/primitives/number.ts b/seed/ts-express/response-property/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/response-property/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/response-property/core/schemas/builders/primitives/string.ts b/seed/ts-express/response-property/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/response-property/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/response-property/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/response-property/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/response-property/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/response-property/core/schemas/builders/record/record.ts b/seed/ts-express/response-property/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/response-property/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/response-property/core/schemas/builders/record/types.ts b/seed/ts-express/response-property/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/response-property/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/response-property/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/response-property/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/response-property/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/response-property/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/response-property/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/response-property/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/response-property/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/response-property/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/response-property/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/response-property/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/response-property/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/response-property/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/response-property/core/schemas/builders/set/set.ts b/seed/ts-express/response-property/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/response-property/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/response-property/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/response-property/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/response-property/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/response-property/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/response-property/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/response-property/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/response-property/core/schemas/builders/union/types.ts b/seed/ts-express/response-property/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/response-property/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/response-property/core/schemas/builders/union/union.ts b/seed/ts-express/response-property/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/response-property/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/response-property/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/response-property/core/schemas/index.ts b/seed/ts-express/response-property/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/response-property/core/schemas/index.ts
+++ b/seed/ts-express/response-property/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/response-property/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/response-property/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/response-property/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/response-property/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/response-property/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/response-property/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/response-property/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/response-property/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/simple-api/core/schemas/Schema.ts b/seed/ts-express/simple-api/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/simple-api/core/schemas/Schema.ts
+++ b/seed/ts-express/simple-api/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/simple-api/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/simple-api/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/simple-api/core/schemas/builders/date/date.ts b/seed/ts-express/simple-api/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/simple-api/core/schemas/builders/enum/enum.ts b/seed/ts-express/simple-api/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/simple-api/core/schemas/builders/index.ts b/seed/ts-express/simple-api/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/index.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/simple-api/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/simple-api/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/simple-api/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/simple-api/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/simple-api/core/schemas/builders/list/list.ts b/seed/ts-express/simple-api/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/simple-api/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/simple-api/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/simple-api/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/simple-api/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/simple-api/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/simple-api/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/simple-api/core/schemas/builders/object-like/types.ts b/seed/ts-express/simple-api/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/simple-api/core/schemas/builders/object/object.ts b/seed/ts-express/simple-api/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/simple-api/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/simple-api/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/simple-api/core/schemas/builders/object/property.ts b/seed/ts-express/simple-api/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/simple-api/core/schemas/builders/object/types.ts b/seed/ts-express/simple-api/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/simple-api/core/schemas/builders/primitives/any.ts b/seed/ts-express/simple-api/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/simple-api/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/simple-api/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/simple-api/core/schemas/builders/primitives/number.ts b/seed/ts-express/simple-api/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/simple-api/core/schemas/builders/primitives/string.ts b/seed/ts-express/simple-api/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/simple-api/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/simple-api/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/simple-api/core/schemas/builders/record/record.ts b/seed/ts-express/simple-api/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/simple-api/core/schemas/builders/record/types.ts b/seed/ts-express/simple-api/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/simple-api/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/simple-api/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/simple-api/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/simple-api/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/simple-api/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/simple-api/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/simple-api/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/simple-api/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/simple-api/core/schemas/builders/set/set.ts b/seed/ts-express/simple-api/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/simple-api/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/simple-api/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/simple-api/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/simple-api/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/simple-api/core/schemas/builders/union/types.ts b/seed/ts-express/simple-api/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/simple-api/core/schemas/builders/union/union.ts b/seed/ts-express/simple-api/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/simple-api/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/simple-api/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/simple-api/core/schemas/index.ts b/seed/ts-express/simple-api/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/simple-api/core/schemas/index.ts
+++ b/seed/ts-express/simple-api/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/simple-api/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/simple-api/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/simple-api/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/simple-api/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/simple-api/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/simple-api/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/simple-api/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/simple-api/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/simple-fhir/core/schemas/Schema.ts b/seed/ts-express/simple-fhir/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/simple-fhir/core/schemas/Schema.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/simple-fhir/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/date/date.ts b/seed/ts-express/simple-fhir/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/enum/enum.ts b/seed/ts-express/simple-fhir/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/index.ts b/seed/ts-express/simple-fhir/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/index.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/simple-fhir/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/simple-fhir/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/list/list.ts b/seed/ts-express/simple-fhir/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/simple-fhir/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/simple-fhir/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/simple-fhir/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/object-like/types.ts b/seed/ts-express/simple-fhir/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/object/object.ts b/seed/ts-express/simple-fhir/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/simple-fhir/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/object/property.ts b/seed/ts-express/simple-fhir/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/object/types.ts b/seed/ts-express/simple-fhir/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/primitives/any.ts b/seed/ts-express/simple-fhir/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/simple-fhir/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/primitives/number.ts b/seed/ts-express/simple-fhir/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/primitives/string.ts b/seed/ts-express/simple-fhir/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/simple-fhir/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/record/record.ts b/seed/ts-express/simple-fhir/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/record/types.ts b/seed/ts-express/simple-fhir/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/simple-fhir/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/simple-fhir/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/simple-fhir/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/simple-fhir/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/set/set.ts b/seed/ts-express/simple-fhir/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/simple-fhir/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/simple-fhir/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/union/types.ts b/seed/ts-express/simple-fhir/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/simple-fhir/core/schemas/builders/union/union.ts b/seed/ts-express/simple-fhir/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/simple-fhir/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/simple-fhir/core/schemas/index.ts b/seed/ts-express/simple-fhir/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/simple-fhir/core/schemas/index.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/simple-fhir/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/simple-fhir/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/simple-fhir/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/simple-fhir/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/simple-fhir/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/simple-fhir/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/simple-fhir/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/Schema.ts b/seed/ts-express/single-url-environment-default/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/Schema.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/date/date.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/enum/enum.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/index.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/index.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/list/list.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/object-like/types.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/object/object.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/object/property.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/object/types.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/primitives/any.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/primitives/number.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/primitives/string.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/record/record.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/record/types.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/set/set.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/union/types.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/builders/union/union.ts b/seed/ts-express/single-url-environment-default/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/index.ts b/seed/ts-express/single-url-environment-default/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/index.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/single-url-environment-default/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/single-url-environment-default/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/single-url-environment-default/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/single-url-environment-default/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/single-url-environment-default/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/Schema.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/Schema.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/date/date.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/enum/enum.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/index.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/index.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/list/list.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object-like/types.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object/object.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object/property.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object/types.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/primitives/any.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/primitives/number.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/primitives/string.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/record/record.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/record/types.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/set/set.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/union/types.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/union/union.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/index.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/index.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/single-url-environment-no-default/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/single-url-environment-no-default/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/single-url-environment-no-default/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/single-url-environment-no-default/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/Schema.ts b/seed/ts-express/trace/no-custom-config/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/Schema.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/date/date.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/enum/enum.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/index.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/index.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/list/list.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/object-like/types.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/object/object.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/object/property.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/object/types.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/primitives/any.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/primitives/number.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/primitives/string.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/record/record.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/record/types.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/set/set.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/union/types.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/builders/union/union.ts b/seed/ts-express/trace/no-custom-config/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/index.ts b/seed/ts-express/trace/no-custom-config/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/index.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/trace/no-custom-config/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/trace/no-custom-config/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/trace/no-custom-config/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/trace/no-custom-config/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/trace/no-custom-config/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/Schema.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/Schema.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/date/date.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/enum/enum.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/index.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/index.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/list/list.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object-like/types.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object/object.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object/property.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object/types.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/primitives/any.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/primitives/number.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/primitives/string.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/record/record.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/record/types.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/set/set.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/union/types.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/union/union.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/index.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/index.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/ts-express-casing/no-custom-config/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/ts-inline-types/core/schemas/Schema.ts b/seed/ts-express/ts-inline-types/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/Schema.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/date/date.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/enum/enum.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/index.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/index.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/list/list.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/object-like/types.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/object/object.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/object/property.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/object/types.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/primitives/any.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/primitives/number.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/primitives/string.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/record/record.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/record/types.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/set/set.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/union/types.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/ts-inline-types/core/schemas/builders/union/union.ts b/seed/ts-express/ts-inline-types/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/ts-inline-types/core/schemas/index.ts b/seed/ts-express/ts-inline-types/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/index.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/ts-inline-types/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/ts-inline-types/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/ts-inline-types/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/ts-inline-types/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/ts-inline-types/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/ts-inline-types/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/Schema.ts b/seed/ts-express/undiscriminated-unions/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/Schema.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/date/date.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/enum/enum.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/index.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/index.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/list/list.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/object-like/types.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/object/object.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/object/property.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/object/types.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/primitives/any.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/primitives/number.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/primitives/string.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/record/record.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/record/types.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/set/set.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/union/types.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/builders/union/union.ts b/seed/ts-express/undiscriminated-unions/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/index.ts b/seed/ts-express/undiscriminated-unions/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/index.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/undiscriminated-unions/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/undiscriminated-unions/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/undiscriminated-unions/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/undiscriminated-unions/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/undiscriminated-unions/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/unions/core/schemas/Schema.ts b/seed/ts-express/unions/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/unions/core/schemas/Schema.ts
+++ b/seed/ts-express/unions/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/unions/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/unions/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/unions/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/unions/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/unions/core/schemas/builders/date/date.ts b/seed/ts-express/unions/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/unions/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/unions/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/unions/core/schemas/builders/enum/enum.ts b/seed/ts-express/unions/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/unions/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/unions/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/unions/core/schemas/builders/index.ts b/seed/ts-express/unions/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/unions/core/schemas/builders/index.ts
+++ b/seed/ts-express/unions/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/unions/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/unions/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/unions/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/unions/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/unions/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/unions/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/unions/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/unions/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/unions/core/schemas/builders/list/list.ts b/seed/ts-express/unions/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/unions/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/unions/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/unions/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/unions/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/unions/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/unions/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/unions/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/unions/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/unions/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/unions/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/unions/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/unions/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/unions/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/unions/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/unions/core/schemas/builders/object-like/types.ts b/seed/ts-express/unions/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/unions/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/unions/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/unions/core/schemas/builders/object/object.ts b/seed/ts-express/unions/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/unions/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/unions/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/unions/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/unions/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/unions/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/unions/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/unions/core/schemas/builders/object/property.ts b/seed/ts-express/unions/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/unions/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/unions/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/unions/core/schemas/builders/object/types.ts b/seed/ts-express/unions/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/unions/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/unions/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/unions/core/schemas/builders/primitives/any.ts b/seed/ts-express/unions/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/unions/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/unions/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/unions/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/unions/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/unions/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/unions/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/unions/core/schemas/builders/primitives/number.ts b/seed/ts-express/unions/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/unions/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/unions/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/unions/core/schemas/builders/primitives/string.ts b/seed/ts-express/unions/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/unions/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/unions/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/unions/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/unions/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/unions/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/unions/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/unions/core/schemas/builders/record/record.ts b/seed/ts-express/unions/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/unions/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/unions/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/unions/core/schemas/builders/record/types.ts b/seed/ts-express/unions/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/unions/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/unions/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/unions/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/unions/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/unions/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/unions/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/unions/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/unions/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/unions/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/unions/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/unions/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/unions/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/unions/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/unions/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/unions/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/unions/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/unions/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/unions/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/unions/core/schemas/builders/set/set.ts b/seed/ts-express/unions/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/unions/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/unions/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/unions/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/unions/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/unions/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/unions/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/unions/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/unions/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/unions/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/unions/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/unions/core/schemas/builders/union/types.ts b/seed/ts-express/unions/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/unions/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/unions/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/unions/core/schemas/builders/union/union.ts b/seed/ts-express/unions/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/unions/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/unions/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/unions/core/schemas/index.ts b/seed/ts-express/unions/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/unions/core/schemas/index.ts
+++ b/seed/ts-express/unions/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/unions/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/unions/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/unions/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/unions/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/unions/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/unions/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/unions/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/unions/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/unknown/core/schemas/Schema.ts b/seed/ts-express/unknown/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/unknown/core/schemas/Schema.ts
+++ b/seed/ts-express/unknown/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/unknown/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/unknown/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/unknown/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/unknown/core/schemas/builders/date/date.ts b/seed/ts-express/unknown/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/unknown/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/unknown/core/schemas/builders/enum/enum.ts b/seed/ts-express/unknown/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/unknown/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/unknown/core/schemas/builders/index.ts b/seed/ts-express/unknown/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/unknown/core/schemas/builders/index.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/unknown/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/unknown/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/unknown/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/unknown/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/unknown/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/unknown/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/unknown/core/schemas/builders/list/list.ts b/seed/ts-express/unknown/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/unknown/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/unknown/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/unknown/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/unknown/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/unknown/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/unknown/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/unknown/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/unknown/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/unknown/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/unknown/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/unknown/core/schemas/builders/object-like/types.ts b/seed/ts-express/unknown/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/unknown/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/unknown/core/schemas/builders/object/object.ts b/seed/ts-express/unknown/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/unknown/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/unknown/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/unknown/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/unknown/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/unknown/core/schemas/builders/object/property.ts b/seed/ts-express/unknown/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/unknown/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/unknown/core/schemas/builders/object/types.ts b/seed/ts-express/unknown/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/unknown/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/unknown/core/schemas/builders/primitives/any.ts b/seed/ts-express/unknown/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/unknown/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/unknown/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/unknown/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/unknown/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/unknown/core/schemas/builders/primitives/number.ts b/seed/ts-express/unknown/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/unknown/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/unknown/core/schemas/builders/primitives/string.ts b/seed/ts-express/unknown/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/unknown/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/unknown/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/unknown/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/unknown/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/unknown/core/schemas/builders/record/record.ts b/seed/ts-express/unknown/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/unknown/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/unknown/core/schemas/builders/record/types.ts b/seed/ts-express/unknown/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/unknown/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/unknown/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/unknown/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/unknown/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/unknown/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/unknown/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/unknown/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/unknown/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/unknown/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/unknown/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/unknown/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/unknown/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/unknown/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/unknown/core/schemas/builders/set/set.ts b/seed/ts-express/unknown/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/unknown/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/unknown/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/unknown/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/unknown/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/unknown/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/unknown/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/unknown/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/unknown/core/schemas/builders/union/types.ts b/seed/ts-express/unknown/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/unknown/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/unknown/core/schemas/builders/union/union.ts b/seed/ts-express/unknown/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/unknown/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/unknown/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/unknown/core/schemas/index.ts b/seed/ts-express/unknown/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/unknown/core/schemas/index.ts
+++ b/seed/ts-express/unknown/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/unknown/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/unknown/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/unknown/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/unknown/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/unknown/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/unknown/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/unknown/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/unknown/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/validation/core/schemas/Schema.ts b/seed/ts-express/validation/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/validation/core/schemas/Schema.ts
+++ b/seed/ts-express/validation/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/validation/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/validation/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/validation/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/validation/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/validation/core/schemas/builders/date/date.ts b/seed/ts-express/validation/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/validation/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/validation/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/validation/core/schemas/builders/enum/enum.ts b/seed/ts-express/validation/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/validation/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/validation/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/validation/core/schemas/builders/index.ts b/seed/ts-express/validation/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/validation/core/schemas/builders/index.ts
+++ b/seed/ts-express/validation/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/validation/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/validation/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/validation/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/validation/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/validation/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/validation/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/validation/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/validation/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/validation/core/schemas/builders/list/list.ts b/seed/ts-express/validation/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/validation/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/validation/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/validation/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/validation/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/validation/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/validation/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/validation/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/validation/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/validation/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/validation/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/validation/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/validation/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/validation/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/validation/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/validation/core/schemas/builders/object-like/types.ts b/seed/ts-express/validation/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/validation/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/validation/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/validation/core/schemas/builders/object/object.ts b/seed/ts-express/validation/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/validation/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/validation/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/validation/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/validation/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/validation/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/validation/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/validation/core/schemas/builders/object/property.ts b/seed/ts-express/validation/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/validation/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/validation/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/validation/core/schemas/builders/object/types.ts b/seed/ts-express/validation/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/validation/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/validation/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/validation/core/schemas/builders/primitives/any.ts b/seed/ts-express/validation/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/validation/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/validation/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/validation/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/validation/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/validation/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/validation/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/validation/core/schemas/builders/primitives/number.ts b/seed/ts-express/validation/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/validation/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/validation/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/validation/core/schemas/builders/primitives/string.ts b/seed/ts-express/validation/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/validation/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/validation/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/validation/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/validation/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/validation/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/validation/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/validation/core/schemas/builders/record/record.ts b/seed/ts-express/validation/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/validation/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/validation/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/validation/core/schemas/builders/record/types.ts b/seed/ts-express/validation/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/validation/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/validation/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/validation/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/validation/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/validation/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/validation/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/validation/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/validation/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/validation/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/validation/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/validation/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/validation/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/validation/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/validation/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/validation/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/validation/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/validation/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/validation/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/validation/core/schemas/builders/set/set.ts b/seed/ts-express/validation/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/validation/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/validation/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/validation/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/validation/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/validation/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/validation/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/validation/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/validation/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/validation/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/validation/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/validation/core/schemas/builders/union/types.ts b/seed/ts-express/validation/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/validation/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/validation/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/validation/core/schemas/builders/union/union.ts b/seed/ts-express/validation/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/validation/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/validation/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/validation/core/schemas/index.ts b/seed/ts-express/validation/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/validation/core/schemas/index.ts
+++ b/seed/ts-express/validation/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/validation/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/validation/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/validation/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/validation/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/validation/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/validation/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/validation/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/validation/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/version-no-default/core/schemas/Schema.ts b/seed/ts-express/version-no-default/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/version-no-default/core/schemas/Schema.ts
+++ b/seed/ts-express/version-no-default/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/version-no-default/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/date/date.ts b/seed/ts-express/version-no-default/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/enum/enum.ts b/seed/ts-express/version-no-default/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/index.ts b/seed/ts-express/version-no-default/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/index.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/version-no-default/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/version-no-default/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/list/list.ts b/seed/ts-express/version-no-default/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/version-no-default/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/version-no-default/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/version-no-default/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/object-like/types.ts b/seed/ts-express/version-no-default/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/object/object.ts b/seed/ts-express/version-no-default/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/version-no-default/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/object/property.ts b/seed/ts-express/version-no-default/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/object/types.ts b/seed/ts-express/version-no-default/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/primitives/any.ts b/seed/ts-express/version-no-default/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/version-no-default/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/primitives/number.ts b/seed/ts-express/version-no-default/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/primitives/string.ts b/seed/ts-express/version-no-default/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/version-no-default/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/record/record.ts b/seed/ts-express/version-no-default/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/record/types.ts b/seed/ts-express/version-no-default/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/version-no-default/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/version-no-default/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/version-no-default/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/version-no-default/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/set/set.ts b/seed/ts-express/version-no-default/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/version-no-default/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/version-no-default/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/union/types.ts b/seed/ts-express/version-no-default/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/version-no-default/core/schemas/builders/union/union.ts b/seed/ts-express/version-no-default/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/version-no-default/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/version-no-default/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/version-no-default/core/schemas/index.ts b/seed/ts-express/version-no-default/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/version-no-default/core/schemas/index.ts
+++ b/seed/ts-express/version-no-default/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/version-no-default/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/version-no-default/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/version-no-default/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/version-no-default/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/version-no-default/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/version-no-default/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/version-no-default/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/version-no-default/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/version/core/schemas/Schema.ts b/seed/ts-express/version/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/version/core/schemas/Schema.ts
+++ b/seed/ts-express/version/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/version/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/version/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/version/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/version/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/version/core/schemas/builders/date/date.ts b/seed/ts-express/version/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/version/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/version/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/version/core/schemas/builders/enum/enum.ts b/seed/ts-express/version/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/version/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/version/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/version/core/schemas/builders/index.ts b/seed/ts-express/version/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/version/core/schemas/builders/index.ts
+++ b/seed/ts-express/version/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/version/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/version/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/version/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/version/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/version/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/version/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/version/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/version/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/version/core/schemas/builders/list/list.ts b/seed/ts-express/version/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/version/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/version/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/version/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/version/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/version/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/version/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/version/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/version/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/version/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/version/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/version/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/version/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/version/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/version/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/version/core/schemas/builders/object-like/types.ts b/seed/ts-express/version/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/version/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/version/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/version/core/schemas/builders/object/object.ts b/seed/ts-express/version/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/version/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/version/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/version/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/version/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/version/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/version/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/version/core/schemas/builders/object/property.ts b/seed/ts-express/version/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/version/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/version/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/version/core/schemas/builders/object/types.ts b/seed/ts-express/version/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/version/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/version/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/version/core/schemas/builders/primitives/any.ts b/seed/ts-express/version/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/version/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/version/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/version/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/version/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/version/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/version/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/version/core/schemas/builders/primitives/number.ts b/seed/ts-express/version/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/version/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/version/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/version/core/schemas/builders/primitives/string.ts b/seed/ts-express/version/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/version/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/version/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/version/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/version/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/version/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/version/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/version/core/schemas/builders/record/record.ts b/seed/ts-express/version/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/version/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/version/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/version/core/schemas/builders/record/types.ts b/seed/ts-express/version/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/version/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/version/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/version/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/version/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/version/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/version/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/version/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/version/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/version/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/version/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/version/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/version/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/version/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/version/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/version/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/version/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/version/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/version/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/version/core/schemas/builders/set/set.ts b/seed/ts-express/version/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/version/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/version/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/version/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/version/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/version/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/version/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/version/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/version/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/version/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/version/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/version/core/schemas/builders/union/types.ts b/seed/ts-express/version/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/version/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/version/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/version/core/schemas/builders/union/union.ts b/seed/ts-express/version/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/version/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/version/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/version/core/schemas/index.ts b/seed/ts-express/version/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/version/core/schemas/index.ts
+++ b/seed/ts-express/version/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/version/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/version/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/version/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/version/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/version/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/version/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/version/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/version/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/Schema.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/Schema.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/date/date.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/enum/enum.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/index.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/index.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/list/list.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object-like/types.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object/object.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object/property.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object/types.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/primitives/any.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/primitives/number.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/primitives/string.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/record/record.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/record/types.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/set/set.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/union/types.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/union/union.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/index.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/index.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/websocket-bearer-auth/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/websocket-bearer-auth/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/websocket-bearer-auth/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/websocket-bearer-auth/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/Schema.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/Schema.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/date/date.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/enum/enum.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/index.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/index.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/list/list.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object-like/types.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object/object.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object/property.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object/types.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/primitives/any.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/primitives/number.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/primitives/string.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/record/record.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/record/types.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/set/set.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/union/types.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/union/union.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/index.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/index.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/websocket-inferred-auth/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/websocket-inferred-auth/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/websocket-inferred-auth/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/websocket-inferred-auth/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
diff --git a/seed/ts-express/websocket/core/schemas/Schema.ts b/seed/ts-express/websocket/core/schemas/Schema.ts
index 921a15466..57b782b0e 100644
--- a/seed/ts-express/websocket/core/schemas/Schema.ts
+++ b/seed/ts-express/websocket/core/schemas/Schema.ts
@@ -1,4 +1,4 @@
-import { SchemaUtils } from "./builders";
+import type { SchemaUtils } from "./builders/index";
 
 export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;
 
diff --git a/seed/ts-express/websocket/core/schemas/builders/bigint/bigint.ts b/seed/ts-express/websocket/core/schemas/builders/bigint/bigint.ts
index e69bb791e..9d8a63d45 100644
--- a/seed/ts-express/websocket/core/schemas/builders/bigint/bigint.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/bigint/bigint.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function bigint(): Schema<bigint | number, bigint> {
     const baseSchema: BaseSchema<bigint | number, bigint> = {
diff --git a/seed/ts-express/websocket/core/schemas/builders/date/date.ts b/seed/ts-express/websocket/core/schemas/builders/date/date.ts
index b70f24b04..bc507e085 100644
--- a/seed/ts-express/websocket/core/schemas/builders/date/date.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/date/date.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 // https://stackoverflow.com/questions/12756159/regex-and-iso8601-formatted-datetime
 const ISO_8601_REGEX =
diff --git a/seed/ts-express/websocket/core/schemas/builders/enum/enum.ts b/seed/ts-express/websocket/core/schemas/builders/enum/enum.ts
index 69aced6be..c2c49a323 100644
--- a/seed/ts-express/websocket/core/schemas/builders/enum/enum.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/enum/enum.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/websocket/core/schemas/builders/index.ts b/seed/ts-express/websocket/core/schemas/builders/index.ts
index 65211f925..be23de258 100644
--- a/seed/ts-express/websocket/core/schemas/builders/index.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/index.ts
@@ -1,14 +1,14 @@
-export * from "./bigint";
-export * from "./date";
-export * from "./enum";
-export * from "./lazy";
-export * from "./list";
-export * from "./literals";
-export * from "./object";
-export * from "./object-like";
-export * from "./primitives";
-export * from "./record";
-export * from "./schema-utils";
-export * from "./set";
-export * from "./undiscriminated-union";
-export * from "./union";
+export * from "./bigint/index";
+export * from "./date/index";
+export * from "./enum/index";
+export * from "./lazy/index";
+export * from "./list/index";
+export * from "./literals/index";
+export * from "./object/index";
+export * from "./object-like/index";
+export * from "./primitives/index";
+export * from "./record/index";
+export * from "./schema-utils/index";
+export * from "./set/index";
+export * from "./undiscriminated-union/index";
+export * from "./union/index";
diff --git a/seed/ts-express/websocket/core/schemas/builders/lazy/lazy.ts b/seed/ts-express/websocket/core/schemas/builders/lazy/lazy.ts
index 2962bdfe0..a72735184 100644
--- a/seed/ts-express/websocket/core/schemas/builders/lazy/lazy.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/lazy/lazy.ts
@@ -1,5 +1,5 @@
-import { BaseSchema, Schema } from "../../Schema";
-import { getSchemaUtils } from "../schema-utils";
+import type { BaseSchema, Schema } from "../../Schema";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType;
 
diff --git a/seed/ts-express/websocket/core/schemas/builders/lazy/lazyObject.ts b/seed/ts-express/websocket/core/schemas/builders/lazy/lazyObject.ts
index a93b6a73a..2a58a2abb 100644
--- a/seed/ts-express/websocket/core/schemas/builders/lazy/lazyObject.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/lazy/lazyObject.ts
@@ -1,8 +1,8 @@
-import { getObjectUtils } from "../object";
-import { BaseObjectSchema, ObjectSchema } from "../object/types";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from "./lazy";
+import { getObjectUtils } from "../object/index";
+import type { BaseObjectSchema, ObjectSchema } from "../object/types";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
+import { constructLazyBaseSchema, getMemoizedSchema, type SchemaGetter } from "./lazy";
 
 export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
     const baseSchema: BaseObjectSchema<Raw, Parsed> = {
diff --git a/seed/ts-express/websocket/core/schemas/builders/list/list.ts b/seed/ts-express/websocket/core/schemas/builders/list/list.ts
index a6167a5be..7c8fd6e87 100644
--- a/seed/ts-express/websocket/core/schemas/builders/list/list.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/list/list.ts
@@ -1,7 +1,7 @@
-import { BaseSchema, MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type BaseSchema, type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
     const baseSchema: BaseSchema<Raw[], Parsed[]> = {
diff --git a/seed/ts-express/websocket/core/schemas/builders/literals/booleanLiteral.ts b/seed/ts-express/websocket/core/schemas/builders/literals/booleanLiteral.ts
index 5c004133d..fb06cc00f 100644
--- a/seed/ts-express/websocket/core/schemas/builders/literals/booleanLiteral.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/literals/booleanLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/websocket/core/schemas/builders/literals/stringLiteral.ts b/seed/ts-express/websocket/core/schemas/builders/literals/stringLiteral.ts
index 334bbdc46..98fe06223 100644
--- a/seed/ts-express/websocket/core/schemas/builders/literals/stringLiteral.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/literals/stringLiteral.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/websocket/core/schemas/builders/object-like/getObjectLikeUtils.ts b/seed/ts-express/websocket/core/schemas/builders/object-like/getObjectLikeUtils.ts
index 8885586e2..ed96cf771 100644
--- a/seed/ts-express/websocket/core/schemas/builders/object-like/getObjectLikeUtils.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/object-like/getObjectLikeUtils.ts
@@ -1,9 +1,9 @@
-import { BaseSchema } from "../../Schema";
+import type { BaseSchema } from "../../Schema";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
-import { getSchemaUtils } from "../schema-utils";
-import { ObjectLikeSchema, ObjectLikeUtils } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { ObjectLikeSchema, ObjectLikeUtils } from "./types";
 
 export function getObjectLikeUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): ObjectLikeUtils<Raw, Parsed> {
     return {
diff --git a/seed/ts-express/websocket/core/schemas/builders/object-like/types.ts b/seed/ts-express/websocket/core/schemas/builders/object-like/types.ts
index 75b369872..c1ff34163 100644
--- a/seed/ts-express/websocket/core/schemas/builders/object-like/types.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/object-like/types.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema } from "../../Schema";
+import type { BaseSchema, Schema } from "../../Schema";
 
 export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
     BaseSchema<Raw, Parsed> &
diff --git a/seed/ts-express/websocket/core/schemas/builders/object/object.ts b/seed/ts-express/websocket/core/schemas/builders/object/object.ts
index 0e4bbed9c..c239249e2 100644
--- a/seed/ts-express/websocket/core/schemas/builders/object/object.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/object/object.ts
@@ -1,4 +1,4 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { filterObject } from "../../utils/filterObject";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
@@ -6,10 +6,10 @@ import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
 import { partition } from "../../utils/partition";
-import { getObjectLikeUtils } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
+import { getObjectLikeUtils } from "../object-like/index";
+import { getSchemaUtils } from "../schema-utils/index";
 import { isProperty } from "./property";
-import {
+import type {
     BaseObjectSchema,
     inferObjectSchemaFromPropertySchemas,
     inferParsedObjectFromPropertySchemas,
diff --git a/seed/ts-express/websocket/core/schemas/builders/object/objectWithoutOptionalProperties.ts b/seed/ts-express/websocket/core/schemas/builders/object/objectWithoutOptionalProperties.ts
index 4dfafa01b..bac2e1e1a 100644
--- a/seed/ts-express/websocket/core/schemas/builders/object/objectWithoutOptionalProperties.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/object/objectWithoutOptionalProperties.ts
@@ -1,5 +1,10 @@
 import { object } from "./object";
-import { inferParsedPropertySchema, inferRawObjectFromPropertySchemas, ObjectSchema, PropertySchemas } from "./types";
+import type {
+    inferParsedPropertySchema,
+    inferRawObjectFromPropertySchemas,
+    ObjectSchema,
+    PropertySchemas,
+} from "./types";
 
 export function objectWithoutOptionalProperties<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
     schemas: T,
diff --git a/seed/ts-express/websocket/core/schemas/builders/object/property.ts b/seed/ts-express/websocket/core/schemas/builders/object/property.ts
index fa9a9be84..ef07c2a79 100644
--- a/seed/ts-express/websocket/core/schemas/builders/object/property.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/object/property.ts
@@ -1,4 +1,4 @@
-import { Schema } from "../../Schema";
+import type { Schema } from "../../Schema";
 
 export function property<RawKey extends string, RawValue, ParsedValue>(
     rawKey: RawKey,
diff --git a/seed/ts-express/websocket/core/schemas/builders/object/types.ts b/seed/ts-express/websocket/core/schemas/builders/object/types.ts
index 301864396..2ed5e473a 100644
--- a/seed/ts-express/websocket/core/schemas/builders/object/types.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/object/types.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
-import { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
-import { ObjectLikeUtils } from "../object-like";
-import { SchemaUtils } from "../schema-utils";
-import { Property } from "./property";
+import type { BaseSchema, inferParsed, inferRaw, Schema } from "../../Schema";
+import type { addQuestionMarksToNullableProperties } from "../../utils/addQuestionMarksToNullableProperties";
+import type { ObjectLikeUtils } from "../object-like/index";
+import type { SchemaUtils } from "../schema-utils/index";
+import type { Property } from "./property";
 
 export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
     ObjectLikeUtils<Raw, Parsed> &
diff --git a/seed/ts-express/websocket/core/schemas/builders/primitives/any.ts b/seed/ts-express/websocket/core/schemas/builders/primitives/any.ts
index a0dce104c..0652f8934 100644
--- a/seed/ts-express/websocket/core/schemas/builders/primitives/any.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/primitives/any.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const any: () => Schema<any, any> = createIdentitySchemaCreator<any>(SchemaType.ANY, (value) => ({
diff --git a/seed/ts-express/websocket/core/schemas/builders/primitives/boolean.ts b/seed/ts-express/websocket/core/schemas/builders/primitives/boolean.ts
index 74ed51ff6..d90a6924f 100644
--- a/seed/ts-express/websocket/core/schemas/builders/primitives/boolean.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/primitives/boolean.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/websocket/core/schemas/builders/primitives/number.ts b/seed/ts-express/websocket/core/schemas/builders/primitives/number.ts
index 808b80787..8b3b32cdc 100644
--- a/seed/ts-express/websocket/core/schemas/builders/primitives/number.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/primitives/number.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/websocket/core/schemas/builders/primitives/string.ts b/seed/ts-express/websocket/core/schemas/builders/primitives/string.ts
index f11672807..f9f8e4779 100644
--- a/seed/ts-express/websocket/core/schemas/builders/primitives/string.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/primitives/string.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 
diff --git a/seed/ts-express/websocket/core/schemas/builders/primitives/unknown.ts b/seed/ts-express/websocket/core/schemas/builders/primitives/unknown.ts
index 45b0a7f85..41c9d770b 100644
--- a/seed/ts-express/websocket/core/schemas/builders/primitives/unknown.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/primitives/unknown.ts
@@ -1,4 +1,4 @@
-import { Schema, SchemaType } from "../../Schema";
+import { type Schema, SchemaType } from "../../Schema";
 import { createIdentitySchemaCreator } from "../../utils/createIdentitySchemaCreator";
 
 export const unknown: () => Schema<unknown, unknown> = createIdentitySchemaCreator<unknown>(
diff --git a/seed/ts-express/websocket/core/schemas/builders/record/record.ts b/seed/ts-express/websocket/core/schemas/builders/record/record.ts
index eb3e9a999..10e6db363 100644
--- a/seed/ts-express/websocket/core/schemas/builders/record/record.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/record/record.ts
@@ -1,10 +1,10 @@
-import { MaybeValid, Schema, SchemaType, ValidationError } from "../../Schema";
+import { type MaybeValid, type Schema, SchemaType, type ValidationError } from "../../Schema";
 import { entries } from "../../utils/entries";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { BaseRecordSchema, RecordSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { BaseRecordSchema, RecordSchema } from "./types";
 
 export function record<RawKey extends string | number, RawValue, ParsedValue, ParsedKey extends string | number>(
     keySchema: Schema<RawKey, ParsedKey>,
diff --git a/seed/ts-express/websocket/core/schemas/builders/record/types.ts b/seed/ts-express/websocket/core/schemas/builders/record/types.ts
index fec431d43..b99bb9d87 100644
--- a/seed/ts-express/websocket/core/schemas/builders/record/types.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/record/types.ts
@@ -1,5 +1,5 @@
-import { BaseSchema } from "../../Schema";
-import { SchemaUtils } from "../schema-utils";
+import type { BaseSchema } from "../../Schema";
+import type { SchemaUtils } from "../schema-utils/index";
 
 export type RecordSchema<
     RawKey extends string | number,
diff --git a/seed/ts-express/websocket/core/schemas/builders/schema-utils/JsonError.ts b/seed/ts-express/websocket/core/schemas/builders/schema-utils/JsonError.ts
index 2b89ca0e7..7573c76be 100644
--- a/seed/ts-express/websocket/core/schemas/builders/schema-utils/JsonError.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/schema-utils/JsonError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class JsonError extends Error {
diff --git a/seed/ts-express/websocket/core/schemas/builders/schema-utils/ParseError.ts b/seed/ts-express/websocket/core/schemas/builders/schema-utils/ParseError.ts
index d056eb45c..f1914b596 100644
--- a/seed/ts-express/websocket/core/schemas/builders/schema-utils/ParseError.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/schema-utils/ParseError.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 import { stringifyValidationError } from "./stringifyValidationErrors";
 
 export class ParseError extends Error {
diff --git a/seed/ts-express/websocket/core/schemas/builders/schema-utils/getSchemaUtils.ts b/seed/ts-express/websocket/core/schemas/builders/schema-utils/getSchemaUtils.ts
index d5e7a955d..91381a1d6 100644
--- a/seed/ts-express/websocket/core/schemas/builders/schema-utils/getSchemaUtils.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/schema-utils/getSchemaUtils.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, Schema, SchemaOptions, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, type SchemaOptions, SchemaType } from "../../Schema";
 import { JsonError } from "./JsonError";
 import { ParseError } from "./ParseError";
 
diff --git a/seed/ts-express/websocket/core/schemas/builders/schema-utils/stringifyValidationErrors.ts b/seed/ts-express/websocket/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
index 4160f0a26..1066d0038 100644
--- a/seed/ts-express/websocket/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/schema-utils/stringifyValidationErrors.ts
@@ -1,4 +1,4 @@
-import { ValidationError } from "../../Schema";
+import type { ValidationError } from "../../Schema";
 
 export function stringifyValidationError(error: ValidationError): string {
     if (error.path.length === 0) {
diff --git a/seed/ts-express/websocket/core/schemas/builders/set/set.ts b/seed/ts-express/websocket/core/schemas/builders/set/set.ts
index e9e6bb7e5..bf31bc5fd 100644
--- a/seed/ts-express/websocket/core/schemas/builders/set/set.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/set/set.ts
@@ -1,8 +1,8 @@
-import { BaseSchema, Schema, SchemaType } from "../../Schema";
+import { type BaseSchema, type Schema, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { list } from "../list";
-import { getSchemaUtils } from "../schema-utils";
+import { list } from "../list/index";
+import { getSchemaUtils } from "../schema-utils/index";
 
 export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
     const listSchema = list(schema);
diff --git a/seed/ts-express/websocket/core/schemas/builders/undiscriminated-union/types.ts b/seed/ts-express/websocket/core/schemas/builders/undiscriminated-union/types.ts
index 43e7108a0..3ef19e2c0 100644
--- a/seed/ts-express/websocket/core/schemas/builders/undiscriminated-union/types.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/undiscriminated-union/types.ts
@@ -1,4 +1,4 @@
-import { inferParsed, inferRaw, Schema } from "../../Schema";
+import type { inferParsed, inferRaw, Schema } from "../../Schema";
 
 export type UndiscriminatedUnionSchema<Schemas extends [...Schema[]]> = Schema<
     inferRawUnidiscriminatedUnionSchema<Schemas>,
diff --git a/seed/ts-express/websocket/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts b/seed/ts-express/websocket/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
index a5cf01fa5..26ad5f9b9 100644
--- a/seed/ts-express/websocket/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/undiscriminated-union/undiscriminatedUnion.ts
@@ -1,7 +1,14 @@
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType, ValidationError } from "../../Schema";
+import {
+    type BaseSchema,
+    type MaybeValid,
+    type Schema,
+    type SchemaOptions,
+    SchemaType,
+    type ValidationError,
+} from "../../Schema";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { getSchemaUtils } from "../schema-utils";
-import { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { inferParsedUnidiscriminatedUnionSchema, inferRawUnidiscriminatedUnionSchema } from "./types";
 
 export function undiscriminatedUnion<Schemas extends [Schema<any, any>, ...Schema<any, any>[]]>(
     schemas: Schemas,
diff --git a/seed/ts-express/websocket/core/schemas/builders/union/types.ts b/seed/ts-express/websocket/core/schemas/builders/union/types.ts
index 002523559..79753436d 100644
--- a/seed/ts-express/websocket/core/schemas/builders/union/types.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/union/types.ts
@@ -1,5 +1,5 @@
-import { inferParsedObject, inferRawObject, ObjectSchema } from "../object";
-import { Discriminant } from "./discriminant";
+import type { inferParsedObject, inferRawObject, ObjectSchema } from "../object/index";
+import type { Discriminant } from "./discriminant";
 
 export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
     [K in DiscriminantValues]: ObjectSchema<any, any>;
diff --git a/seed/ts-express/websocket/core/schemas/builders/union/union.ts b/seed/ts-express/websocket/core/schemas/builders/union/union.ts
index 0089437fb..7da4271a2 100644
--- a/seed/ts-express/websocket/core/schemas/builders/union/union.ts
+++ b/seed/ts-express/websocket/core/schemas/builders/union/union.ts
@@ -1,14 +1,20 @@
-import { BaseSchema, MaybeValid, SchemaType } from "../../Schema";
+import { type BaseSchema, type MaybeValid, SchemaType } from "../../Schema";
 import { getErrorMessageForIncorrectType } from "../../utils/getErrorMessageForIncorrectType";
 import { isPlainObject } from "../../utils/isPlainObject";
 import { keys } from "../../utils/keys";
 import { maybeSkipValidation } from "../../utils/maybeSkipValidation";
-import { enum_ } from "../enum";
-import { ObjectSchema } from "../object";
-import { getObjectLikeUtils, ObjectLikeSchema } from "../object-like";
-import { getSchemaUtils } from "../schema-utils";
-import { Discriminant } from "./discriminant";
-import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from "./types";
+import { enum_ } from "../enum/index";
+import type { ObjectSchema } from "../object/index";
+import { getObjectLikeUtils, type ObjectLikeSchema } from "../object-like";
+import { getSchemaUtils } from "../schema-utils/index";
+import type { Discriminant } from "./discriminant";
+import type {
+    inferParsedDiscriminant,
+    inferParsedUnion,
+    inferRawDiscriminant,
+    inferRawUnion,
+    UnionSubtypes,
+} from "./types";
 
 export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
     discriminant: D,
diff --git a/seed/ts-express/websocket/core/schemas/index.ts b/seed/ts-express/websocket/core/schemas/index.ts
index 5429d8b43..60c0b5988 100644
--- a/seed/ts-express/websocket/core/schemas/index.ts
+++ b/seed/ts-express/websocket/core/schemas/index.ts
@@ -1,2 +1,2 @@
-export * from "./builders";
+export * from "./builders/index";
 export type { inferParsed, inferRaw, Schema, SchemaOptions } from "./Schema";
diff --git a/seed/ts-express/websocket/core/schemas/utils/createIdentitySchemaCreator.ts b/seed/ts-express/websocket/core/schemas/utils/createIdentitySchemaCreator.ts
index 1857560b8..82a9e8c57 100644
--- a/seed/ts-express/websocket/core/schemas/utils/createIdentitySchemaCreator.ts
+++ b/seed/ts-express/websocket/core/schemas/utils/createIdentitySchemaCreator.ts
@@ -1,5 +1,5 @@
-import { getSchemaUtils } from "../builders/schema-utils";
-import { BaseSchema, MaybeValid, Schema, SchemaOptions, SchemaType } from "../Schema";
+import { getSchemaUtils } from "../builders/schema-utils/index";
+import { type BaseSchema, type MaybeValid, type Schema, type SchemaOptions, SchemaType } from "../Schema";
 import { maybeSkipValidation } from "./maybeSkipValidation";
 
 export function createIdentitySchemaCreator<T>(
diff --git a/seed/ts-express/websocket/core/schemas/utils/maybeSkipValidation.ts b/seed/ts-express/websocket/core/schemas/utils/maybeSkipValidation.ts
index c11fe3609..70be6478b 100644
--- a/seed/ts-express/websocket/core/schemas/utils/maybeSkipValidation.ts
+++ b/seed/ts-express/websocket/core/schemas/utils/maybeSkipValidation.ts
@@ -1,4 +1,4 @@
-import { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
+import type { BaseSchema, MaybeValid, SchemaOptions } from "../Schema";
 
 export function maybeSkipValidation<S extends BaseSchema<Raw, Parsed>, Raw, Parsed>(schema: S): S {
     return {
