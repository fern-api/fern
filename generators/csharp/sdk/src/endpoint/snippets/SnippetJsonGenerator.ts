import urlJoin from "url-join";

import { FernGeneratorExec } from "@fern-fern/generator-exec-sdk";
import { Endpoint } from "@fern-fern/generator-exec-sdk/api";
import { HttpEndpoint } from "@fern-fern/ir-sdk/api";

import { SdkGeneratorContext } from "../../SdkGeneratorContext";
import { RootClientGenerator } from "../../root-client/RootClientGenerator";
import { SingleEndpointSnippet } from "./EndpointSnippetsGenerator";

export class SnippetJsonGenerator {
    private readonly context: SdkGeneratorContext;
    private readonly rootClientGenerator: RootClientGenerator;
    constructor({ context }: { context: SdkGeneratorContext }) {
        this.context = context;
        this.rootClientGenerator = new RootClientGenerator(context);
    }

    public generate(): FernGeneratorExec.Snippets {
        const rootClientSnippet = this.rootClientGenerator
            .generateExampleClientInstantiationSnippet({ asSnippet: true })
            .toFormattedSnippet({
                allNamespaceSegments: this.context.getAllNamespaceSegments(),
                allTypeClassReferences: this.context.getAllTypeClassReferences(),
                rootNamespace: this.context.getNamespace(),
                customConfig: this.context.customConfig,
                formatter: this.context.formatter
            });
        const rootClientImportList = rootClientSnippet.imports?.split("\n") ?? [];

        function getCsharpSnippet(endpointSnippet: SingleEndpointSnippet, isPager: boolean): string {
            let snippet = "";
            const snippetImportList = endpointSnippet.imports?.split("\n") ?? [];
            const uniqueOrderedImports = Array.from(new Set([...rootClientImportList, ...snippetImportList]))
                .filter((importString) => importString !== "")
                .sort();
            snippet += `${uniqueOrderedImports.join("\n")}\n\nvar client = ${rootClientSnippet.body}`;

            if (isPager) {
                snippet += "var pager = ";
            }

            snippet += endpointSnippet.endpointCall;

            if (isPager) {
                snippet += `\nawait foreach (var item in pager)
{
    // do something with item
}\n`;
            }
            return snippet;
        }

        const isPaginationEnabled = this.context.config.generatePaginatedClients ?? false;
        const endpoints: FernGeneratorExec.Endpoint[] = [];
        for (const [_, service] of Object.entries(this.context.ir.services)) {
            for (const httpEndpoint of service.endpoints) {
                const isPager = isPaginationEnabled && httpEndpoint.pagination != null;
                for (const endpointSnippet of this.getSnippetsForEndpoint(httpEndpoint.id)) {
                    const csharpSnippet = getCsharpSnippet(endpointSnippet, isPager);
                    const endpoint: Endpoint = {
                        exampleIdentifier: endpointSnippet?.exampleIdentifier,
                        id: {
                            path: FernGeneratorExec.EndpointPath(this.getFullPathForEndpoint(httpEndpoint)),
                            method: httpEndpoint.method,
                            identifierOverride: httpEndpoint.id
                        },
                        snippet: FernGeneratorExec.EndpointSnippet.csharp({
                            client: csharpSnippet
                        })
                    };
                    endpoints.push(endpoint);
                }
            }
        }
        return {
            types: {},
            endpoints
        };
    }

    private getSnippetsForEndpoint(endpointId: string): SingleEndpointSnippet[] {
        const snippetsForEndpoint = this.context.snippetGenerator.getSnippetsForEndpoint(endpointId);
        if (snippetsForEndpoint == null) {
            return [];
        }
        const { autogenerated, userSpecified } = snippetsForEndpoint;
        return userSpecified.length > 0 ? [...userSpecified] : autogenerated[0] != null ? [autogenerated[0]] : [];
    }

    // copied from ts generator:
    // TODO(dsinghvi): HACKHACK Move this to IR
    private getFullPathForEndpoint(endpoint: HttpEndpoint): string {
        let url = "";
        if (endpoint.fullPath.head.length > 0) {
            url = urlJoin(url, endpoint.fullPath.head);
        }
        for (const part of endpoint.fullPath.parts) {
            url = urlJoin(url, "{" + part.pathParameter + "}");
            if (part.tail.length > 0) {
                url = urlJoin(url, part.tail);
            }
        }
        return url.startsWith("/") ? url : `/${url}`;
    }
}
