import { ExampleEndpointCall, HttpEndpoint } from "@fern-fern/ir-sdk/api";

import { SdkGeneratorContext } from "../../SdkGeneratorContext";
import { GrpcEndpointGenerator } from "../grpc/GrpcEndpointGenerator";
import { HttpEndpointGenerator } from "../http/HttpEndpointGenerator";

export interface EndpointSnippets {
    autogenerated: SingleEndpointSnippet[];
    userSpecified: SingleEndpointSnippet[];
}

export interface SingleEndpointSnippet {
    exampleIdentifier: string | undefined;
    imports: string | undefined;
    endpointCall: string;
}

export class EndpointSnippetsGenerator {
    public static CLIENT_VARIABLE_NAME = "client";

    private readonly context: SdkGeneratorContext;
    private readonly grpcEndpointGenerator: GrpcEndpointGenerator;
    private readonly httpEndpointGenerator: HttpEndpointGenerator;
    private readonly snippetsCache: Map<string, EndpointSnippets> = new Map();

    constructor({ context }: { context: SdkGeneratorContext }) {
        this.context = context;
        this.grpcEndpointGenerator = new GrpcEndpointGenerator({ context });
        this.httpEndpointGenerator = new HttpEndpointGenerator({ context });
    }

    public async getSnippetsForEndpoint(endpointId: string): Promise<EndpointSnippets | undefined> {
        if (this.snippetsCache.has(endpointId)) {
            return this.snippetsCache.get(endpointId);
        }

        const [serviceId, service] = Object.entries(this.context.ir.services).find(([_, service]) =>
            service.endpoints.some((endpoint) => endpoint.id === endpointId)
        ) ?? [undefined, undefined];

        if (!service) {
            return undefined;
        }

        const endpoint = service.endpoints.find((endpoint) => endpoint.id === endpointId);
        if (!endpoint) {
            return undefined;
        }

        const autogenerated = await Promise.all(
            endpoint.autogeneratedExamples.flatMap((example) =>
                this.generateSingleEndpointSnippet({
                    endpoint,
                    example: example.example,
                    serviceId
                })
            )
        ).then((snippets) => snippets.filter((snippet): snippet is SingleEndpointSnippet => snippet != null));

        const userSpecified = await Promise.all(
            endpoint.userSpecifiedExamples.flatMap((example) =>
                example.example != null
                    ? this.generateSingleEndpointSnippet({
                          endpoint,
                          example: example.example,
                          serviceId
                      })
                    : undefined
            )
        ).then((snippets) => snippets.filter((snippet): snippet is SingleEndpointSnippet => snippet != null));

        const endpointSnippets: EndpointSnippets = { autogenerated, userSpecified };
        this.snippetsCache.set(endpointId, endpointSnippets);

        return endpointSnippets;
    }

    public async generateSingleEndpointSnippet({
        endpoint,
        example,
        serviceId
    }: {
        endpoint: HttpEndpoint;
        example: ExampleEndpointCall;
        serviceId: string;
    }): Promise<SingleEndpointSnippet | undefined> {
        const isGrpc = this.context.getGrpcClientInfoForServiceId(serviceId);
        const snippet = isGrpc
            ? this.grpcEndpointGenerator.generateGrpcEndpointSnippet({
                  example,
                  endpoint,
                  serviceId,
                  clientVariableName: EndpointSnippetsGenerator.CLIENT_VARIABLE_NAME,
                  parseDatetimes: false
              })
            : this.httpEndpointGenerator.generateHttpEndpointSnippet({
                  example,
                  endpoint,
                  clientVariableName: EndpointSnippetsGenerator.CLIENT_VARIABLE_NAME,
                  serviceId,
                  getResult: true,
                  parseDatetimes: false
              });
        if (snippet == null) {
            return undefined;
        }
        const formattedAstNodeSnippet = await snippet.toFormattedSnippetAsync({
            allNamespaceSegments: this.context.getAllNamespaceSegments(),
            allTypeClassReferences: this.context.getAllTypeClassReferences(),
            rootNamespace: this.context.getNamespace(),
            customConfig: this.context.customConfig,
            formatter: this.context.formatter
        });
        return {
            imports: formattedAstNodeSnippet.imports,
            endpointCall: formattedAstNodeSnippet.body,
            exampleIdentifier: example.name?.originalName
        };
    }
}
