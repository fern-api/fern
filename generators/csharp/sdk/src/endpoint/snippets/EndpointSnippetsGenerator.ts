import { FernIr } from "@fern-fern/ir-sdk";
import { ExampleEndpointCall, HttpEndpoint } from "@fern-fern/ir-sdk/api";

import { SdkGeneratorContext } from "../../SdkGeneratorContext";
import { GrpcEndpointGenerator } from "../grpc/GrpcEndpointGenerator";
import { HttpEndpointGenerator } from "../http/HttpEndpointGenerator";

export interface EndpointSnippets {
    autogenerated: SingleEndpointSnippet[];
    userSpecified: SingleEndpointSnippet[];
}

export interface SingleEndpointSnippet {
    exampleIdentifier: string | undefined;
    imports: string | undefined;
    endpointCall: string;
}

export class EndpointSnippetsGenerator {
    public static CLIENT_VARIABLE_NAME = "client";

    private readonly context: SdkGeneratorContext;
    private readonly grpcEndpointGenerator: GrpcEndpointGenerator;
    private readonly httpEndpointGenerator: HttpEndpointGenerator;
    private readonly snippetsCache: Map<string, EndpointSnippets> = new Map();

    constructor({ context }: { context: SdkGeneratorContext }) {
        this.context = context;
        this.grpcEndpointGenerator = new GrpcEndpointGenerator({ context });
        this.httpEndpointGenerator = new HttpEndpointGenerator({ context });
    }

    public async populateSnippetsCache(): Promise<void> {
        const endpointSnippetsById = new Map<string, EndpointSnippets>();

        const allEndpoints = Object.entries(this.context.ir.services).flatMap(([serviceId, service]) =>
            service.endpoints.flatMap((endpoint) => {
                const endpointIdsWithGenerator = [{ id: endpoint.id, isPager: false }];
                if (endpoint.pagination) {
                    endpointIdsWithGenerator.push({ id: endpoint.id, isPager: true });
                }
                return endpointIdsWithGenerator.map(({ id }) => ({ id, endpoint, serviceId }));
            })
        );

        for (const { id, endpoint, serviceId } of allEndpoints) {
            const allExamples = [
                ...endpoint.autogeneratedExamples.map(({ example }) => ({
                    example,
                    isUserSpecified: false
                })),
                ...endpoint.userSpecifiedExamples
                    .map(({ example }) => example)
                    .filter((example): example is FernIr.ExampleEndpointCall => example != null)
                    .map((example) => ({
                        example,
                        isUserSpecified: true
                    }))
            ];

            const snippets = await Promise.all(
                allExamples.map(({ example, isUserSpecified }) =>
                    this.generateSingleEndpointSnippet({
                        endpoint,
                        example,
                        serviceId,
                        format: false
                    }).then((snippet) => ({ snippet, isUserSpecified }))
                )
            );

            const autogenerated = snippets
                .filter(({ snippet, isUserSpecified }) => snippet != null && !isUserSpecified)
                .map(({ snippet }) => snippet as SingleEndpointSnippet);

            const userSpecified = snippets
                .filter(({ snippet, isUserSpecified }) => snippet != null && isUserSpecified)
                .map(({ snippet }) => snippet as SingleEndpointSnippet);

            if (autogenerated.length > 0 || userSpecified.length > 0) {
                endpointSnippetsById.set(id, { autogenerated, userSpecified });
            }
        }

        const allSnippets = Array.from(endpointSnippetsById.values()).flatMap((snippet) => [
            ...snippet.autogenerated,
            ...snippet.userSpecified
        ]);

        const formattedSnippets = await this.context.formatter.formatMultiple(
            allSnippets.map((snippet) => snippet.endpointCall)
        );

        let index = 0;
        endpointSnippetsById.forEach((snippet) => {
            snippet.autogenerated.forEach((s) => {
                const snippet = formattedSnippets[index++];
                if (snippet === undefined) {
                    throw new Error("Internal error; No snippet found for autogenerated example");
                }
                s.endpointCall = snippet;
            });
            snippet.userSpecified.forEach((s) => {
                const snippet = formattedSnippets[index++];
                if (snippet === undefined) {
                    throw new Error("Internal error; No snippet found for user specified example");
                }
                s.endpointCall = snippet;
            });
        });

        endpointSnippetsById.forEach((value, key) => {
            this.snippetsCache.set(key, value);
        });
    }

    public getSnippetsForEndpoint(endpointId: string): EndpointSnippets | undefined {
        return this.snippetsCache.get(endpointId);
    }

    public getSingleEndpointSnippet({
        endpoint,
        example
    }: {
        endpoint: HttpEndpoint;
        example: ExampleEndpointCall;
    }): SingleEndpointSnippet | undefined {
        const snippets = this.getSnippetsForEndpoint(endpoint.id);
        if (snippets) {
            const exampleName = example.name?.originalName;
            const snippet =
                snippets.userSpecified.find((s) => s.exampleIdentifier === exampleName) ??
                snippets.autogenerated.find((s) => s.exampleIdentifier === exampleName);
            if (snippet) {
                return snippet;
            }
        }
        return undefined;
    }

    private async generateSingleEndpointSnippet({
        endpoint,
        example,
        serviceId,
        format = true
    }: {
        endpoint: HttpEndpoint;
        example: ExampleEndpointCall;
        serviceId: string;
        format?: boolean;
    }): Promise<SingleEndpointSnippet | undefined> {
        const isGrpc = this.context.getGrpcClientInfoForServiceId(serviceId);
        const snippet = isGrpc
            ? this.grpcEndpointGenerator.generateGrpcEndpointSnippet({
                  example,
                  endpoint,
                  serviceId,
                  clientVariableName: EndpointSnippetsGenerator.CLIENT_VARIABLE_NAME,
                  parseDatetimes: false
              })
            : this.httpEndpointGenerator.generateHttpEndpointSnippet({
                  example,
                  endpoint,
                  clientVariableName: EndpointSnippetsGenerator.CLIENT_VARIABLE_NAME,
                  serviceId,
                  getResult: true,
                  parseDatetimes: false
              });
        if (snippet == null) {
            return undefined;
        }
        const formatter = format ? this.context.formatter : this.context.nopFormatter;
        const formattedAstNodeSnippet = await snippet.toFormattedSnippetAsync({
            allNamespaceSegments: this.context.getAllNamespaceSegments(),
            allTypeClassReferences: this.context.getAllTypeClassReferences(),
            rootNamespace: this.context.getNamespace(),
            customConfig: this.context.customConfig,
            formatter
        });
        return {
            imports: formattedAstNodeSnippet.imports,
            endpointCall: formattedAstNodeSnippet.body,
            exampleIdentifier: example.name?.originalName
        };
    }
}
