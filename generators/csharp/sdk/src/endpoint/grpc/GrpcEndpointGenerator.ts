import { ast, GrpcClientInfo } from "@fern-api/csharp-codegen";
import { ExampleEndpointCall, HttpEndpoint, ServiceId } from "@fern-fern/ir-sdk/api";
import { SdkGeneratorContext } from "../../SdkGeneratorContext";
import { AbstractEndpointGenerator } from "../AbstractEndpointGenerator";
import { EndpointSignatureInfo } from "../EndpointSignatureInfo";
import { EndpointRequest } from "../request/EndpointRequest";
import { RESPONSE_VARIABLE_NAME } from "../utils/constants";

export declare namespace GrpcEndpointGenerator {
    export interface Args {
        serviceId: ServiceId;
        endpoint: HttpEndpoint;
        rawGrpcClientReference: string;
        grpcClientInfo: GrpcClientInfo;
    }
}

export class GrpcEndpointGenerator extends AbstractEndpointGenerator {
    public constructor({ context }: { context: SdkGeneratorContext }) {
        super({ context });
    }

    public generate({
        serviceId,
        endpoint,
        rawGrpcClientReference,
        grpcClientInfo
    }: GrpcEndpointGenerator.Args): ast.Method {
        const endpointSignatureInfo = this.getEndpointSignatureInfo({ serviceId, endpoint });
        const parameters = [...endpointSignatureInfo.baseParameters];
        parameters.push(
            this.csharp.parameter({
                type: this.csharp.Type.optional(
                    this.csharp.Type.reference(this.context.getGrpcRequestOptionsClassReference())
                ),
                name: this.context.getRequestOptionsParameterName(),
                initializer: "null"
            })
        );
        parameters.push(
            this.csharp.parameter({
                type: this.csharp.Type.reference(this.context.getCancellationTokenClassReference()),
                name: this.context.getCancellationTokenParameterName(),
                initializer: "default"
            })
        );
        const endpointSnippets = this.context.snippetGenerator.getSnippetsForEndpoint(endpoint.id);
        const snippet = endpointSnippets?.userSpecified[0] ?? endpointSnippets?.autogenerated[0];
        const body = this.getEndpointMethodBody({
            endpoint,
            rawGrpcClientReference,
            grpcClientInfo,
            request: endpointSignatureInfo.request,
            return_: endpointSignatureInfo.returnType
        });
        return this.csharp.method({
            name: this.context.getEndpointMethodName(endpoint),
            access: ast.Access.Public,
            isAsync: true,
            parameters,
            summary: endpoint.docs,
            return_: endpointSignatureInfo.returnType,
            body: this.context.includeExceptionHandler()
                ? this.wrapWithExceptionHandler({ body, returnType: endpointSignatureInfo.returnType })
                : body,
            codeExample: snippet?.endpointCall
        });
    }

    public generateGrpcEndpointSnippet({
        example,
        endpoint,
        clientVariableName,
        parseDatetimes,
        serviceId
    }: {
        example: ExampleEndpointCall;
        endpoint: HttpEndpoint;
        clientVariableName: string;
        serviceId: ServiceId;
        parseDatetimes: boolean;
        getResult?: boolean;
    }): ast.MethodInvocation | undefined {
        return this.generateEndpointSnippet({
            example,
            endpoint,
            clientVariableName,
            serviceId,
            additionalEndParameters: [],
            parseDatetimes
        });
    }

    private getEndpointMethodBody({
        endpoint,
        rawGrpcClientReference,
        grpcClientInfo,
        request,
        return_
    }: {
        endpoint: HttpEndpoint;
        rawGrpcClientReference: string;
        grpcClientInfo: GrpcClientInfo;
        request: EndpointRequest | undefined;
        return_: ast.Type | undefined;
    }): ast.CodeBlock {
        return this.csharp.codeblock((writer) => {
            writer.writeLine("try");
            writer.writeLine("{");
            writer.indent();
            writer.writeNodeStatement(this.createCallOptions({ rawGrpcClientReference }));
            writer.writeNodeStatement(
                this.createCall({
                    endpoint,
                    request,
                    grpcClientInfo
                })
            );
            writer.writeNodeStatement(
                this.invokeCallAndDecodeResponse({
                    return_
                })
            );
            writer.dedent();
            writer.writeLine("}");

            writer.write("catch (");
            writer.writeNode(this.getRpcExceptionClassReference());
            writer.writeLine(" rpc)");
            writer.writeLine("{");
            writer.indent();
            writer.writeNodeStatement(this.handleRpcException());
            writer.dedent();
            writer.writeLine("}");

            writer.writeLine("catch (Exception e)");
            writer.writeLine("{");
            writer.writeNodeStatement(this.handleException());
            writer.writeLine("}");
        });
    }

    private createCallOptions({ rawGrpcClientReference }: { rawGrpcClientReference: string }): ast.CodeBlock {
        return this.csharp.codeblock((writer) => {
            writer.write("var callOptions = ");
            writer.writeNode(
                this.csharp.invokeMethod({
                    on: this.csharp.codeblock(rawGrpcClientReference),
                    method: "CreateCallOptions",
                    arguments_: [
                        this.csharp.codeblock((writer) => {
                            writer.write(`${this.context.getRequestOptionsParameterName()} ?? `);
                            writer.writeNode(
                                this.csharp.instantiateClass({
                                    classReference: this.context.getGrpcRequestOptionsClassReference(),
                                    arguments_: []
                                })
                            );
                        }),
                        this.csharp.codeblock(this.context.getCancellationTokenParameterName())
                    ]
                })
            );
        });
    }

    private createCall({
        endpoint,
        request,
        grpcClientInfo
    }: {
        endpoint: HttpEndpoint;
        request: EndpointRequest | undefined;
        grpcClientInfo: GrpcClientInfo;
    }): ast.CodeBlock {
        const mapToProtoRequest =
            request != null ? this.getToProtoMethodInvocation({ request }) : this.csharp.codeblock("null");
        return this.csharp.codeblock((writer) => {
            writer.write("var call = ");
            writer.writeNode(
                this.csharp.invokeMethod({
                    on: this.csharp.codeblock(grpcClientInfo.privatePropertyName),
                    method: this.context.getEndpointMethodName(endpoint),
                    arguments_: [mapToProtoRequest, this.csharp.codeblock("callOptions")]
                })
            );
        });
    }

    private invokeCallAndDecodeResponse({ return_ }: { return_: ast.Type | undefined }): ast.CodeBlock {
        const decodeResponse =
            return_ != null ? this.getFromProtoMethodInvocation({ return_ }) : this.csharp.codeblock("");
        return this.csharp.codeblock((writer) => {
            writer.write("var ");
            writer.write(RESPONSE_VARIABLE_NAME);
            writer.writeLine(" = await call.ConfigureAwait(false);");
            writer.write("return ");
            writer.writeNode(decodeResponse);
        });
    }

    private handleRpcException(): ast.CodeBlock {
        return this.csharp.codeblock((writer) => {
            writer.writeLine("var statusCode = (int)rpc.StatusCode;");
            writer.write("throw ");
            writer.writeNode(
                this.csharp.instantiateClass({
                    classReference: this.context.getBaseApiExceptionClassReference(),
                    arguments_: [
                        this.csharp.codeblock('$"Error with gRPC status code {statusCode}"'),
                        this.csharp.codeblock("statusCode"),
                        this.csharp.codeblock("rpc.Message")
                    ]
                })
            );
        });
    }

    private handleException(): ast.CodeBlock {
        return this.csharp.codeblock((writer) => {
            writer.write("throw ");
            writer.writeNode(
                this.csharp.instantiateClass({
                    classReference: this.context.getBaseExceptionClassReference(),
                    arguments_: [this.csharp.codeblock('"Error"'), this.csharp.codeblock("e")]
                })
            );
        });
    }

    private getToProtoMethodInvocation({ request }: { request: EndpointRequest }): ast.CodeBlock {
        return this.csharp.codeblock((writer) => {
            writer.writeNode(
                this.csharp.invokeMethod({
                    on: this.csharp.codeblock(request.getParameterName()),
                    method: "ToProto",
                    arguments_: []
                })
            );
        });
    }

    private getFromProtoMethodInvocation({ return_ }: { return_: ast.Type }): ast.CodeBlock {
        return this.csharp.codeblock((writer) => {
            writer.writeNode(
                this.csharp.invokeMethod({
                    on: return_,
                    method: "FromProto",
                    arguments_: [this.csharp.codeblock(RESPONSE_VARIABLE_NAME)]
                })
            );
        });
    }

    private getRpcExceptionClassReference(): ast.ClassReference {
        return this.csharp.classReference({
            name: "RpcException",
            namespace: "Grpc.Core"
        });
    }

    public getEndpointSignatureInfo({
        serviceId,
        endpoint
    }: {
        serviceId: string;
        endpoint: HttpEndpoint;
    }): EndpointSignatureInfo {
        return super.getUnpagedEndpointSignatureInfo({ serviceId, endpoint });
    }
}
