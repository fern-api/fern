import { CSharpFile } from "@fern-api/csharp-codegen";

import { FernIr } from "@fern-fern/ir-sdk";

import { ModelGeneratorContext } from "./ModelGeneratorContext";
import { ObjectGenerator } from "./object/ObjectGenerator";
import { ObjectSerializationTestGenerator } from "./object/ObjectSerializationTestGenerator";
import { UnionGenerator } from "./union/UnionGenerator";
import { UnionSerializationTestGenerator } from "./union/UnionSerializationTestGenerator";

export function generateModelTests({ context }: { context: ModelGeneratorContext }): CSharpFile[] {
    const types = Object.entries(context.ir.types)
        .filter(([typeId, _]) => !context.protobufResolver.isWellKnownProtobufType(typeId))
        .map(([_, type]) => type);
    const files: CSharpFile[] = [];
    for (const typeDeclaration of types
        .filter((type) => type.shape.type === "object")
        .map((type) => type as FernIr.TypeDeclaration & { shape: FernIr.ObjectTypeDeclaration })) {
        const objectGenerator = new ObjectGenerator(context, typeDeclaration, typeDeclaration.shape);
        const examples = [...typeDeclaration.userProvidedExamples, ...typeDeclaration.autogeneratedExamples];
        if (examples.length === 0) {
            continue;
        }
        const testInputs = examples.map((example) => {
            if (example.shape.type !== "object") {
                throw new Error("Unexpected non object type example");
            }
            const snippet = objectGenerator.doGenerateSnippet({ exampleObject: example.shape, parseDatetimes: true });
            return {
                objectInstantiationSnippet: snippet,
                json: example.jsonExample
            };
        });
        const testGenerator = new ObjectSerializationTestGenerator(context, typeDeclaration, testInputs);
        if (!testGenerator.shouldGenerate()) {
            continue;
        }
        files.push(testGenerator.generate());
    }

    if (context.shouldGenerateDiscriminatedUnions()) {
        for (const typeDeclaration of types
            .filter((type) => type.shape.type === "union")
            .map((type) => type as FernIr.TypeDeclaration & { shape: FernIr.UnionTypeDeclaration })) {
            const unionGenerator = new UnionGenerator(context, typeDeclaration, typeDeclaration.shape);
            if (unionGenerator.shouldGenerateSnippet() === false) {
                // TODO: add base properties to examples
                context.logger.info(
                    `Skipping union ${typeDeclaration.name.name.originalName} because shouldGenerateSnippet is false`
                );
                continue;
            }
            const examples = [...typeDeclaration.userProvidedExamples, ...typeDeclaration.autogeneratedExamples];
            if (examples.length === 0) {
                context.logger.info(
                    `Skipping union ${typeDeclaration.name.name.originalName} because there are no examples`
                );
                continue;
            }
            const testInputs = examples.map((example) => {
                if (example.shape.type !== "union") {
                    throw new Error("Unexpected non union type example");
                }
                const snippet = unionGenerator.doGenerateSnippet({ exampleUnion: example.shape, parseDatetimes: true });
                return {
                    objectInstantiationSnippet: snippet,
                    json: example.jsonExample
                };
            });
            const testGenerator = new UnionSerializationTestGenerator(context, typeDeclaration, testInputs);
            if (!testGenerator.shouldGenerate()) {
                continue;
            }
            files.push(testGenerator.generate());
        }
    }
    return files;
}
