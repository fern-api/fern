import { AbstractFormatter, File } from "@fern-api/base-generator";
import { AbsoluteFilePath, join, RelativeFilePath } from "@fern-api/fs-utils";
import { BaseGoCustomConfigSchema, go } from "@fern-api/go-ast";

export declare namespace GoFile {
    interface Args {
        /* The node(s) to be written to the Go source file */
        node: go.AstNode | go.AstNode[];
        /* Directory of the file */
        directory: RelativeFilePath;
        /* Filename of the file */
        filename: string;
        /* The package name of the file */
        packageName: string;
        /* The root import path of the module */
        rootImportPath: string;
        /* The import path of the file */
        importPath: string;
        /* Custom generator config */
        customConfig: BaseGoCustomConfigSchema;
        /* Optional formatter */
        formatter?: AbstractFormatter;
        /* Include generated code header in the file */
        includeGeneratedCodeHeader?: boolean;
    }
}

export class GoFile {
    private nodes: go.AstNode[];
    private directory: RelativeFilePath;
    private filename: string;
    private packageName: string;
    private rootImportPath: string;
    private importPath: string;
    private customConfig: BaseGoCustomConfigSchema;
    private formatter?: AbstractFormatter;
    private includeGeneratedCodeHeader: boolean;

    constructor({
        node,
        directory,
        filename,
        packageName,
        rootImportPath,
        importPath,
        customConfig,
        formatter,
        includeGeneratedCodeHeader = true
    }: GoFile.Args) {
        this.nodes = Array.isArray(node) ? node : [node];
        this.directory = directory;
        this.filename = filename;
        this.packageName = packageName;
        this.rootImportPath = rootImportPath;
        this.importPath = importPath;
        this.customConfig = customConfig;
        this.formatter = formatter;
        this.includeGeneratedCodeHeader = includeGeneratedCodeHeader;
    }

    public merge(other: GoFile): void {
        this.nodes = [...this.nodes, ...other.nodes];
    }

    public toFile(): File {
        const fileContents = getFileContent({
            node: this.nodes,
            packageName: this.packageName,
            rootImportPath: this.rootImportPath,
            importPath: this.importPath,
            customConfig: this.customConfig,
            formatter: this.formatter,
            includeGeneratedCodeHeader: this.includeGeneratedCodeHeader
        });
        return new File(this.filename, this.directory, fileContents);
    }

    public getFullyQualifiedName(): string {
        return join(this.directory, RelativeFilePath.of(this.filename));
    }

    public async write(absolutePathToDirectory: AbsoluteFilePath): Promise<void> {
        return this.toFile().write(absolutePathToDirectory);
    }
}

function getFileContent({
    node,
    packageName,
    rootImportPath,
    importPath,
    customConfig,
    formatter,
    includeGeneratedCodeHeader
}: Omit<GoFile.Args, "directory" | "filename">): string {
    const multiNode = new go.MultiNode({ nodes: Array.isArray(node) ? node : [node] });
    const content = multiNode.toString({
        packageName,
        rootImportPath,
        importPath,
        customConfig,
        formatter
    });
    if (includeGeneratedCodeHeader) {
        return `// Code generated by Fern. DO NOT EDIT.\n\n${content}`;
    }
    return content;
}
