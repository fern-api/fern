import { assertDefined } from "@fern-api/core-utils";
import { LiteralEnum, swift } from "@fern-api/swift-codegen";
import { EndpointSnippetGenerator } from "@fern-api/swift-dynamic-snippets";
import { dynamic, ExampleEndpointCall, ExampleTypeReference, HttpEndpoint } from "@fern-fern/ir-sdk/api";
import { SdkGeneratorContext } from "../../SdkGeneratorContext";
import { convertDynamicEndpointSnippetRequest } from "../../utils/convertEndpointSnippetRequest";

export declare namespace WireTestFunctionGenerator {
    interface Args {
        endpoint: HttpEndpoint;
        endpointSnippetGenerator: EndpointSnippetGenerator;
        dynamicIr: dynamic.DynamicIntermediateRepresentation;
        sdkGeneratorContext: SdkGeneratorContext;
    }
}

export class WireTestFunctionGenerator {
    private readonly endpoint: HttpEndpoint;
    private readonly endpointSnippetGenerator: EndpointSnippetGenerator;
    private readonly dynamicIr: dynamic.DynamicIntermediateRepresentation;
    private readonly sdkGeneratorContext: SdkGeneratorContext;

    private readonly exampleEndpointCallsById: Record<string, ExampleEndpointCall>;

    public constructor({
        endpoint,
        endpointSnippetGenerator,
        dynamicIr,
        sdkGeneratorContext
    }: WireTestFunctionGenerator.Args) {
        this.endpoint = endpoint;
        this.endpointSnippetGenerator = endpointSnippetGenerator;
        this.dynamicIr = dynamicIr;
        this.sdkGeneratorContext = sdkGeneratorContext;
        this.exampleEndpointCallsById = this.buildExampleEndpointCallsById(endpoint);
    }

    private get dynamicEndpoint() {
        const dynamicEndpoint = this.dynamicIr.endpoints[this.endpoint.id];
        assertDefined(dynamicEndpoint, "Dynamic endpoint is required to generate wire tests.");
        return dynamicEndpoint;
    }

    private buildExampleEndpointCallsById(endpoint: HttpEndpoint) {
        return [
            ...endpoint.userSpecifiedExamples.map((example) => example.example).filter((example) => example != null),
            ...endpoint.autogeneratedExamples.map((example) => example.example)
        ].reduce(
            (acc, exampleEndpointCall) => {
                if (exampleEndpointCall.id != null) {
                    acc[exampleEndpointCall.id] = exampleEndpointCall;
                }
                return acc;
            },
            {} as Record<string, ExampleEndpointCall>
        );
    }

    public generateTestFunctionsForEndpoint(): swift.Method[] {
        return (this.dynamicEndpoint.examples ?? [])
            .map((endpointExample, endpointExampleIdx) => {
                const exampleEndpointCall = this.exampleEndpointCallsById[endpointExample.id];
                if (exampleEndpointCall == null || exampleEndpointCall.response.type === "error") {
                    return null;
                }
                const exampleTypeRef = exampleEndpointCall.response.value._visit({
                    body: (exampleTypeRef) => exampleTypeRef,
                    stream: () => null,
                    sse: () => null,
                    _other: () => null
                });
                if (exampleTypeRef == null) {
                    return null;
                }
                const statements: swift.Statement[] = [
                    swift.Statement.constantDeclaration({
                        unsafeName: "stub",
                        value: swift.Expression.structInitialization({ unsafeName: "WireStub" })
                    }),
                    swift.Statement.expressionStatement(
                        swift.Expression.methodCall({
                            target: swift.Expression.reference("stub"),
                            methodName: "setResponse",
                            arguments_: [
                                swift.functionArgument({
                                    label: "body",
                                    value: swift.Expression.structInitialization({
                                        unsafeName: "Data",
                                        arguments_: [
                                            swift.functionArgument({
                                                value: swift.Expression.memberAccess({
                                                    target: swift.Expression.stringLiteral(
                                                        `""\n${JSON.stringify(exampleTypeRef.jsonExample, null, 2)}\n""`
                                                    ),
                                                    memberName: "utf8"
                                                })
                                            })
                                        ],
                                        multiline: true
                                    })
                                })
                            ],
                            multiline: true
                        })
                    ),
                    this.generateClientDeclaration(endpointExample),
                    swift.Statement.constantDeclaration({
                        unsafeName: "expectedResponse",
                        value: this.generateExampleResponse(exampleTypeRef)
                    }),
                    this.generateEndpointMethodCallStatement(endpointExample),
                    swift.Statement.expressionStatement(
                        swift.Expression.try(
                            swift.Expression.functionCall({
                                unsafeName: "#require",
                                arguments_: [
                                    swift.functionArgument({
                                        value: swift.Expression.equals(
                                            swift.Expression.reference("response"),
                                            swift.Expression.reference("expectedResponse")
                                        )
                                    })
                                ]
                            })
                        )
                    )
                ];
                return swift.method({
                    attributes: [{ name: "Test" }],
                    unsafeName: `${this.endpoint.name.camelCase.unsafeName}${endpointExampleIdx + 1}`,
                    async: true,
                    throws: true,
                    returnType: swift.Type.void(),
                    body: swift.CodeBlock.withStatements(statements)
                });
            })
            .filter((method) => method != null);
    }

    private generateClientDeclaration(dynamicEndpointExample: dynamic.EndpointExample): swift.Statement {
        const endpointSnippetRequest = convertDynamicEndpointSnippetRequest(dynamicEndpointExample, {
            baseUrlFallback: "https://api.fern.com"
        });
        return this.endpointSnippetGenerator.generateRootClientInitializationStatement({
            auth: this.dynamicEndpoint.auth,
            snippet: endpointSnippetRequest,
            additionalArgs: [
                swift.functionArgument({
                    label: "urlSession",
                    value: swift.Expression.memberAccess({
                        target: swift.Expression.reference("stub"),
                        memberName: "urlSession"
                    })
                })
            ]
        });
    }

    private generateEndpointMethodCallStatement(dynamicEndpointExample: dynamic.EndpointExample): swift.Statement {
        const endpointSnippetRequest = convertDynamicEndpointSnippetRequest(dynamicEndpointExample);
        return swift.Statement.constantDeclaration({
            unsafeName: "response",
            value: this.endpointSnippetGenerator.generateEndpointMethodCallExpression({
                endpoint: this.dynamicEndpoint,
                snippet: endpointSnippetRequest
            })
        });
    }

    private generateExampleResponse(exampleTypeRef: ExampleTypeReference): swift.Expression {
        return exampleTypeRef.shape._visit({
            container: (exampleContainer) =>
                exampleContainer._visit({
                    literal: (literalContainer) => {
                        return literalContainer.literal._visit({
                            string: (val) =>
                                swift.Expression.enumCaseShorthand(LiteralEnum.generateEnumCaseLabel(val.original)),
                            // Only string literals are supported
                            boolean: () => swift.Expression.nop(),
                            integer: () => swift.Expression.nop(),
                            uint: () => swift.Expression.nop(),
                            uint64: () => swift.Expression.nop(),
                            long: () => swift.Expression.nop(),
                            float: () => swift.Expression.nop(),
                            double: () => swift.Expression.nop(),
                            bigInteger: () => swift.Expression.nop(),
                            date: () => swift.Expression.nop(),
                            datetime: () => swift.Expression.nop(),
                            base64: () => swift.Expression.nop(),
                            uuid: () => swift.Expression.nop(),
                            _other: () => swift.Expression.nop()
                        });
                    },
                    map: (mapContainer) => {
                        return swift.Expression.dictionaryLiteral({
                            entries: mapContainer.map.map((kvPair) => [
                                this.generateExampleResponse(kvPair.key),
                                this.generateExampleResponse(kvPair.value)
                            ]),
                            multiline: true
                        });
                    },
                    set: () => swift.Expression.arrayLiteral({}), // TODO(kafkas): Set is not supported yet
                    nullable: (nullableContainer) => {
                        if (nullableContainer.nullable == null) {
                            return swift.Expression.enumCaseShorthand("null");
                        }
                        return swift.Expression.contextualMethodCall({
                            methodName: "value",
                            arguments_: [
                                swift.functionArgument({
                                    value: this.generateExampleResponse(nullableContainer.nullable)
                                })
                            ]
                        });
                    },
                    optional: (optionalContainer) => {
                        return optionalContainer.optional == null
                            ? swift.Expression.nop()
                            : this.generateExampleResponse(optionalContainer.optional);
                    },
                    list: (listContainer) => {
                        return swift.Expression.arrayLiteral({
                            elements: listContainer.list.map((element) => this.generateExampleResponse(element)),
                            multiline: true
                        });
                    },
                    _other: () => swift.Expression.nop()
                }),
            primitive: (examplePrimitive) =>
                examplePrimitive._visit({
                    string: (escapedString) => swift.Expression.stringLiteral(escapedString.original),
                    boolean: (bool) => swift.Expression.boolLiteral(bool),
                    integer: (value) => swift.Expression.numberLiteral(value),
                    uint: (value) => swift.Expression.numberLiteral(value),
                    uint64: (value) => swift.Expression.numberLiteral(value),
                    long: (value) => swift.Expression.numberLiteral(value),
                    float: (value) => swift.Expression.numberLiteral(value),
                    double: (value) => swift.Expression.numberLiteral(value),
                    // TODO(kafkas): Bigints are not supported yet
                    bigInteger: (value) => swift.Expression.stringLiteral(value),
                    date: (value) => swift.Expression.calendarDateLiteral(value),
                    datetime: (value) => {
                        if (value.raw == null) {
                            return swift.Expression.nop();
                        }
                        const timestampMs = new Date(value.raw).getTime();
                        const timestampSec = Math.round(timestampMs / 1000);
                        const roundedDateTime = new Date(timestampSec * 1000).toISOString();
                        // Remove fractional seconds (.000Z -> Z) for Swift compatibility
                        const dateTimeWithoutFractional = roundedDateTime.replace(/\.\d{3}Z$/, "Z");
                        return swift.Expression.dateLiteral(dateTimeWithoutFractional);
                    },
                    base64: (value) => swift.Expression.stringLiteral(value),
                    uuid: (value) => swift.Expression.uuidLiteral(value),
                    _other: () => swift.Expression.nop()
                }),
            named: (exampleNamedType) => {
                const { typeId } = exampleNamedType.typeName;
                const symbolName =
                    this.sdkGeneratorContext.project.srcSymbolRegistry.getSchemaTypeSymbolOrThrow(typeId);
                return exampleNamedType.shape._visit({
                    alias: (exampleAliasType) => {
                        return this.generateExampleResponse(exampleAliasType.value);
                    },
                    enum: (exampleEnumType) => {
                        return swift.Expression.enumCaseShorthand(exampleEnumType.value.name.camelCase.unsafeName);
                    },
                    object: (exampleObjectType) => {
                        return swift.Expression.structInitialization({
                            unsafeName: symbolName,
                            arguments_: exampleObjectType.properties.map((property) =>
                                swift.functionArgument({
                                    label: property.name.name.camelCase.unsafeName,
                                    value: this.generateExampleResponse(property.value)
                                })
                            ),
                            multiline: true
                        });
                    },
                    union: (exampleUnionType) => {
                        return exampleUnionType.singleUnionType.shape._visit({
                            noProperties: () =>
                                swift.Expression.contextualMethodCall({
                                    methodName:
                                        exampleUnionType.singleUnionType.wireDiscriminantValue.name.camelCase
                                            .unsafeName,
                                    arguments_: []
                                }),
                            samePropertiesAsObject: (exampleObjectTypeWithId) =>
                                swift.Expression.contextualMethodCall({
                                    methodName:
                                        exampleUnionType.singleUnionType.wireDiscriminantValue.name.camelCase
                                            .unsafeName,
                                    arguments_: exampleObjectTypeWithId.object.properties.map((property) =>
                                        swift.functionArgument({
                                            label: property.name.name.camelCase.unsafeName,
                                            value: this.generateExampleResponse(property.value)
                                        })
                                    ),
                                    multiline: true
                                }),
                            singleProperty: (exampleTypeRef) => this.generateExampleResponse(exampleTypeRef),
                            _other: () =>
                                swift.Expression.contextualMethodCall({
                                    methodName:
                                        exampleUnionType.singleUnionType.wireDiscriminantValue.name.camelCase
                                            .unsafeName,
                                    arguments_: []
                                })
                        });
                    },
                    undiscriminatedUnion: (exampleUnionType) => {
                        const swiftType = this.getSwiftTypeForExampleTypeReference(exampleUnionType.singleUnionType);
                        return swift.Expression.methodCall({
                            target: swift.Expression.reference(symbolName),
                            methodName: swiftType.toCaseName(),
                            arguments_: [
                                swift.functionArgument({
                                    value: this.generateExampleResponse(exampleUnionType.singleUnionType)
                                })
                            ],
                            multiline: true
                        });
                    },
                    _other: () => swift.Expression.nop()
                });
            },
            unknown: () => swift.Expression.nop(),
            _other: () => swift.Expression.nop()
        });
    }

    private getSwiftTypeForExampleTypeReference(typeReference: ExampleTypeReference): swift.Type {
        return typeReference.shape._visit({
            container: (exampleContainer) => {
                return exampleContainer._visit({
                    literal: () => {
                        // TODO(kafkas): Implement this
                        return swift.Type.jsonValue();
                    },
                    map: (exampleMapContainer) =>
                        swift.Type.dictionary(
                            this.sdkGeneratorContext.getSwiftTypeForTypeReference(exampleMapContainer.keyType),
                            this.sdkGeneratorContext.getSwiftTypeForTypeReference(exampleMapContainer.valueType)
                        ),
                    set: () => swift.Type.jsonValue(), // TODO(kafkas): Set is not supported yet
                    nullable: (exampleNullableContainer) =>
                        swift.Type.nullable(
                            this.sdkGeneratorContext.getSwiftTypeForTypeReference(exampleNullableContainer.valueType)
                        ),
                    optional: (exampleOptionalContainer) =>
                        swift.Type.optional(
                            this.sdkGeneratorContext.getSwiftTypeForTypeReference(exampleOptionalContainer.valueType)
                        ),
                    list: (exampleListContainer) =>
                        swift.Type.array(
                            this.sdkGeneratorContext.getSwiftTypeForTypeReference(exampleListContainer.itemType)
                        ),
                    _other: () => swift.Type.jsonValue()
                });
            },
            primitive: (examplePrimitive) => {
                return examplePrimitive._visit({
                    string: () => swift.Type.string(),
                    boolean: () => swift.Type.bool(),
                    integer: () => swift.Type.int(),
                    uint: () => swift.Type.uint(),
                    uint64: () => swift.Type.uint64(),
                    long: () => swift.Type.int64(),
                    float: () => swift.Type.float(),
                    double: () => swift.Type.double(),
                    bigInteger: () => swift.Type.string(), // TODO(kafkas): Bigints are not supported yet
                    date: () => swift.Type.calendarDate(),
                    datetime: () => swift.Type.date(),
                    base64: () => swift.Type.string(),
                    uuid: () => swift.Type.uuid(),
                    _other: () => swift.Type.jsonValue()
                });
            },
            named: (exampleNamedType) => {
                const symbolName = this.sdkGeneratorContext.project.srcSymbolRegistry.getSchemaTypeSymbolOrThrow(
                    exampleNamedType.typeName.typeId
                );
                // TODO(kafkas): Handle nested types (inline literals etc.)
                return swift.Type.custom(symbolName);
            },
            unknown: () => swift.Type.jsonValue(),
            _other: () => swift.Type.jsonValue()
        });
    }
}
