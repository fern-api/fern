// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`snippets (default) > examples > 'GET /metadata (allow-multiple)' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient(token: "<YOUR_API_KEY>")

    try await client.service.getMetadata(request: .init(
        shallow: False,
        tag: [
            "development",
            "public"
        ],
        xAPIVersion: "0.0.1"
    ))
}

try await main()
"
`;

exports[`snippets (default) > examples > 'GET /metadata (simple)' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient(token: "<YOUR_API_KEY>")

    try await client.service.getMetadata(request: .init(
        shallow: False,
        tag: [
            "development"
        ],
        xAPIVersion: "0.0.1"
    ))
}

try await main()
"
`;

exports[`snippets (default) > examples > 'POST /big-entity (simple)' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient(token: "<YOUR_API_KEY>")

    try await client.service.createBigEntity(request: BigEntity(
        castMember: CastMember.actor(
            Actor(
                id: "john.doe",
                name: "John Doe"
            )
        ),
        extendedMovie: ExtendedMovie(
            cast: [
                "John Travolta",
                "Samuel L. Jackson",
                "Uma Thurman",
                "Bruce Willis"
            ],
            id: "movie-sda231x",
            title: "Pulp Fiction",
            from: "Quentin Tarantino",
            rating: 8.5,
            type: .movie,
            tag: "tag-12efs9dv",
            metadata: [
                "academyAward": .bool(True), 
                "releaseDate": .string("2023-12-08"), 
                "ratings": .object([
                    "rottenTomatoes": .number(97), 
                    "imdb": .number(7.6)
                ])
            ],
            revenue: 1000000
        ),
        eventInfo: EventInfo.metadata(
            .init(
                id: "event-12345",
                data: [
                    "key1": "val1", 
                    "key2": "val2"
                ],
                jsonString: "abc"
            )
        ),
        migration: Migration(
            name: "Migration 31 Aug",
            status: .running
        )
    ))
}

try await main()
"
`;

exports[`snippets (default) > examples > 'POST /movie (invalid request body)' 1`] = `
"[
  {
    "severity": "CRITICAL",
    "path": [
      "requestBody",
      "title"
    ],
    "message": "Expected string, got number"
  }
]"
`;

exports[`snippets (default) > examples > 'POST /movie (simple)' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient(token: "<YOUR_API_KEY>")

    try await client.service.createMovie(request: Movie(
        id: "movie-c06a4ad7",
        prequel: "movie-cv9b914f",
        title: "The Boy and the Heron",
        from: "Hayao Miyazaki",
        rating: 8,
        type: .movie,
        tag: "development",
        metadata: [
            "actors": .array([
                .string("Christian Bale"),
                .string("Florence Pugh"),
                .string("Willem Dafoe")
            ]), 
            "releaseDate": .string("2023-12-08"), 
            "ratings": .object([
                "rottenTomatoes": .number(97), 
                "imdb": .number(7.6)
            ])
        ],
        revenue: 1000000
    ))
}

try await main()
"
`;

exports[`snippets (default) > exhaustive > 'GET /object/get-and-return-with-optio…' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient(token: "<YOUR_API_KEY>")

    try await client.endpoints.object.getAndReturnWithOptionalField(request: ObjectWithOptionalField(
        string: "string",
        integer: 1,
        long: 1000000,
        double: 1.1,
        bool: True,
        datetime: try! Date("2024-01-15T09:30:00Z", strategy: .iso8601),
        date: try! CalendarDate("2023-01-15"),
        uuid: UUID(uuidString: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
        base64: "SGVsbG8gd29ybGQh",
        list: [
            "list",
            "list"
        ],
        set: ,
        map: [
            1: "map"
        ],
        bigint: 
    ))
}

try await main()
"
`;

exports[`snippets (default) > exhaustive > 'POST /container/list-of-objects (inva…' 1`] = `
"[
  {
    "severity": "CRITICAL",
    "path": [
      "requestBody[0]",
      "string"
    ],
    "message": "Expected string, got boolean"
  },
  {
    "severity": "CRITICAL",
    "path": [
      "requestBody[1]",
      "invalid"
    ],
    "message": "\\"invalid\\" is not a recognized parameter for this endpoint"
  },
  {
    "severity": "CRITICAL",
    "path": [
      "requestBody[2]",
      "string"
    ],
    "message": "Expected string, got number"
  }
]"
`;

exports[`snippets (default) > exhaustive > 'POST /container/list-of-objects (simp…' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient(token: "<YOUR_API_KEY>")

    try await client.endpoints.container.getAndReturnListOfObjects(request: [
        ObjectWithRequiredField(
            string: "one"
        ),
        ObjectWithRequiredField(
            string: "two"
        ),
        ObjectWithRequiredField(
            string: "three"
        )
    ])
}

try await main()
"
`;

exports[`snippets (default) > exhaustive > 'POST /container/list-of-primitives (s…' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient(token: "<YOUR_API_KEY>")

    try await client.endpoints.container.getAndReturnListOfPrimitives(request: [
        "one",
        "two",
        "three"
    ])
}

try await main()
"
`;

exports[`snippets (default) > file-upload > 'POST /' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient()

    try await client.service.post(request: .init(
        file: Data("Hello, world!".utf8),
        fileList: [
            Data("First".utf8),
            Data("Second".utf8)
        ]
    ))
}

try await main()
"
`;

exports[`snippets (default) > file-upload > 'POST /just-file' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient()

    try await client.service.justFile(request: .init(file: Data("Hello, world!".utf8)))
}

try await main()
"
`;

exports[`snippets (default) > file-upload > 'POST /just-file-with-query-params' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient()

    try await client.service.justFileWithQueryParams(request: .init(
        integer: 42,
        maybeString: "exists",
        file: Data("Hello, world!".utf8)
    ))
}

try await main()
"
`;

exports[`snippets (default) > imdb > 'GET /movies/{movieId} (simple)' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient(token: "<YOUR_API_KEY>")

    try await client.imdb.getMovie(movieID: "movie_xyz")
}

try await main()
"
`;

exports[`snippets (default) > imdb > 'POST /movies/create-movie (simple)' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient(token: "<YOUR_API_KEY>")

    try await client.imdb.createMovie(request: CreateMovieRequest(
        title: "The Matrix",
        rating: 8.2
    ))
}

try await main()
"
`;

exports[`snippets (default) > multi-url-environment > 'Custom environment' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient(token: "<YOUR_API_KEY>")

    try await client.s3.getPresignedURL(request: .init(s3Key: "xyz"))
}

try await main()
"
`;

exports[`snippets (default) > multi-url-environment > 'Invalid multi url environment' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient(token: "<YOUR_API_KEY>")

    try await client.s3.getPresignedURL(request: .init(s3Key: "xyz"))
}

try await main()
"
`;

exports[`snippets (default) > multi-url-environment > 'Production environment' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient(token: "<YOUR_API_KEY>")

    try await client.s3.getPresignedURL(request: .init(s3Key: "xyz"))
}

try await main()
"
`;

exports[`snippets (default) > multi-url-environment > 'Staging environment' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient(token: "<YOUR_API_KEY>")

    try await client.s3.getPresignedURL(request: .init(s3Key: "xyz"))
}

try await main()
"
`;

exports[`snippets (default) > multi-url-environment > 'Unrecognized environment' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient(token: "<YOUR_API_KEY>")

    try await client.s3.getPresignedURL(request: .init(s3Key: "xyz"))
}

try await main()
"
`;

exports[`snippets (default) > nullable > 'Body properties' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient(baseURL: "https://api.example.com")

    try await client.nullable.createUser(request: .init(
        username: "john.doe",
        tags: [
            "admin"
        ],
        metadata: Metadata(
            createdAt: try! Date("1980-01-01T00:00:00Z", strategy: .iso8601),
            updatedAt: try! Date("1980-01-01T00:00:00Z", strategy: .iso8601),
            avatar: nil,
            activated: nil
        ),
        avatar: nil
    ))
}

try await main()
"
`;

exports[`snippets (default) > nullable > 'Invalid null value' 1`] = `
"[
  {
    "severity": "CRITICAL",
    "path": [
      "requestBody"
    ],
    "message": "Expected non-null value, but got null"
  }
]"
`;

exports[`snippets (default) > nullable > 'Query parameters' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient(baseURL: "https://api.example.com")

    try await client.nullable.getUsers(request: .init(
        usernames: [
            "john.doe",
            "jane.doe"
        ],
        tags: [
            nil
        ],
        extra: nil
    ))
}

try await main()
"
`;

exports[`snippets (default) > read-write-only > 'Body properties' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient(baseURL: "https://api.example.com")

    try await client.createUser(request: User(
        password: "password",
        profile: UserProfile(
            name: "name",
            verification: UserProfileVerification(

            ),
            ssn: "ssn"
        )
    ))
}

try await main()
"
`;

exports[`snippets (default) > read-write-only > 'Readonly value in request' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient(baseURL: "https://api.example.com")

    try await client.createUser(request: User(
        id: "id",
        password: "password",
        profile: UserProfile(
            name: "name",
            verification: UserProfileVerification(

            ),
            ssn: "ssn"
        )
    ))
}

try await main()
"
`;

exports[`snippets (default) > single-url-environment-default > 'Production environment' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient(token: "<YOUR_API_KEY>")

    try await client.dummy.getDummy()
}

try await main()
"
`;

exports[`snippets (default) > single-url-environment-default > 'Staging environment' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient(token: "<YOUR_API_KEY>")

    try await client.dummy.getDummy()
}

try await main()
"
`;

exports[`snippets (default) > single-url-environment-default > 'custom baseURL' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient(
        baseURL: "http://localhost:8080",
        token: "<YOUR_API_KEY>"
    )

    try await client.dummy.getDummy()
}

try await main()
"
`;

exports[`snippets (default) > single-url-environment-default > 'invalid baseURL and environment' 1`] = `
"[
  {
    "severity": "CRITICAL",
    "path": [],
    "message": "Cannot specify both baseUrl and environment options"
  }
]"
`;

exports[`snippets (default) > single-url-environment-default > 'invalid environment' 1`] = `
"import Foundation
import Acme

private func main() async throws {
    let client = AcmeClient(token: "<YOUR_API_KEY>")

    try await client.dummy.getDummy()
}

try await main()
"
`;
