// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`snippets (default) > examples > 'GET /metadata (allow-multiple)' 1`] = `
"import Acme

let client = AcmeAcmeClient(token: "<YOUR_API_KEY>")

try await client.service.getMetadata(

)
"
`;

exports[`snippets (default) > examples > 'GET /metadata (simple)' 1`] = `
"import Acme

let client = AcmeAcmeClient(token: "<YOUR_API_KEY>")

try await client.service.getMetadata(

)
"
`;

exports[`snippets (default) > examples > 'POST /big-entity (simple)' 1`] = `
"import Acme

let client = AcmeAcmeClient(token: "<YOUR_API_KEY>")

try await client.service.createBigEntity(
    request: BigEntity(
        castMember: Actor(
            id: "john.doe",
            name: "John Doe"
        ),
        extendedMovie: ExtendedMovie(
            cast: [
                "John Travolta",
                "Samuel L. Jackson",
                "Uma Thurman",
                "Bruce Willis"
            ],
            id: "movie-sda231x",
            title: "Pulp Fiction",
            from: "Quentin Tarantino",
            rating: 8.5,
            type: .movie,
            tag: "tag-12efs9dv",
            metadata: [
                "academyAward": , 
                "releaseDate": , 
                "ratings": 
            ],
            revenue: 1000000
        )
    )
)
"
`;

exports[`snippets (default) > examples > 'POST /movie (invalid request body)' 1`] = `
"[
  {
    "severity": "CRITICAL",
    "path": [
      "title"
    ],
    "message": "Expected string, got number"
  }
]"
`;

exports[`snippets (default) > examples > 'POST /movie (simple)' 1`] = `
"import Acme

let client = AcmeAcmeClient(token: "<YOUR_API_KEY>")

try await client.service.createMovie(
    request: Movie(
        id: "movie-c06a4ad7",
        prequel: "movie-cv9b914f",
        title: "The Boy and the Heron",
        from: "Hayao Miyazaki",
        rating: 8,
        type: .movie,
        tag: "development",
        metadata: [
            "actors": , 
            "releaseDate": , 
            "ratings": 
        ],
        revenue: 1000000
    )
)
"
`;

exports[`snippets (default) > exhaustive > 'GET /object/get-and-return-with-optio…' 1`] = `
"import Acme

let client = AcmeAcmeClient(token: "<YOUR_API_KEY>")

try await client.endpoints.object.getAndReturnWithOptionalField(
    request: ObjectWithOptionalField(
        string: "string",
        integer: 1,
        long: 1000000,
        double: 1.1,
        bool: True,
        datetime: Date(timeIntervalSince1970: 1705311000),
        date: Date(timeIntervalSince1970: 1673740800),
        uuid: UUID(uuidString: "d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32"),
        base64: "SGVsbG8gd29ybGQh",
        list: [
            "list",
            "list"
        ],
        set: ,
        map: [
            1: "map"
        ],
        bigint: 
    )
)
"
`;

exports[`snippets (default) > exhaustive > 'POST /container/list-of-objects (inva…' 1`] = `
"[
  {
    "severity": "CRITICAL",
    "path": [
      "string"
    ],
    "message": "Expected string, got boolean"
  },
  {
    "severity": "CRITICAL",
    "path": [
      "invalid"
    ],
    "message": "\\"invalid\\" is not a recognized parameter for this endpoint"
  },
  {
    "severity": "CRITICAL",
    "path": [
      "string"
    ],
    "message": "Expected string, got number"
  }
]"
`;

exports[`snippets (default) > exhaustive > 'POST /container/list-of-objects (simp…' 1`] = `
"import Acme

let client = AcmeAcmeClient(token: "<YOUR_API_KEY>")

try await client.endpoints.container.getAndReturnListOfObjects(
    request: [
        ObjectWithRequiredField(
            string: "one"
        ),
        ObjectWithRequiredField(
            string: "two"
        ),
        ObjectWithRequiredField(
            string: "three"
        )
    ]
)
"
`;

exports[`snippets (default) > exhaustive > 'POST /container/list-of-primitives (s…' 1`] = `
"import Acme

let client = AcmeAcmeClient(token: "<YOUR_API_KEY>")

try await client.endpoints.container.getAndReturnListOfPrimitives(
    request: [
        "one",
        "two",
        "three"
    ]
)
"
`;

exports[`snippets (default) > file-upload > 'POST /' 1`] = `
"import Acme

let client = AcmeAcmeClient()

try await client.service.post(

)
"
`;

exports[`snippets (default) > file-upload > 'POST /just-file' 1`] = `
"import Acme

let client = AcmeAcmeClient()

try await client.service.justFile(

)
"
`;

exports[`snippets (default) > file-upload > 'POST /just-file-with-query-params' 1`] = `
"import Acme

let client = AcmeAcmeClient()

try await client.service.justFileWithQueryParams(

)
"
`;

exports[`snippets (default) > imdb > 'GET /movies/{movieId} (simple)' 1`] = `
"import Acme

let client = AcmeAcmeClient(token: "<YOUR_API_KEY>")

try await client.imdb.getMovie(

)
"
`;

exports[`snippets (default) > imdb > 'POST /movies/create-movie (simple)' 1`] = `
"import Acme

let client = AcmeAcmeClient(token: "<YOUR_API_KEY>")

try await client.imdb.createMovie(
    request: CreateMovieRequest(
        title: "The Matrix",
        rating: 8.2
    )
)
"
`;

exports[`snippets (default) > multi-url-environment > 'Custom environment' 1`] = `
"import Acme

let client = AcmeAcmeClient(token: "<YOUR_API_KEY>")

try await client.s3.getPresignedURL(

)
"
`;

exports[`snippets (default) > multi-url-environment > 'Invalid multi url environment' 1`] = `
"import Acme

let client = AcmeAcmeClient(token: "<YOUR_API_KEY>")

try await client.s3.getPresignedURL(

)
"
`;

exports[`snippets (default) > multi-url-environment > 'Production environment' 1`] = `
"import Acme

let client = AcmeAcmeClient(token: "<YOUR_API_KEY>")

try await client.s3.getPresignedURL(

)
"
`;

exports[`snippets (default) > multi-url-environment > 'Staging environment' 1`] = `
"import Acme

let client = AcmeAcmeClient(token: "<YOUR_API_KEY>")

try await client.s3.getPresignedURL(

)
"
`;

exports[`snippets (default) > multi-url-environment > 'Unrecognized environment' 1`] = `
"import Acme

let client = AcmeAcmeClient(token: "<YOUR_API_KEY>")

try await client.s3.getPresignedURL(

)
"
`;

exports[`snippets (default) > nullable > 'Body properties' 1`] = `
"import Acme

let client = AcmeAcmeClient()

try await client.nullable.createUser(

)
"
`;

exports[`snippets (default) > nullable > 'Invalid null value' 1`] = `
"import Acme

let client = AcmeAcmeClient()

try await client.nullable.createUser(

)
"
`;

exports[`snippets (default) > nullable > 'Query parameters' 1`] = `
"import Acme

let client = AcmeAcmeClient()

try await client.nullable.getUsers(

)
"
`;

exports[`snippets (default) > single-url-environment-default > 'Production environment' 1`] = `
"import Acme

let client = AcmeAcmeClient(token: "<YOUR_API_KEY>")

try await client.dummy.getDummy(

)
"
`;

exports[`snippets (default) > single-url-environment-default > 'Staging environment' 1`] = `
"import Acme

let client = AcmeAcmeClient(token: "<YOUR_API_KEY>")

try await client.dummy.getDummy(

)
"
`;

exports[`snippets (default) > single-url-environment-default > 'custom baseURL' 1`] = `
"import Acme

let client = AcmeAcmeClient(token: "<YOUR_API_KEY>")

try await client.dummy.getDummy(

)
"
`;

exports[`snippets (default) > single-url-environment-default > 'invalid baseURL and environment' 1`] = `
"import Acme

let client = AcmeAcmeClient(token: "<YOUR_API_KEY>")

try await client.dummy.getDummy(

)
"
`;

exports[`snippets (default) > single-url-environment-default > 'invalid environment' 1`] = `
"import Acme

let client = AcmeAcmeClient(token: "<YOUR_API_KEY>")

try await client.dummy.getDummy(

)
"
`;
