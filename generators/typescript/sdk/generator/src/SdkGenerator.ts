import {
    BundledTypescriptProject,
    CoreUtilitiesManager,
    DependencyManager,
    ExportedDirectory,
    ExportedFilePath,
    ExportsManager,
    ImportsManager,
    JavaScriptRuntime,
    NpmPackage,
    PackageId,
    SimpleTypescriptProject,
    TypescriptProject,
    convertExportedFilePathToFilePath,
    getFullPathForEndpoint,
    getTextOfTsNode
} from "@fern-typescript/commons";
import { GeneratorContext } from "@fern-typescript/contexts";
import { EndpointErrorUnionGenerator } from "@fern-typescript/endpoint-error-union-generator";
import { EnvironmentsGenerator } from "@fern-typescript/environments-generator";
import { GenericAPISdkErrorGenerator, TimeoutSdkErrorGenerator } from "@fern-typescript/generic-sdk-error-generators";
import { RequestWrapperGenerator } from "@fern-typescript/request-wrapper-generator";
import { ErrorResolver, PackageResolver, TypeResolver } from "@fern-typescript/resolvers";
import { SdkClientClassGenerator } from "@fern-typescript/sdk-client-class-generator";
import { OAuthTokenProviderGenerator } from "@fern-typescript/sdk-client-class-generator/src/oauth-generator/OAuthTokenProviderGenerator";
import { SdkEndpointTypeSchemasGenerator } from "@fern-typescript/sdk-endpoint-type-schemas-generator";
import { SdkErrorGenerator } from "@fern-typescript/sdk-error-generator";
import { SdkErrorSchemaGenerator } from "@fern-typescript/sdk-error-schema-generator";
import { SdkInlinedRequestBodySchemaGenerator } from "@fern-typescript/sdk-inlined-request-schema-generator";
import { TypeGenerator } from "@fern-typescript/type-generator";
import { TypeReferenceExampleGenerator } from "@fern-typescript/type-reference-example-generator";
import { TypeSchemaGenerator } from "@fern-typescript/type-schema-generator";
import { writeFile } from "fs/promises";
import { Directory, Project, SourceFile, ts } from "ts-morph";
import { v4 as uuidv4 } from "uuid";

import { ReferenceConfigBuilder } from "@fern-api/base-generator";
import { AbsoluteFilePath, RelativeFilePath } from "@fern-api/fs-utils";

import { FernGeneratorCli } from "@fern-fern/generator-cli-sdk";
import { FernGeneratorExec } from "@fern-fern/generator-exec-sdk";
import * as FernGeneratorExecSerializers from "@fern-fern/generator-exec-sdk/serialization";
import {
    ExampleEndpointCall,
    HttpEndpoint,
    HttpService,
    IntermediateRepresentation,
    OAuthScheme,
    TypeDeclaration,
    TypeId
} from "@fern-fern/ir-sdk/api";
import { FdrSnippetTemplate, FdrSnippetTemplateClient, FdrSnippetTemplateEnvironment } from "@fern-fern/snippet-sdk";

import { TemplateGenerator } from "./TemplateGenerator";
import { TypeScriptGeneratorAgent } from "./TypeScriptGeneratorAgent";
import { SdkContextImpl } from "./contexts/SdkContextImpl";
import { EndpointDeclarationReferencer } from "./declaration-referencers/EndpointDeclarationReferencer";
import { EnvironmentsDeclarationReferencer } from "./declaration-referencers/EnvironmentsDeclarationReferencer";
import { GenericAPISdkErrorDeclarationReferencer } from "./declaration-referencers/GenericAPISdkErrorDeclarationReferencer";
import { RequestWrapperDeclarationReferencer } from "./declaration-referencers/RequestWrapperDeclarationReferencer";
import { SdkClientClassDeclarationReferencer } from "./declaration-referencers/SdkClientClassDeclarationReferencer";
import { SdkErrorDeclarationReferencer } from "./declaration-referencers/SdkErrorDeclarationReferencer";
import { SdkInlinedRequestBodyDeclarationReferencer } from "./declaration-referencers/SdkInlinedRequestBodyDeclarationReferencer";
import { TimeoutSdkErrorDeclarationReferencer } from "./declaration-referencers/TimeoutSdkErrorDeclarationReferencer";
import { TypeDeclarationReferencer } from "./declaration-referencers/TypeDeclarationReferencer";
import { VersionDeclarationReferencer } from "./declaration-referencers/VersionDeclarationReferencer";
import { ReadmeConfigBuilder } from "./readme/ReadmeConfigBuilder";
import { JestTestGenerator } from "./test-generator/JestTestGenerator";
import { VersionFileGenerator } from "./version/VersionFileGenerator";
import { VersionGenerator } from "./version/VersionGenerator";

const FILE_HEADER = `/**
 * This file was auto-generated by Fern from our API Definition.
 */
`;

const WHITELABEL_FILE_HEADER = `/**
 * This file was auto-generated from our API Definition.
 */
`;

export declare namespace SdkGenerator {
    export interface Init {
        namespaceExport: string;
        intermediateRepresentation: IntermediateRepresentation;
        context: GeneratorContext;
        npmPackage: NpmPackage | undefined;
        generateJestTests: boolean;
        rawConfig: FernGeneratorExec.GeneratorConfig;
        config: Config;
    }

    export interface Config {
        runScripts: boolean;
        whitelabel: boolean;
        generateOAuthClients: boolean;
        originalReadmeFilepath: AbsoluteFilePath | undefined;
        snippetFilepath: AbsoluteFilePath | undefined;
        snippetTemplateFilepath: AbsoluteFilePath | undefined;
        shouldBundle: boolean;
        shouldUseBrandedStringAliases: boolean;
        isPackagePrivate: boolean;
        neverThrowErrors: boolean;
        includeCredentialsOnCrossOriginRequests: boolean;
        outputEsm: boolean;
        outputJsr: boolean;
        allowCustomFetcher: boolean;
        includeUtilsOnUnionMembers: boolean;
        includeOtherInUnionTypes: boolean;
        requireDefaultEnvironment: boolean;
        defaultTimeoutInSeconds: number | "infinity" | undefined;
        skipResponseValidation: boolean;
        targetRuntime: JavaScriptRuntime;
        extraDependencies: Record<string, string>;
        extraDevDependencies: Record<string, string>;
        extraPeerDependencies: Record<string, string>;
        extraPeerDependenciesMeta: Record<string, unknown>;
        treatUnknownAsAny: boolean;
        includeContentHeadersOnFileDownloadResponse: boolean;
        includeSerdeLayer: boolean;
        noOptionalProperties: boolean;
        tolerateRepublish: boolean;
        retainOriginalCasing: boolean;
        allowExtraFields: boolean;
        writeUnitTests: boolean;
        inlineFileProperties: boolean;
        inlinePathParameters: boolean;
        enableInlineTypes: boolean;
        omitUndefined: boolean;
        executionEnvironment: "local" | "dev" | "prod";
        organization: string;
        apiName: string;
        packageJson: Record<string, unknown> | undefined;
        useBigInt: boolean;
        useLegacyExports: boolean;
    }
}

export class SdkGenerator {
    private namespaceExport: string;
    private context: GeneratorContext;
    private intermediateRepresentation: IntermediateRepresentation;
    private rawConfig: FernGeneratorExec.GeneratorConfig;
    private config: SdkGenerator.Config;
    private npmPackage: NpmPackage | undefined;
    private generateOAuthClients: boolean;
    private generateJestTests: boolean;
    private extraFiles: Record<string, string> = {};
    private extraScripts: Record<string, string> = {};

    private endpointSnippets: FernGeneratorExec.Endpoint[] = [];
    private endpointSnippetTemplates: FdrSnippetTemplate.SnippetRegistryEntry[] = [];

    private project: Project;
    private rootDirectory: Directory;
    private exportsManager: ExportsManager;
    private dependencyManager = new DependencyManager();
    private coreUtilitiesManager: CoreUtilitiesManager;
    private typeResolver: TypeResolver;
    private errorResolver: ErrorResolver;
    private packageResolver: PackageResolver;

    private versionDeclarationReferencer: VersionDeclarationReferencer;
    private typeDeclarationReferencer: TypeDeclarationReferencer;
    private typeSchemaDeclarationReferencer: TypeDeclarationReferencer;
    private errorDeclarationReferencer: SdkErrorDeclarationReferencer;
    private sdkErrorSchemaDeclarationReferencer: SdkErrorDeclarationReferencer;
    private sdkClientClassDeclarationReferencer: SdkClientClassDeclarationReferencer;
    private endpointErrorUnionDeclarationReferencer: EndpointDeclarationReferencer;
    private requestWrapperDeclarationReferencer: RequestWrapperDeclarationReferencer;
    private sdkInlinedRequestBodySchemaDeclarationReferencer: SdkInlinedRequestBodyDeclarationReferencer;
    private sdkEndpointSchemaDeclarationReferencer: EndpointDeclarationReferencer;
    private environmentsDeclarationReferencer: EnvironmentsDeclarationReferencer;
    private genericAPISdkErrorDeclarationReferencer: GenericAPISdkErrorDeclarationReferencer;
    private timeoutSdkErrorDeclarationReferencer: TimeoutSdkErrorDeclarationReferencer;

    private versionGenerator: VersionGenerator;
    private typeGenerator: TypeGenerator;
    private typeSchemaGenerator: TypeSchemaGenerator;
    private typeReferenceExampleGenerator: TypeReferenceExampleGenerator;
    private sdkErrorGenerator: SdkErrorGenerator;
    private sdkErrorSchemaGenerator: SdkErrorSchemaGenerator;
    private endpointErrorUnionGenerator: EndpointErrorUnionGenerator;
    private requestWrapperGenerator: RequestWrapperGenerator;
    private sdkInlinedRequestBodySchemaGenerator: SdkInlinedRequestBodySchemaGenerator;
    private sdkEndpointTypeSchemasGenerator: SdkEndpointTypeSchemasGenerator;
    private environmentsGenerator: EnvironmentsGenerator;
    private sdkClientClassGenerator: SdkClientClassGenerator;
    private genericAPISdkErrorGenerator: GenericAPISdkErrorGenerator;
    private timeoutSdkErrorGenerator: TimeoutSdkErrorGenerator;
    private oauthTokenProviderGenerator: OAuthTokenProviderGenerator;
    private jestTestGenerator: JestTestGenerator;
    private referenceConfigBuilder: ReferenceConfigBuilder;
    private generatorAgent: TypeScriptGeneratorAgent;
    private FdrClient: FdrSnippetTemplateClient | undefined;

    constructor({
        namespaceExport,
        intermediateRepresentation,
        context,
        npmPackage,
        rawConfig,
        config,
        generateJestTests
    }: SdkGenerator.Init) {
        this.context = context;
        this.namespaceExport = namespaceExport;
        this.intermediateRepresentation = intermediateRepresentation;
        this.config = config;
        this.npmPackage = npmPackage;
        this.rawConfig = rawConfig;
        this.generateJestTests = generateJestTests;
        this.generateOAuthClients =
            this.config.generateOAuthClients &&
            this.intermediateRepresentation.auth.schemes.some((scheme) => scheme.type === "oauth");

        this.exportsManager = new ExportsManager();
        this.coreUtilitiesManager = new CoreUtilitiesManager();

        this.project = new Project({
            useInMemoryFileSystem: true
        });
        this.rootDirectory = this.project.createDirectory("/");
        this.typeResolver = new TypeResolver(intermediateRepresentation);
        this.errorResolver = new ErrorResolver(intermediateRepresentation);
        this.packageResolver = new PackageResolver(intermediateRepresentation);

        const apiDirectory: ExportedDirectory[] = [
            {
                nameOnDisk: "api",
                exportDeclaration: { namespaceExport }
            }
        ];

        const schemaDirectory: ExportedDirectory[] = [
            {
                nameOnDisk: "serialization"
            }
        ];

        this.versionDeclarationReferencer = new VersionDeclarationReferencer({
            containingDirectory: apiDirectory,
            namespaceExport,
            apiVersion: this.intermediateRepresentation.apiVersion
        });
        this.typeDeclarationReferencer = new TypeDeclarationReferencer({
            containingDirectory: apiDirectory,
            namespaceExport
        });
        this.typeSchemaDeclarationReferencer = new TypeDeclarationReferencer({
            containingDirectory: schemaDirectory,
            namespaceExport
        });
        this.errorDeclarationReferencer = new SdkErrorDeclarationReferencer({
            containingDirectory: apiDirectory,
            namespaceExport
        });
        this.sdkErrorSchemaDeclarationReferencer = new SdkErrorDeclarationReferencer({
            containingDirectory: schemaDirectory,
            namespaceExport
        });
        this.sdkClientClassDeclarationReferencer = new SdkClientClassDeclarationReferencer({
            containingDirectory: apiDirectory,
            namespaceExport,
            packageResolver: this.packageResolver
        });
        this.endpointErrorUnionDeclarationReferencer = new EndpointDeclarationReferencer({
            containingDirectory: apiDirectory,
            namespaceExport,
            packageResolver: this.packageResolver
        });
        this.requestWrapperDeclarationReferencer = new RequestWrapperDeclarationReferencer({
            containingDirectory: apiDirectory,
            namespaceExport,
            packageResolver: this.packageResolver
        });
        this.sdkInlinedRequestBodySchemaDeclarationReferencer = new SdkInlinedRequestBodyDeclarationReferencer({
            containingDirectory: schemaDirectory,
            namespaceExport,
            packageResolver: this.packageResolver
        });
        this.sdkEndpointSchemaDeclarationReferencer = new EndpointDeclarationReferencer({
            containingDirectory: schemaDirectory,
            namespaceExport,
            packageResolver: this.packageResolver
        });
        this.environmentsDeclarationReferencer = new EnvironmentsDeclarationReferencer({
            containingDirectory: [],
            namespaceExport,
            npmPackage: this.npmPackage,
            environmentsConfig: intermediateRepresentation.environments ?? undefined
        });
        this.genericAPISdkErrorDeclarationReferencer = new GenericAPISdkErrorDeclarationReferencer({
            containingDirectory: [],
            namespaceExport
        });
        this.timeoutSdkErrorDeclarationReferencer = new TimeoutSdkErrorDeclarationReferencer({
            containingDirectory: [],
            namespaceExport
        });

        this.versionGenerator = new VersionGenerator();
        this.typeGenerator = new TypeGenerator({
            useBrandedStringAliases: config.shouldUseBrandedStringAliases,
            includeUtilsOnUnionMembers: config.includeUtilsOnUnionMembers,
            includeOtherInUnionTypes: config.includeOtherInUnionTypes,
            includeSerdeLayer: config.includeSerdeLayer,
            noOptionalProperties: config.noOptionalProperties,
            retainOriginalCasing: config.retainOriginalCasing,
            enableInlineTypes: config.enableInlineTypes
        });
        this.typeSchemaGenerator = new TypeSchemaGenerator({
            includeUtilsOnUnionMembers: config.includeUtilsOnUnionMembers,
            noOptionalProperties: config.noOptionalProperties
        });
        this.typeReferenceExampleGenerator = new TypeReferenceExampleGenerator();
        this.sdkErrorGenerator = new SdkErrorGenerator({
            neverThrowErrors: config.neverThrowErrors
        });
        this.sdkErrorSchemaGenerator = new SdkErrorSchemaGenerator({
            skipValidation: config.skipResponseValidation,
            includeSerdeLayer: config.includeSerdeLayer
        });
        this.endpointErrorUnionGenerator = new EndpointErrorUnionGenerator({
            errorResolver: this.errorResolver,
            intermediateRepresentation,
            includeSerdeLayer: config.includeSerdeLayer,
            retainOriginalCasing: config.retainOriginalCasing,
            noOptionalProperties: config.noOptionalProperties,
            enableInlineTypes: config.enableInlineTypes
        });
        this.sdkEndpointTypeSchemasGenerator = new SdkEndpointTypeSchemasGenerator({
            errorResolver: this.errorResolver,
            intermediateRepresentation,
            shouldGenerateErrors: config.neverThrowErrors,
            skipResponseValidation: config.skipResponseValidation,
            includeSerdeLayer: config.includeSerdeLayer,
            allowExtraFields: config.allowExtraFields,
            omitUndefined: config.omitUndefined
        });
        this.requestWrapperGenerator = new RequestWrapperGenerator();
        this.environmentsGenerator = new EnvironmentsGenerator();
        this.oauthTokenProviderGenerator = new OAuthTokenProviderGenerator({
            intermediateRepresentation,
            neverThrowErrors: this.config.neverThrowErrors
        });
        this.sdkClientClassGenerator = new SdkClientClassGenerator({
            intermediateRepresentation,
            errorResolver: this.errorResolver,
            packageResolver: this.packageResolver,
            neverThrowErrors: config.neverThrowErrors,
            includeCredentialsOnCrossOriginRequests: config.includeCredentialsOnCrossOriginRequests,
            allowCustomFetcher: config.allowCustomFetcher,
            requireDefaultEnvironment: config.requireDefaultEnvironment,
            defaultTimeoutInSeconds: config.defaultTimeoutInSeconds,
            npmPackage,
            targetRuntime: config.targetRuntime,
            includeContentHeadersOnFileDownloadResponse: config.includeContentHeadersOnFileDownloadResponse,
            includeSerdeLayer: config.includeSerdeLayer,
            retainOriginalCasing: config.retainOriginalCasing,
            inlineFileProperties: config.inlineFileProperties,
            oauthTokenProviderGenerator: this.oauthTokenProviderGenerator,
            omitUndefined: config.omitUndefined,
            allowExtraFields: config.allowExtraFields
        });
        this.genericAPISdkErrorGenerator = new GenericAPISdkErrorGenerator();
        this.timeoutSdkErrorGenerator = new TimeoutSdkErrorGenerator();
        this.sdkInlinedRequestBodySchemaGenerator = new SdkInlinedRequestBodySchemaGenerator({
            includeSerdeLayer: config.includeSerdeLayer,
            allowExtraFields: config.allowExtraFields,
            omitUndefined: config.omitUndefined
        });
        this.jestTestGenerator = new JestTestGenerator({
            ir: intermediateRepresentation,
            dependencyManager: this.dependencyManager,
            rootDirectory: this.rootDirectory,
            writeUnitTests: this.config.writeUnitTests,
            includeSerdeLayer: config.includeSerdeLayer
        });
        this.referenceConfigBuilder = new ReferenceConfigBuilder();
        this.generatorAgent = new TypeScriptGeneratorAgent({
            logger: this.context.logger,
            config: this.rawConfig,
            readmeConfigBuilder: new ReadmeConfigBuilder({
                endpointSnippets: this.endpointSnippets
            })
        });

        this.FdrClient =
            this.config.executionEnvironment !== "local"
                ? new FdrSnippetTemplateClient({
                      environment:
                          this.config.executionEnvironment === "dev"
                              ? "https://registry-dev2.buildwithfern.com"
                              : FdrSnippetTemplateEnvironment.Prod
                  })
                : undefined;
    }

    public async generate(): Promise<TypescriptProject> {
        this.generateTypeDeclarations();
        this.context.logger.debug("Generated types");
        this.generateErrorDeclarations();
        this.context.logger.debug("Generated errors");
        this.generateServiceDeclarations();
        this.context.logger.debug("Generated services");
        this.generateEnvironments();
        this.context.logger.debug("Generated environments");
        this.generateRequestWrappers();
        this.context.logger.debug("Generated request wrappers");
        this.generateVersion();
        this.context.logger.debug("Generated version");

        if (this.config.neverThrowErrors) {
            this.generateEndpointErrorUnion();
        }
        if (!this.config.neverThrowErrors || this.generateOAuthClients) {
            this.generateGenericAPISdkError();
            this.generateTimeoutSdkError();
            if (this.config.includeSerdeLayer) {
                this.generateSdkErrorSchemas();
            }
        }

        let exportSerde: boolean = false;
        if (this.config.includeSerdeLayer) {
            this.generateTypeSchemas();
            this.generateEndpointTypeSchemas();
            this.generateInlinedRequestBodySchemas();
            const serializationDirectory = this.rootDirectory.getDirectory("src/serialization");
            if (serializationDirectory != null && serializationDirectory?.getDescendantSourceFiles().length > 0) {
                exportSerde = true;
                this.exportsManager.addExportsForDirectories([
                    { nameOnDisk: "serialization", exportDeclaration: { namespaceExport: "serialization" } }
                ]);
                this.context.logger.debug("Generated serde layer.");
            }
        }

        if (this.generateOAuthClients) {
            const oauthScheme = this.intermediateRepresentation.auth.schemes.find((scheme) => scheme.type === "oauth");
            if (oauthScheme != null && oauthScheme.type === "oauth") {
                this.generateOAuthTokenProvider(oauthScheme);
            }
        }

        if (this.npmPackage?.version != null) {
            const versionFileGenerator = new VersionFileGenerator({
                version: this.npmPackage.version,
                rootDirectory: this.rootDirectory
            });
            versionFileGenerator.generate();
        }

        this.coreUtilitiesManager.finalize(this.exportsManager, this.dependencyManager);
        this.exportsManager.writeExportsToProject(this.rootDirectory);
        this.context.logger.debug("Generated exports");

        if (this.generateJestTests && this.config.writeUnitTests) {
            this.generateTestFiles();
        }
        this.jestTestGenerator.addExtras();
        this.extraScripts = {
            ...this.extraScripts,
            ...this.jestTestGenerator.scripts
        };
        this.extraFiles = {
            ...this.extraFiles,
            ...this.jestTestGenerator.extraFiles
        };

        if (this.config.snippetFilepath != null) {
            this.generateSnippets();
            const snippets: FernGeneratorExec.Snippets = {
                endpoints: this.endpointSnippets,
                types: {}
            };
            await writeFile(
                this.config.snippetFilepath,
                JSON.stringify(await FernGeneratorExecSerializers.Snippets.jsonOrThrow(snippets), undefined, 4)
            );
            if (this.config.snippetTemplateFilepath != null) {
                this.context.logger.debug(
                    `Generating snippet templates for Org: ${this.config.organization}, API: ${
                        this.config.apiName
                    } for package ${this.npmPackage?.packageName ?? "package_unknown"} at version: ${
                        this.npmPackage?.version ?? "0.0.0"
                    }.`
                );
                await writeFile(
                    this.config.snippetTemplateFilepath,
                    JSON.stringify(this.endpointSnippetTemplates, undefined, 4)
                );
                if (this.FdrClient != null) {
                    this.context.logger.debug("FDR Client found, registering snippet templates.");
                    try {
                        await this.FdrClient.templates.registerBatch({
                            orgId: this.config.organization,
                            apiId: this.config.apiName,
                            apiDefinitionId: this.intermediateRepresentation.fdrApiDefinitionId ?? uuidv4(),
                            snippets: this.endpointSnippetTemplates
                        });
                    } catch (e) {
                        this.context.logger.warn("Failed to register snippet templates with FDR, this is OK");
                    }
                }
            }
            this.context.logger.debug("Generated snippets");

            try {
                await this.generateReadme();
            } catch (e) {
                this.context.logger.warn("Failed to generate README.md, this is OK");
            }

            try {
                await this.generateReference();
            } catch (e) {
                this.context.logger.warn("Failed to generate reference.md, this is OK");
            }
        }

        return this.config.shouldBundle
            ? new BundledTypescriptProject({
                  npmPackage: this.npmPackage,
                  dependencies: this.dependencyManager.getDependencies(),
                  tsMorphProject: this.project,
                  extraDependencies: this.config.extraDependencies,
                  extraDevDependencies: this.config.extraDevDependencies,
                  extraPeerDependencies: this.config.extraPeerDependencies,
                  extraPeerDependenciesMeta: this.config.extraPeerDependenciesMeta,
                  extraFiles: this.extraFiles,
                  extraScripts: this.extraScripts,
                  extraConfigs: this.config.packageJson,
                  outputJsr: this.config.outputJsr,
                  runScripts: this.config.runScripts,
                  exportSerde
              })
            : new SimpleTypescriptProject({
                  npmPackage: this.npmPackage,
                  dependencies: this.dependencyManager.getDependencies(),
                  tsMorphProject: this.project,
                  outputEsm: this.config.outputEsm,
                  outputJsr: this.config.outputJsr,
                  extraDependencies: this.config.extraDependencies,
                  extraDevDependencies: this.config.extraDevDependencies,
                  extraPeerDependencies: this.config.extraPeerDependencies,
                  extraPeerDependenciesMeta: this.config.extraPeerDependenciesMeta,
                  extraFiles: this.extraFiles,
                  extraScripts: this.extraScripts,
                  resolutions: {},
                  extraConfigs: this.config.packageJson,
                  runScripts: this.config.runScripts,
                  exportSerde,
                  useLegacyExports: this.config.useLegacyExports
              });
    }

    private getTypesToGenerate(): Record<TypeId, TypeDeclaration> {
        if (this.config.enableInlineTypes) {
            return Object.fromEntries(
                Object.entries(this.intermediateRepresentation.types).filter(
                    ([_, typeDeclaration]) => !typeDeclaration.inline
                )
            );
        }
        return this.intermediateRepresentation.types;
    }

    public async copyCoreUtilities({
        pathToSrc,
        pathToRoot
    }: {
        pathToSrc: AbsoluteFilePath;
        pathToRoot: AbsoluteFilePath;
    }): Promise<void> {
        await this.coreUtilitiesManager.copyCoreUtilities({ pathToSrc, pathToRoot });
    }

    private generateTypeDeclarations() {
        for (const typeDeclaration of Object.values(this.getTypesToGenerate())) {
            this.withSourceFile({
                filepath: this.typeDeclarationReferencer.getExportedFilepath(typeDeclaration.name),
                run: ({ sourceFile, importsManager }) => {
                    const context = this.generateSdkContext({ sourceFile, importsManager });
                    context.type.getGeneratedType(typeDeclaration.name).writeToFile(context);
                }
            });
        }
    }

    private generateTypeSchemas(): { generated: boolean } {
        let generated = false;
        for (const typeDeclaration of Object.values(this.getTypesToGenerate())) {
            this.withSourceFile({
                filepath: this.typeSchemaDeclarationReferencer.getExportedFilepath(typeDeclaration.name),
                run: ({ sourceFile, importsManager }) => {
                    if (!generated) {
                        generated = true;
                    }
                    const context = this.generateSdkContext({ sourceFile, importsManager });
                    context.typeSchema.getGeneratedTypeSchema(typeDeclaration.name).writeToFile(context);
                }
            });
        }
        return { generated };
    }

    private generateErrorDeclarations() {
        for (const errorDeclaration of Object.values(this.intermediateRepresentation.errors)) {
            this.withSourceFile({
                filepath: this.errorDeclarationReferencer.getExportedFilepath(errorDeclaration.name),
                run: ({ sourceFile, importsManager }) => {
                    const context = this.generateSdkContext({ sourceFile, importsManager });
                    context.sdkError.getGeneratedSdkError(errorDeclaration.name)?.writeToFile(context);
                }
            });
        }
    }

    private generateSdkErrorSchemas() {
        for (const errorDeclaration of Object.values(this.intermediateRepresentation.errors)) {
            this.withSourceFile({
                filepath: this.sdkErrorSchemaDeclarationReferencer.getExportedFilepath(errorDeclaration.name),
                run: ({ sourceFile, importsManager }) => {
                    const context = this.generateSdkContext({ sourceFile, importsManager });
                    context.sdkErrorSchema.getGeneratedSdkErrorSchema(errorDeclaration.name)?.writeToFile(context);
                }
            });
        }
    }

    private generateEndpointErrorUnion() {
        this.forEachService((service, packageId) => {
            for (const endpoint of service.endpoints) {
                this.withSourceFile({
                    filepath: this.endpointErrorUnionDeclarationReferencer.getExportedFilepath({
                        packageId,
                        endpoint
                    }),
                    run: ({ sourceFile, importsManager }) => {
                        const context = this.generateSdkContext({ sourceFile, importsManager });
                        context.endpointErrorUnion
                            .getGeneratedEndpointErrorUnion(packageId, endpoint.name)
                            .writeToFile(context);
                    }
                });
            }
        });
    }

    private generateEndpointTypeSchemas(): { generated: boolean } {
        let generated = false;
        this.forEachService((service, packageId) => {
            for (const endpoint of service.endpoints) {
                this.withSourceFile({
                    filepath: this.sdkEndpointSchemaDeclarationReferencer.getExportedFilepath({
                        packageId,
                        endpoint
                    }),
                    run: ({ sourceFile, importsManager }) => {
                        const context = this.generateSdkContext({ sourceFile, importsManager });
                        context.sdkEndpointTypeSchemas
                            .getGeneratedEndpointTypeSchemas(packageId, endpoint.name)
                            .writeToFile(context);
                        if (!generated) {
                            generated = true;
                        }
                    }
                });
            }
        });
        return { generated };
    }

    private generateRequestWrappers() {
        this.forEachService((service, packageId) => {
            for (const endpoint of service.endpoints) {
                if (endpoint.sdkRequest?.shape.type === "wrapper") {
                    this.withSourceFile({
                        filepath: this.requestWrapperDeclarationReferencer.getExportedFilepath({
                            packageId,
                            endpoint
                        }),
                        run: ({ sourceFile, importsManager }) => {
                            const context = this.generateSdkContext({ sourceFile, importsManager });
                            context.requestWrapper
                                .getGeneratedRequestWrapper(packageId, endpoint.name)
                                .writeToFile(context);
                        },
                        addExportTypeModifier: true
                    });
                }
            }
        });
    }

    private generateInlinedRequestBodySchemas(): { generated: boolean } {
        let generated = false;
        this.forEachService((service, packageId) => {
            for (const endpoint of service.endpoints) {
                if (endpoint.requestBody?.type === "inlinedRequestBody") {
                    this.withSourceFile({
                        filepath: this.sdkInlinedRequestBodySchemaDeclarationReferencer.getExportedFilepath({
                            packageId,
                            endpoint
                        }),
                        run: ({ sourceFile, importsManager }) => {
                            const context = this.generateSdkContext({ sourceFile, importsManager });
                            context.sdkInlinedRequestBodySchema
                                .getGeneratedInlinedRequestBodySchema(packageId, endpoint.name)
                                .writeToFile(context);
                            if (!generated) {
                                generated = true;
                            }
                        }
                    });
                }
            }
        });
        return { generated };
    }

    private generateServiceDeclarations() {
        this.context.logger.debug("Generating service declarations...");
        for (const packageId of this.getAllPackageIds()) {
            const package_ = this.packageResolver.resolvePackage(packageId);
            if (!package_.hasEndpointsInTree) {
                continue;
            }
            this.withSourceFile({
                filepath: this.sdkClientClassDeclarationReferencer.getExportedFilepath(packageId),
                run: ({ sourceFile, importsManager }) => {
                    const context = this.generateSdkContext({ sourceFile, importsManager });
                    context.sdkClientClass.getGeneratedSdkClientClass(packageId).writeToFile(context);
                }
            });
        }
    }

    private generateOAuthTokenProvider(oauthScheme: OAuthScheme) {
        this.context.logger.debug("Generating OAuth token provider...");
        this.withSourceFile({
            filepath: this.oauthTokenProviderGenerator.getExportedFilePath(),
            run: ({ sourceFile, importsManager }) => {
                const context = this.generateSdkContext({ sourceFile, importsManager });
                const file = this.oauthTokenProviderGenerator.buildFile({
                    context,
                    oauthScheme
                });
                sourceFile.replaceWithText(file.toString({ dprintOptions: { indentWidth: 4 } }));
            }
        });
        this.coreUtilitiesManager.addAuthOverride({
            filepath: RelativeFilePath.of("index.ts"),
            content: this.oauthTokenProviderGenerator.buildIndexFile().toString()
        });
    }

    private generateTestFiles() {
        this.context.logger.debug("Generating test files...");
        this.forEachService((service, packageId) => {
            if (service.endpoints.length === 0) {
                return;
            }

            this.withSourceFile({
                filepath: this.jestTestGenerator.getTestFile(packageId.isRoot ? "" : packageId.subpackageId, service),
                run: ({ sourceFile, importsManager }) => {
                    const context = this.generateSdkContext({ sourceFile, importsManager });
                    const file = this.jestTestGenerator.buildFile(
                        this.sdkClientClassDeclarationReferencer.getExportedName(packageId),
                        service,
                        context.sdkClientClass.getGeneratedSdkClientClass(packageId),
                        context
                    );
                    sourceFile.replaceWithText(file.toString({ dprintOptions: { indentWidth: 4 } }));
                }
            });
        });
    }

    private async generateReadme(): Promise<void> {
        if (this.endpointSnippets.length === 0) {
            this.context.logger.debug("No snippets were produced; skipping README.md generation.");
            return;
        }
        await this.withRawFile({
            filepath: this.generatorAgent.getExportedReadmeFilePath(),
            run: async ({ sourceFile, importsManager }) => {
                const context = this.generateSdkContext({ sourceFile, importsManager });
                const readmeContent = await this.generatorAgent.generateReadme({
                    context,
                    endpointSnippets: this.endpointSnippets
                });
                sourceFile.replaceWithText(readmeContent);
            }
        });
    }

    private async generateReference(): Promise<void> {
        if (this.referenceConfigBuilder.isEmpty()) {
            // Don't generate a reference.md if there aren't any sections.
            return;
        }
        await this.withRawFile({
            filepath: this.generatorAgent.getExportedReferenceFilePath(),
            run: async ({ sourceFile, importsManager }) => {
                const context = this.generateSdkContext({ sourceFile, importsManager });
                const referenceContent = await this.generatorAgent.generateReference(this.referenceConfigBuilder);
                sourceFile.replaceWithText(referenceContent);
            }
        });
    }

    private runWithSnippet({
        sourceFile,
        importsManager,
        rootPackage,
        packageId,
        endpoint,
        example,
        includeImports
    }: {
        sourceFile: SourceFile;
        importsManager: ImportsManager;
        rootPackage: PackageId;
        packageId: PackageId;
        endpoint: HttpEndpoint;
        example: ExampleEndpointCall;
        includeImports: boolean;
    }): ts.Node[] | undefined {
        const context = this.generateSdkContext({ sourceFile, importsManager }, { isForSnippet: true });
        const clientInstantiation = context.sdkClientClass
            .getGeneratedSdkClientClass(rootPackage)
            .instantiateAsRoot({ context, npmPackage: this.npmPackage });
        const clientAssignment = ts.factory.createVariableStatement(
            undefined,
            ts.factory.createVariableDeclarationList(
                [
                    ts.factory.createVariableDeclaration(
                        context.sdkInstanceReferenceForSnippet,
                        undefined,
                        undefined,
                        clientInstantiation
                    )
                ],
                ts.NodeFlags.Const
            )
        );
        const clientClass = context.sdkClientClass.getGeneratedSdkClientClass(packageId);
        const endpointInvocation = clientClass.invokeEndpoint({
            context,
            endpointId: endpoint.id,
            example,
            clientReference: context.sdkInstanceReferenceForSnippet
        });
        const maybeLeveragedInvocation = clientClass.maybeLeverageInvocation({
            context,
            endpointId: endpoint.id,
            example,
            clientReference: context.sdkInstanceReferenceForSnippet
        });

        if (endpointInvocation == null) {
            return undefined;
        }

        const snippet = maybeLeveragedInvocation ?? [ts.factory.createExpressionStatement(endpointInvocation)];

        if (includeImports) {
            return [clientAssignment, ...snippet];
        }
        return snippet;
    }

    private generateSnippets() {
        const rootPackage: PackageId = { isRoot: true };
        this.forEachService((service, packageId) => {
            if (service.endpoints.length === 0) {
                return;
            }
            let serviceReference = this.referenceConfigBuilder.addSection({
                title:
                    service.displayName ??
                    service.name.fernFilepath.allParts.map((part) => part.pascalCase.unsafeName).join(" ")
            });

            const exportedFilepath = this.sdkClientClassDeclarationReferencer.getExportedFilepath(packageId);
            const serviceFilepath = convertExportedFilePathToFilePath(exportedFilepath);

            for (const endpoint of service.endpoints) {
                if (packageId.isRoot) {
                    serviceReference = this.referenceConfigBuilder.addRootSection();
                }

                if (this.config.snippetTemplateFilepath != null && this.npmPackage != null) {
                    const project = new Project({
                        useInMemoryFileSystem: true
                    });
                    const sourceFile = project.createSourceFile("snippet-test", undefined, { overwrite: true });
                    const importsManager = new ImportsManager();
                    const endpointContext = this.generateSdkContext(
                        { sourceFile, importsManager },
                        { isForSnippet: true }
                    );

                    const clientSourceFile = project.createSourceFile("snippet-client", undefined, { overwrite: true });
                    const clientImportsManager = new ImportsManager();
                    const clientContext = this.generateSdkContext(
                        { sourceFile: clientSourceFile, importsManager: clientImportsManager },
                        { isForSnippet: true }
                    );

                    const snippetTemplate = new TemplateGenerator({
                        endpointContext,
                        clientContext,
                        npmPackage: this.npmPackage,
                        auth: this.intermediateRepresentation.auth,
                        headers: this.intermediateRepresentation.headers,
                        endpoint,
                        packageId,
                        rootPackageId: rootPackage,
                        includeSerdeLayer: this.config.includeSerdeLayer,
                        retainOriginalCasing: this.config.retainOriginalCasing,
                        inlineFileProperties: this.config.inlineFileProperties,
                        requireDefaultEnvironment: this.config.requireDefaultEnvironment
                    }).generateSnippetTemplate();

                    if (snippetTemplate != null) {
                        const endpointPath = FernGeneratorExec.EndpointPath(getFullPathForEndpoint(endpoint));
                        this.context.logger.debug(
                            `Snippet template created for endpoint: ${endpoint.method} ${endpointPath}`
                        );
                        this.endpointSnippetTemplates.push({
                            sdk: FdrSnippetTemplate.Sdk.typescript({
                                package: this.npmPackage.packageName,
                                version: this.npmPackage.version
                            }),
                            endpointId: {
                                path: endpointPath,
                                method: endpoint.method,
                                identifierOverride: endpoint.id
                            },
                            snippetTemplate
                        });
                    }
                }

                let examplesForEndpoint: ExampleEndpointCall[] = [];
                for (const userDefinedExample of endpoint.userSpecifiedExamples) {
                    if (userDefinedExample.example != null) {
                        examplesForEndpoint.push(userDefinedExample.example);
                    }
                }
                if (examplesForEndpoint.length === 0) {
                    // use a single autogenerated example if no user provided examples
                    const maybeAutogeneratedExample = endpoint.autogeneratedExamples[0]?.example;
                    examplesForEndpoint = maybeAutogeneratedExample != null ? [maybeAutogeneratedExample] : [];
                }

                for (const [index, example] of examplesForEndpoint.entries()) {
                    const snippet = this.withSnippet({
                        run: ({ sourceFile, importsManager }): ts.Node[] | undefined => {
                            return this.runWithSnippet({
                                sourceFile,
                                importsManager,
                                rootPackage,
                                packageId,
                                endpoint,
                                example,
                                includeImports: true
                            });
                        },
                        includeImports: true
                    });

                    if (snippet != null) {
                        const endpointSnippet: FernGeneratorExec.Endpoint = {
                            id: {
                                path: FernGeneratorExec.EndpointPath(getFullPathForEndpoint(endpoint)),
                                method: endpoint.method,
                                identifierOverride: endpoint.id
                            },
                            snippet: FernGeneratorExec.EndpointSnippet.typescript({
                                client: snippet
                            })
                        };
                        if (example.name?.originalName != null) {
                            endpointSnippet.exampleIdentifier = example.name?.originalName;
                        }

                        this.endpointSnippets.push(endpointSnippet);
                    }

                    if (index === 0 && serviceReference != null) {
                        // We only include a reference section for the first example.
                        let returnType = undefined;
                        let endpointClientAccess: ts.Expression | undefined = undefined;
                        const parameters: FernGeneratorCli.ParameterReference[] = [];
                        const referenceSnippet = this.withSnippet({
                            run: ({ sourceFile, importsManager }): ts.Node[] | undefined => {
                                const context = this.generateSdkContext(
                                    { sourceFile, importsManager },
                                    { isForSnippet: true }
                                );
                                const clientClass = context.sdkClientClass.getGeneratedSdkClientClass(packageId);
                                const endpointDetailed = clientClass.getEndpoint({
                                    context,
                                    endpointId: endpoint.id
                                });
                                const returnTypeNode = endpointDetailed?.getSignature(context).returnTypeWithoutPromise;
                                returnType =
                                    returnTypeNode !== undefined ? getTextOfTsNode(returnTypeNode) : returnTypeNode;
                                parameters.push(
                                    ...(endpointDetailed?.getSignature(context).parameters.map((param) => {
                                        return {
                                            name: param.name,
                                            description: param.docs,
                                            type: param.type?.toString() ?? "unknown",
                                            required: param.hasQuestionToken != null ? !param.hasQuestionToken : true
                                        };
                                    }) ?? [])
                                );

                                endpointClientAccess = clientClass.accessFromRootClient({
                                    referenceToRootClient: context.sdkInstanceReferenceForSnippet
                                });

                                return this.runWithSnippet({
                                    sourceFile,
                                    importsManager,
                                    rootPackage,
                                    packageId,
                                    endpoint,
                                    example,
                                    includeImports: false
                                });
                            },
                            includeImports: false
                        });

                        let statement = undefined;
                        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
                        if (endpointClientAccess !== undefined) {
                            statement = getTextOfTsNode(endpointClientAccess) + ".";
                        }

                        if (referenceSnippet != null && statement != null) {
                            serviceReference.addEndpoint({
                                title: {
                                    snippetParts: [
                                        {
                                            text: statement
                                        },
                                        {
                                            text: this.getEndpointFunctionName(endpoint),
                                            location: {
                                                path: serviceFilepath
                                            }
                                        },
                                        {
                                            text: this.getReferenceEndpointInvocationParameters({
                                                parameters
                                            })
                                        }
                                    ],
                                    returnValue:
                                        returnType != null
                                            ? {
                                                  text: returnType
                                              }
                                            : undefined
                                },
                                description: endpoint.docs,
                                snippet: referenceSnippet,
                                parameters
                            });
                        }
                    }
                }
            }
        });
    }

    private getEndpointFunctionName(endpoint: HttpEndpoint): string {
        return endpoint.name.camelCase.unsafeName;
    }

    private getReferenceEndpointInvocationParameters({
        parameters
    }: {
        parameters: FernGeneratorCli.ParameterReference[];
    }): string {
        return `(${parameters
            .filter((param) => param.name !== "requestOptions")
            .map((param) => (param.name === "request" ? "{ ...params }" : param.name))
            .join(", ")})`;
    }

    private generateVersion(): void {
        if (this.intermediateRepresentation.apiVersion == null) {
            return;
        }
        this.withSourceFile({
            filepath: this.versionDeclarationReferencer.getExportedFilepath(),
            run: ({ sourceFile, importsManager }) => {
                const context = this.generateSdkContext({ sourceFile, importsManager });
                const generatedVersion = context.versionContext.getGeneratedVersion();
                if (generatedVersion != null) {
                    generatedVersion.writeToFile(context);
                }
            }
        });
    }

    private generateEnvironments(): void {
        this.withSourceFile({
            filepath: this.environmentsDeclarationReferencer.getExportedFilepath(),
            run: ({ sourceFile, importsManager }) => {
                const context = this.generateSdkContext({ sourceFile, importsManager });
                context.environments.getGeneratedEnvironments().writeToFile(context);
            }
        });
    }

    private generateGenericAPISdkError(): void {
        this.withSourceFile({
            filepath: this.genericAPISdkErrorDeclarationReferencer.getExportedFilepath(),
            run: ({ sourceFile, importsManager }) => {
                const context = this.generateSdkContext({ sourceFile, importsManager });
                this.genericAPISdkErrorGenerator
                    .generateGenericAPISdkError({
                        errorClassName: this.genericAPISdkErrorDeclarationReferencer.getExportedName()
                    })
                    .writeToFile(context);
            }
        });
    }

    private generateTimeoutSdkError(): void {
        this.withSourceFile({
            filepath: this.timeoutSdkErrorDeclarationReferencer.getExportedFilepath(),
            run: ({ sourceFile, importsManager }) => {
                const context = this.generateSdkContext({ sourceFile, importsManager });
                this.timeoutSdkErrorGenerator
                    .generateTimeoutSdkError({
                        errorClassName: this.timeoutSdkErrorDeclarationReferencer.getExportedName()
                    })
                    .writeToFile(context);
            }
        });
    }

    private withSnippet({
        run,
        includeImports = false
    }: {
        run: (args: { sourceFile: SourceFile; importsManager: ImportsManager }) => ts.Node[] | undefined;
        includeImports: boolean;
    }): string | undefined {
        const project = new Project({
            useInMemoryFileSystem: true
        });
        const sourceFile = project.createSourceFile("snippet");
        const importsManager = new ImportsManager();
        const statements = run({ sourceFile, importsManager });
        if (statements != null) {
            sourceFile.addStatements(statements.map((expression) => getTextOfTsNode(expression)));
            if (includeImports) {
                importsManager.writeImportsToSourceFile(sourceFile);
            }
            return sourceFile.getText();
        }
        return undefined;
    }

    private withSourceFile({
        run,
        filepath,
        addExportTypeModifier,
        overwrite
    }: {
        run: (args: { sourceFile: SourceFile; importsManager: ImportsManager }) => void;
        filepath: ExportedFilePath;
        addExportTypeModifier?: boolean;
        overwrite?: boolean;
    }) {
        const filepathStr = convertExportedFilePathToFilePath(filepath);
        this.context.logger.debug(`Generating ${filepathStr}`);

        const sourceFile = this.rootDirectory.createSourceFile(filepathStr, undefined, { overwrite });
        const importsManager = new ImportsManager();

        run({ sourceFile, importsManager });

        if (sourceFile.getStatements().length === 0) {
            sourceFile.delete();
            this.context.logger.debug(`Skipping ${filepathStr} (no content)`);
        } else {
            importsManager.writeImportsToSourceFile(sourceFile);
            this.exportsManager.addExportsForFilepath(filepath, addExportTypeModifier);

            // this needs to be last.
            // https://github.com/dsherret/ts-morph/issues/189#issuecomment-414174283
            sourceFile.insertText(0, (writer) => {
                if (this.config.whitelabel) {
                    writer.writeLine(WHITELABEL_FILE_HEADER);
                } else {
                    writer.writeLine(FILE_HEADER);
                }
            });

            this.context.logger.debug(`Generated ${filepathStr}`);
        }
    }

    private async withRawFile({
        run,
        filepath,
        overwrite
    }: {
        run: (args: { sourceFile: SourceFile; importsManager: ImportsManager }) => Promise<void>;
        filepath: ExportedFilePath;
        overwrite?: boolean;
    }) {
        const filepathStr = convertExportedFilePathToFilePath(filepath);
        this.context.logger.debug(`Generating ${filepathStr}`);
        await run({
            sourceFile: this.rootDirectory.createSourceFile(filepathStr, undefined, { overwrite }),
            importsManager: new ImportsManager()
        });
        this.context.logger.debug(`Generated ${filepathStr}`);
    }

    private getAllPackageIds(): PackageId[] {
        return [
            { isRoot: true },
            ...Object.keys(this.intermediateRepresentation.subpackages).map(
                (subpackageId): PackageId => ({ isRoot: false, subpackageId })
            )
        ];
    }

    private forEachService(run: (service: HttpService, packageId: PackageId) => void): void {
        for (const packageId of this.getAllPackageIds()) {
            const service = this.packageResolver.getServiceDeclaration(packageId);
            if (service != null) {
                run(service, packageId);
            }
        }
    }

    private generateSdkContext(
        {
            sourceFile,
            importsManager
        }: {
            sourceFile: SourceFile;
            importsManager: ImportsManager;
        },
        { isForSnippet }: { isForSnippet?: boolean } = {}
    ): SdkContextImpl {
        return new SdkContextImpl({
            logger: this.context.logger,
            version: this.context.version,
            config: this.rawConfig,
            ir: this.intermediateRepresentation,
            npmPackage: this.npmPackage,
            isForSnippet: isForSnippet ?? false,
            intermediateRepresentation: this.intermediateRepresentation,
            sourceFile,
            coreUtilitiesManager: this.coreUtilitiesManager,
            dependencyManager: this.dependencyManager,
            fernConstants: this.intermediateRepresentation.constants,
            importsManager,
            versionGenerator: this.versionGenerator,
            versionDeclarationReferencer: this.versionDeclarationReferencer,
            typeResolver: this.typeResolver,
            typeDeclarationReferencer: this.typeDeclarationReferencer,
            typeSchemaDeclarationReferencer: this.typeSchemaDeclarationReferencer,
            typeReferenceExampleGenerator: this.typeReferenceExampleGenerator,
            errorDeclarationReferencer: this.errorDeclarationReferencer,
            sdkErrorSchemaDeclarationReferencer: this.sdkErrorSchemaDeclarationReferencer,
            endpointErrorUnionDeclarationReferencer: this.endpointErrorUnionDeclarationReferencer,
            sdkEndpointSchemaDeclarationReferencer: this.sdkEndpointSchemaDeclarationReferencer,
            endpointErrorUnionGenerator: this.endpointErrorUnionGenerator,
            requestWrapperDeclarationReferencer: this.requestWrapperDeclarationReferencer,
            requestWrapperGenerator: this.requestWrapperGenerator,
            sdkInlinedRequestBodySchemaDeclarationReferencer: this.sdkInlinedRequestBodySchemaDeclarationReferencer,
            sdkInlinedRequestBodySchemaGenerator: this.sdkInlinedRequestBodySchemaGenerator,
            typeGenerator: this.typeGenerator,
            sdkErrorGenerator: this.sdkErrorGenerator,
            errorResolver: this.errorResolver,
            packageResolver: this.packageResolver,
            sdkEndpointTypeSchemasGenerator: this.sdkEndpointTypeSchemasGenerator,
            typeSchemaGenerator: this.typeSchemaGenerator,
            sdkErrorSchemaGenerator: this.sdkErrorSchemaGenerator,
            environmentsGenerator: this.environmentsGenerator,
            environmentsDeclarationReferencer: this.environmentsDeclarationReferencer,
            sdkClientClassDeclarationReferencer: this.sdkClientClassDeclarationReferencer,
            sdkClientClassGenerator: this.sdkClientClassGenerator,
            genericAPISdkErrorDeclarationReferencer: this.genericAPISdkErrorDeclarationReferencer,
            genericAPISdkErrorGenerator: this.genericAPISdkErrorGenerator,
            timeoutSdkErrorDeclarationReferencer: this.timeoutSdkErrorDeclarationReferencer,
            timeoutSdkErrorGenerator: this.timeoutSdkErrorGenerator,
            treatUnknownAsAny: this.config.treatUnknownAsAny,
            includeSerdeLayer: this.config.includeSerdeLayer,
            retainOriginalCasing: this.config.retainOriginalCasing,
            targetRuntime: this.config.targetRuntime,
            inlineFileProperties: this.config.inlineFileProperties,
            inlinePathParameters: this.config.inlinePathParameters,
            enableInlineTypes: this.config.enableInlineTypes,
            generateOAuthClients: this.generateOAuthClients,
            omitUndefined: this.config.omitUndefined,
            useBigInt: this.config.useBigInt,
            neverThrowErrors: this.config.neverThrowErrors,
            allowExtraFields: this.config.allowExtraFields
        });
    }
}
