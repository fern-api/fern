# yaml-language-server: $schema=../../../fern-versions-yml.schema.json

- version: 1.5.0
  changelogEntry:
    - summary: Add support for websocket connect methods with path parameters in the TypeScript generator
      type: feat
  createdAt: '2025-06-11'
  irVersion: 58

- version: 1.4.0
  changelogEntry:
    - summary: You can now pass in headers to the root client. These headers will be merged with service and endpoint specific headers.
      type: feat
    - summary: Reduce duplicate code generation by passing headers from the root client down to the subpackage clients.
      type: internal
  createdAt: '2025-06-05'
  irVersion: 58

- version: 1.3.2
  changelogEntry:
    - summary: Fix dynamic imports in the built dist/esm code.
      type: fix
  createdAt: '2025-06-05'
  irVersion: 58

- version: 1.3.1
  changelogEntry:
    - summary: |
        MSW is used for generated wire tests, but inadvertently also captures real HTTP request, for example in integration tests.
        When the HTTP request does not match any of the configured predicates, it would throw an error, including in the unrelated integration tests.
        In this version MSW is configured to bypass instead of throw an error when HTTP requests do not match the configured predicates.
      type: fix
  createdAt: '2025-06-05'
  irVersion: 58

- version: 1.3.0
  changelogEntry:
    - summary: Add support for generating the full project when using the filesystem output mode.
      type: feat
  createdAt: '2025-06-04'
  irVersion: 58

- version: 1.2.4
  changelogEntry:
    - summary: |
        Generate tests to verify the SDK sends and receives HTTP requests as expected.
        You can turn of these tests by setting `generateWireTests` to `false` in the `config` of your generator configuration.
      type: feat
  createdAt: '2025-06-03'
  irVersion: 58
  
- version: 1.1.1
  changelogEntry:
    - summary: Fix an issue where attempting to access a property with an invalid property name would lead to a broken output SDK.
      type: fix
  createdAt: '2025-06-04'
  irVersion: 58

- version: 1.1.0
  changelogEntry:
    - summary: Add support for HEAD HTTP method.
      type: feat
  createdAt: '2025-06-03'
  irVersion: 58

- version: 1.0.1
  changelogEntry:
    - summary: Fix property lookup in inherited schemas during snippet generation for object schemas.
      type: fix
  createdAt: '2025-05-14'
  irVersion: 57

- version: 1.0.0
  changelogEntry:
    - summary: |
        This release changes the defaults for the following custom configuration in _generators.yml_.

        | Option | Before | Now |
        |--------|--------|-----|
        | `inlineFileProperties` | `false` | `true` |
        | `inlinePathParameters` | `false` | `true` |
        | `enableInlineTypes` | `false` | `true` |
        | `noSerdeLayer` | `false` | `true` |
        | `omitUndefined` | `false` | `true` |
        | `skipResponseValidation` | `false` | `true` |
        | `useLegacyExports` | `true` | `false` |

        To avoid breaking changes, explicitly set the options above with the `Before` values in the `config` of your generator
        in _generators.yml_.
      type: feat
    - summary: |
        When generating properties for interfaces and classes, we only surround the property name with quotes if necessary.
        In some cases where the property name wasn't a valid identifier before, we now surround it with quotes too. 
      type: fix
  createdAt: '2025-05-14'
  irVersion: 57

- version: 0.51.7
  changelogEntry:
    - summary: If an object extends an alias, the generator now visits the alias that is being extended (instead of throwing an error).
      type: fix
  createdAt: '2025-05-14'
  irVersion: 57

- version: 0.51.6
  changelogEntry:
    - summary: Add support for the custom introduction setting in the generated README.md.
      type: fix
  createdAt: '2025-05-13'
  irVersion: 57

- version: 0.51.5
  changelogEntry:
    - summary: Fixed an issue with ts-morph where creating an ifStatement with empty conditions array caused errors in multipart form data handling.
      type: fix
  createdAt: '2025-05-03'
  irVersion: 57

- version: 0.51.4
  changelogEntry:
    - summary: Fix issue where the _runtime.ts_ file was missing when other files were trying to import it.
      type: fix
  createdAt: '2025-04-22'
  irVersion: 57

- version: 0.51.3
  changelogEntry:
    - summary: Fix minor type issue for polyfilling Headers in Node 16 and below.
      type: fix
  createdAt: '2025-04-21'
  irVersion: 57

- version: 0.51.2
  changelogEntry:
    - summary: |
        When uploading files, extract the filename from the `path` property if present on the given object.
        This will extract the filename for `fs.createReadStream()` for example.
      type: fix
  createdAt: '2025-04-21'
  irVersion: 57

- version: 0.51.1
  changelogEntry:
    - summary: |
        Fallback to a custom `Headers` class implementation if the native `Headers` class is not available.
        Versions of Node 16 and below do not support the native `Headers` class, so this fallback is necessary to ensure compatibility. 
      type: fix
  createdAt: '2025-04-21'
  irVersion: 57

- version: 0.51.0
  changelogEntry:
    - summary: |
        Add `rawResponse` property to JavaScript errors. 

        ```ts
        try {
          const fooBar = await client.foo.bar("id", options);
        } catch (e) {
          if (error instanceof FooError) {
            console.log(error.rawResponse);
          } else {
            // ...
          }
        }
        ```
      type: feat
  createdAt: '2025-04-14'
  irVersion: 57

- version: 0.50.1
  changelogEntry:
    - summary: |
        Add `"packageManager": "yarn@1.22.22"` to _package.json_.
      type: feat
  createdAt: '2025-04-08'
  irVersion: 57

- version: 0.50.0
  changelogEntry:
    - summary: |
        All endpoint functions now return an `HttpResponsePromise<T>` instead of a `Promise<T>`.
        Using `await`, `.then()`, `.catch()`, and `.finally()` on these promises behave the same as before,
        but you can call `.withRawResponse()` to get a promise that includes the parsed response and the raw response.
        The raw response let's you retrieve the response headers, status code, etc.

        ```ts
        const fooBar = await client.foo.bar("id", options);
        const { data: alsoFooBar, rawResponse } = await client.foo.bar("id", options).withRawResponse();
        const {
            headers,
            status,
            url,
            ...
        } = rawResponse;
        ```
      type: feat
  createdAt: '2025-04-07'
  irVersion: 57

- version: 0.49.7
  changelogEntry:
    - summary: |
        Significantly improve performance of SDK generation when the `useLegacyExports` config is `false`. For a large spec like Square, the generation went from 10+ minutes to almost 1 minute.
      type: fix
  createdAt: '2025-03-27'
  irVersion: 57

- version: 0.49.6
  changelogEntry:
    - summary: Support arbitrary websocket headers during connect handshake.
      type: feat
  createdAt: '2025-03-27'
  irVersion: 57

- version: 0.49.5
  changelogEntry:
    - summary: Improvements to Websocket code generation quality.
      type: feat
  createdAt: '2025-03-27'
  irVersion: 57

- version: 0.49.4
  changelogEntry:
    - summary: Increase the timeout used in the generated `webpack.test.ts` file.
      type: fix
  createdAt: '2025-03-19'
  irVersion: 57

- version: 0.49.3
  changelogEntry:
    - summary: Increase the timeout used in the generated `webpack.test.ts` file.
      type: fix
  createdAt: '2025-03-19'
  irVersion: 57

- version: 0.49.2
  changelogEntry:
    - summary: Fix issue where IdempotentRequestOptions is not generated in the client namespace.
      type: fix
  createdAt: '2025-03-18'
  irVersion: 57

- version: 0.49.1
  changelogEntry:
    - summary: This PR includes several fixes to the generated `Socket.ts` file when websocket client code generation is enabled.
      type: fix
  createdAt: '2025-03-10'
  irVersion: 57

- version: 0.49.0
  changelogEntry:
    - summary: |
        This PR enables the Typescript generator to produce Websocket SDK endpoints. This can be enabled by adding the option `shouldGenerateWebsocketClients: true` to the Typescript generator config.
      type: feat
  createdAt: '2025-03-06'
  irVersion: 57

- version: 0.48.7
  changelogEntry:
    - summary: |
        Form data encoding now correctly handles array and object values by encoding each property value as a separate key-value pair, rather than trying to encode the entire object as a single value. This ensures proper handling of complex data structures in multipart form requests.
      type: fix
  createdAt: '2025-01-28'
  irVersion: 55

- version: 0.48.6
  changelogEntry:
    - summary: Support form-encoded form data parameters by using `qs` to properly encode array and object values with the `repeat` array format.
      type: fix
  createdAt: '2025-01-28'
  irVersion: 55

- version: 0.48.5
  changelogEntry:
    - summary: Don't double wrap a blob if a user uploads a blob to a multi-part form. Otherwise file's content-type is lost in Deno.
      type: fix
  createdAt: '2025-01-28'
  irVersion: 55

- version: 0.48.4
  changelogEntry:
    - summary: When custom config `useBigInt` is `true`, generate examples and snippets with `BigInt("123")`.
      type: fix
  createdAt: '2025-01-21'
  irVersion: 55

- version: 0.48.3
  changelogEntry:
    - summary: The SDK now supports reading the basic auth username and password values from environment variables.
      type: fix
  createdAt: '2025-01-16'
  irVersion: 55

- version: 0.48.2
  changelogEntry:
    - summary: This updates the retrier logic to stop retrying on HTTP conflict (409). This was an oversight that we've meant to remove for a while (similar to other Fern SDKs).
      type: fix
  createdAt: '2025-01-16'
  irVersion: 55

- version: 0.48.1
  changelogEntry:
    - summary: Record types with `null` values are now correctly serialized.
      type: fix
  createdAt: '2025-01-16'
  irVersion: 55

- version: 0.48.0
  changelogEntry:
    - summary: |
        When `useBigInt` SDK configuration is set to `true`, a customized JSON serializer & deserializer is used that will preserve the precision of `bigint`'s, as opposed to the native `JSON.stringify` and `JSON.parse` function which converts `bigint`'s to `number`'s losing precision.

        When combining `useBigInt` with our serialization layer (`no-serde: false` (default)), both the request and response properties that are marked as `long` and `bigint` in OpenAPI/Fern spec, will consistently be `bigint`'s.
        However, when disabling the serialization layer (`no-serde: true`), they will be typed as `number | bigint`.

        Here's an overview of what to expect from the generated types when combining `useBigInt` and `noSerde` with the following Fern definition:

        **Fern definition**
        ```yml
        types:
          ObjectWithOptionalField:
            properties:
              longProp: long
              bigIntProp: bigint
        ```

        **TypeScript output**
        ```typescript
        // useBigInt: true
        // noSerde: false
        interface ObjectWithLongAndBigInt {
          longProp: bigint;
          bigIntProp: bigint;
        }

        // useBigInt: true
        // noSerde: true
        interface ObjectWithLongAndBigInt {
          longProp: bigint | number;
          bigIntProp: bigint | number;
        }

        // useBigInt: false
        // noSerde: false
        interface ObjectWithLongAndBigInt {
          longProp: number;
          bigIntProp: string;
        }

        // useBigInt: false
        // noSerde: true
        interface ObjectWithLongAndBigInt {
          longProp: number;
          bigIntProp: string;
        }
        ```
      type: feat
  createdAt: '2025-01-16'
  irVersion: 55

- version: 0.47.1
  changelogEntry:
    - summary: |
        Resolves an issue where nullable query parameters were not null-safe in their method invocations. The
        generated code now appropriately guard against `null` values like so:

        ```typescript
        const _queryParams: Record< ... >;
        if (value !== undefined) {
            _queryParams["value"] = value?.toString() ?? null;
        }
        ```
      type: fix
  createdAt: '2025-01-15'
  irVersion: 55

- version: 0.47.0
  changelogEntry:
    - summary: |
        Add support for `nullable` properties. Users can now specify explicit `null` values
        for types that specify `nullable` properties like so:

        ```typescript
        await client.users.update({ username: "john.doe", metadata: null });
        ```
      type: feat
  createdAt: '2025-01-14'
  irVersion: 55

- version: 0.46.11
  changelogEntry:
    - summary: |
        Don't double check whether an optional string literal alias (see example below) is a string when using serializer to build query string parameters.

        ```yml
        types:
          LiteralAliasExample: literal<"MyLiteralValue">

        service:
          endpoints:
            foo:
              path: /bar
              method: POST
              request:
                name: FooBarRequest
                query-parameters:
                  optional_alias_literal: optional<LiteralAliasExample>
        ```

        ```ts
        // before
        if (optionalAliasLiteral != null) {
            _queryParams["optional_alias_literal"] = typeof serializers.LiteralAliasExample.jsonOrThrow(optionalAliasLiteral, {
                unrecognizedObjectKeys: "strip",
            }) === "string" ? serializers.LiteralAliasExample.jsonOrThrow(optionalAliasLiteral, {
                unrecognizedObjectKeys: "strip",
            }) : JSON.stringify(serializers.LiteralAliasExample.jsonOrThrow(optionalAliasLiteral, {
                unrecognizedObjectKeys: "strip",
            }));
        }

        // after
        if (optionalAliasLiteral != null) {
            _queryParams["optional_alias_literal"] = serializers.LiteralAliasExample.jsonOrThrow(optionalAliasLiteral, {
                unrecognizedObjectKeys: "strip",
            });
        }
        ```
      type: fix
  createdAt: '2025-01-14'
  irVersion: 53

- version: 0.46.10
  changelogEntry:
    - summary: Use serialization layer to convert types to JSON strings when enabled.
      type: fix
  createdAt: '2025-01-14'
  irVersion: 53

- version: 0.46.9
  changelogEntry:
    - summary: Expose `baseUrl` as a default Client constructor option and construct URL correctly.
      type: fix
  createdAt: '2025-01-13'
  irVersion: 53

- version: 0.46.8
  changelogEntry:
    - summary: Generate the `version.ts` file correctly
      type: fix
  createdAt: '2025-01-13'
  irVersion: 53

- version: 0.46.7
  changelogEntry:
    - summary: Simplify runtime detection to reduce the chance of using an unsupported API like `process.` Detect Edge Runtime by Vercel.
      type: fix
  createdAt: '2025-01-09'
  irVersion: 53

- version: 0.46.6
  changelogEntry:
    - summary: Update `@types/node` to `18+`, required for the generated `Node18UniversalStreamWrapper` test.
      type: fix
  createdAt: '2025-01-09'
  irVersion: 53

- version: 0.46.5
  changelogEntry:
    - summary: Fix the webpack test to work with .js/.jsx extensions in TypeScript
      type: fix
    - summary: Only map .js modules in Jest, not .json files.
      type: fix
  createdAt: '2025-01-09'
  irVersion: 53

- version: 0.46.4
  changelogEntry:
    - summary: Fix packageJson custom configuration & package.json types field.
      type: fix
  createdAt: '2025-01-09'
  irVersion: 53

- version: 0.46.3
  changelogEntry:
    - summary: Revert to using legacy exports by default.
      type: fix
  createdAt: '2025-01-09'
  irVersion: 53

- version: 0.46.2
  changelogEntry:
    - summary: Fix Jest to work with files imported using `.js` extension.
      type: fix
    - summary: Make sure Jest loads Jest configuration regardless of package.json type.
      type: fix
  createdAt: '2025-01-09'
  irVersion: 53

- version: 0.46.1
  changelogEntry:
    - summary: ESModule output is fixed to be compatible with Node.js ESM loading.
      type: fix
  createdAt: '2025-01-08'
  irVersion: 53

- version: 0.46.0
  changelogEntry:
    - summary: SDKs are now built and exported in both CommonJS (legacy) and ESModule format.
      type: feat
    - summary: |
        Export `serialization` code from root package export.
        ```ts
        import { serialization } from `@packageName`;
        ```

        The serialization code is also exported as `@packageName/serialization`.
        ```ts
        import * as serialization from `@packageName/serialization`;
        ```
      type: feat
    - summary: |
        `package.json` itself is exported in `package.json` to allow consumers to easily read metadata about the package they are consuming.
      type: feat
  createdAt: '2025-01-06'
  irVersion: 53

- version: 0.45.2
  changelogEntry:
    - summary: TS generated snippets now respect proper parameter casing when noSerdeLayer is enabled.
      type: fix
  createdAt: '2024-12-31'
  irVersion: 53

- version: 0.45.1
  changelogEntry:
    - summary: |
        Export everything inside of TypeScript namespaces that used to be ambient.

        For the `enableInlineTypes` feature, some namespaces were no longer declared (ambient), and types and interfaces inside the namespace would no longer be automatically exported without the `export` keyword. This fix exports everything that's inside these namespaces and also declared namespaces for good measure (in case they are not declared in the future).
      type: fix
  createdAt: '2024-12-27'
  irVersion: 53

- version: 0.45.0
  changelogEntry:
    - summary: Update dependencies of the generated TS SDK and Express generator. TypeScript has been updated to 5.7.2 which is a major version upgrade from 4.6.4.
      type: feat
  createdAt: '2024-12-26'
  irVersion: 53

- version: 0.44.5
  changelogEntry:
    - summary: Fix a bug where we attempt to parse an empty terminator when receiving streaming JSON responses.
      type: fix
  createdAt: '2024-12-23'
  irVersion: 53

- version: 0.44.4
  changelogEntry:
    - summary: Use specified defaults for pagination offset parameters during SDK generation.
      type: feat
  createdAt: '2024-12-20'
  irVersion: 53

- version: 0.44.3
  changelogEntry:
    - summary: Fix a bug where client would send request wrapper instead of the body of the request wrapper, when the request has inline path parameters and a body property.
      type: fix
  createdAt: '2024-12-18'
  irVersion: 53

- version: 0.44.2
  changelogEntry:
    - summary: Inline path parameters will use their original name when `retainOriginalName` or `noSerdeLayer` is enabled.
      type: fix
  createdAt: '2024-12-17'
  irVersion: 53

- version: 0.44.1
  changelogEntry:
    - summary: When there is an environment variable set, you do not need to pass in any parameters to the client constructor.
      type: fix
  createdAt: '2024-12-16'
  irVersion: 53

- version: 0.44.0
  changelogEntry:
    - summary: |
        Inline path parameters into request types by setting `inlinePathParameters` to `true` in the generator config.

        Here's an example of how users would use the same endpoint method without and with `inlinePathParameters` set to `true`.

        Without `inlinePathParameters`:

        ```ts
        await service.getFoo("pathParamValue", { id: "SOME_ID" });
        ```

        With `inlinePathParameters`:

        ```ts
        await service.getFoo({ pathParamName: "pathParamValue", id: "SOME_ID" });
        ```
      type: feat
  createdAt: '2024-12-13'
  irVersion: 53

- version: 0.43.1
  changelogEntry:
    - summary: When `noSerdeLayer` is enabled, streaming endpoints were failing to compile because they assumed that the serialization layer existed. This is now fixed.
      type: fix
  createdAt: '2024-12-11'
  irVersion: 53

- version: 0.43.0
  changelogEntry:
    - summary: |
        Generate inline types for inline schemas by setting `enableInlineTypes` to `true` in the generator config.
        When enabled, the inline schemas will be generated as nested types in TypeScript.
        This results in cleaner type names and a more intuitive developer experience.

        Before:

        ```ts
        // MyRootType.ts
        import * as MySdk from "...";

        export interface MyRootType {
          foo: MySdk.MyRootTypeFoo;
        }

        // MyRootTypeFoo.ts
        import * as MySdk from "...";

        export interface MyRootTypeFoo {
          bar: MySdk.MyRootTypeFooBar;
        }

        // MyRootTypeFooBar.ts
        import * as MySdk from "...";

        export interface MyRootTypeFooBar {}
        ```

        After:

        ```ts
        // MyRootType.ts
        import * as MySdk from "...";

        export interface MyRootType {
          foo: MyRootType.Foo;
        }

        export namespace MyRootType {
          export interface Foo {
            bar: Foo.Bar;
          }

          export namespace Foo {
            export interface Bar {}
          }
        }
        ```

        Now users can get the deep nested `Bar` type as follows:

        ```ts
        import { MyRootType } from MySdk;

        const bar: MyRootType.Foo.Bar = {};
        ```
      type: feat
  createdAt: '2024-12-11'
  irVersion: 53

- version: 0.42.7
  changelogEntry:
    - summary: |
        Support `additionalProperties` in OpenAPI or `extra-properties` in the Fern Defnition. Now
        an object that has additionalProperties marked as true will generate the following interface:

        ```ts
        interface User {
          propertyOne: string;
          [key: string]: any;
        }
        ```
      type: feat
  createdAt: '2024-12-03'
  irVersion: 53

- version: 0.42.6
  changelogEntry:
    - summary: Remove the generated `APIPromise` since it is not compatible on certain node versions.
      type: fix
  createdAt: '2024-11-23'
  irVersion: 53

- version: 0.42.5
  changelogEntry:
    - summary: Remove extraneous import in pagination snippets.
      type: fix
  createdAt: '2024-11-23'
  irVersion: 53

- version: 0.42.4
  changelogEntry:
    - summary: Improve `GeneratedTimeoutSdkError` error to include endpoint name in message.
      type: fix
  createdAt: '2024-11-21'
  irVersion: 53

- version: 0.42.3
  changelogEntry:
    - summary: Fixed issue with snippets used for pagination endpoints.
      type: fix
  createdAt: '2024-11-22'
  irVersion: 53

- version: 0.42.2
  changelogEntry:
    - summary: |
        Added documentation for pagination in the README. The snippet below will
        now show up on generated READMEs.

        ```typescript
        // Iterate through all items
        const response = await client.users.list();
        for await (const item of response) {
          console.log(item);
        }

        // Or manually paginate
        let page = await client.users.list();
        while (page.hasNextPage()) {
          page = await page.getNextPage();
        }
        ```
      type: feat
  createdAt: '2024-11-21'
  irVersion: 53

- version: 0.42.1
  changelogEntry:
    - summary: |
        Added support for passing additional headers in request options. For example:

        ```ts
        const response = await client.someEndpoint(..., {
          headers: {
            'X-Custom-Header': 'custom value'
          }
        });
        ```
      type: feat
  createdAt: '2024-11-20'
  irVersion: 53

- version: 0.42.0
  changelogEntry:
    - summary: |
        Added support for `.asRaw()` which allows users to access raw response data including headers. For example:

        ```ts
        const response = await client.someEndpoint().asRaw();
        console.log(response.headers["X-My-Header"]);
        console.log(response.body);
        ```
      type: feat
  createdAt: '2024-11-15'
  irVersion: 53

- version: 0.41.2
  changelogEntry:
    - summary: Actually remove `jest-fetch-mock` from package.json.
      type: fix
  createdAt: '2024-11-18'
  irVersion: 53

- version: 0.41.1
  changelogEntry:
    - summary: Remove dev dependency on `jest-fetch-mock`.
      type: fix
  createdAt: '2024-11-02'
  irVersion: 53

- version: 0.41.0
  changelogEntry:
    - summary: Add a variable jitter to the exponential backoff and retry.
      type: feat
  createdAt: '2024-10-08'
  irVersion: 53

- version: 0.41.0-rc2
  changelogEntry:
    - summary: Generated READMEs now include improved usage snippets for pagination and streaming endpoints.
      type: feat
  createdAt: '2024-10-08'
  irVersion: 53

- version: 0.41.0-rc1
  changelogEntry:
    - summary: Fixes a broken unit test introduced in 0.41.0-rc0.
      type: fix
  createdAt: '2024-10-08'
  irVersion: 53

- version: 0.41.0-rc0
  changelogEntry:
    - summary: The generated SDK now supports bytes (`application/octet-stream`) requests.
      type: feat
  createdAt: '2024-10-08'
  irVersion: 53

- version: 0.40.8
  changelogEntry:
    - summary: File array uploads now call `request.appendFile` instead of `request.append` which was causing form data to be in a corrupted state.
      type: fix
  createdAt: '2024-09-28'
  irVersion: 53

- version: 0.40.7
  changelogEntry:
    - summary: |
        The generated README will now have a section that links to the generated SDK Reference (in `reference.md`).

        ```md
        ## Reference

        A full reference for this library can be found [here](./reference.md).
        ```
      type: fix
  createdAt: '2024-09-28'
  irVersion: 53

- version: 0.40.6
  changelogEntry:
    - summary: The TypeScript SDK now supports specifying a custom contentType if one is specified.
      type: fix
  createdAt: '2024-09-18'
  irVersion: 53

- version: 0.40.5
  changelogEntry:
    - summary: The snippet templates for file upload are now accurate and also respect the feature flag `inlineFileProperties`.
      type: fix
  createdAt: '2024-09-18'
  irVersion: 53

- version: 0.40.4
  changelogEntry:
    - summary: Upgrades dependency `stream-json` which improves the performance when reading large API specs. This version will improve your `fern generate` performance.
      type: fix
  createdAt: '2024-09-12'
  irVersion: 53

- version: 0.40.3
  changelogEntry:
    - summary: |
        If the serde layer is enabled, then all the serializers are exported under the namespace `serializers`.

        ```ts
        import { serializers } from "@plantstore/sdk";

        export function main(): void {
          // serialize to json

          const json = serializers.Plant.toJson({
            name: "fern"
          });

          const parsed = serializers.Plant.parseOrThrow(`{ "name": "fern" }`);
        }
        ```
      type: fix
  createdAt: '2024-09-12'
  irVersion: 53

- version: 0.40.2
  changelogEntry:
    - summary:  The generated SDK now handles reading IR JSONs that are larger than 500MB. In order to to this, the function `streamObjectFromFile` is used instead of `JSON.parse`.
      type: fix
  createdAt: '2024-09-12'
  irVersion: 53

- version: 0.40.1
  changelogEntry:
    - summary: The generated snippets now inline referenced request objects given they are not named, they need to be inlined.
      type: fix
  createdAt: '2024-09-12'
  irVersion: 53

- version: 0.40.0
  changelogEntry:
    - summary: |
        A new configuration flag has now been added that will automatically generate
        `BigInt` for `long` and `bigint` primitive types. To turn this flag on:

        ```yml
        groups:
          ts-sdk:
            name: fernapi/fern-typescript-node-sdk
            version: 0.40.0
            config:
              useBigInt: true
        ```
      type: feat
  createdAt: '2024-09-12'
  irVersion: 53

- version: 0.39.8
  changelogEntry:
    - summary: |
        The generated enum examples now reference the value of the enum directly instead
        of using the enum itself.

        ### Before

        ```ts
        {
          "genre": Imdb.Genre.Humor,
        }
        ```

        ### After

        ```ts
        {
          "genre": "humor"
        }
        ```
      type: fix
  createdAt: '2024-09-11'
  irVersion: 53

- version: 0.39.7
  changelogEntry:
    - summary: |
        The SDK now produces a `version.ts` file where we export a constant called `SDK_VERSION`.
        This constant can be used by different utilities to dynamically import in the version (for example, if someone wants to customize the user agent).
      type: chore
  createdAt: '2024-08-27'
  irVersion: 53

- version: 0.39.6
  changelogEntry:
    - summary: |
        Browser clients can now import streams, via `readable-streams` polyfill. Additionally adds a
        webpack unit test to verify that the core utilities can be compiled.
      type: fix
  createdAt: '2024-08-27'
  irVersion: 53

- version: 0.39.5
  changelogEntry:
    - summary: |
        If `noSerdeLayer` is enabled, then the generated TypeScript SDK snippets and wire tests
        will not use `Date` objects but instead use strings. Without this fix, the generated
        wire tests would result in failures.
      type: fix
  createdAt: '2024-08-20'
  irVersion: 53

- version: 0.39.4
  changelogEntry:
    - summary: Ensure that environment files don't generate, unless there is a valid environment available.
      type: fix
  createdAt: '2024-08-20'
  irVersion: 53

- version: 0.39.3
  changelogEntry:
    - summary: Multipart form data unit tests only get generated if the SDK has multipart form uploads.
      type: fix
  createdAt: '2024-08-16'
  irVersion: 53

- version: 0.39.2
  changelogEntry:
    - summary: |
        Allows filenames to be passed from underlying File objects in Node 18+ and browsers
        Users can now supply files like so, using a simple multipart upload API as an example:
        ```typescript
        client.file.upload(new File([...blobParts], 'filename.ext'), ...)
        ```
        `filename.ext` will be encoded into the upload.
      type: fix
  createdAt: '2024-08-16'
  irVersion: 53

- version: 0.39.1
  changelogEntry:
    - summary: |
        The SDK now supports looking directly at a `hasNextPage` property for offset pagination if configured.
        Previously the SDK would look if the number of items were empty, but this failed in certain edge cases.
      type: feat
  createdAt: '2024-08-07'
  irVersion: 53

- version: 0.38.6
  changelogEntry:
    - summary: |
        The SDK generator now sends a `User-Agent` header on each request that is set to
        `<package>/<version>`. For example if your package is called `imdb` and is versioned `0.1.0`, then
        the user agent header will be `imdb/0.1.0`.
      type: feat
  createdAt: '2024-08-07'
  irVersion: 53

- version: 0.38.5
  changelogEntry:
    - summary: Addressed fetcher unit test flakiness by using a mock fetcher
      type: fix
  createdAt: '2024-08-07'
  irVersion: 53

- version: 0.38.4
  changelogEntry:
    - summary: Literal templates are generated if they are union members
      type: fix
    - summary: Snippet templates no longer try to inline objects within containers
      type: fix
  createdAt: '2024-08-04'
  irVersion: 53

- version: 0.38.3
  changelogEntry:
    - summary: Adds async iterable to StreamWrapper implementation for easier use with downstream dependencies.
      type: fix
  createdAt: '2024-08-02'
  irVersion: 53

- version: 0.38.2
  changelogEntry:
    - summary: Refactors the `noScripts` feature flag to make sure that no `yarn install` commands can be accidentally triggered.
      type: fix
  createdAt: '2024-08-01'
  irVersion: 53

- version: 0.38.1
  changelogEntry:
    - summary: |
        A feature flag called `noScripts` has been introduced to prevent the generator from running any scripts such as `yarn format` or `yarn install`. If any of the scripts
        cause errors, toggling this option will allow you to receive the generated code.

        ```
        - name: fernapi/fern-typescript-node-sdk
          version: 0.38.1
          config:
            noScripts: true
        ```
      type: feat
  createdAt: '2024-08-01'
  irVersion: 53

- version: 0.38.0-rc0
  changelogEntry:
    - summary: Upgrade to IRv53.
      type: internal
    - summary: The generator now creates snippet templates for undiscriminated unions.
      type: chore
  createdAt: '2024-07-31'
  irVersion: 53

- version: 0.37.0-rc0
  changelogEntry:
    - summary: |
        The business plan Typescript SDK will now generate wire tests if the feature flag in the configuration is turned on.

        ```
        - name: fernapi/fern-typescript-node-sdk
          version: 0.37.0-rc0
          config:
            generateWireTests: true
        ```
      type: feat
  createdAt: '2024-07-29'
  irVersion: 50

- version: 0.36.6
  changelogEntry:
    - summary: Now import paths are correctly added to getResponseBody tests. CI checks also added.
      type: fix
  createdAt: '2024-07-29'
  irVersion: 50

- version: 0.36.5
  changelogEntry:
    - summary: Now, server sent events are treated differently as streaming responses, to ensure the correct wrapping happens.
      type: fix
  createdAt: '2024-07-29'
  irVersion: 50

- version: 0.36.4
  changelogEntry:
    - summary: Now, import paths are correctly added to stream wrapper tests.
      type: fix
  createdAt: '2024-07-26'
  irVersion: 50

- version: 0.36.3
  changelogEntry:
    - summary: Support starting the stream on `StreamWrapper.pipe(...)` for shorter syntax when dealing with `node:stream` primitives.
      type: fix
  createdAt: '2024-07-26'
  irVersion: 50

- version: 0.36.2
  changelogEntry:
    - summary: |
        This release comes with numerous improvements to streaming responses:

        1. Introduces new stream wrapper polyfills that implement the ability to stream to more streams, per environment.
        2. For `Node 18+`, stream responses can now be piped to `WritableStream`. They can also be streamed to `stream.Writable`, as possible before.
        3. For `< Node 18`, stream responses can be piped to `stream.Writeable`, as before.
        4. For `Browser` environments, stream responses can be piped to `WritableStream`.
        5. For `Cloudflare Workers`, stream responses can be piped to `WritableStream`.
      type: fix
    - summary: Now, there are generated unit tests for the `fetcher/stream-wrappers` core directory which makes sure that Fern's stream wrapping from responses work as expected!
      type: fix
  createdAt: '2024-07-26'
  irVersion: 50

- version: 0.36.1
  changelogEntry:
    - summary: Now, there are generated unit tests for the `auth` and `fetcher` core directory which makes sure that Fern's fetcher and authorization helpers work as expected!
      type: fix
  createdAt: '2024-07-16'
  irVersion: 50

- version: 0.36.0
  changelogEntry:
    - summary: Now, there are generated unit tests for the `schemas` core directory which makes sure that Fern's request + response validation will work as expected!
      type: fix
  createdAt: '2024-07-16'
  irVersion: 50

- version: 0.35.0
  changelogEntry:
    - summary: Support Multipart Form uploads where `fs.createReadStream` is passed. This requires coercing the stream into a `File`.
      type: fix
  createdAt: '2024-07-16'
  irVersion: 50

- version: 0.34.0
  changelogEntry:
    - summary: Upgrade to IRv50.
      type: internal
    - summary: |
        Add support for generating an API version scheme in `version.ts`.
        Consider the following `api.yml` configuration:

        ```yaml
        version:
          header: X-API-Version
          default: "1.0.0"
          values:
            - "1.0.0-alpha"
            - "1.0.0-beta"
            - "1.0.0"
        ```

        The following `version.ts` file is generated:

        ```typescript
        /**
        * This file was auto-generated by Fern from our API Definition.
        */

        /** The version of the API, sent as the X-API-Version header. */
        export type AcmeVersion = "1.0.0" | "2.0.0" | "latest";
        ```

        If a default value is specified, it is set on every request but can be overridden
        in either the client-level `Options` or call-specific `RequestOptions`. If a default
        value is _not_ specified, the value of the header is required on the generated `Options`.

        An example call is shown below:

        ```typescript
        import { AcmeClient } from "acme";

        const client = new AcmeClient({ apiKey: "YOUR_API_KEY", xApiVersion: "2.0.0" });
        await client.users.create({
          firstName: "john",
          lastName: "doe"
        });
        ```
      type: feat
  createdAt: '2024-07-16'
  irVersion: 50

- version: 0.33.0
  changelogEntry:
    - summary: |
        This release comes with numerous improvements to multipart uploads:

        1. `Fetcher.ts` no longer depends on form-data and formdata-node which reduces
          the size of the SDK for all consumers that are not leveraging multipart form
          data uploads.
        2. The SDK now accepts `fs.ReadStream`, `Blob` and `File` as inputs and handles
          parsing them appropriately.
        3. By accepting a `Blob` as a file parameter, the SDK now supports sending the
          filename when making a request.
      type: fix
  createdAt: '2024-07-16'
  irVersion: 48

- version: 0.32.0
  changelogEntry:
    - summary: The `reference.md` is now generated for every SDK.
      type: feat
    - summary: The `reference.md` is now generated by the `generator-cli`.
      type: feat
    - summary: The `reference.md` includes a single section for the _first_ example specified on the endpoint. Previously, a separate section was included for _every_ example.
      type: fix
  createdAt: '2024-07-15'
  irVersion: 48

- version: 0.31.0
  changelogEntry:
    - summary: |
        Add `omitUndefined` generator option. This is enabled with the following config:

        ```yaml
        groups:
          generators:
            - name: fernapi/fern-typscript-node-sdk
              version: 0.31.0
              ...
              config:
                omitUndefined: true
        ```

        When enabled, any property set to an explicit `undefined` is _not_ included
        in the serialized result. For example,

        ```typescript
        const request: Acme.CreateUserRequest = {
          firstName: "John",
          lastName: "Doe",
          email: undefined
        };
        ```

        By default, explicit `undefined` values are serialized as `null` like so:

        ```json
        {
          "firstName": "John",
          "lastName": "Doe",
          "email": null
        }
        ```

        When `omitUndefined` is enabled, the JSON object is instead serialized as:

        ```json
        {
          "firstName": "John",
          "lastName": "Doe"
        }
        ```
      type: feat
  createdAt: '2024-07-12'
  irVersion: 48

- version: 0.30.0
  changelogEntry:
    - summary: Client-level `Options` now supports overriding global headers like version.
      type: feat
  createdAt: '2024-07-11'
  irVersion: 48

- version: 0.29.2
  changelogEntry:
    - summary: Fix serialization of types with circular references
      type: fix
  createdAt: '2024-07-10'
  irVersion: 48

- version: 0.29.1
  changelogEntry:
    - summary: |
        Pagination endpoints that define nested offset/cursor properties are now functional.
        A new `setObjectProperty` helper is used to dynamically set the property, which is inspired
        by Lodash's `set` function (https://lodash.com/docs/4.17.15#set).

        The generated code now looks like the following:

        ```typescript
        let _offset = request?.pagination?.page != null ? request?.pagination?.page : 1;
        return new core.Pageable<SeedPagination.ListUsersPaginationResponse, SeedPagination.User>({
          response: await list(request),
          hasNextPage: (response) => (response?.data ?? []).length > 0,
          getItems: (response) => response?.data ?? [],
          loadPage: (_response) => {
            _offset += 1;
            return list(core.setObjectProperty(request, "pagination.page", _offset));
          }
        });
        ```
      type: fix
  createdAt: '2024-07-10'
  irVersion: 48

- version: 0.29.0
  changelogEntry:
    - summary: Upgrade to IRv48.
      type: internal
    - summary: Add support for pagination endpoints that require request body properties.
      type: feat
    - summary: |
        Add support for pagination with an offset step. This is useful for endpoints that page based on the element index rather than a page index (i.e. the 100th element vs. the 10th page).

        This feature shares the same UX as both the `offset` and `cursor` pagination variants.
      type: feat
  createdAt: '2024-07-09'
  irVersion: 48

- version: 0.29.0-rc0
  changelogEntry:
    - summary: All serializers in the generated SDK are now synchronous. This makes the serializers easier to use and improves the performance as well.
      type: fix
  createdAt: '2024-07-09'
  irVersion: 46

- version: 0.28.0-rc0
  changelogEntry:
    - summary: Add support for offset pagination, which uses the same pagination API introduced in `0.26.0-rc0`.
      type: feat
  createdAt: '2024-07-09'
  irVersion: 46

- version: 0.27.2
  changelogEntry:
    - summary: The generated readme now moves the sections for `AbortController`, `Runtime Compatibility` and `Custom Fetcher` under the Advanced section in the generated README.
      type: fix
  createdAt: '2024-07-08'
  irVersion: 46

- version: 0.27.1
  changelogEntry:
    - summary: |
        Support JSR publishing. If you would like your SDK to be published to JSR, there is now a configuration option called `publishToJsr: true`. When enabled, the generator will
        generate a `jsr.json` as well as a GitHub workflow to publish to JSR.

        ```yaml
        - name: fernapi/fern-typescript-sdk
          version: 0.27.1
          config:
            publishToJsr: true
        ```
      type: feat
  createdAt: '2024-07-08'
  irVersion: 46

- version: 0.27.0
  changelogEntry:
    - summary: Boolean literal headers can now be overridden via `RequestOptions`.
      type: fix
    - summary: |
        The generated `.github/workflows/ci.yml` file now supports NPM publishing with alpha/beta dist tags. If the selected version contains the `alpha` or `beta` substring,
        the associated dist tag will be added in the `npm publish` command like the following:

        ```sh
        # Version 1.0.0-beta
        npm publish --tag beta
        ```

        For more on NPM dist tags, see https://docs.npmjs.com/adding-dist-tags-to-packages
      type: feat
  createdAt: '2024-07-08'
  irVersion: 46

- version: 0.26.0-rc3
  changelogEntry:
    - summary: |
        The typescript generator now returns all `FormData` headers and Fetcher no longer stringifies stream.Readable type.
      type: fix
  createdAt: '2024-06-30'
  irVersion: 46

- version: 0.26.0-rc2
  changelogEntry:
    - summary: |
        `RequestOptions` now supports overriding global headers like authentication and version.
      type: feat
  createdAt: '2024-06-27'
  irVersion: 46

- version: 0.26.0-rc1
  changelogEntry:
    - summary: The generator was skipping auto pagination for item arrays that were optional. Now, those are safely handled as well.
      type: fix
  createdAt: '2024-06-27'
  irVersion: 46

- version: 0.26.0-rc0
  changelogEntry:
    - summary: |
        The TypeScript generator now supports cursor-based auto pagination. With auto pagination, a user can simply iterate over the results automatically:

        ```ts
        for (const user of client.users.list()) {
          consoler.log(user);
        }
        ```

        Users can also paginate over data manually

        ```ts
        const page = client.users.list();
        for (const user of page.data) {
          consoler.log(user);
        }

        // Helper methods for manually paginating:
        while (page.hasNextPage()) {
          page = page.getNextPage();
          // ...
        }
        ```
      type: feat
  createdAt: '2024-06-27'
  irVersion: 46

- version: 0.25.3
  changelogEntry:
    - summary: The generator is now upgraded to `v46.2.0` of the IR.
      type: internal
  createdAt: '2024-06-26'
  irVersion: 46

- version: 0.25.3
  changelogEntry:
    - summary: The generator is now upgraded to `v46.2.0` of the IR.
      type: internal
  createdAt: '2024-06-26'
  irVersion: 46

- version: 0.25.2
  changelogEntry:
    - summary: The generator now removes `fs`, `path`, and `os` dependencies from the browser runtime.
      type: fix
  createdAt: '2024-06-20'
  irVersion: 46

- version: 0.25.1
  changelogEntry:
    - summary: The generator now removes `fs`, `path`, and `os` dependencies from the browser runtime.
      type: fix
  createdAt: '2024-06-20'
  irVersion: 46

- version: 0.25.0
  changelogEntry:
    - summary: The generator now generates snippets for streaming endpoints. There is also a fix where literals are excluded from inlined requests.
      type: fix
  createdAt: '2024-06-19'
  irVersion: 46

- version: 0.25.0-rc0
  changelogEntry:
    - summary: The generator now merges the user's original `README.md` file (if any).
      type: feat
  createdAt: '2024-06-19'
  irVersion: 46

- version: 0.24.4
  changelogEntry:
    - summary: APIs that specify a default environment no longer include an unused environment import in their generated snippets.
      type: fix
  createdAt: '2024-06-19'
  irVersion: 46

- version: 0.24.3
  changelogEntry:
    - summary: The generator only adds a publish step in github actions if credentials are specified.
      type: fix
  createdAt: '2024-06-18'
  irVersion: 46

- version: 0.24.2
  changelogEntry:
    - summary: Remove the unnecessary client call from the request/response README.md section.
      type: feat
    - summary: |
        The generated README.md snippets now correctly referenced nested methods. For example,
        `client.users.create` (instead of `client.create`) in the following:

        ```ts
        import { AcmeClient } from "acme";

        const client = new AcmeClient({ apiKey: "YOUR_API_KEY" });
        await client.users.create({
          firstName: "john",
          lastName: "doe"
        });
        ```
      type: fix
  createdAt: '2024-06-19'
  irVersion: 46

- version: 0.24.1
  changelogEntry:
    - summary: |
        Dynamic snippets now support importing the client directly from the package.

        ```typescript
        import { MyClient } from "@org/sdk";

        const client = new MyClient({ ... });
        ```
      type: fix
  createdAt: '2024-06-19'
  irVersion: 46

- version: 0.24.0
  changelogEntry:
    - summary: Add dynamic client instantiation snippets
      type: feat
  createdAt: '2024-06-18'
  irVersion: 46

- version: 0.24.0-rc0
  changelogEntry:
    - summary: Dynamic client instantiation snippets are now generated. Note this only affects enterprise users that are using Fern's Snippets API.
      type: feat
  createdAt: '2024-06-18'
  irVersion: 46

- version: 0.23.3
  changelogEntry:
    - summary: The NPM publish job is _not_ generated if the token environment variable is not specified.
      type: fix
    - summary: |
        The snippets now use the `client` variable name like so:

        ```ts
        import { AcmeClient } from "acme";

        const client = new AcmeClient({ apiKey: "YOUR_API_KEY" });
        await client.users.create({
          firstName: "john",
          lastName: "doe"
        });
        ```
      type: feat
  createdAt: '2024-06-17'
  irVersion: 46

- version: 0.23.2
  changelogEntry:
    - summary: Client constructor snippets now include an `environment` property whenever it's required.
      type: fix
    - summary: The import paths included in the `README.md` exclusively use double quotes.
      type: fix
    - summary: When an NPM package name is not specified, the generated `README.md` will default to using the namespace export.
      type: fix
  createdAt: '2024-06-14'
  irVersion: 46

- version: 0.23.1
  changelogEntry:
    - summary: Undiscriminated unions used as map keys examples no longer return an error.
      type: fix
  createdAt: '2024-06-13'
  irVersion: 46

- version: 0.23.0
  changelogEntry:
    - summary: The latest version of the `generator-cli` (used to generate `README.md` files) is always installed.
      type: fix
  createdAt: '2024-06-12'
  irVersion: 46

- version: 0.23.0-rc1
  changelogEntry:
    - summary: |
        Introduce a custom configuration for arbitrary package json field. Now you can specify
        arbitrary key, value pairs that you want to be merged in the generated `package.json`.

        ```yml
        config:
          packageJson:
            dependencies:
              my-dep: "2.0.0"
            bin: "./index.js"
        ```
      type: fix
  createdAt: '2024-06-11'
  irVersion: 46

- version: 0.23.0-rc0
  changelogEntry:
    - summary: |
        Union snippet templates are fixed in 2 ways:
        1. The templates do not have a leading single quote (a typo from before)
        2. The templates now inline union properties (in certain cases)
      type: fix
  createdAt: '2024-06-07'
  irVersion: 46

- version: 0.22.0
  changelogEntry:
    - summary: Add support for higher quality `README.md` generation.
      type: feat
  createdAt: '2024-06-07'
  irVersion: 46

- version: 0.21.1
  changelogEntry:
    - summary: Detect `workerd` (Cloudflare) environments in `Runtime.ts`. The `Stream` class which is used for Server-Sent Events now prefers `TextDecoder` if it is present in the environment, to work in Cloudflare environments.
      type: feat
  createdAt: '2024-06-05'
  irVersion: 46

- version: 0.21.0
  changelogEntry:
    - summary: The generator now supports `bigint` types.
      type: feat
    - summary: Bump to IRv46.
      type: internal
  createdAt: '2024-06-05'
  irVersion: 46

- version: 0.20.9
  changelogEntry:
    - summary: TypeScript generator outputs code snippets that have `example-identifier` embedded.
      type: fix
  createdAt: '2024-06-02'
  irVersion: 43

- version: 0.20.8
  changelogEntry:
    - summary: TypeScript projects were skipping added peer dependencies in certain cases, now those are fixed.
      type: feat
  createdAt: '2024-06-02'
  irVersion: 43

- version: 0.20.7
  changelogEntry:
    - summary: Simplify the error handling introduced in `0.20.6` so that it more easily handles endpoints that include structured errors.
      type: fix
  createdAt: '2024-05-31'
  irVersion: 43

- version: 0.20.6
  changelogEntry:
    - summary: |
        This updates the behavior of the failure condition introduced in `0.20.2`; the SDK
        now throws an error whenever we fail to refresh an access token even if `neverThrowErrors`
        is set. We treat this failure as a systematic exception, so it's OK to throw in this case.
      type: fix
  createdAt: '2024-05-31'
  irVersion: 43

- version: 0.20.5
  changelogEntry:
    - summary: |
        Support setting `extraPeerDependencies` and `extraPeerDependenciesMeta` as
        configuration arguments. For example:

        ```yaml
        extraPeerDependencies:
          "openai": "^4.47.1"
        extraPeerDependenciesMeta:
          "openai":
            optional: true
        ```
      type: feat
  createdAt: '2024-05-30'
  irVersion: 43

- version: 0.20.4
  changelogEntry:
    - summary: Functionality to generate integration tests against a mock server has been disabled.
      type: fix
  createdAt: '2024-05-29'
  irVersion: 43

- version: 0.20.2
  changelogEntry:
    - summary: |
        The OAuth token provider supports SDKs that enable the `neverThrowErrors` setting.
        If the OAuth token provider fails to retrieve and/or refresh an access token, an error
        will _not_ be thrown. Instead, the original access token will be used and the user will be
        able to act upon an error available on the response. For example,

        ```ts
        const response = await client.user.get(...)
        if (!response.ok) {
          // Handle the response.error ...
        }
        ```
      type: fix
  createdAt: '2024-05-29'
  irVersion: 43

- version: 0.20.1
  changelogEntry:
    - summary: Remove instances of `node:stream` so that the generated SDK is Webpack + Next.js compatible.
      type: fix
  createdAt: '2024-05-29'
  irVersion: 43

- version: 0.20.1-rc0
  changelogEntry:
    - summary: URL encoded bodies are now appropriately encoded within the fetcher.
      type: fix
  createdAt: '2024-05-29'
  irVersion: 43

- version: 0.20.1
  changelogEntry:
    - summary: Remove node:stream imports for Webpack and Next.js compatibility
      type: fix
    - summary: Fix URL encoded body encoding in fetcher
      type: fix
  createdAt: '2024-05-29'
  irVersion: 43

- version: 0.20.0-rc1
  changelogEntry:
    - summary: |
       Pass `abortSignal` to `Stream` for server-sent-events and JSON streams so that the user can opt out and break from a stream.
      type: fix
  createdAt: '2024-05-24'
  irVersion: 43

- version: 0.20.0-rc1
  changelogEntry:
    - summary: |
       Pass `abortSignal` to `Stream` for server-sent-events and JSON streams so that the user can opt out and break from a stream.
      type: fix
  createdAt: '2024-05-24'
  irVersion: 43

- version: 0.20.0-rc0
  changelogEntry:
    - summary: |
        Add `abortSignal` to `RequestOptions`. SDK consumers can now specify an
        an arbitrary abort signal that can interrupt the API call.

        ```ts
        const controller = new AbortController();
        client.endpoint.call(..., {
          abortSignal: controller.signal,
        })
        ```
      type: feat
  createdAt: '2024-05-24'
  irVersion: 43

- version: 0.19.0
  changelogEntry:
    - summary: |
        Add `inlineFileProperties` configuration to support generating file upload properties
        as in-lined request properties (instead of positional parameters). Simply configure the following:

        ```yaml
        - name: fernapi/fern-typscript-node-sdk
          version: 0.19.0
          ...
          config:
            inlineFileProperties: true
        ```

        **Before**:

        ```ts
        /**
          * @param {File | fs.ReadStream} file
          * @param {File[] | fs.ReadStream[]} fileList
          * @param {File | fs.ReadStream | undefined} maybeFile
          * @param {File[] | fs.ReadStream[] | undefined} maybeFileList
          * @param {Acme.MyRequest} request
          * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
          *
          * @example
          *     await client.service.post(fs.createReadStream("/path/to/your/file"), [fs.createReadStream("/path/to/your/file")], fs.createReadStream("/path/to/your/file"), [fs.createReadStream("/path/to/your/file")], {})
          */
        public async post(
            file: File | fs.ReadStream,
            fileList: File[] | fs.ReadStream[],
            maybeFile: File | fs.ReadStream | undefined,
            maybeFileList: File[] | fs.ReadStream[] | undefined,
            request: Acme.MyRequest,
            requestOptions?: Acme.RequestOptions
        ): Promise<void> {
          ...
        }
        ```

        **After**:

        ```ts
        /**
          * @param {Acme.MyRequest} request
          * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
          *
          * @example
          *     await client.service.post({
          *        file: fs.createReadStream("/path/to/your/file"),
          *        fileList: [fs.createReadStream("/path/to/your/file")]
          *     })
          */
        public async post(
            request: Acme.MyRequest,
            requestOptions?: Service.RequestOptions
        ): Promise<void> {
          ...
        }
        ```
      type: feat
  createdAt: '2024-05-20'
  irVersion: 43

- version: 0.18.3
  changelogEntry:
    - summary: The generator now uses the latest FDR SDK.
      type: internal
  createdAt: '2024-05-17'
  irVersion: 43

- version: 0.18.2
  changelogEntry:
    - summary: |
        If OAuth is configured, the generated `getAuthorizationHeader` helper now treats the
        bearer token as optional. This prevents us from sending the `Authorization` header
        when retrieving the access token.
      type: fix
  createdAt: '2024-05-15'
  irVersion: 43

- version: 0.18.1
  changelogEntry:
    - summary: |
        If OAuth environment variables are specified, the `clientId` and `clientSecret` parameters
        are optional.

        ```ts
        export declare namespace Client {
          interface Options {
              ...
              clientId?: core.Supplier<string>;
              clientSecret?: core.Supplier<string>;
          }
          ...
        }
        ```
      type: fix
  createdAt: '2024-05-14'
  irVersion: 43

- version: 0.18.0
  changelogEntry:
    - summary: | 
        Add support for the OAuth client credentials flow. The new `OAuthTokenProvider` automatically
        resolves the access token and refreshes it as needed. The resolved access token is then used as the
        bearer token in all client requests.
      type: feat
  createdAt: '2024-05-13'
  irVersion: 43

- version: 0.17.1
  changelogEntry:
    - summary: Multipart form data requests are now compatible across browser and Node.js runtimes.
      type: fix
  createdAt: '2024-05-06'
  irVersion: 43

- version: 0.17.0
  changelogEntry:
    - summary: Bump to v43 of IR which means that you will need `0.26.1` of the Fern CLI version. To bump your CLI version, please run `fern upgrade`.
      type: internal
  createdAt: '2024-05-06'
  irVersion: 43

- version: 0.16.0-rc8
  changelogEntry:
    - summary: |
        The SDK generator now supports upload endpoints that specify an array of files like so:

        ```ts
        /**
          * @param {File[] | fs.ReadStream[]} files
          * @param {Acme.UploadFileRequest} request
          * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
          */
        public async post(
            files: File[] | fs.ReadStream[],
            request: Acme.UploadFileRequest,
            requestOptions?: Service.RequestOptions
        ): Promise<void> {
            const _request = new FormData();
            for (const _file of files) {
              _request.append("files", _file);
            }
            ...
        }
        ```
      type: feat
  createdAt: '2024-05-06'
  irVersion: 38

- version: 0.16.0-rc7
  changelogEntry:
    - summary: |
        The SDK generator now supports `@param` JSDoc comments for endpoint parameters.
        The generator now arranges JSDoc in a few separate groups, one for each of `@param`, `@throws`,
        and `@examples` like so:

        ```ts
          /**
          * This endpoint checks the health of a resource.
          *
          * @param {string} id - A unique identifier.
          * @param {Service.RequestOptions} requestOptions - Request-specific configuration.
          *
          * @throws {@link Acme.UnauthorizedRequest}
          * @throws {@link Acme.BadRequest}
          *
          * @example
          *     await testSdk.health.service.check("id-2sdx82h")
          */
          public async check(id: string, requestOptions?: Service.RequestOptions): Promise<void> {
            ...
          }
        ```
      type: feat
    - summary: |
        The generator will only include user-provided examples if they exist, and otherwise
        only include a single generated example, like so:

        ```ts
          /**
          * This endpoint checks the health of a resource.
          *
          * @example
          *     await testSdk.health.service.check("id-2sdx82h")
          */
          public async check(id: string, requestOptions?: Service.RequestOptions): Promise<void> {
            ...
          }
        ```
      type: feat
    - summary: |
        The SDK generator now escapes path parameters that would previously create invalid
        URLs (e.g. "\\example"). Method implementations will now have references to
        `encodeURIComponent` like the following:

        ```ts
        const _response = await core.fetcher({
          url: urlJoin(
            (await core.Supplier.get(this._options.environment)) ?? environments.AcmeEnvironment.Prod,
            `/users/${encodeURIComponent(userId)}`
          ),
          ...
        });
        ```
      type: fix
  createdAt: '2024-04-30'
  irVersion: 38

- version: 0.16.0-rc6
  changelogEntry:
    - summary: snippet templates now move file upload parameters to unnamed args
      type: fix
  createdAt: '2024-04-30'
  irVersion: 38

- version: 0.16.0-rc5
  changelogEntry:
    - summary: remove duplicate quotation marks in snippet templates
      type: fix
  createdAt: '2024-04-30'
  irVersion: 38

- version: 0.16.0-rc4
  changelogEntry:
    - summary: fixes to styling of the SDK code snippet templates.
      type: fix
  createdAt: '2024-04-25'
  irVersion: 38

- version: 0.16.0-rc0
  changelogEntry:
    - summary: The generator now registers snippet templates which can be used for dynamic SDK code snippet generation.
      type: feat
  createdAt: '2024-04-24'
  irVersion: 38

- version: 0.15.1-rc1
  changelogEntry:
    - summary: |
        Earlier for inlined request exports, we were doing the following:

        ```ts
        export { MyRequest } from "./MyRequest";
        ```

        In an effort to make the generated code JSR compatible, the TS generator
        will now append the `type` explicitly for request exports.

        ```ts
        export { type MyRequest } from "./MyRequest";
        ```
      type: feat
  createdAt: '2024-04-24'
  irVersion: 38

- version: 0.15.1-rc0
  changelogEntry:
    - summary: plain text responses are now supported in the TypeScript generator.
      type: feat
  createdAt: '2024-04-22'
  irVersion: 38

- version: 0.15.0-rc1
  changelogEntry:
    - summary: |
        Minor fixes to SSE processing. In particular, stream terminal characters are now
        respected like `[DONE]` and JSON parsed data is sent to the deserialize function.
      type: fix
  createdAt: '2024-04-22'
  irVersion: 38

- version: 0.15.0-rc0
  changelogEntry:
    - summary: |
        Bump to v38 of IR and support server-sent events where the events are sent
        with a `data: ` prefix and terminated with a new line.
      type: feat
  createdAt: '2024-04-19'
  irVersion: 38

- version: 0.14.1-rc5
  changelogEntry:
    - summary: Code snippets are generated for file upload endpoints using `fs.readStream`. Previously, generation for these endpoints was being skipped.
      type: fix
    - summary: If integration tests are not enabled, simple jest tests with a `yarn test` script will be created.
      type: fix
    - summary: |
        In an effort to make the generated code JSR compatible, the generator now
        directly imports from files instead of using directory imports.
      type: feat   
    - summary: |
        In an effort to make the generated code JSR compatible, we make sure all methods
        are strongly typed with return signatures (in this case `_getAuthorizationHeader()`).
      type: feat    
    - summary: Generate code snippet for FileDownload endpoint
      type: fix   
    - summary: |
        Import for `node-fetch` in `Fetcher.ts` uses a dynamic import instead of `require` which
        so that the SDK works in ESM environments (that are using local file output). When the
        `outputEsm` config flag is turned on, the dynamic import will be turned into an ESM specific import.
      type: fix   
    - summary: |
        The test job in `ci.yml` works even if you have not configured Fern to
        generate integration tests.

        Without integration tests the test job will run `yarn && yarn test`. With the
        integration tests, the test job will delegate to the fern cli `fern yarn test`.
      type: fix    
    - summary: |
        Add `allowExtraFields` option to permit extra fields in the serialized request.

        ```yaml
        - name: fernapi/fern-typscript-node-sdk
          version: 0.14.0-rc0
          ...
          config:
            allowExtraFields: true
        ```
      type: feat
  createdAt: '2024-04-17'
  irVersion: 37

- version: 0.13.0
  changelogEntry:
    - summary: Support V37 of the IR.
      type: internal
  createdAt: '2024-04-09'
  irVersion: 37

- version: 0.13.0-rc0
  changelogEntry:
    - summary: |
        Add `retainOriginalCasing` option to preserve the naming convention expressed in the API.
        For example, the following Fern definition will generate a type like so:

        ```yaml
        types:
          GetUsersRequest
            properties:
              group_id: string
        ```

        **Before**

        ```typescript
        export interface GetUsersRequest {
          groupId: string;
        }

        export interface GetUsersRequest = core.serialization.object({
        groupId: core.serialization.string("group_id")
        })

        export namespace GetUsersRequest {
          interface Raw {
            group_id: string
          }
        }
        ```

        **After**

        ```typescript
        export interface GetUsersRequest {
          group_id: string;
        }

        export interface GetUsersRequest = core.serialization.object({
        group_id: core.serialization.string()
        })

        export namespace GetUsersRequest {
          interface Raw {
            group_id: string
          }
        }
        ```
      type: feat
  createdAt: '2024-04-02'
  irVersion: 33

- version: 0.12.9
  changelogEntry:
    - summary: The generator stopped working for remote code generation starting in `0.12.7`. This is now fixed.
      type: fix
  createdAt: '2024-03-22'
  irVersion: 33

- version: 0.12.8
  changelogEntry:
    - summary: Enhance serde performance by reducing reliance on async behavior and lazy async dynamic imports.
      type: feat
    - summary: Shared generator notification and config parsing logic.
      type: internal
  createdAt: '2024-03-22'
  irVersion: 33

- version: 0.12.8-rc0
  changelogEntry:
    - summary: Enhance serde performance by reducing reliance on async behavior and lazy async dynamic imports.
      type: feat
  createdAt: '2024-03-18'
  irVersion: 33

- version: 0.12.7
  changelogEntry:
    - summary: |
        the SDK will now leverage environment variable defaults, where specified, for authentication variables, such as bearer tokens, api keys, custom headers, etc.

        Previously, the SDK would only leverage these defaults for bearer token auth IF auth was mandatory throughout the SDK.
      type: feat
  createdAt: '2024-03-14'
  irVersion: 33

- version: 0.12.6
  changelogEntry:
    - summary: |
        In Node.js environments the SDK will default to using `node-fetch`. The
        SDK depends on v2 of node-fetch to stay CJS compatible.

        Previously the SDK was doing `require("node-fetch")` but it should be
        `require("node-fetch").default` based on
        https://github.com/node-fetch/node-fetch/issues/450#issuecomment-387045223.
      type: fix
  createdAt: '2024-02-27'
  irVersion: 33

- version: 0.12.5
  changelogEntry:
    - summary: |
        Introduce a custom configuration called `tolerateRepublish` which supports running
        npm publish with the flag `--tolerateRepublish`. This flag allows you to publish
        on top of an existing npm package.

        To turn on this flag, update your generators.yml:

        ```yaml
        groups:
          generators:
            - name: fernapi/fern-typscript-node-sdk
              version: 0.12.5
              ...
              config:
                tolerateRepublish: true
        ```
      type: feat
  createdAt: '2024-02-27'
  irVersion: 33

- version: 0.12.4
  changelogEntry:
    - summary: |
        Previously reference.md was just leveraging the function name for the reference, now it leverages the full package-scoped path, mirroring how the function would be used in reality.

        ```ts
        seedExamples.getException(...)

        // is now

        seedExamples.file.notification.service.getException(...)
        ```
      type: fix
    - summary: Previously SDK code snippets would not support generation with undiscriminated unions. Now, it does.
      type: fix
  createdAt: '2024-02-27'
  irVersion: 33

- version: 0.12.2
  changelogEntry:
    - summary: |
        Previously SDK code snippets would not take into account default parameter values
        and would always include a `{}`. This was odd and didn't represent how a developer
        would use the SDK. Now, the snippets check for default parameter values and omit
        if there are no fields specified.

        ```ts
        // Before
        client.users.list({});

        // After
        client.users.list();
        ```
      type: fix
  createdAt: '2024-02-27'
  irVersion: 33

- version: 0.12.1
  changelogEntry:
    - summary: |
        Optional objects in deep query parameters were previously being incorrectly
        serialized. Before this change, optional objects were just being JSON.stringified
        which would send the incorrect contents over the wire.

        ```ts
        // Before
        if (foo != null) {
          _queryParams["foo"] = JSON.stringify(foo);
        }

        // After
        if (foo != null) {
          _queryParams["foo"] = foo;
        }

        // After (with serde layer)
        if (foo != null) {
          _queryParams["foo"] = serializers.Foo.jsonOrThrow(foo, {
            skipValidation: false,
            breadcrumbs: ["request", "foo"]
          });
        }
        ```
      type: fix
  createdAt: '2024-02-27'
  irVersion: 33

- version: 0.12.0
  changelogEntry:
    - summary: |
        support deep object query parameter serialization. If, query parameters are
        objects then Fern will support serializing them.

        ```yaml
        MyFoo:
          properties:
            bar: optional<string>

        query-parameters:
          foo: MyFoo
        ```

        will now be serialized as `?foo[bar]="...` and appear in the SDK as a regular object

        ```ts
        client.doThing({
          foo: {
            bar: "..."
          }
        });
        ```
      type: feat
  createdAt: '2024-02-26'
  irVersion: 33

- version: 0.11.5
  changelogEntry:
    - summary: |
        Previously `core.Stream` would not work in the Browser. Now the generated Fern SDK
        includes a polyfill for `ReadableStream` and uses `TextDecoder` instead of `Buffer`.
      type: fix
    - summary: |
        add in a reference markdown file, this shows a quick outline of the available endpoints,
        it's documentation, code snippet, and parameters.

        This feature is currently behind a feature flag called `includeApiReference` and can be used

        ```yaml
        config:
          includeApiReference: true
        ```
      type: feat
  createdAt: '2024-02-15'
  irVersion: 31

- version: 0.11.4
  changelogEntry:
    - summary: |
        The `Fetcher` now supports sending binary as a request body. This is important
        for APIs that intake `application/octet-stream` content types or for folks that have
        .fernignored their and added custom utilities that leverage the fetcher.
      type: fix
  createdAt: '2024-02-15'
  irVersion: 31

- version: 0.11.3
  changelogEntry:
    - summary: |
        ensure SDK generator always uses `node-fetch` in Node.js environments. There is an experimental
        fetch packaged with newer versions of Node.js, however it causes unexpected behavior with
        file uploads.
      type: fix
  createdAt: '2024-02-13'
  irVersion: 31

- version: 0.11.2
  changelogEntry:
    - summary: |
        ensure SDK generator does not drop additional parameters from requests that perform file upload. Previously, if an endpoint had `file` inputs without additional `body` parameters, query parameters were erroneously ignored.
      type: fix
  createdAt: '2024-02-13'
  irVersion: 31

- version: 0.11.1
  changelogEntry:
    - summary: The SDK generator no longer generates a `tsconfig.json` with `noUnusedParameters` enabled. This check was too strict.
      type: fix
  createdAt: '2024-02-13'
  irVersion: 31

- version: 0.11.0
  changelogEntry:
    - summary: |
        The SDK generator now forwards information about the runtime that it is being
        used in. The header `X-Fern-Runtime` will report the runtime (e.g. `browser`, `node`, `deno`)
        and the header `X-Fern-Runtime-Version` will report the version.
      type: feat
  createdAt: '2024-02-13'
  irVersion: 31

- version: 0.10.0
  changelogEntry:
    - summary: |
        The SDK generator now supports whitelabelling. When this is turned on,
        there will be no mention of Fern in the generated code.

        **Note**: You must be on the enterprise tier to enable this mode.
      type: feat
  createdAt: '2024-02-11'
  irVersion: 31

- version: 0.9.7
  changelogEntry:
    - summary: Initialize this changelog
      type: chore
  createdAt: '2024-02-11'
  irVersion: 31
