features:
  - id: USAGE
    description: |
      Instantiate and use the client with the following:

  - id: AUTHENTICATION
    description: |
      You can omit the token when constructing the client. In this case, the SDK will automatically read the token from the environment variable:

  - id: ENVIRONMENTS
    description: |
      This SDK allows you to configure different environments or custom URLs for API requests. 
      You can either use the predefined environments or specify your own custom URL.

  - id: PAGINATION
    description: |
      Paginated requests will return an Iterable<T>, which can be used to loop through the underlying items, or stream them. You can also call 
      `nextPage` to perform the pagination manually

  - id: ERRORS
    description: |
      When the API returns a non-success status code (4xx or 5xx response), an API exception will be thrown.

  - id: CUSTOM_CLIENT
    description: |
      This SDK is built to work with any instance of `OkHttpClient`. By default, if no client is provided, the SDK will construct one. 
      However, you can pass your own client like so:

  - id: RETRIES
    advanced: true
    description: |
      The SDK is instrumented with automatic retries with exponential backoff. A request will be retried as long
      as the request is deemed retryable and the number of retry attempts has not grown larger than the configured
      retry limit (default: 2).

      A request is deemed retryable when any of the following HTTP status codes is returned:

      - [408](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/408) (Timeout)
      - [429](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) (Too Many Requests)
      - [5XX](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500) (Internal Server Errors)

      Use the `option.WithMaxAttempts` option to configure this behavior for the entire client or an individual request:

  - id: TIMEOUTS
    advanced: true
    description: |
      Setting a timeout for each individual request is as simple as using the standard context library. Setting a one second timeout for an individual API call looks like the following:
