import {
    ExampleEndpointCall,
    ExampleRequestBody,
    ExampleResponse,
    ExampleTypeReference,
    HttpEndpoint
} from "@fern-fern/ir-sdk/api";
import { SdkGeneratorContext } from "../SdkGeneratorContext";

/**
 * Extracts test data directly from the static IR for wire test validation.
 * This class is responsible for extracting request and response data from examples,
 * separate from the code snippet generation concern.
 */
export class WireTestDataExtractor {
    constructor(private readonly context: SdkGeneratorContext) {}

    /**
     * Extract test examples from an endpoint, including both request and response data.
     */
    public getTestExamples(endpoint: HttpEndpoint): WireTestExample[] {
        const examples: WireTestExample[] = [];

        // Process user-specified examples
        for (const userExample of endpoint.userSpecifiedExamples) {
            if (userExample.example) {
                const extracted = this.extractTestExample(userExample.example, endpoint);
                if (extracted) {
                    examples.push(extracted);
                }
            }
        }

        // Process auto-generated examples if no user examples
        if (examples.length === 0) {
            for (const autoExample of endpoint.autogeneratedExamples) {
                if (autoExample.example) {
                    const extracted = this.extractTestExample(autoExample.example, endpoint);
                    if (extracted) {
                        examples.push(extracted);
                    }
                }
            }
        }

        return examples;
    }

    /**
     * Extract test data from a single example.
     */
    private extractTestExample(example: ExampleEndpointCall, endpoint: HttpEndpoint): WireTestExample | undefined {
        return {
            id: example.id || `${endpoint.id}-example`,
            name: example.name?.originalName,
            request: {
                body: this.extractRequestBody(example.request),
                headers: this.extractHeaders(example),
                queryParams: this.extractQueryParams(example),
                pathParams: this.extractPathParams(example)
            },
            response: {
                statusCode: this.getResponseStatusCode(example.response),
                body: this.extractResponseBody(example.response)
            }
        };
    }

    /**
     * Extract request body from an ExampleRequestBody.
     */
    private extractRequestBody(request: ExampleRequestBody | undefined): unknown | undefined {
        if (!request) {
            return undefined;
        }

        return request._visit({
            inlinedRequestBody: (value) => {
                const result: Record<string, unknown> = {};
                value.properties.forEach((p) => {
                    result[p.name.wireValue] = this.createRawJsonExample(p.value);
                });
                return result;
            },
            reference: (value) => {
                return this.createRawJsonExample(value);
            },
            _other: () => {
                return request.jsonExample;
            }
        });
    }

    /**
     * Extract response body from an ExampleResponse.
     */
    private extractResponseBody(response: ExampleResponse | undefined): unknown | undefined {
        if (!response) {
            return undefined;
        }

        return response._visit({
            ok: (value) => {
                return value._visit({
                    body: (body) => {
                        if (!body) {
                            return undefined;
                        }
                        return this.createRawJsonExample(body);
                    },
                    stream: () => undefined,
                    sse: () => undefined,
                    _other: () => undefined
                });
            },
            error: (value) => {
                if (!value.body) {
                    return undefined;
                }
                return this.createRawJsonExample(value.body);
            },
            _other: () => undefined
        });
    }

    /**
     * Get the expected response status code from an ExampleResponse.
     */
    private getResponseStatusCode(response: ExampleResponse | undefined): number {
        if (!response) {
            return 200;
        }

        return response._visit({
            ok: () => 200,
            error: (exampleError) => {
                const error = this.context.ir.errors[exampleError.error.errorId];
                return error?.statusCode ?? 500;
            },
            _other: () => 200
        });
    }

    /**
     * Extract headers from an example.
     */
    private extractHeaders(example: ExampleEndpointCall): Record<string, string> {
        const headers: Record<string, string> = {};

        [...(example.serviceHeaders ?? []), ...(example.endpointHeaders ?? [])].forEach((header) => {
            headers[header.name.wireValue] = String(header.value.jsonExample);
        });

        return headers;
    }

    /**
     * Extract query parameters from an example.
     */
    private extractQueryParams(example: ExampleEndpointCall): Record<string, string> {
        const params: Record<string, string> = {};

        (example.queryParameters ?? []).forEach((param) => {
            params[param.name.wireValue] = String(param.value.jsonExample);
        });

        return params;
    }

    /**
     * Extract path parameters from an example.
     */
    private extractPathParams(example: ExampleEndpointCall): Record<string, string> {
        const params: Record<string, string> = {};

        [
            ...(example.rootPathParameters ?? []),
            ...(example.servicePathParameters ?? []),
            ...(example.endpointPathParameters ?? [])
        ].forEach((param) => {
            params[param.name.originalName] = String(param.value.jsonExample);
        });

        return params;
    }

    /**
     * Convert an ExampleTypeReference to its raw JSON representation.
     */
    private createRawJsonExample(typeRef: ExampleTypeReference): unknown {
        const { shape, jsonExample } = typeRef;

        return shape._visit({
            primitive: (value) => {
                return value._visit({
                    integer: (v) => v,
                    double: (v) => v,
                    string: (v) => v.original,
                    boolean: (v) => v,
                    long: (v) => v,
                    uint: (v) => v,
                    uint64: (v) => v,
                    float: (v) => v,
                    base64: (v) => v,
                    bigInteger: (v) => v,
                    datetime: (v) => v.raw,
                    date: (v) => v,
                    uuid: (v) => v,
                    _other: () => jsonExample
                });
            },
            container: (value) => {
                return value._visit({
                    list: (v) => v.list.map((item) => this.createRawJsonExample(item)),
                    map: (v) => {
                        const result: Record<string, unknown> = {};
                        v.map.forEach((item) => {
                            result[item.key.jsonExample as string] = this.createRawJsonExample(item.value);
                        });
                        return result;
                    },
                    nullable: (v) => (v.nullable ? this.createRawJsonExample(v.nullable) : null),
                    optional: (v) => (v.optional ? this.createRawJsonExample(v.optional) : undefined),
                    set: (v) => v.set.map((item) => this.createRawJsonExample(item)),
                    literal: (v) => {
                        return v.literal._visit({
                            integer: (val) => val,
                            long: (val) => val,
                            uint: (val) => val,
                            uint64: (val) => val,
                            float: (val) => val,
                            double: (val) => val,
                            boolean: (val) => val,
                            string: (val) => val.original,
                            date: (val) => val,
                            datetime: (val) => val.raw,
                            uuid: (val) => val,
                            base64: (val) => val,
                            bigInteger: (val) => val,
                            _other: () => jsonExample
                        });
                    },
                    _other: () => jsonExample
                });
            },
            named: (value) => {
                return value.shape._visit({
                    alias: (v) => this.createRawJsonExample(v.value),
                    enum: (v) => v.value.wireValue,
                    object: (v) => {
                        const result: Record<string, unknown> = {};
                        v.properties.forEach((property) => {
                            result[property.name.wireValue] = this.createRawJsonExample(property.value);
                        });
                        return result;
                    },
                    union: () => jsonExample,
                    undiscriminatedUnion: (v) => this.createRawJsonExample(v.singleUnionType),
                    _other: () => jsonExample
                });
            },
            unknown: () => jsonExample,
            _other: () => jsonExample
        });
    }
}

/**
 * Represents test data extracted from an IR example for wire testing.
 */
export interface WireTestExample {
    id: string;
    name?: string;
    request: {
        body?: unknown;
        headers: Record<string, string>;
        queryParams: Record<string, string>;
        pathParams: Record<string, string>;
    };
    response: {
        statusCode: number;
        body?: unknown;
    };
}
