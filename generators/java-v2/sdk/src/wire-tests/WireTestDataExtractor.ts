import {
    ExampleEndpointCall,
    ExampleRequestBody,
    ExampleResponse,
    ExampleTypeReference,
    HttpEndpoint
} from "@fern-fern/ir-sdk/api";
import { SdkGeneratorContext } from "../SdkGeneratorContext";

/**
 * Extracts test data directly from the static IR for wire test validation.
 * This class is responsible for extracting request and response data from examples,
 * separate from the code snippet generation. It is used to generate test data for wire tests.
 */
export class WireTestDataExtractor {
    constructor(private readonly context: SdkGeneratorContext) {}

    public getTestExamples(endpoint: HttpEndpoint): WireTestExample[] {
        const examples: WireTestExample[] = [];

        // Process user-specified examples
        for (const userExample of endpoint.userSpecifiedExamples) {
            if (userExample.example) {
                const extracted = this.extractTestExample(userExample.example, endpoint);
                if (extracted) {
                    examples.push(extracted);
                }
            }
        }

        if (examples.length === 0) {
            for (const autoExample of endpoint.autogeneratedExamples) {
                if (autoExample.example) {
                    const extracted = this.extractTestExample(autoExample.example, endpoint);
                    if (extracted) {
                        examples.push(extracted);
                    }
                }
            }
        }

        return examples;
    }

    private extractTestExample(example: ExampleEndpointCall, endpoint: HttpEndpoint): WireTestExample | undefined {
        return {
            id: example.id || `${endpoint.id}-example`,
            name: example.name?.originalName,
            request: {
                body: this.extractRequestBody(example.request),
                headers: this.extractHeaders(example),
                queryParams: this.extractQueryParams(example),
                pathParams: this.extractPathParams(example)
            },
            response: {
                statusCode: this.getResponseStatusCode(example.response),
                body: this.extractResponseBody(example.response)
            }
        };
    }

    private extractRequestBody(request: ExampleRequestBody | undefined): unknown | undefined {
        if (!request) {
            return undefined;
        }

        if ("jsonExample" in request && request.jsonExample !== undefined) {
            return request.jsonExample;
        }

        // Fallback for inlined request bodies that may not have a direct jsonExample
        return request._visit({
            inlinedRequestBody: (value) => {
                const result: Record<string, unknown> = {};
                value.properties.forEach((p) => {
                    result[p.name.wireValue] = this.createRawJsonExample(p.value);
                });
                return result;
            },
            reference: (value) => {
                return this.createRawJsonExample(value);
            },
            _other: () => {
                return undefined;
            }
        });
    }

    private extractResponseBody(response: ExampleResponse | undefined): unknown | undefined {
        if (!response) {
            return undefined;
        }

        return response._visit({
            ok: (value) => {
                return value._visit({
                    body: (body) => {
                        if (!body) {
                            return undefined;
                        }
                        return this.createRawJsonExample(body);
                    },
                    stream: () => undefined,
                    sse: () => undefined,
                    _other: () => undefined
                });
            },
            error: (value) => {
                if (!value.body) {
                    return undefined;
                }
                return this.createRawJsonExample(value.body);
            },
            _other: () => undefined
        });
    }

    private getResponseStatusCode(response: ExampleResponse | undefined): number {
        if (!response) {
            return 200;
        }

        return response._visit({
            ok: () => 200,
            error: (exampleError) => {
                const error = this.context.ir.errors[exampleError.error.errorId];
                return error?.statusCode ?? 500;
            },
            _other: () => 200
        });
    }

    private extractHeaders(example: ExampleEndpointCall): Record<string, string> {
        const headers: Record<string, string> = {};

        [...(example.serviceHeaders ?? []), ...(example.endpointHeaders ?? [])].forEach((header) => {
            headers[header.name.wireValue] = String(header.value.jsonExample);
        });

        return headers;
    }

    private extractQueryParams(example: ExampleEndpointCall): Record<string, string> {
        const params: Record<string, string> = {};

        (example.queryParameters ?? []).forEach((param) => {
            params[param.name.wireValue] = String(param.value.jsonExample);
        });

        return params;
    }

    private extractPathParams(example: ExampleEndpointCall): Record<string, string> {
        const params: Record<string, string> = {};

        [
            ...(example.rootPathParameters ?? []),
            ...(example.servicePathParameters ?? []),
            ...(example.endpointPathParameters ?? [])
        ].forEach((param) => {
            params[param.name.originalName] = String(param.value.jsonExample);
        });

        return params;
    }

    private createRawJsonExample(typeRef: ExampleTypeReference): unknown {
        // Simply use jsonExample directly for all types
        return typeRef.jsonExample;
    }
}

export interface WireTestExample {
    id: string;
    name?: string;
    request: {
        body?: unknown;
        headers: Record<string, string>;
        queryParams: Record<string, string>;
        pathParams: Record<string, string>;
    };
    response: {
        statusCode: number;
        body?: unknown;
    };
}
