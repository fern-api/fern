import { DynamicSnippetsGenerator } from "@fern-api/java-dynamic-snippets";

import { ExampleEndpointCall, HttpEndpoint } from "@fern-fern/ir-sdk/api";

import { SdkGeneratorContext } from "../SdkGeneratorContext";
import { convertDynamicEndpointSnippetRequest } from "../utils/convertEndpointSnippetRequest";
import { convertIr } from "../utils/convertIr";

export interface EndpointSnippets {
    autogenerated: SingleEndpointSnippet[];
    userSpecified: SingleEndpointSnippet[];
}

export interface SingleEndpointSnippet {
    exampleIdentifier: string | undefined;
    endpointCall: string;
}

export class EndpointSnippetsGenerator {
    public static CLIENT_VARIABLE_NAME = "client";

    private readonly context: SdkGeneratorContext;
    private readonly snippetsCache: Map<string, EndpointSnippets> = new Map();

    constructor({ context }: { context: SdkGeneratorContext }) {
        this.context = context;
    }

    public async populateSnippetsCache(): Promise<void> {
        const endpointSnippetsById = new Map<string, EndpointSnippets>();
        const dynamicIr = this.context.ir.dynamic;

        if (!dynamicIr) {
            this.context.logger.warn("Cannot populate snippets cache without dynamic IR");
            return;
        }

        const convertedIr = convertIr(dynamicIr);
        const dynamicSnippetsGenerator = new DynamicSnippetsGenerator({
            ir: convertedIr,
            config: this.context.config
        });

        // Process all endpoints and their examples
        for (const [endpointId, dynamicEndpoint] of Object.entries(dynamicIr.endpoints)) {
            const irEndpoint = this.getIrEndpointById(endpointId);
            if (!irEndpoint) {
                continue;
            }

            const allExamples = [
                // Auto-generated examples
                ...irEndpoint.autogeneratedExamples.map(({ example }) => ({
                    example,
                    isUserSpecified: false
                })),
                // User-specified examples
                ...irEndpoint.userSpecifiedExamples
                    .map(({ example }) => example)
                    .filter((example): example is ExampleEndpointCall => example != null)
                    .map((example) => ({
                        example,
                        isUserSpecified: true
                    }))
            ];

            if (allExamples.length === 0) {
                continue;
            }

            const snippets = await Promise.all(
                allExamples.map(async ({ example, isUserSpecified }) => {
                    try {
                        const snippet = await this.generateSingleEndpointSnippet({
                            endpoint: irEndpoint,
                            example,
                            dynamicSnippetsGenerator
                        });
                        return { snippet, isUserSpecified };
                    } catch (error) {
                        this.context.logger.warn(`Failed to generate snippet for endpoint ${endpointId}: ${error}`);
                        return { snippet: null, isUserSpecified };
                    }
                })
            );

            const autogenerated = snippets
                .filter(({ snippet, isUserSpecified }) => snippet != null && !isUserSpecified)
                .map(({ snippet }) => snippet as SingleEndpointSnippet);

            const userSpecified = snippets
                .filter(({ snippet, isUserSpecified }) => snippet != null && isUserSpecified)
                .map(({ snippet }) => snippet as SingleEndpointSnippet);

            if (autogenerated.length > 0 || userSpecified.length > 0) {
                endpointSnippetsById.set(endpointId, { autogenerated, userSpecified });
            }
        }

        // Store in cache
        endpointSnippetsById.forEach((value, key) => {
            this.snippetsCache.set(key, value);
        });
    }

    public getSnippetsForEndpoint(endpointId: string): EndpointSnippets | undefined {
        return this.snippetsCache.get(endpointId);
    }

    public getSingleEndpointSnippet({
        endpoint,
        example
    }: {
        endpoint: HttpEndpoint;
        example: ExampleEndpointCall;
    }): SingleEndpointSnippet | undefined {
        const snippets = this.getSnippetsForEndpoint(endpoint.id);
        if (snippets) {
            const exampleName = example.name?.originalName;
            const snippet =
                snippets.userSpecified.find((s) => s.exampleIdentifier === exampleName) ??
                snippets.autogenerated.find((s) => s.exampleIdentifier === exampleName);
            if (snippet) {
                return snippet;
            }
        }
        return undefined;
    }

    private async generateSingleEndpointSnippet({
        endpoint,
        example,
        dynamicSnippetsGenerator
    }: {
        endpoint: HttpEndpoint;
        example: ExampleEndpointCall;
        dynamicSnippetsGenerator: DynamicSnippetsGenerator;
    }): Promise<SingleEndpointSnippet | null> {
        try {
            const snippetRequest = convertDynamicEndpointSnippetRequest(example);
            const generatedSnippet = await dynamicSnippetsGenerator.generate(snippetRequest);

            return {
                exampleIdentifier: example.name?.originalName,
                endpointCall: generatedSnippet.snippet
            };
        } catch (error) {
            this.context.logger.warn(`Failed to generate snippet for endpoint ${endpoint.id}: ${error}`);
            return null;
        }
    }

    private getIrEndpointById(endpointId: string): HttpEndpoint | undefined {
        // Search through all services to find the endpoint
        for (const service of Object.values(this.context.ir.services)) {
            const endpoint = service.endpoints.find((ep) => ep.id === endpointId);
            if (endpoint) {
                return endpoint;
            }
        }
        return undefined;
    }
}
