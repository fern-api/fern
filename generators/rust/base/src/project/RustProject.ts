import { AbsoluteFilePath, RelativeFilePath, join } from "@fern-api/fs-utils";
import { AbstractGeneratorContext, File } from "@fern-api/base-generator";
import { mkdir, writeFile } from "fs/promises";
import path from "path";

export interface RustProjectConfig {
    context: AbstractGeneratorContext;
    packageName: string;
    packageVersion: string;
}

export class RustProject {
    private context: AbstractGeneratorContext;
    private packageName: string;
    private packageVersion: string;
    private sourceFiles: Map<RelativeFilePath, string> = new Map();

    constructor(config: RustProjectConfig) {
        this.context = config.context;
        this.packageName = config.packageName;
        this.packageVersion = config.packageVersion;
    }

    public addSourceFile(filepath: RelativeFilePath, contents: string): void {
        this.sourceFiles.set(filepath, contents);
    }

    public async persist(): Promise<void> {
        // Generate Cargo.toml
        await this.writeCargoToml();

        // Generate src files
        for (const [filepath, contents] of this.sourceFiles) {
            const absoluteFilepath = join(
                AbsoluteFilePath.of(this.context.config.output.path),
                RelativeFilePath.of(filepath)
            );
            await mkdir(path.dirname(absoluteFilepath), { recursive: true });
            await writeFile(absoluteFilepath, contents);
        }

        // Generate .gitignore
        await this.writeGitignore();

        // Generate rustfmt.toml
        await this.writeRustfmtConfig();
    }

    private async writeCargoToml(): Promise<void> {
        const cargoToml = this.generateCargoToml();
        const filepath = join(
            AbsoluteFilePath.of(this.context.config.output.path),
            RelativeFilePath.of("Cargo.toml")
        );
        await writeFile(filepath, cargoToml);
    }

    private generateCargoToml(): string {
        const lines: string[] = [
            `[package]`,
            `name = "${this.packageName}"`,
            `version = "${this.packageVersion}"`,
            `edition = "2021"`,
            ``,
            `[dependencies]`,
            `serde = { version = "1.0", features = ["derive"] }`,
            `serde_json = "1.0"`,
            `reqwest = { version = "0.11", features = ["json"] }`,
            `tokio = { version = "1.0", features = ["full"] }`,
            `thiserror = "1.0"`,
            ``,
            `[dev-dependencies]`,
            `tokio-test = "0.4"`
        ];

        return lines.join("\n") + "\n";
    }

    private async writeGitignore(): Promise<void> {
        const gitignore = [
            "/target",
            "**/*.rs.bk",
            "Cargo.lock",
            ".DS_Store",
            "*.swp"
        ].join("\n") + "\n";

        const filepath = join(
            AbsoluteFilePath.of(this.context.config.output.path),
            RelativeFilePath.of(".gitignore")
        );
        await writeFile(filepath, gitignore);
    }

    private async writeRustfmtConfig(): Promise<void> {
        const rustfmtConfig = `# Generated by Fern
edition = "2021"
max_width = 100
use_small_heuristics = "Default"
imports_granularity = "Crate"
group_imports = "StdExternalCrate"
format_code_in_doc_comments = true
`;

        const filepath = join(
            AbsoluteFilePath.of(this.context.config.output.path),
            RelativeFilePath.of("rustfmt.toml")
        );
        await writeFile(filepath, rustfmtConfig);
    }
} 