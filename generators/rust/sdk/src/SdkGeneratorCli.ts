import { GeneratorNotificationService } from "@fern-api/base-generator";
import { RelativeFilePath } from "@fern-api/fs-utils";
import { AbstractRustGeneratorCli, RustFile } from "@fern-api/rust-base";
import { FernGeneratorExec } from "@fern-fern/generator-exec-sdk";
import { IntermediateRepresentation } from "@fern-fern/ir-sdk/api";
import { SdkCustomConfigSchema } from "./SdkCustomConfig";
import { SdkGeneratorContext } from "./SdkGeneratorContext";
import { ErrorGenerator } from "./error/ErrorGenerator";
import { generateModels } from "@fern-api/rust-model";
import { RootClientGenerator } from "./client/RootClientGenerator";
import { SubClientGenerator } from "./client/SubClientGenerator";

export class SdkGeneratorCli extends AbstractRustGeneratorCli<SdkCustomConfigSchema, SdkGeneratorContext> {
    protected constructContext({
        ir,
        customConfig,
        generatorConfig,
        generatorNotificationService
    }: {
        ir: IntermediateRepresentation;
        customConfig: SdkCustomConfigSchema;
        generatorConfig: FernGeneratorExec.GeneratorConfig;
        generatorNotificationService: GeneratorNotificationService;
    }): SdkGeneratorContext {
        return new SdkGeneratorContext(ir, generatorConfig, customConfig, generatorNotificationService);
    }

    protected parseCustomConfigOrThrow(customConfig: unknown): SdkCustomConfigSchema {
        const parsed = customConfig != null ? SdkCustomConfigSchema.parse(customConfig) : undefined;
        if (parsed != null) {
            return parsed;
        }
        return SdkCustomConfigSchema.parse({});
    }

    protected publishPackage(context: SdkGeneratorContext): Promise<void> {
        return this.generate(context);
    }

    protected async writeForGithub(context: SdkGeneratorContext): Promise<void> {
        await this.generate(context);
        if (context.ir.selfHosted) {
            await this.generateGitHub({ context });
        }
    }

    protected async writeForDownload(context: SdkGeneratorContext): Promise<void> {
        return await this.generate(context);
    }

    protected async generate(context: SdkGeneratorContext): Promise<void> {
        const files = this.generateProjectFiles(context);
        context.project.addSourceFiles(...files);
        await context.project.persist();
    }

    private generateProjectFiles(context: SdkGeneratorContext): RustFile[] {
        const files: RustFile[] = [];

        // Core files
        files.push(this.generateLibFile(context));
        files.push(this.generateErrorFile(context));

        // Client hierarchy - simple like Swift!
        files.push(new RootClientGenerator(context).generate());

        // Sub-clients for each service
        Object.values(context.ir.subpackages).forEach(subpackage => {
            if (subpackage.service != null || subpackage.hasEndpointsInTree) {
                files.push(new SubClientGenerator(context, subpackage).generate());
            }
        });

        // Generate types if they exist
        if (Object.keys(context.ir.types).length > 0) {
            files.push(...this.generateTypeFiles(context));
        }

        return files;
    }

    private generateLibFile(context: SdkGeneratorContext): RustFile {
        const hasTypes = Object.keys(context.ir.types).length > 0;
        const clientName = context.getClientName();

        const content = `//! ${context.ir.apiName.pascalCase.safeName} SDK
//!
//! Generated by Fern

pub mod client;
pub mod error;
${hasTypes ? "pub mod types;" : ""}

// Re-export the main client and builder  
pub use client::{${clientName}, ApiClientBuilder, ClientConfig, HttpClient, RequestOptions};
pub use error::ApiError;
${hasTypes ? "pub use types::*;" : ""}
`;

        return new RustFile({
            filename: "lib.rs",
            directory: RelativeFilePath.of("src"),
            fileContents: content
        });
    }



    private generateErrorFile(context: SdkGeneratorContext): RustFile {
        const errorGenerator = new ErrorGenerator(context);
        return new RustFile({
            filename: "error.rs",
            directory: RelativeFilePath.of("src"),
            fileContents: errorGenerator.generateErrorRs()
        });
    }

    private async generateGitHub({ context }: { context: SdkGeneratorContext }): Promise<void> {
        await context.generatorAgent.pushToGitHub({ context });
    }

    private generateTypeFiles(context: SdkGeneratorContext): RustFile[] {
        const files: RustFile[] = [];

        // Generate model files
        const modelFiles = generateModels({ context: context.toModelGeneratorContext() });
        const typeFiles = modelFiles.map((file: any) =>
            new RustFile({
                filename: file.filename,
                directory: RelativeFilePath.of("src/types"),
                fileContents: typeof file.fileContents === "string" ? file.fileContents : file.fileContents.toString()
            })
        );
        files.push(...typeFiles);

        // Generate types module file
        let modContent = "// Generated types module\n\n";
        for (const [_typeId, typeDeclaration] of Object.entries(context.ir.types)) {
            const moduleName = typeDeclaration.name.name.snakeCase.unsafeName;
            modContent += `pub mod ${moduleName};\n`;
            modContent += `pub use ${moduleName}::*;\n`;
        }

        files.push(new RustFile({
            filename: "mod.rs",
            directory: RelativeFilePath.of("src/types"),
            fileContents: modContent
        }));

        return files;
    }


}
