// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`snippets (default) > examples > 'GET /metadata (allow-multiple)' 1`] = `
"require "acme"

client = acme::Client.new(token: '<YOUR_API_KEY>');

client.service.get_metadata(
    shallow: false,
    tag: ['development', 'public'],
    xAPIVersion: '0.0.1'
);
"
`;

exports[`snippets (default) > examples > 'GET /metadata (simple)' 1`] = `
"[
  {
    "severity": "CRITICAL",
    "path": [
      "QueryParameters"
    ],
    "message": "Expected array but got: string"
  }
]"
`;

exports[`snippets (default) > examples > 'POST /big-entity (simple)' 1`] = `
"require "acme"

client = acme::Client.new(token: '<YOUR_API_KEY>');

client.service.create_big_entity();
"
`;

exports[`snippets (default) > examples > 'POST /movie (invalid request body)' 1`] = `
"require "acme"

client = acme::Client.new(token: '<YOUR_API_KEY>');

client.service.create_movie();
"
`;

exports[`snippets (default) > examples > 'POST /movie (simple)' 1`] = `
"require "acme"

client = acme::Client.new(token: '<YOUR_API_KEY>');

client.service.create_movie();
"
`;

exports[`snippets (default) > exhaustive > 'GET /object/get-and-return-with-optio…' 1`] = `
"require "acme"

client = acme::Client.new(token: '<YOUR_API_KEY>');

client.endpoints.object.get_and_return_with_optional_field();
"
`;

exports[`snippets (default) > exhaustive > 'POST /container/list-of-objects (inva…' 1`] = `
"require "acme"

client = acme::Client.new(token: '<YOUR_API_KEY>');

client.endpoints.container.get_and_return_list_of_objects();
"
`;

exports[`snippets (default) > exhaustive > 'POST /container/list-of-objects (simp…' 1`] = `
"require "acme"

client = acme::Client.new(token: '<YOUR_API_KEY>');

client.endpoints.container.get_and_return_list_of_objects();
"
`;

exports[`snippets (default) > exhaustive > 'POST /container/list-of-primitives (s…' 1`] = `
"require "acme"

client = acme::Client.new(token: '<YOUR_API_KEY>');

client.endpoints.container.get_and_return_list_of_primitives();
"
`;

exports[`snippets (default) > file-upload > 'POST /' 1`] = `
"require "acme"

client = acme::Client.new();

client.service.post();
"
`;

exports[`snippets (default) > file-upload > 'POST /just-file' 1`] = `
"require "acme"

client = acme::Client.new();

client.service.just_file();
"
`;

exports[`snippets (default) > file-upload > 'POST /just-file-with-query-params' 1`] = `
"require "acme"

client = acme::Client.new();

client.service.just_file_with_query_params(
    integer: 42,
    maybeString: 'exists'
);
"
`;

exports[`snippets (default) > imdb > 'GET /movies/{movieId} (simple)' 1`] = `
"require "acme"

client = acme::Client.new(token: '<YOUR_API_KEY>');

client.imdb.get_movie();
"
`;

exports[`snippets (default) > imdb > 'POST /movies/create-movie (simple)' 1`] = `
"require "acme"

client = acme::Client.new(token: '<YOUR_API_KEY>');

client.imdb.create_movie();
"
`;

exports[`snippets (default) > multi-url-environment > 'Custom environment' 1`] = `
"[
  {
    "severity": "CRITICAL",
    "path": [],
    "message": "Multi-environment values are not supported in Ruby snippets yet"
  }
]"
`;

exports[`snippets (default) > multi-url-environment > 'Invalid multi url environment' 1`] = `
"[
  {
    "severity": "CRITICAL",
    "path": [],
    "message": "Multi-environment values are not supported in Ruby snippets yet"
  }
]"
`;

exports[`snippets (default) > multi-url-environment > 'Production environment' 1`] = `
"require "acme"

client = acme::Client.new(
    token: '<YOUR_API_KEY>',
    environment: acme::Environment::PRODUCTION
);

client.s3.get_presigned_url(s3Key: 'xyz');
"
`;

exports[`snippets (default) > multi-url-environment > 'Staging environment' 1`] = `
"require "acme"

client = acme::Client.new(
    token: '<YOUR_API_KEY>',
    environment: acme::Environment::STAGING
);

client.s3.get_presigned_url(s3Key: 'xyz');
"
`;

exports[`snippets (default) > multi-url-environment > 'Unrecognized environment' 1`] = `
"[
  {
    "severity": "CRITICAL",
    "path": [],
    "message": "Environment ID Unrecognized not found"
  }
]"
`;

exports[`snippets (default) > nullable > 'Body properties' 1`] = `
"require "acme"

client = acme::Client.new(base_url: 'https://api.example.com');

client.nullable.create_user(
    username: 'john.doe',
    tags: ['admin'],
    metadata: ,
    avatar: nil
);
"
`;

exports[`snippets (default) > nullable > 'Invalid null value' 1`] = `
"[
  {
    "severity": "CRITICAL",
    "path": [],
    "message": "Expected non-null value, but got null"
  }
]"
`;

exports[`snippets (default) > nullable > 'Query parameters' 1`] = `
"require "acme"

client = acme::Client.new(base_url: 'https://api.example.com');

client.nullable.get_users(
    usernames: ['john.doe', 'jane.doe'],
    tags: [nil],
    extra: nil
);
"
`;

exports[`snippets (default) > single-url-environment-default > 'Production environment' 1`] = `
"require "acme"

client = acme::Client.new(
    token: '<YOUR_API_KEY>',
    environment: acme::Environment::PRODUCTION
);

client.dummy.get_dummy();
"
`;

exports[`snippets (default) > single-url-environment-default > 'Staging environment' 1`] = `
"require "acme"

client = acme::Client.new(
    token: '<YOUR_API_KEY>',
    environment: acme::Environment::STAGING
);

client.dummy.get_dummy();
"
`;

exports[`snippets (default) > single-url-environment-default > 'custom baseURL' 1`] = `
"require "acme"

client = acme::Client.new(
    token: '<YOUR_API_KEY>',
    base_url: 'http://localhost:8080'
);

client.dummy.get_dummy();
"
`;

exports[`snippets (default) > single-url-environment-default > 'invalid baseURL and environment' 1`] = `
"[
  {
    "severity": "CRITICAL",
    "path": [],
    "message": "Cannot specify both baseUrl and environment options"
  }
]"
`;

exports[`snippets (default) > single-url-environment-default > 'invalid environment' 1`] = `
"[
  {
    "severity": "CRITICAL",
    "path": [],
    "message": "Environment ID Unrecognized not found"
  }
]"
`;
