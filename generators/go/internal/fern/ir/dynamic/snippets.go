// Code generated by Fern. DO NOT EDIT.

package dynamic

import (
	json "encoding/json"
	fmt "fmt"

	internal "github.com/fern-api/fern-go/internal/fern/ir/internal"
)

// The user-facing response type containing the generated snippet.
//
// If there are any errors, the snippet will still sometimes represent a
// partial and/or valid result. This is useful for rendering a snippet alongside
// error messages the user can use to diagnose and resolve the problem.
type EndpointSnippetResponse struct {
	Snippet string   `json:"snippet" url:"snippet"`
	Errors  []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
}

func (e *EndpointSnippetResponse) GetSnippet() string {
	if e == nil {
		return ""
	}
	return e.Snippet
}

func (e *EndpointSnippetResponse) GetErrors() []*Error {
	if e == nil {
		return nil
	}
	return e.Errors
}

func (e *EndpointSnippetResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EndpointSnippetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EndpointSnippetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EndpointSnippetResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	return nil
}

func (e *EndpointSnippetResponse) String() string {
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type Error struct {
	Severity ErrorSeverity `json:"severity" url:"severity"`
	Message  string        `json:"message" url:"message"`

	extraProperties map[string]interface{}
}

func (e *Error) GetSeverity() ErrorSeverity {
	if e == nil {
		return ""
	}
	return e.Severity
}

func (e *Error) GetMessage() string {
	if e == nil {
		return ""
	}
	return e.Message
}

func (e *Error) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *Error) UnmarshalJSON(data []byte) error {
	type unmarshaler Error
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = Error(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	return nil
}

func (e *Error) String() string {
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ErrorSeverity string

const (
	ErrorSeverityCritical ErrorSeverity = "CRITICAL"
	ErrorSeverityWarning  ErrorSeverity = "WARNING"
)

func NewErrorSeverityFromString(s string) (ErrorSeverity, error) {
	switch s {
	case "CRITICAL":
		return ErrorSeverityCritical, nil
	case "WARNING":
		return ErrorSeverityWarning, nil
	}
	var t ErrorSeverity
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e ErrorSeverity) Ptr() *ErrorSeverity {
	return &e
}
