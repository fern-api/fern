// Code generated by Fern. DO NOT EDIT.

package dynamic

import (
	json "encoding/json"
	fmt "fmt"
	big "math/big"

	internal "github.com/fern-api/fern-go/internal/fern/ir/internal"
)

// The user-facing response type containing the generated snippet.
//
// If there are any errors, the snippet will still sometimes represent a
// partial and/or valid result. This is useful for rendering a snippet alongside
// error messages the user can use to diagnose and resolve the problem.
var (
	endpointSnippetResponseFieldSnippet = big.NewInt(1 << 0)
	endpointSnippetResponseFieldErrors  = big.NewInt(1 << 1)
)

type EndpointSnippetResponse struct {
	Snippet string   `json:"snippet" url:"snippet"`
	Errors  []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (e *EndpointSnippetResponse) GetSnippet() string {
	if e == nil {
		return ""
	}
	return e.Snippet
}

func (e *EndpointSnippetResponse) GetErrors() []*Error {
	if e == nil {
		return nil
	}
	return e.Errors
}

func (e *EndpointSnippetResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EndpointSnippetResponse) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetSnippet sets the Snippet field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EndpointSnippetResponse) SetSnippet(snippet string) {
	e.Snippet = snippet
	e.require(endpointSnippetResponseFieldSnippet)
}

// SetErrors sets the Errors field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EndpointSnippetResponse) SetErrors(errors []*Error) {
	e.Errors = errors
	e.require(endpointSnippetResponseFieldErrors)
}

func (e *EndpointSnippetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EndpointSnippetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EndpointSnippetResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	return nil
}

func (e *EndpointSnippetResponse) MarshalJSON() ([]byte, error) {
	type embed EndpointSnippetResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *EndpointSnippetResponse) String() string {
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

var (
	errorFieldSeverity = big.NewInt(1 << 0)
	errorFieldMessage  = big.NewInt(1 << 1)
)

type Error struct {
	Severity ErrorSeverity `json:"severity" url:"severity"`
	Message  string        `json:"message" url:"message"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (e *Error) GetSeverity() ErrorSeverity {
	if e == nil {
		return ""
	}
	return e.Severity
}

func (e *Error) GetMessage() string {
	if e == nil {
		return ""
	}
	return e.Message
}

func (e *Error) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *Error) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetSeverity sets the Severity field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *Error) SetSeverity(severity ErrorSeverity) {
	e.Severity = severity
	e.require(errorFieldSeverity)
}

// SetMessage sets the Message field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *Error) SetMessage(message string) {
	e.Message = message
	e.require(errorFieldMessage)
}

func (e *Error) UnmarshalJSON(data []byte) error {
	type unmarshaler Error
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = Error(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	return nil
}

func (e *Error) MarshalJSON() ([]byte, error) {
	type embed Error
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *Error) String() string {
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ErrorSeverity string

const (
	ErrorSeverityCritical ErrorSeverity = "CRITICAL"
	ErrorSeverityWarning  ErrorSeverity = "WARNING"
)

func NewErrorSeverityFromString(s string) (ErrorSeverity, error) {
	switch s {
	case "CRITICAL":
		return ErrorSeverityCritical, nil
	case "WARNING":
		return ErrorSeverityWarning, nil
	}
	var t ErrorSeverity
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e ErrorSeverity) Ptr() *ErrorSeverity {
	return &e
}
