// Code generated by Fern. DO NOT EDIT.

package ir

import (
	json "encoding/json"
	fmt "fmt"
	big "math/big"

	common "github.com/fern-api/fern-go/internal/fern/ir/common"
	internal "github.com/fern-api/fern-go/internal/fern/ir/internal"
)

var (
	variableDeclarationFieldDocs = big.NewInt(1 << 0)
	variableDeclarationFieldId   = big.NewInt(1 << 1)
	variableDeclarationFieldName = big.NewInt(1 << 2)
	variableDeclarationFieldType = big.NewInt(1 << 3)
)

type VariableDeclaration struct {
	Docs *string        `json:"docs,omitempty" url:"docs,omitempty"`
	Id   VariableId     `json:"id" url:"id"`
	Name *common.Name   `json:"name" url:"name"`
	Type *TypeReference `json:"type" url:"type"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (v *VariableDeclaration) GetDocs() *string {
	if v == nil {
		return nil
	}
	return v.Docs
}

func (v *VariableDeclaration) GetId() VariableId {
	if v == nil {
		return ""
	}
	return v.Id
}

func (v *VariableDeclaration) GetName() *common.Name {
	if v == nil {
		return nil
	}
	return v.Name
}

func (v *VariableDeclaration) GetType() *TypeReference {
	if v == nil {
		return nil
	}
	return v.Type
}

func (v *VariableDeclaration) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VariableDeclaration) require(field *big.Int) {
	if v.explicitFields == nil {
		v.explicitFields = big.NewInt(0)
	}
	v.explicitFields.Or(v.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *VariableDeclaration) SetDocs(docs *string) {
	v.Docs = docs
	v.require(variableDeclarationFieldDocs)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *VariableDeclaration) SetId(id VariableId) {
	v.Id = id
	v.require(variableDeclarationFieldId)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *VariableDeclaration) SetName(name *common.Name) {
	v.Name = name
	v.require(variableDeclarationFieldName)
}

// SetType sets the Type field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *VariableDeclaration) SetType(type_ *TypeReference) {
	v.Type = type_
	v.require(variableDeclarationFieldType)
}

func (v *VariableDeclaration) UnmarshalJSON(data []byte) error {
	type unmarshaler VariableDeclaration
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VariableDeclaration(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	return nil
}

func (v *VariableDeclaration) MarshalJSON() ([]byte, error) {
	type embed VariableDeclaration
	var marshaler = struct {
		embed
	}{
		embed: embed(*v),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, v.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (v *VariableDeclaration) String() string {
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VariableId = string
