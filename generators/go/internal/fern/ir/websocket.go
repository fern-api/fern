// Code generated by Fern. DO NOT EDIT.

package ir

import (
	json "encoding/json"
	fmt "fmt"
	big "math/big"

	common "github.com/fern-api/fern-go/internal/fern/ir/common"
	internal "github.com/fern-api/fern-go/internal/fern/ir/internal"
)

var (
	exampleWebSocketMessageFieldType = big.NewInt(1 << 0)
	exampleWebSocketMessageFieldBody = big.NewInt(1 << 1)
)

type ExampleWebSocketMessage struct {
	Type WebSocketMessageId           `json:"type" url:"type"`
	Body *ExampleWebSocketMessageBody `json:"body" url:"body"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (e *ExampleWebSocketMessage) GetType() WebSocketMessageId {
	if e == nil {
		return ""
	}
	return e.Type
}

func (e *ExampleWebSocketMessage) GetBody() *ExampleWebSocketMessageBody {
	if e == nil {
		return nil
	}
	return e.Body
}

func (e *ExampleWebSocketMessage) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExampleWebSocketMessage) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetType sets the Type field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleWebSocketMessage) SetType(type_ WebSocketMessageId) {
	e.Type = type_
	e.require(exampleWebSocketMessageFieldType)
}

// SetBody sets the Body field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleWebSocketMessage) SetBody(body *ExampleWebSocketMessageBody) {
	e.Body = body
	e.require(exampleWebSocketMessageFieldBody)
}

func (e *ExampleWebSocketMessage) UnmarshalJSON(data []byte) error {
	type unmarshaler ExampleWebSocketMessage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExampleWebSocketMessage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	return nil
}

func (e *ExampleWebSocketMessage) MarshalJSON() ([]byte, error) {
	type embed ExampleWebSocketMessage
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ExampleWebSocketMessage) String() string {
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExampleWebSocketMessageBody struct {
	Type        string
	InlinedBody *ExampleInlinedRequestBody
	Reference   *ExampleTypeReference
}

func (e *ExampleWebSocketMessageBody) GetType() string {
	if e == nil {
		return ""
	}
	return e.Type
}

func (e *ExampleWebSocketMessageBody) GetInlinedBody() *ExampleInlinedRequestBody {
	if e == nil {
		return nil
	}
	return e.InlinedBody
}

func (e *ExampleWebSocketMessageBody) GetReference() *ExampleTypeReference {
	if e == nil {
		return nil
	}
	return e.Reference
}

func (e *ExampleWebSocketMessageBody) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", e)
	}
	switch unmarshaler.Type {
	case "inlinedBody":
		value := new(ExampleInlinedRequestBody)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.InlinedBody = value
	case "reference":
		value := new(ExampleTypeReference)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Reference = value
	}
	return nil
}

func (e ExampleWebSocketMessageBody) MarshalJSON() ([]byte, error) {
	if err := e.validate(); err != nil {
		return nil, err
	}
	if e.InlinedBody != nil {
		return internal.MarshalJSONWithExtraProperty(e.InlinedBody, "type", "inlinedBody")
	}
	if e.Reference != nil {
		return internal.MarshalJSONWithExtraProperty(e.Reference, "type", "reference")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExampleWebSocketMessageBodyVisitor interface {
	VisitInlinedBody(*ExampleInlinedRequestBody) error
	VisitReference(*ExampleTypeReference) error
}

func (e *ExampleWebSocketMessageBody) Accept(visitor ExampleWebSocketMessageBodyVisitor) error {
	if e.InlinedBody != nil {
		return visitor.VisitInlinedBody(e.InlinedBody)
	}
	if e.Reference != nil {
		return visitor.VisitReference(e.Reference)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}

func (e *ExampleWebSocketMessageBody) validate() error {
	if e == nil {
		return fmt.Errorf("type %T is nil", e)
	}
	var fields []string
	if e.InlinedBody != nil {
		fields = append(fields, "inlinedBody")
	}
	if e.Reference != nil {
		fields = append(fields, "reference")
	}
	if len(fields) == 0 {
		if e.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", e, e.Type)
		}
		return fmt.Errorf("type %T is empty", e)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", e, fields)
	}
	if e.Type != "" {
		field := fields[0]
		if e.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				e,
				e.Type,
				e,
			)
		}
	}
	return nil
}

var (
	exampleWebSocketSessionFieldDocs            = big.NewInt(1 << 0)
	exampleWebSocketSessionFieldName            = big.NewInt(1 << 1)
	exampleWebSocketSessionFieldUrl             = big.NewInt(1 << 2)
	exampleWebSocketSessionFieldPathParameters  = big.NewInt(1 << 3)
	exampleWebSocketSessionFieldHeaders         = big.NewInt(1 << 4)
	exampleWebSocketSessionFieldQueryParameters = big.NewInt(1 << 5)
	exampleWebSocketSessionFieldMessages        = big.NewInt(1 << 6)
)

type ExampleWebSocketSession struct {
	Docs            *string                    `json:"docs,omitempty" url:"docs,omitempty"`
	Name            *common.Name               `json:"name,omitempty" url:"name,omitempty"`
	Url             string                     `json:"url" url:"url"`
	PathParameters  []*ExamplePathParameter    `json:"pathParameters" url:"pathParameters"`
	Headers         []*ExampleHeader           `json:"headers" url:"headers"`
	QueryParameters []*ExampleQueryParameter   `json:"queryParameters" url:"queryParameters"`
	Messages        []*ExampleWebSocketMessage `json:"messages" url:"messages"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (e *ExampleWebSocketSession) GetDocs() *string {
	if e == nil {
		return nil
	}
	return e.Docs
}

func (e *ExampleWebSocketSession) GetName() *common.Name {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *ExampleWebSocketSession) GetUrl() string {
	if e == nil {
		return ""
	}
	return e.Url
}

func (e *ExampleWebSocketSession) GetPathParameters() []*ExamplePathParameter {
	if e == nil {
		return nil
	}
	return e.PathParameters
}

func (e *ExampleWebSocketSession) GetHeaders() []*ExampleHeader {
	if e == nil {
		return nil
	}
	return e.Headers
}

func (e *ExampleWebSocketSession) GetQueryParameters() []*ExampleQueryParameter {
	if e == nil {
		return nil
	}
	return e.QueryParameters
}

func (e *ExampleWebSocketSession) GetMessages() []*ExampleWebSocketMessage {
	if e == nil {
		return nil
	}
	return e.Messages
}

func (e *ExampleWebSocketSession) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExampleWebSocketSession) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleWebSocketSession) SetDocs(docs *string) {
	e.Docs = docs
	e.require(exampleWebSocketSessionFieldDocs)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleWebSocketSession) SetName(name *common.Name) {
	e.Name = name
	e.require(exampleWebSocketSessionFieldName)
}

// SetUrl sets the Url field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleWebSocketSession) SetUrl(url string) {
	e.Url = url
	e.require(exampleWebSocketSessionFieldUrl)
}

// SetPathParameters sets the PathParameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleWebSocketSession) SetPathParameters(pathParameters []*ExamplePathParameter) {
	e.PathParameters = pathParameters
	e.require(exampleWebSocketSessionFieldPathParameters)
}

// SetHeaders sets the Headers field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleWebSocketSession) SetHeaders(headers []*ExampleHeader) {
	e.Headers = headers
	e.require(exampleWebSocketSessionFieldHeaders)
}

// SetQueryParameters sets the QueryParameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleWebSocketSession) SetQueryParameters(queryParameters []*ExampleQueryParameter) {
	e.QueryParameters = queryParameters
	e.require(exampleWebSocketSessionFieldQueryParameters)
}

// SetMessages sets the Messages field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleWebSocketSession) SetMessages(messages []*ExampleWebSocketMessage) {
	e.Messages = messages
	e.require(exampleWebSocketSessionFieldMessages)
}

func (e *ExampleWebSocketSession) UnmarshalJSON(data []byte) error {
	type unmarshaler ExampleWebSocketSession
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExampleWebSocketSession(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	return nil
}

func (e *ExampleWebSocketSession) MarshalJSON() ([]byte, error) {
	type embed ExampleWebSocketSession
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ExampleWebSocketSession) String() string {
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

var (
	inlinedWebSocketMessageBodyFieldName       = big.NewInt(1 << 0)
	inlinedWebSocketMessageBodyFieldExtends    = big.NewInt(1 << 1)
	inlinedWebSocketMessageBodyFieldProperties = big.NewInt(1 << 2)
)

type InlinedWebSocketMessageBody struct {
	Name       *common.Name                           `json:"name" url:"name"`
	Extends    []*DeclaredTypeName                    `json:"extends" url:"extends"`
	Properties []*InlinedWebSocketMessageBodyProperty `json:"properties" url:"properties"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (i *InlinedWebSocketMessageBody) GetName() *common.Name {
	if i == nil {
		return nil
	}
	return i.Name
}

func (i *InlinedWebSocketMessageBody) GetExtends() []*DeclaredTypeName {
	if i == nil {
		return nil
	}
	return i.Extends
}

func (i *InlinedWebSocketMessageBody) GetProperties() []*InlinedWebSocketMessageBodyProperty {
	if i == nil {
		return nil
	}
	return i.Properties
}

func (i *InlinedWebSocketMessageBody) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InlinedWebSocketMessageBody) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InlinedWebSocketMessageBody) SetName(name *common.Name) {
	i.Name = name
	i.require(inlinedWebSocketMessageBodyFieldName)
}

// SetExtends sets the Extends field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InlinedWebSocketMessageBody) SetExtends(extends []*DeclaredTypeName) {
	i.Extends = extends
	i.require(inlinedWebSocketMessageBodyFieldExtends)
}

// SetProperties sets the Properties field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InlinedWebSocketMessageBody) SetProperties(properties []*InlinedWebSocketMessageBodyProperty) {
	i.Properties = properties
	i.require(inlinedWebSocketMessageBodyFieldProperties)
}

func (i *InlinedWebSocketMessageBody) UnmarshalJSON(data []byte) error {
	type unmarshaler InlinedWebSocketMessageBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InlinedWebSocketMessageBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	return nil
}

func (i *InlinedWebSocketMessageBody) MarshalJSON() ([]byte, error) {
	type embed InlinedWebSocketMessageBody
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *InlinedWebSocketMessageBody) String() string {
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

var (
	inlinedWebSocketMessageBodyPropertyFieldDocs         = big.NewInt(1 << 0)
	inlinedWebSocketMessageBodyPropertyFieldAvailability = big.NewInt(1 << 1)
	inlinedWebSocketMessageBodyPropertyFieldName         = big.NewInt(1 << 2)
	inlinedWebSocketMessageBodyPropertyFieldValueType    = big.NewInt(1 << 3)
)

type InlinedWebSocketMessageBodyProperty struct {
	Docs         *string                  `json:"docs,omitempty" url:"docs,omitempty"`
	Availability *Availability            `json:"availability,omitempty" url:"availability,omitempty"`
	Name         *common.NameAndWireValue `json:"name" url:"name"`
	ValueType    *TypeReference           `json:"valueType" url:"valueType"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (i *InlinedWebSocketMessageBodyProperty) GetDocs() *string {
	if i == nil {
		return nil
	}
	return i.Docs
}

func (i *InlinedWebSocketMessageBodyProperty) GetAvailability() *Availability {
	if i == nil {
		return nil
	}
	return i.Availability
}

func (i *InlinedWebSocketMessageBodyProperty) GetName() *common.NameAndWireValue {
	if i == nil {
		return nil
	}
	return i.Name
}

func (i *InlinedWebSocketMessageBodyProperty) GetValueType() *TypeReference {
	if i == nil {
		return nil
	}
	return i.ValueType
}

func (i *InlinedWebSocketMessageBodyProperty) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InlinedWebSocketMessageBodyProperty) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InlinedWebSocketMessageBodyProperty) SetDocs(docs *string) {
	i.Docs = docs
	i.require(inlinedWebSocketMessageBodyPropertyFieldDocs)
}

// SetAvailability sets the Availability field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InlinedWebSocketMessageBodyProperty) SetAvailability(availability *Availability) {
	i.Availability = availability
	i.require(inlinedWebSocketMessageBodyPropertyFieldAvailability)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InlinedWebSocketMessageBodyProperty) SetName(name *common.NameAndWireValue) {
	i.Name = name
	i.require(inlinedWebSocketMessageBodyPropertyFieldName)
}

// SetValueType sets the ValueType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InlinedWebSocketMessageBodyProperty) SetValueType(valueType *TypeReference) {
	i.ValueType = valueType
	i.require(inlinedWebSocketMessageBodyPropertyFieldValueType)
}

func (i *InlinedWebSocketMessageBodyProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler InlinedWebSocketMessageBodyProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InlinedWebSocketMessageBodyProperty(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	return nil
}

func (i *InlinedWebSocketMessageBodyProperty) MarshalJSON() ([]byte, error) {
	type embed InlinedWebSocketMessageBodyProperty
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *InlinedWebSocketMessageBodyProperty) String() string {
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

var (
	webSocketChannelFieldDocs            = big.NewInt(1 << 0)
	webSocketChannelFieldAvailability    = big.NewInt(1 << 1)
	webSocketChannelFieldName            = big.NewInt(1 << 2)
	webSocketChannelFieldDisplayName     = big.NewInt(1 << 3)
	webSocketChannelFieldBaseUrl         = big.NewInt(1 << 4)
	webSocketChannelFieldPath            = big.NewInt(1 << 5)
	webSocketChannelFieldAuth            = big.NewInt(1 << 6)
	webSocketChannelFieldHeaders         = big.NewInt(1 << 7)
	webSocketChannelFieldQueryParameters = big.NewInt(1 << 8)
	webSocketChannelFieldPathParameters  = big.NewInt(1 << 9)
	webSocketChannelFieldMessages        = big.NewInt(1 << 10)
	webSocketChannelFieldExamples        = big.NewInt(1 << 11)
	webSocketChannelFieldV2Examples      = big.NewInt(1 << 12)
)

type WebSocketChannel struct {
	Docs            *string                      `json:"docs,omitempty" url:"docs,omitempty"`
	Availability    *Availability                `json:"availability,omitempty" url:"availability,omitempty"`
	Name            WebSocketName                `json:"name" url:"name"`
	DisplayName     *string                      `json:"displayName,omitempty" url:"displayName,omitempty"`
	BaseUrl         *common.EnvironmentBaseUrlId `json:"baseUrl,omitempty" url:"baseUrl,omitempty"`
	Path            *HttpPath                    `json:"path" url:"path"`
	Auth            bool                         `json:"auth" url:"auth"`
	Headers         []*HttpHeader                `json:"headers" url:"headers"`
	QueryParameters []*QueryParameter            `json:"queryParameters" url:"queryParameters"`
	PathParameters  []*PathParameter             `json:"pathParameters" url:"pathParameters"`
	// The messages that can be sent and received on this channel
	Messages   []*WebSocketMessage         `json:"messages" url:"messages"`
	Examples   []*ExampleWebSocketSession  `json:"examples" url:"examples"`
	V2Examples *V2WebSocketSessionExamples `json:"v2Examples,omitempty" url:"v2Examples,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (w *WebSocketChannel) GetDocs() *string {
	if w == nil {
		return nil
	}
	return w.Docs
}

func (w *WebSocketChannel) GetAvailability() *Availability {
	if w == nil {
		return nil
	}
	return w.Availability
}

func (w *WebSocketChannel) GetName() WebSocketName {
	if w == nil {
		return nil
	}
	return w.Name
}

func (w *WebSocketChannel) GetDisplayName() *string {
	if w == nil {
		return nil
	}
	return w.DisplayName
}

func (w *WebSocketChannel) GetBaseUrl() *common.EnvironmentBaseUrlId {
	if w == nil {
		return nil
	}
	return w.BaseUrl
}

func (w *WebSocketChannel) GetPath() *HttpPath {
	if w == nil {
		return nil
	}
	return w.Path
}

func (w *WebSocketChannel) GetAuth() bool {
	if w == nil {
		return false
	}
	return w.Auth
}

func (w *WebSocketChannel) GetHeaders() []*HttpHeader {
	if w == nil {
		return nil
	}
	return w.Headers
}

func (w *WebSocketChannel) GetQueryParameters() []*QueryParameter {
	if w == nil {
		return nil
	}
	return w.QueryParameters
}

func (w *WebSocketChannel) GetPathParameters() []*PathParameter {
	if w == nil {
		return nil
	}
	return w.PathParameters
}

func (w *WebSocketChannel) GetMessages() []*WebSocketMessage {
	if w == nil {
		return nil
	}
	return w.Messages
}

func (w *WebSocketChannel) GetExamples() []*ExampleWebSocketSession {
	if w == nil {
		return nil
	}
	return w.Examples
}

func (w *WebSocketChannel) GetV2Examples() *V2WebSocketSessionExamples {
	if w == nil {
		return nil
	}
	return w.V2Examples
}

func (w *WebSocketChannel) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebSocketChannel) require(field *big.Int) {
	if w.explicitFields == nil {
		w.explicitFields = big.NewInt(0)
	}
	w.explicitFields.Or(w.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebSocketChannel) SetDocs(docs *string) {
	w.Docs = docs
	w.require(webSocketChannelFieldDocs)
}

// SetAvailability sets the Availability field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebSocketChannel) SetAvailability(availability *Availability) {
	w.Availability = availability
	w.require(webSocketChannelFieldAvailability)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebSocketChannel) SetName(name WebSocketName) {
	w.Name = name
	w.require(webSocketChannelFieldName)
}

// SetDisplayName sets the DisplayName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebSocketChannel) SetDisplayName(displayName *string) {
	w.DisplayName = displayName
	w.require(webSocketChannelFieldDisplayName)
}

// SetBaseUrl sets the BaseUrl field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebSocketChannel) SetBaseUrl(baseUrl *common.EnvironmentBaseUrlId) {
	w.BaseUrl = baseUrl
	w.require(webSocketChannelFieldBaseUrl)
}

// SetPath sets the Path field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebSocketChannel) SetPath(path *HttpPath) {
	w.Path = path
	w.require(webSocketChannelFieldPath)
}

// SetAuth sets the Auth field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebSocketChannel) SetAuth(auth bool) {
	w.Auth = auth
	w.require(webSocketChannelFieldAuth)
}

// SetHeaders sets the Headers field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebSocketChannel) SetHeaders(headers []*HttpHeader) {
	w.Headers = headers
	w.require(webSocketChannelFieldHeaders)
}

// SetQueryParameters sets the QueryParameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebSocketChannel) SetQueryParameters(queryParameters []*QueryParameter) {
	w.QueryParameters = queryParameters
	w.require(webSocketChannelFieldQueryParameters)
}

// SetPathParameters sets the PathParameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebSocketChannel) SetPathParameters(pathParameters []*PathParameter) {
	w.PathParameters = pathParameters
	w.require(webSocketChannelFieldPathParameters)
}

// SetMessages sets the Messages field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebSocketChannel) SetMessages(messages []*WebSocketMessage) {
	w.Messages = messages
	w.require(webSocketChannelFieldMessages)
}

// SetExamples sets the Examples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebSocketChannel) SetExamples(examples []*ExampleWebSocketSession) {
	w.Examples = examples
	w.require(webSocketChannelFieldExamples)
}

// SetV2Examples sets the V2Examples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebSocketChannel) SetV2Examples(v2Examples *V2WebSocketSessionExamples) {
	w.V2Examples = v2Examples
	w.require(webSocketChannelFieldV2Examples)
}

func (w *WebSocketChannel) UnmarshalJSON(data []byte) error {
	type unmarshaler WebSocketChannel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WebSocketChannel(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	return nil
}

func (w *WebSocketChannel) MarshalJSON() ([]byte, error) {
	type embed WebSocketChannel
	var marshaler = struct {
		embed
	}{
		embed: embed(*w),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, w.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (w *WebSocketChannel) String() string {
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

var (
	webSocketMessageFieldDocs         = big.NewInt(1 << 0)
	webSocketMessageFieldAvailability = big.NewInt(1 << 1)
	webSocketMessageFieldType         = big.NewInt(1 << 2)
	webSocketMessageFieldDisplayName  = big.NewInt(1 << 3)
	webSocketMessageFieldOrigin       = big.NewInt(1 << 4)
	webSocketMessageFieldBody         = big.NewInt(1 << 5)
)

type WebSocketMessage struct {
	Docs         *string                `json:"docs,omitempty" url:"docs,omitempty"`
	Availability *Availability          `json:"availability,omitempty" url:"availability,omitempty"`
	Type         WebSocketMessageId     `json:"type" url:"type"`
	DisplayName  *string                `json:"displayName,omitempty" url:"displayName,omitempty"`
	Origin       WebSocketMessageOrigin `json:"origin" url:"origin"`
	Body         *WebSocketMessageBody  `json:"body" url:"body"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (w *WebSocketMessage) GetDocs() *string {
	if w == nil {
		return nil
	}
	return w.Docs
}

func (w *WebSocketMessage) GetAvailability() *Availability {
	if w == nil {
		return nil
	}
	return w.Availability
}

func (w *WebSocketMessage) GetType() WebSocketMessageId {
	if w == nil {
		return ""
	}
	return w.Type
}

func (w *WebSocketMessage) GetDisplayName() *string {
	if w == nil {
		return nil
	}
	return w.DisplayName
}

func (w *WebSocketMessage) GetOrigin() WebSocketMessageOrigin {
	if w == nil {
		return ""
	}
	return w.Origin
}

func (w *WebSocketMessage) GetBody() *WebSocketMessageBody {
	if w == nil {
		return nil
	}
	return w.Body
}

func (w *WebSocketMessage) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebSocketMessage) require(field *big.Int) {
	if w.explicitFields == nil {
		w.explicitFields = big.NewInt(0)
	}
	w.explicitFields.Or(w.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebSocketMessage) SetDocs(docs *string) {
	w.Docs = docs
	w.require(webSocketMessageFieldDocs)
}

// SetAvailability sets the Availability field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebSocketMessage) SetAvailability(availability *Availability) {
	w.Availability = availability
	w.require(webSocketMessageFieldAvailability)
}

// SetType sets the Type field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebSocketMessage) SetType(type_ WebSocketMessageId) {
	w.Type = type_
	w.require(webSocketMessageFieldType)
}

// SetDisplayName sets the DisplayName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebSocketMessage) SetDisplayName(displayName *string) {
	w.DisplayName = displayName
	w.require(webSocketMessageFieldDisplayName)
}

// SetOrigin sets the Origin field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebSocketMessage) SetOrigin(origin WebSocketMessageOrigin) {
	w.Origin = origin
	w.require(webSocketMessageFieldOrigin)
}

// SetBody sets the Body field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebSocketMessage) SetBody(body *WebSocketMessageBody) {
	w.Body = body
	w.require(webSocketMessageFieldBody)
}

func (w *WebSocketMessage) UnmarshalJSON(data []byte) error {
	type unmarshaler WebSocketMessage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WebSocketMessage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	return nil
}

func (w *WebSocketMessage) MarshalJSON() ([]byte, error) {
	type embed WebSocketMessage
	var marshaler = struct {
		embed
	}{
		embed: embed(*w),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, w.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (w *WebSocketMessage) String() string {
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebSocketMessageBody struct {
	Type        string
	InlinedBody *InlinedWebSocketMessageBody
	Reference   *WebSocketMessageBodyReference
}

func (w *WebSocketMessageBody) GetType() string {
	if w == nil {
		return ""
	}
	return w.Type
}

func (w *WebSocketMessageBody) GetInlinedBody() *InlinedWebSocketMessageBody {
	if w == nil {
		return nil
	}
	return w.InlinedBody
}

func (w *WebSocketMessageBody) GetReference() *WebSocketMessageBodyReference {
	if w == nil {
		return nil
	}
	return w.Reference
}

func (w *WebSocketMessageBody) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	w.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", w)
	}
	switch unmarshaler.Type {
	case "inlinedBody":
		value := new(InlinedWebSocketMessageBody)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.InlinedBody = value
	case "reference":
		value := new(WebSocketMessageBodyReference)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Reference = value
	}
	return nil
}

func (w WebSocketMessageBody) MarshalJSON() ([]byte, error) {
	if err := w.validate(); err != nil {
		return nil, err
	}
	if w.InlinedBody != nil {
		return internal.MarshalJSONWithExtraProperty(w.InlinedBody, "type", "inlinedBody")
	}
	if w.Reference != nil {
		return internal.MarshalJSONWithExtraProperty(w.Reference, "type", "reference")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", w)
}

type WebSocketMessageBodyVisitor interface {
	VisitInlinedBody(*InlinedWebSocketMessageBody) error
	VisitReference(*WebSocketMessageBodyReference) error
}

func (w *WebSocketMessageBody) Accept(visitor WebSocketMessageBodyVisitor) error {
	if w.InlinedBody != nil {
		return visitor.VisitInlinedBody(w.InlinedBody)
	}
	if w.Reference != nil {
		return visitor.VisitReference(w.Reference)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", w)
}

func (w *WebSocketMessageBody) validate() error {
	if w == nil {
		return fmt.Errorf("type %T is nil", w)
	}
	var fields []string
	if w.InlinedBody != nil {
		fields = append(fields, "inlinedBody")
	}
	if w.Reference != nil {
		fields = append(fields, "reference")
	}
	if len(fields) == 0 {
		if w.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", w, w.Type)
		}
		return fmt.Errorf("type %T is empty", w)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", w, fields)
	}
	if w.Type != "" {
		field := fields[0]
		if w.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				w,
				w.Type,
				w,
			)
		}
	}
	return nil
}

var (
	webSocketMessageBodyReferenceFieldDocs     = big.NewInt(1 << 0)
	webSocketMessageBodyReferenceFieldBodyType = big.NewInt(1 << 1)
)

type WebSocketMessageBodyReference struct {
	Docs     *string        `json:"docs,omitempty" url:"docs,omitempty"`
	BodyType *TypeReference `json:"bodyType" url:"bodyType"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (w *WebSocketMessageBodyReference) GetDocs() *string {
	if w == nil {
		return nil
	}
	return w.Docs
}

func (w *WebSocketMessageBodyReference) GetBodyType() *TypeReference {
	if w == nil {
		return nil
	}
	return w.BodyType
}

func (w *WebSocketMessageBodyReference) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebSocketMessageBodyReference) require(field *big.Int) {
	if w.explicitFields == nil {
		w.explicitFields = big.NewInt(0)
	}
	w.explicitFields.Or(w.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebSocketMessageBodyReference) SetDocs(docs *string) {
	w.Docs = docs
	w.require(webSocketMessageBodyReferenceFieldDocs)
}

// SetBodyType sets the BodyType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WebSocketMessageBodyReference) SetBodyType(bodyType *TypeReference) {
	w.BodyType = bodyType
	w.require(webSocketMessageBodyReferenceFieldBodyType)
}

func (w *WebSocketMessageBodyReference) UnmarshalJSON(data []byte) error {
	type unmarshaler WebSocketMessageBodyReference
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WebSocketMessageBodyReference(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	return nil
}

func (w *WebSocketMessageBodyReference) MarshalJSON() ([]byte, error) {
	type embed WebSocketMessageBodyReference
	var marshaler = struct {
		embed
	}{
		embed: embed(*w),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, w.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (w *WebSocketMessageBodyReference) String() string {
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebSocketMessageId = string

type WebSocketMessageOrigin string

const (
	WebSocketMessageOriginClient WebSocketMessageOrigin = "client"
	WebSocketMessageOriginServer WebSocketMessageOrigin = "server"
)

func NewWebSocketMessageOriginFromString(s string) (WebSocketMessageOrigin, error) {
	switch s {
	case "client":
		return WebSocketMessageOriginClient, nil
	case "server":
		return WebSocketMessageOriginServer, nil
	}
	var t WebSocketMessageOrigin
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WebSocketMessageOrigin) Ptr() *WebSocketMessageOrigin {
	return &w
}

type WebSocketName = *common.Name
