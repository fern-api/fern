// Code generated by Fern. DO NOT EDIT.

package ir

import (
	json "encoding/json"
	fmt "fmt"
	common "sdk/common"
	dynamic "sdk/common/dynamic"
	internal "sdk/internal"
)

type ApiDefinitionSource struct {
	Type    string
	Proto   *ProtoSource
	Openapi interface{}
}

func (a *ApiDefinitionSource) GetType() string {
	if a == nil {
		return ""
	}
	return a.Type
}

func (a *ApiDefinitionSource) GetProto() *ProtoSource {
	if a == nil {
		return nil
	}
	return a.Proto
}

func (a *ApiDefinitionSource) GetOpenapi() interface{} {
	if a == nil {
		return nil
	}
	return a.Openapi
}

func (a *ApiDefinitionSource) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	a.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", a)
	}
	switch unmarshaler.Type {
	case "proto":
		value := new(ProtoSource)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Proto = value
	case "openapi":
		value := make(map[string]interface{})
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Openapi = value
	}
	return nil
}

func (a ApiDefinitionSource) MarshalJSON() ([]byte, error) {
	if err := a.validate(); err != nil {
		return nil, err
	}
	if a.Proto != nil {
		return internal.MarshalJSONWithExtraProperty(a.Proto, "type", "proto")
	}
	if a.Openapi != nil {
		var marshaler = struct {
			Type    string      `json:"type"`
			Openapi interface{} `json:"openapi,omitempty"`
		}{
			Type:    "openapi",
			Openapi: a.Openapi,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", a)
}

type ApiDefinitionSourceVisitor interface {
	VisitProto(*ProtoSource) error
	VisitOpenapi(interface{}) error
}

func (a *ApiDefinitionSource) Accept(visitor ApiDefinitionSourceVisitor) error {
	if a.Proto != nil {
		return visitor.VisitProto(a.Proto)
	}
	if a.Openapi != nil {
		return visitor.VisitOpenapi(a.Openapi)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", a)
}

func (a *ApiDefinitionSource) validate() error {
	if a == nil {
		return fmt.Errorf("type %T is nil", a)
	}
	var fields []string
	if a.Proto != nil {
		fields = append(fields, "proto")
	}
	if a.Openapi != nil {
		fields = append(fields, "openapi")
	}
	if len(fields) == 0 {
		if a.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", a, a.Type)
		}
		return fmt.Errorf("type %T is empty", a)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", a, fields)
	}
	if a.Type != "" {
		field := fields[0]
		if a.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				a,
				a.Type,
				a,
			)
		}
	}
	return nil
}

// Uniquely identifies a specific API definition source. This allows us to clearly identify
// what source a given type, endpoint, etc was derived from.
type ApiDefinitionSourceId = string

// The available set of versions for the API. This is used to generate a special
// enum that can be used to specify the version of the API to use.
type ApiVersionScheme struct {
	Type   string
	Header *HeaderApiVersionScheme
}

func (a *ApiVersionScheme) GetType() string {
	if a == nil {
		return ""
	}
	return a.Type
}

func (a *ApiVersionScheme) GetHeader() *HeaderApiVersionScheme {
	if a == nil {
		return nil
	}
	return a.Header
}

func (a *ApiVersionScheme) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	a.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", a)
	}
	switch unmarshaler.Type {
	case "header":
		value := new(HeaderApiVersionScheme)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Header = value
	}
	return nil
}

func (a ApiVersionScheme) MarshalJSON() ([]byte, error) {
	if err := a.validate(); err != nil {
		return nil, err
	}
	if a.Header != nil {
		return internal.MarshalJSONWithExtraProperty(a.Header, "type", "header")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", a)
}

type ApiVersionSchemeVisitor interface {
	VisitHeader(*HeaderApiVersionScheme) error
}

func (a *ApiVersionScheme) Accept(visitor ApiVersionSchemeVisitor) error {
	if a.Header != nil {
		return visitor.VisitHeader(a.Header)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", a)
}

func (a *ApiVersionScheme) validate() error {
	if a == nil {
		return fmt.Errorf("type %T is nil", a)
	}
	var fields []string
	if a.Header != nil {
		fields = append(fields, "header")
	}
	if len(fields) == 0 {
		if a.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", a, a.Type)
		}
		return fmt.Errorf("type %T is empty", a)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", a, fields)
	}
	if a.Type != "" {
		field := fields[0]
		if a.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				a,
				a.Type,
				a,
			)
		}
	}
	return nil
}

type ErrorDiscriminationByPropertyStrategy struct {
	Discriminant    *common.NameAndWireValue `json:"discriminant" url:"discriminant"`
	ContentProperty *common.NameAndWireValue `json:"contentProperty" url:"contentProperty"`

	extraProperties map[string]interface{}
}

func (e *ErrorDiscriminationByPropertyStrategy) GetDiscriminant() *common.NameAndWireValue {
	if e == nil {
		return nil
	}
	return e.Discriminant
}

func (e *ErrorDiscriminationByPropertyStrategy) GetContentProperty() *common.NameAndWireValue {
	if e == nil {
		return nil
	}
	return e.ContentProperty
}

func (e *ErrorDiscriminationByPropertyStrategy) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorDiscriminationByPropertyStrategy) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorDiscriminationByPropertyStrategy
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorDiscriminationByPropertyStrategy(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	return nil
}

func (e *ErrorDiscriminationByPropertyStrategy) String() string {
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ErrorDiscriminationStrategy struct {
	Type       string
	StatusCode interface{}
	Property   *ErrorDiscriminationByPropertyStrategy
}

func (e *ErrorDiscriminationStrategy) GetType() string {
	if e == nil {
		return ""
	}
	return e.Type
}

func (e *ErrorDiscriminationStrategy) GetStatusCode() interface{} {
	if e == nil {
		return nil
	}
	return e.StatusCode
}

func (e *ErrorDiscriminationStrategy) GetProperty() *ErrorDiscriminationByPropertyStrategy {
	if e == nil {
		return nil
	}
	return e.Property
}

func (e *ErrorDiscriminationStrategy) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", e)
	}
	switch unmarshaler.Type {
	case "statusCode":
		value := make(map[string]interface{})
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.StatusCode = value
	case "property":
		value := new(ErrorDiscriminationByPropertyStrategy)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Property = value
	}
	return nil
}

func (e ErrorDiscriminationStrategy) MarshalJSON() ([]byte, error) {
	if err := e.validate(); err != nil {
		return nil, err
	}
	if e.StatusCode != nil {
		var marshaler = struct {
			Type       string      `json:"type"`
			StatusCode interface{} `json:"statusCode,omitempty"`
		}{
			Type:       "statusCode",
			StatusCode: e.StatusCode,
		}
		return json.Marshal(marshaler)
	}
	if e.Property != nil {
		return internal.MarshalJSONWithExtraProperty(e.Property, "type", "property")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ErrorDiscriminationStrategyVisitor interface {
	VisitStatusCode(interface{}) error
	VisitProperty(*ErrorDiscriminationByPropertyStrategy) error
}

func (e *ErrorDiscriminationStrategy) Accept(visitor ErrorDiscriminationStrategyVisitor) error {
	if e.StatusCode != nil {
		return visitor.VisitStatusCode(e.StatusCode)
	}
	if e.Property != nil {
		return visitor.VisitProperty(e.Property)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}

func (e *ErrorDiscriminationStrategy) validate() error {
	if e == nil {
		return fmt.Errorf("type %T is nil", e)
	}
	var fields []string
	if e.StatusCode != nil {
		fields = append(fields, "statusCode")
	}
	if e.Property != nil {
		fields = append(fields, "property")
	}
	if len(fields) == 0 {
		if e.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", e, e.Type)
		}
		return fmt.Errorf("type %T is empty", e)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", e, fields)
	}
	if e.Type != "" {
		field := fields[0]
		if e.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				e,
				e.Type,
				e,
			)
		}
	}
	return nil
}

// The version information is sent as an HTTP header (e.g. X-API-Version) on every request.
//
// If the enum does _not_ define a default value, the version should be treated like
// a required global header parameter. The version header should also support any
// environment variable scanning specified by the header.
type HeaderApiVersionScheme struct {
	Header *HttpHeader          `json:"header" url:"header"`
	Value  *EnumTypeDeclaration `json:"value" url:"value"`

	extraProperties map[string]interface{}
}

func (h *HeaderApiVersionScheme) GetHeader() *HttpHeader {
	if h == nil {
		return nil
	}
	return h.Header
}

func (h *HeaderApiVersionScheme) GetValue() *EnumTypeDeclaration {
	if h == nil {
		return nil
	}
	return h.Value
}

func (h *HeaderApiVersionScheme) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HeaderApiVersionScheme) UnmarshalJSON(data []byte) error {
	type unmarshaler HeaderApiVersionScheme
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HeaderApiVersionScheme(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	return nil
}

func (h *HeaderApiVersionScheme) String() string {
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

// Complete representation of the API schema
type IntermediateRepresentation struct {
	// The unique identifier for the API definition used within FDR. This is retrieved once a definition has been registered.
	FdrApiDefinitionId *string           `json:"fdrApiDefinitionId,omitempty" url:"fdrApiDefinitionId,omitempty"`
	ApiVersion         *ApiVersionScheme `json:"apiVersion,omitempty" url:"apiVersion,omitempty"`
	// This is the human readable unique id for the API.
	ApiName        *common.Name `json:"apiName" url:"apiName"`
	ApiDisplayName *string      `json:"apiDisplayName,omitempty" url:"apiDisplayName,omitempty"`
	ApiDocs        *string      `json:"apiDocs,omitempty" url:"apiDocs,omitempty"`
	Auth           *ApiAuth     `json:"auth" url:"auth"`
	// API Wide headers that are sent on every request
	Headers []*HttpHeader `json:"headers" url:"headers"`
	// Headers that are sent for idempotent endpoints
	IdempotencyHeaders []*HttpHeader `json:"idempotencyHeaders" url:"idempotencyHeaders"`
	// The types described by this API
	Types map[common.TypeId]*TypeDeclaration `json:"types" url:"types"`
	// The services exposed by this API
	Services map[ServiceId]*HttpService `json:"services" url:"services"`
	// The webhooks sent by this API
	WebhookGroups map[WebhookGroupId]WebhookGroup `json:"webhookGroups" url:"webhookGroups"`
	// The websocket channels served by this API
	WebsocketChannels           map[WebSocketChannelId]*WebSocketChannel   `json:"websocketChannels,omitempty" url:"websocketChannels,omitempty"`
	Errors                      map[ErrorId]*ErrorDeclaration              `json:"errors" url:"errors"`
	Subpackages                 map[SubpackageId]*Subpackage               `json:"subpackages" url:"subpackages"`
	RootPackage                 *Package                                   `json:"rootPackage" url:"rootPackage"`
	Constants                   *Constants                                 `json:"constants" url:"constants"`
	Environments                *common.EnvironmentsConfig                 `json:"environments,omitempty" url:"environments,omitempty"`
	BasePath                    *HttpPath                                  `json:"basePath,omitempty" url:"basePath,omitempty"`
	PathParameters              []*PathParameter                           `json:"pathParameters" url:"pathParameters"`
	ErrorDiscriminationStrategy *ErrorDiscriminationStrategy               `json:"errorDiscriminationStrategy" url:"errorDiscriminationStrategy"`
	SdkConfig                   *SdkConfig                                 `json:"sdkConfig" url:"sdkConfig"`
	Variables                   []*VariableDeclaration                     `json:"variables" url:"variables"`
	ServiceTypeReferenceInfo    *ServiceTypeReferenceInfo                  `json:"serviceTypeReferenceInfo" url:"serviceTypeReferenceInfo"`
	ReadmeConfig                *ReadmeConfig                              `json:"readmeConfig,omitempty" url:"readmeConfig,omitempty"`
	SourceConfig                *SourceConfig                              `json:"sourceConfig,omitempty" url:"sourceConfig,omitempty"`
	PublishConfig               *PublishingConfig                          `json:"publishConfig,omitempty" url:"publishConfig,omitempty"`
	Dynamic                     *dynamic.DynamicIntermediateRepresentation `json:"dynamic,omitempty" url:"dynamic,omitempty"`
	SelfHosted                  *bool                                      `json:"selfHosted,omitempty" url:"selfHosted,omitempty"`
	Audiences                   []AudienceDefinition                       `json:"audiences,omitempty" url:"audiences,omitempty"`

	extraProperties map[string]interface{}
}

func (i *IntermediateRepresentation) GetFdrApiDefinitionId() *string {
	if i == nil {
		return nil
	}
	return i.FdrApiDefinitionId
}

func (i *IntermediateRepresentation) GetApiVersion() *ApiVersionScheme {
	if i == nil {
		return nil
	}
	return i.ApiVersion
}

func (i *IntermediateRepresentation) GetApiName() *common.Name {
	if i == nil {
		return nil
	}
	return i.ApiName
}

func (i *IntermediateRepresentation) GetApiDisplayName() *string {
	if i == nil {
		return nil
	}
	return i.ApiDisplayName
}

func (i *IntermediateRepresentation) GetApiDocs() *string {
	if i == nil {
		return nil
	}
	return i.ApiDocs
}

func (i *IntermediateRepresentation) GetAuth() *ApiAuth {
	if i == nil {
		return nil
	}
	return i.Auth
}

func (i *IntermediateRepresentation) GetHeaders() []*HttpHeader {
	if i == nil {
		return nil
	}
	return i.Headers
}

func (i *IntermediateRepresentation) GetIdempotencyHeaders() []*HttpHeader {
	if i == nil {
		return nil
	}
	return i.IdempotencyHeaders
}

func (i *IntermediateRepresentation) GetTypes() map[common.TypeId]*TypeDeclaration {
	if i == nil {
		return nil
	}
	return i.Types
}

func (i *IntermediateRepresentation) GetServices() map[ServiceId]*HttpService {
	if i == nil {
		return nil
	}
	return i.Services
}

func (i *IntermediateRepresentation) GetWebhookGroups() map[WebhookGroupId]WebhookGroup {
	if i == nil {
		return nil
	}
	return i.WebhookGroups
}

func (i *IntermediateRepresentation) GetWebsocketChannels() map[WebSocketChannelId]*WebSocketChannel {
	if i == nil {
		return nil
	}
	return i.WebsocketChannels
}

func (i *IntermediateRepresentation) GetErrors() map[ErrorId]*ErrorDeclaration {
	if i == nil {
		return nil
	}
	return i.Errors
}

func (i *IntermediateRepresentation) GetSubpackages() map[SubpackageId]*Subpackage {
	if i == nil {
		return nil
	}
	return i.Subpackages
}

func (i *IntermediateRepresentation) GetRootPackage() *Package {
	if i == nil {
		return nil
	}
	return i.RootPackage
}

func (i *IntermediateRepresentation) GetConstants() *Constants {
	if i == nil {
		return nil
	}
	return i.Constants
}

func (i *IntermediateRepresentation) GetEnvironments() *common.EnvironmentsConfig {
	if i == nil {
		return nil
	}
	return i.Environments
}

func (i *IntermediateRepresentation) GetBasePath() *HttpPath {
	if i == nil {
		return nil
	}
	return i.BasePath
}

func (i *IntermediateRepresentation) GetPathParameters() []*PathParameter {
	if i == nil {
		return nil
	}
	return i.PathParameters
}

func (i *IntermediateRepresentation) GetErrorDiscriminationStrategy() *ErrorDiscriminationStrategy {
	if i == nil {
		return nil
	}
	return i.ErrorDiscriminationStrategy
}

func (i *IntermediateRepresentation) GetSdkConfig() *SdkConfig {
	if i == nil {
		return nil
	}
	return i.SdkConfig
}

func (i *IntermediateRepresentation) GetVariables() []*VariableDeclaration {
	if i == nil {
		return nil
	}
	return i.Variables
}

func (i *IntermediateRepresentation) GetServiceTypeReferenceInfo() *ServiceTypeReferenceInfo {
	if i == nil {
		return nil
	}
	return i.ServiceTypeReferenceInfo
}

func (i *IntermediateRepresentation) GetReadmeConfig() *ReadmeConfig {
	if i == nil {
		return nil
	}
	return i.ReadmeConfig
}

func (i *IntermediateRepresentation) GetSourceConfig() *SourceConfig {
	if i == nil {
		return nil
	}
	return i.SourceConfig
}

func (i *IntermediateRepresentation) GetPublishConfig() *PublishingConfig {
	if i == nil {
		return nil
	}
	return i.PublishConfig
}

func (i *IntermediateRepresentation) GetDynamic() *dynamic.DynamicIntermediateRepresentation {
	if i == nil {
		return nil
	}
	return i.Dynamic
}

func (i *IntermediateRepresentation) GetSelfHosted() *bool {
	if i == nil {
		return nil
	}
	return i.SelfHosted
}

func (i *IntermediateRepresentation) GetAudiences() []AudienceDefinition {
	if i == nil {
		return nil
	}
	return i.Audiences
}

func (i *IntermediateRepresentation) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IntermediateRepresentation) UnmarshalJSON(data []byte) error {
	type unmarshaler IntermediateRepresentation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IntermediateRepresentation(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	return nil
}

func (i *IntermediateRepresentation) String() string {
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type Package struct {
	Docs               *string                  `json:"docs,omitempty" url:"docs,omitempty"`
	FernFilepath       *common.FernFilepath     `json:"fernFilepath" url:"fernFilepath"`
	Service            *ServiceId               `json:"service,omitempty" url:"service,omitempty"`
	Types              []common.TypeId          `json:"types" url:"types"`
	Errors             []ErrorId                `json:"errors" url:"errors"`
	Webhooks           *WebhookGroupId          `json:"webhooks,omitempty" url:"webhooks,omitempty"`
	Websocket          *WebSocketChannelId      `json:"websocket,omitempty" url:"websocket,omitempty"`
	Subpackages        []SubpackageId           `json:"subpackages" url:"subpackages"`
	HasEndpointsInTree bool                     `json:"hasEndpointsInTree" url:"hasEndpointsInTree"`
	NavigationConfig   *PackageNavigationConfig `json:"navigationConfig,omitempty" url:"navigationConfig,omitempty"`

	extraProperties map[string]interface{}
}

func (p *Package) GetDocs() *string {
	if p == nil {
		return nil
	}
	return p.Docs
}

func (p *Package) GetFernFilepath() *common.FernFilepath {
	if p == nil {
		return nil
	}
	return p.FernFilepath
}

func (p *Package) GetService() *ServiceId {
	if p == nil {
		return nil
	}
	return p.Service
}

func (p *Package) GetTypes() []common.TypeId {
	if p == nil {
		return nil
	}
	return p.Types
}

func (p *Package) GetErrors() []ErrorId {
	if p == nil {
		return nil
	}
	return p.Errors
}

func (p *Package) GetWebhooks() *WebhookGroupId {
	if p == nil {
		return nil
	}
	return p.Webhooks
}

func (p *Package) GetWebsocket() *WebSocketChannelId {
	if p == nil {
		return nil
	}
	return p.Websocket
}

func (p *Package) GetSubpackages() []SubpackageId {
	if p == nil {
		return nil
	}
	return p.Subpackages
}

func (p *Package) GetHasEndpointsInTree() bool {
	if p == nil {
		return false
	}
	return p.HasEndpointsInTree
}

func (p *Package) GetNavigationConfig() *PackageNavigationConfig {
	if p == nil {
		return nil
	}
	return p.NavigationConfig
}

func (p *Package) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Package) UnmarshalJSON(data []byte) error {
	type unmarshaler Package
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Package(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	return nil
}

func (p *Package) String() string {
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PackageNavigationConfig struct {
	PointsTo SubpackageId `json:"pointsTo" url:"pointsTo"`

	extraProperties map[string]interface{}
}

func (p *PackageNavigationConfig) GetPointsTo() SubpackageId {
	if p == nil {
		return ""
	}
	return p.PointsTo
}

func (p *PackageNavigationConfig) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PackageNavigationConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler PackageNavigationConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PackageNavigationConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	return nil
}

func (p *PackageNavigationConfig) String() string {
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PlatformHeaders struct {
	Language   string     `json:"language" url:"language"`
	SdkName    string     `json:"sdkName" url:"sdkName"`
	SdkVersion string     `json:"sdkVersion" url:"sdkVersion"`
	UserAgent  *UserAgent `json:"userAgent,omitempty" url:"userAgent,omitempty"`

	extraProperties map[string]interface{}
}

func (p *PlatformHeaders) GetLanguage() string {
	if p == nil {
		return ""
	}
	return p.Language
}

func (p *PlatformHeaders) GetSdkName() string {
	if p == nil {
		return ""
	}
	return p.SdkName
}

func (p *PlatformHeaders) GetSdkVersion() string {
	if p == nil {
		return ""
	}
	return p.SdkVersion
}

func (p *PlatformHeaders) GetUserAgent() *UserAgent {
	if p == nil {
		return nil
	}
	return p.UserAgent
}

func (p *PlatformHeaders) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PlatformHeaders) UnmarshalJSON(data []byte) error {
	type unmarshaler PlatformHeaders
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PlatformHeaders(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	return nil
}

func (p *PlatformHeaders) String() string {
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProtoSource struct {
	Id ApiDefinitionSourceId `json:"id" url:"id"`
	// The URL containing the `.proto` root directory source. This can be used
	// to pull down the original `.proto` source files during code generation.
	ProtoRootUrl string `json:"protoRootUrl" url:"protoRootUrl"`

	extraProperties map[string]interface{}
}

func (p *ProtoSource) GetId() ApiDefinitionSourceId {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *ProtoSource) GetProtoRootUrl() string {
	if p == nil {
		return ""
	}
	return p.ProtoRootUrl
}

func (p *ProtoSource) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProtoSource) UnmarshalJSON(data []byte) error {
	type unmarshaler ProtoSource
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProtoSource(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	return nil
}

func (p *ProtoSource) String() string {
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The configuration used to generate a README.md file. If present, the generator
// should call the generator-cli to produce a README.md.
type ReadmeConfig struct {
	// If specified, this endpoint should be used in every snippet (if possible).
	// Note that some endpoints aren't suitable for every feature (e.g. a non-list
	// endpoint for pagination), so the default is a no-op in those cases.
	DefaultEndpoint  *common.EndpointId `json:"defaultEndpoint,omitempty" url:"defaultEndpoint,omitempty"`
	BannerLink       *string            `json:"bannerLink,omitempty" url:"bannerLink,omitempty"`
	Introduction     *string            `json:"introduction,omitempty" url:"introduction,omitempty"`
	ApiReferenceLink *string            `json:"apiReferenceLink,omitempty" url:"apiReferenceLink,omitempty"`
	ApiName          *string            `json:"apiName,omitempty" url:"apiName,omitempty"`
	DisabledFeatures []FeatureId        `json:"disabledFeatures,omitempty" url:"disabledFeatures,omitempty"`
	// If true, removes fern branding from the generated SDK files. Defaults to false.
	WhiteLabel *bool `json:"whiteLabel,omitempty" url:"whiteLabel,omitempty"`
	// If specified, configures the list of endpoints to associate
	// with each feature.
	Features map[FeatureId][]common.EndpointId `json:"features,omitempty" url:"features,omitempty"`

	extraProperties map[string]interface{}
}

func (r *ReadmeConfig) GetDefaultEndpoint() *common.EndpointId {
	if r == nil {
		return nil
	}
	return r.DefaultEndpoint
}

func (r *ReadmeConfig) GetBannerLink() *string {
	if r == nil {
		return nil
	}
	return r.BannerLink
}

func (r *ReadmeConfig) GetIntroduction() *string {
	if r == nil {
		return nil
	}
	return r.Introduction
}

func (r *ReadmeConfig) GetApiReferenceLink() *string {
	if r == nil {
		return nil
	}
	return r.ApiReferenceLink
}

func (r *ReadmeConfig) GetApiName() *string {
	if r == nil {
		return nil
	}
	return r.ApiName
}

func (r *ReadmeConfig) GetDisabledFeatures() []FeatureId {
	if r == nil {
		return nil
	}
	return r.DisabledFeatures
}

func (r *ReadmeConfig) GetWhiteLabel() *bool {
	if r == nil {
		return nil
	}
	return r.WhiteLabel
}

func (r *ReadmeConfig) GetFeatures() map[FeatureId][]common.EndpointId {
	if r == nil {
		return nil
	}
	return r.Features
}

func (r *ReadmeConfig) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReadmeConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler ReadmeConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReadmeConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	return nil
}

func (r *ReadmeConfig) String() string {
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type SdkConfig struct {
	IsAuthMandatory          bool             `json:"isAuthMandatory" url:"isAuthMandatory"`
	HasStreamingEndpoints    bool             `json:"hasStreamingEndpoints" url:"hasStreamingEndpoints"`
	HasPaginatedEndpoints    bool             `json:"hasPaginatedEndpoints" url:"hasPaginatedEndpoints"`
	HasFileDownloadEndpoints bool             `json:"hasFileDownloadEndpoints" url:"hasFileDownloadEndpoints"`
	PlatformHeaders          *PlatformHeaders `json:"platformHeaders" url:"platformHeaders"`

	extraProperties map[string]interface{}
}

func (s *SdkConfig) GetIsAuthMandatory() bool {
	if s == nil {
		return false
	}
	return s.IsAuthMandatory
}

func (s *SdkConfig) GetHasStreamingEndpoints() bool {
	if s == nil {
		return false
	}
	return s.HasStreamingEndpoints
}

func (s *SdkConfig) GetHasPaginatedEndpoints() bool {
	if s == nil {
		return false
	}
	return s.HasPaginatedEndpoints
}

func (s *SdkConfig) GetHasFileDownloadEndpoints() bool {
	if s == nil {
		return false
	}
	return s.HasFileDownloadEndpoints
}

func (s *SdkConfig) GetPlatformHeaders() *PlatformHeaders {
	if s == nil {
		return nil
	}
	return s.PlatformHeaders
}

func (s *SdkConfig) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SdkConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler SdkConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SdkConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	return nil
}

func (s *SdkConfig) String() string {
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ServiceTypeReferenceInfo struct {
	// Types referenced by exactly one service.
	TypesReferencedOnlyByService map[ServiceId][]common.TypeId `json:"typesReferencedOnlyByService" url:"typesReferencedOnlyByService"`
	// Types referenced by either zero or multiple services.
	SharedTypes []common.TypeId `json:"sharedTypes" url:"sharedTypes"`

	extraProperties map[string]interface{}
}

func (s *ServiceTypeReferenceInfo) GetTypesReferencedOnlyByService() map[ServiceId][]common.TypeId {
	if s == nil {
		return nil
	}
	return s.TypesReferencedOnlyByService
}

func (s *ServiceTypeReferenceInfo) GetSharedTypes() []common.TypeId {
	if s == nil {
		return nil
	}
	return s.SharedTypes
}

func (s *ServiceTypeReferenceInfo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ServiceTypeReferenceInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ServiceTypeReferenceInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ServiceTypeReferenceInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	return nil
}

func (s *ServiceTypeReferenceInfo) String() string {
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceConfig struct {
	// The raw API definitions that produced the IR.
	Sources []*ApiDefinitionSource `json:"sources" url:"sources"`

	extraProperties map[string]interface{}
}

func (s *SourceConfig) GetSources() []*ApiDefinitionSource {
	if s == nil {
		return nil
	}
	return s.Sources
}

func (s *SourceConfig) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	return nil
}

func (s *SourceConfig) String() string {
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type Subpackage struct {
	Docs               *string                  `json:"docs,omitempty" url:"docs,omitempty"`
	FernFilepath       *common.FernFilepath     `json:"fernFilepath" url:"fernFilepath"`
	Service            *ServiceId               `json:"service,omitempty" url:"service,omitempty"`
	Types              []common.TypeId          `json:"types" url:"types"`
	Errors             []ErrorId                `json:"errors" url:"errors"`
	Webhooks           *WebhookGroupId          `json:"webhooks,omitempty" url:"webhooks,omitempty"`
	Websocket          *WebSocketChannelId      `json:"websocket,omitempty" url:"websocket,omitempty"`
	Subpackages        []SubpackageId           `json:"subpackages" url:"subpackages"`
	HasEndpointsInTree bool                     `json:"hasEndpointsInTree" url:"hasEndpointsInTree"`
	NavigationConfig   *PackageNavigationConfig `json:"navigationConfig,omitempty" url:"navigationConfig,omitempty"`
	Name               *common.Name             `json:"name" url:"name"`
	DisplayName        *DisplayName             `json:"displayName,omitempty" url:"displayName,omitempty"`

	extraProperties map[string]interface{}
}

func (s *Subpackage) GetDocs() *string {
	if s == nil {
		return nil
	}
	return s.Docs
}

func (s *Subpackage) GetFernFilepath() *common.FernFilepath {
	if s == nil {
		return nil
	}
	return s.FernFilepath
}

func (s *Subpackage) GetService() *ServiceId {
	if s == nil {
		return nil
	}
	return s.Service
}

func (s *Subpackage) GetTypes() []common.TypeId {
	if s == nil {
		return nil
	}
	return s.Types
}

func (s *Subpackage) GetErrors() []ErrorId {
	if s == nil {
		return nil
	}
	return s.Errors
}

func (s *Subpackage) GetWebhooks() *WebhookGroupId {
	if s == nil {
		return nil
	}
	return s.Webhooks
}

func (s *Subpackage) GetWebsocket() *WebSocketChannelId {
	if s == nil {
		return nil
	}
	return s.Websocket
}

func (s *Subpackage) GetSubpackages() []SubpackageId {
	if s == nil {
		return nil
	}
	return s.Subpackages
}

func (s *Subpackage) GetHasEndpointsInTree() bool {
	if s == nil {
		return false
	}
	return s.HasEndpointsInTree
}

func (s *Subpackage) GetNavigationConfig() *PackageNavigationConfig {
	if s == nil {
		return nil
	}
	return s.NavigationConfig
}

func (s *Subpackage) GetName() *common.Name {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *Subpackage) GetDisplayName() *DisplayName {
	if s == nil {
		return nil
	}
	return s.DisplayName
}

func (s *Subpackage) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Subpackage) UnmarshalJSON(data []byte) error {
	type unmarshaler Subpackage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Subpackage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	return nil
}

func (s *Subpackage) String() string {
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type UserAgent struct {
	// The user agent header for ease of access to generators.
	// Formatted as "<package>/<version>"
	Value  string `json:"value" url:"value"`
	header string

	extraProperties map[string]interface{}
}

func (u *UserAgent) GetValue() string {
	if u == nil {
		return ""
	}
	return u.Value
}

func (u *UserAgent) Header() string {
	return u.header
}

func (u *UserAgent) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserAgent) UnmarshalJSON(data []byte) error {
	type embed UserAgent
	var unmarshaler = struct {
		embed
		Header string `json:"header"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UserAgent(unmarshaler.embed)
	if unmarshaler.Header != "User-Agent" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", u, "User-Agent", unmarshaler.Header)
	}
	u.header = unmarshaler.Header
	extraProperties, err := internal.ExtractExtraProperties(data, *u, "header")
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	return nil
}

func (u *UserAgent) MarshalJSON() ([]byte, error) {
	type embed UserAgent
	var marshaler = struct {
		embed
		Header string `json:"header"`
	}{
		embed:  embed(*u),
		Header: "User-Agent",
	}
	return json.Marshal(marshaler)
}

func (u *UserAgent) String() string {
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
