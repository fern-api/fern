// Code generated by Fern. DO NOT EDIT.

package ir

import (
	json "encoding/json"
	fmt "fmt"
	big "math/big"

	common "github.com/fern-api/fern-go/internal/fern/ir/common"
	internal "github.com/fern-api/fern-go/internal/fern/ir/internal"
)

var (
	basicAuthValuesFieldUsername = big.NewInt(1 << 0)
	basicAuthValuesFieldPassword = big.NewInt(1 << 1)
)

type BasicAuthValues struct {
	Username string `json:"username" url:"username"`
	Password string `json:"password" url:"password"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (b *BasicAuthValues) GetUsername() string {
	if b == nil {
		return ""
	}
	return b.Username
}

func (b *BasicAuthValues) GetPassword() string {
	if b == nil {
		return ""
	}
	return b.Password
}

func (b *BasicAuthValues) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasicAuthValues) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetUsername sets the Username field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BasicAuthValues) SetUsername(username string) {
	b.Username = username
	b.require(basicAuthValuesFieldUsername)
}

// SetPassword sets the Password field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BasicAuthValues) SetPassword(password string) {
	b.Password = password
	b.require(basicAuthValuesFieldPassword)
}

func (b *BasicAuthValues) UnmarshalJSON(data []byte) error {
	type unmarshaler BasicAuthValues
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BasicAuthValues(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	return nil
}

func (b *BasicAuthValues) MarshalJSON() ([]byte, error) {
	type embed BasicAuthValues
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BasicAuthValues) String() string {
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	bearerAuthValuesFieldToken = big.NewInt(1 << 0)
)

type BearerAuthValues struct {
	Token string `json:"token" url:"token"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (b *BearerAuthValues) GetToken() string {
	if b == nil {
		return ""
	}
	return b.Token
}

func (b *BearerAuthValues) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BearerAuthValues) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetToken sets the Token field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BearerAuthValues) SetToken(token string) {
	b.Token = token
	b.require(bearerAuthValuesFieldToken)
}

func (b *BearerAuthValues) UnmarshalJSON(data []byte) error {
	type unmarshaler BearerAuthValues
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BearerAuthValues(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	return nil
}

func (b *BearerAuthValues) MarshalJSON() ([]byte, error) {
	type embed BearerAuthValues
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BearerAuthValues) String() string {
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	headerAuthValuesFieldValue = big.NewInt(1 << 0)
)

type HeaderAuthValues struct {
	Value interface{} `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (h *HeaderAuthValues) GetValue() interface{} {
	if h == nil {
		return nil
	}
	return h.Value
}

func (h *HeaderAuthValues) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HeaderAuthValues) require(field *big.Int) {
	if h.explicitFields == nil {
		h.explicitFields = big.NewInt(0)
	}
	h.explicitFields.Or(h.explicitFields, field)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HeaderAuthValues) SetValue(value interface{}) {
	h.Value = value
	h.require(headerAuthValuesFieldValue)
}

func (h *HeaderAuthValues) UnmarshalJSON(data []byte) error {
	type unmarshaler HeaderAuthValues
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HeaderAuthValues(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	return nil
}

func (h *HeaderAuthValues) MarshalJSON() ([]byte, error) {
	type embed HeaderAuthValues
	var marshaler = struct {
		embed
	}{
		embed: embed(*h),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, h.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (h *HeaderAuthValues) String() string {
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type MultipleEnvironmentUrlValues = map[common.EnvironmentBaseUrlId]common.EnvironmentUrl

var (
	oAuthValuesFieldClientId     = big.NewInt(1 << 0)
	oAuthValuesFieldClientSecret = big.NewInt(1 << 1)
)

type OAuthValues struct {
	ClientId     string `json:"clientId" url:"clientId"`
	ClientSecret string `json:"clientSecret" url:"clientSecret"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (o *OAuthValues) GetClientId() string {
	if o == nil {
		return ""
	}
	return o.ClientId
}

func (o *OAuthValues) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *OAuthValues) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OAuthValues) require(field *big.Int) {
	if o.explicitFields == nil {
		o.explicitFields = big.NewInt(0)
	}
	o.explicitFields.Or(o.explicitFields, field)
}

// SetClientId sets the ClientId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthValues) SetClientId(clientId string) {
	o.ClientId = clientId
	o.require(oAuthValuesFieldClientId)
}

// SetClientSecret sets the ClientSecret field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthValues) SetClientSecret(clientSecret string) {
	o.ClientSecret = clientSecret
	o.require(oAuthValuesFieldClientSecret)
}

func (o *OAuthValues) UnmarshalJSON(data []byte) error {
	type unmarshaler OAuthValues
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OAuthValues(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	return nil
}

func (o *OAuthValues) MarshalJSON() ([]byte, error) {
	type embed OAuthValues
	var marshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, o.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (o *OAuthValues) String() string {
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type V2AuthValues struct {
	Type   string
	Basic  *BasicAuthValues
	Bearer *BearerAuthValues
	Header *HeaderAuthValues
	Oauth  *OAuthValues
}

func (v *V2AuthValues) GetType() string {
	if v == nil {
		return ""
	}
	return v.Type
}

func (v *V2AuthValues) GetBasic() *BasicAuthValues {
	if v == nil {
		return nil
	}
	return v.Basic
}

func (v *V2AuthValues) GetBearer() *BearerAuthValues {
	if v == nil {
		return nil
	}
	return v.Bearer
}

func (v *V2AuthValues) GetHeader() *HeaderAuthValues {
	if v == nil {
		return nil
	}
	return v.Header
}

func (v *V2AuthValues) GetOauth() *OAuthValues {
	if v == nil {
		return nil
	}
	return v.Oauth
}

func (v *V2AuthValues) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	v.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", v)
	}
	switch unmarshaler.Type {
	case "basic":
		value := new(BasicAuthValues)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Basic = value
	case "bearer":
		value := new(BearerAuthValues)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Bearer = value
	case "header":
		value := new(HeaderAuthValues)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Header = value
	case "oauth":
		value := new(OAuthValues)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		v.Oauth = value
	}
	return nil
}

func (v V2AuthValues) MarshalJSON() ([]byte, error) {
	if err := v.validate(); err != nil {
		return nil, err
	}
	if v.Basic != nil {
		return internal.MarshalJSONWithExtraProperty(v.Basic, "type", "basic")
	}
	if v.Bearer != nil {
		return internal.MarshalJSONWithExtraProperty(v.Bearer, "type", "bearer")
	}
	if v.Header != nil {
		return internal.MarshalJSONWithExtraProperty(v.Header, "type", "header")
	}
	if v.Oauth != nil {
		return internal.MarshalJSONWithExtraProperty(v.Oauth, "type", "oauth")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", v)
}

type V2AuthValuesVisitor interface {
	VisitBasic(*BasicAuthValues) error
	VisitBearer(*BearerAuthValues) error
	VisitHeader(*HeaderAuthValues) error
	VisitOauth(*OAuthValues) error
}

func (v *V2AuthValues) Accept(visitor V2AuthValuesVisitor) error {
	if v.Basic != nil {
		return visitor.VisitBasic(v.Basic)
	}
	if v.Bearer != nil {
		return visitor.VisitBearer(v.Bearer)
	}
	if v.Header != nil {
		return visitor.VisitHeader(v.Header)
	}
	if v.Oauth != nil {
		return visitor.VisitOauth(v.Oauth)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", v)
}

func (v *V2AuthValues) validate() error {
	if v == nil {
		return fmt.Errorf("type %T is nil", v)
	}
	var fields []string
	if v.Basic != nil {
		fields = append(fields, "basic")
	}
	if v.Bearer != nil {
		fields = append(fields, "bearer")
	}
	if v.Header != nil {
		fields = append(fields, "header")
	}
	if v.Oauth != nil {
		fields = append(fields, "oauth")
	}
	if len(fields) == 0 {
		if v.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", v, v.Type)
		}
		return fmt.Errorf("type %T is empty", v)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", v, fields)
	}
	if v.Type != "" {
		field := fields[0]
		if v.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				v,
				v.Type,
				v,
			)
		}
	}
	return nil
}

var (
	v2EndpointLocationFieldMethod = big.NewInt(1 << 0)
	v2EndpointLocationFieldPath   = big.NewInt(1 << 1)
)

type V2EndpointLocation struct {
	Method V2EndpointLocationHttpMethod `json:"method" url:"method"`
	Path   string                       `json:"path" url:"path"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (v *V2EndpointLocation) GetMethod() V2EndpointLocationHttpMethod {
	if v == nil {
		return ""
	}
	return v.Method
}

func (v *V2EndpointLocation) GetPath() string {
	if v == nil {
		return ""
	}
	return v.Path
}

func (v *V2EndpointLocation) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V2EndpointLocation) require(field *big.Int) {
	if v.explicitFields == nil {
		v.explicitFields = big.NewInt(0)
	}
	v.explicitFields.Or(v.explicitFields, field)
}

// SetMethod sets the Method field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2EndpointLocation) SetMethod(method V2EndpointLocationHttpMethod) {
	v.Method = method
	v.require(v2EndpointLocationFieldMethod)
}

// SetPath sets the Path field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2EndpointLocation) SetPath(path string) {
	v.Path = path
	v.require(v2EndpointLocationFieldPath)
}

func (v *V2EndpointLocation) UnmarshalJSON(data []byte) error {
	type unmarshaler V2EndpointLocation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V2EndpointLocation(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	return nil
}

func (v *V2EndpointLocation) MarshalJSON() ([]byte, error) {
	type embed V2EndpointLocation
	var marshaler = struct {
		embed
	}{
		embed: embed(*v),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, v.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (v *V2EndpointLocation) String() string {
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type V2EndpointLocationHttpMethod string

const (
	V2EndpointLocationHttpMethodGet    V2EndpointLocationHttpMethod = "GET"
	V2EndpointLocationHttpMethodPost   V2EndpointLocationHttpMethod = "POST"
	V2EndpointLocationHttpMethodPut    V2EndpointLocationHttpMethod = "PUT"
	V2EndpointLocationHttpMethodPatch  V2EndpointLocationHttpMethod = "PATCH"
	V2EndpointLocationHttpMethodDelete V2EndpointLocationHttpMethod = "DELETE"
	V2EndpointLocationHttpMethodHead   V2EndpointLocationHttpMethod = "HEAD"
)

func NewV2EndpointLocationHttpMethodFromString(s string) (V2EndpointLocationHttpMethod, error) {
	switch s {
	case "GET":
		return V2EndpointLocationHttpMethodGet, nil
	case "POST":
		return V2EndpointLocationHttpMethodPost, nil
	case "PUT":
		return V2EndpointLocationHttpMethodPut, nil
	case "PATCH":
		return V2EndpointLocationHttpMethodPatch, nil
	case "DELETE":
		return V2EndpointLocationHttpMethodDelete, nil
	case "HEAD":
		return V2EndpointLocationHttpMethodHead, nil
	}
	var t V2EndpointLocationHttpMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v V2EndpointLocationHttpMethod) Ptr() *V2EndpointLocationHttpMethod {
	return &v
}

type V2EnvironmentValues struct {
	EnvironmentId                common.EnvironmentId
	MultipleEnvironmentUrlValues MultipleEnvironmentUrlValues

	typ string
}

func (v *V2EnvironmentValues) GetEnvironmentId() common.EnvironmentId {
	if v == nil {
		return ""
	}
	return v.EnvironmentId
}

func (v *V2EnvironmentValues) GetMultipleEnvironmentUrlValues() MultipleEnvironmentUrlValues {
	if v == nil {
		return nil
	}
	return v.MultipleEnvironmentUrlValues
}

func (v *V2EnvironmentValues) UnmarshalJSON(data []byte) error {
	var valueEnvironmentId common.EnvironmentId
	if err := json.Unmarshal(data, &valueEnvironmentId); err == nil {
		v.typ = "EnvironmentId"
		v.EnvironmentId = valueEnvironmentId
		return nil
	}
	var valueMultipleEnvironmentUrlValues MultipleEnvironmentUrlValues
	if err := json.Unmarshal(data, &valueMultipleEnvironmentUrlValues); err == nil {
		v.typ = "MultipleEnvironmentUrlValues"
		v.MultipleEnvironmentUrlValues = valueMultipleEnvironmentUrlValues
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v V2EnvironmentValues) MarshalJSON() ([]byte, error) {
	if v.typ == "EnvironmentId" || v.EnvironmentId != "" {
		return json.Marshal(v.EnvironmentId)
	}
	if v.typ == "MultipleEnvironmentUrlValues" || v.MultipleEnvironmentUrlValues != nil {
		return json.Marshal(v.MultipleEnvironmentUrlValues)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type V2EnvironmentValuesVisitor interface {
	VisitEnvironmentId(common.EnvironmentId) error
	VisitMultipleEnvironmentUrlValues(MultipleEnvironmentUrlValues) error
}

func (v *V2EnvironmentValues) Accept(visitor V2EnvironmentValuesVisitor) error {
	if v.typ == "EnvironmentId" || v.EnvironmentId != "" {
		return visitor.VisitEnvironmentId(v.EnvironmentId)
	}
	if v.typ == "MultipleEnvironmentUrlValues" || v.MultipleEnvironmentUrlValues != nil {
		return visitor.VisitMultipleEnvironmentUrlValues(v.MultipleEnvironmentUrlValues)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

var (
	v2HttpEndpointCodeSampleFieldDocs     = big.NewInt(1 << 0)
	v2HttpEndpointCodeSampleFieldName     = big.NewInt(1 << 1)
	v2HttpEndpointCodeSampleFieldLanguage = big.NewInt(1 << 2)
	v2HttpEndpointCodeSampleFieldCode     = big.NewInt(1 << 3)
)

type V2HttpEndpointCodeSample struct {
	Docs     *string `json:"docs,omitempty" url:"docs,omitempty"`
	Name     *string `json:"name,omitempty" url:"name,omitempty"`
	Language string  `json:"language" url:"language"`
	Code     string  `json:"code" url:"code"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (v *V2HttpEndpointCodeSample) GetDocs() *string {
	if v == nil {
		return nil
	}
	return v.Docs
}

func (v *V2HttpEndpointCodeSample) GetName() *string {
	if v == nil {
		return nil
	}
	return v.Name
}

func (v *V2HttpEndpointCodeSample) GetLanguage() string {
	if v == nil {
		return ""
	}
	return v.Language
}

func (v *V2HttpEndpointCodeSample) GetCode() string {
	if v == nil {
		return ""
	}
	return v.Code
}

func (v *V2HttpEndpointCodeSample) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V2HttpEndpointCodeSample) require(field *big.Int) {
	if v.explicitFields == nil {
		v.explicitFields = big.NewInt(0)
	}
	v.explicitFields.Or(v.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpEndpointCodeSample) SetDocs(docs *string) {
	v.Docs = docs
	v.require(v2HttpEndpointCodeSampleFieldDocs)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpEndpointCodeSample) SetName(name *string) {
	v.Name = name
	v.require(v2HttpEndpointCodeSampleFieldName)
}

// SetLanguage sets the Language field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpEndpointCodeSample) SetLanguage(language string) {
	v.Language = language
	v.require(v2HttpEndpointCodeSampleFieldLanguage)
}

// SetCode sets the Code field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpEndpointCodeSample) SetCode(code string) {
	v.Code = code
	v.require(v2HttpEndpointCodeSampleFieldCode)
}

func (v *V2HttpEndpointCodeSample) UnmarshalJSON(data []byte) error {
	type unmarshaler V2HttpEndpointCodeSample
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V2HttpEndpointCodeSample(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	return nil
}

func (v *V2HttpEndpointCodeSample) MarshalJSON() ([]byte, error) {
	type embed V2HttpEndpointCodeSample
	var marshaler = struct {
		embed
	}{
		embed: embed(*v),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, v.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (v *V2HttpEndpointCodeSample) String() string {
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

var (
	v2HttpEndpointExampleFieldDisplayName = big.NewInt(1 << 0)
	v2HttpEndpointExampleFieldRequest     = big.NewInt(1 << 1)
	v2HttpEndpointExampleFieldResponse    = big.NewInt(1 << 2)
	v2HttpEndpointExampleFieldCodeSamples = big.NewInt(1 << 3)
)

type V2HttpEndpointExample struct {
	DisplayName *string                     `json:"displayName,omitempty" url:"displayName,omitempty"`
	Request     *V2HttpEndpointRequest      `json:"request,omitempty" url:"request,omitempty"`
	Response    *V2HttpEndpointResponse     `json:"response,omitempty" url:"response,omitempty"`
	CodeSamples []*V2HttpEndpointCodeSample `json:"codeSamples,omitempty" url:"codeSamples,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (v *V2HttpEndpointExample) GetDisplayName() *string {
	if v == nil {
		return nil
	}
	return v.DisplayName
}

func (v *V2HttpEndpointExample) GetRequest() *V2HttpEndpointRequest {
	if v == nil {
		return nil
	}
	return v.Request
}

func (v *V2HttpEndpointExample) GetResponse() *V2HttpEndpointResponse {
	if v == nil {
		return nil
	}
	return v.Response
}

func (v *V2HttpEndpointExample) GetCodeSamples() []*V2HttpEndpointCodeSample {
	if v == nil {
		return nil
	}
	return v.CodeSamples
}

func (v *V2HttpEndpointExample) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V2HttpEndpointExample) require(field *big.Int) {
	if v.explicitFields == nil {
		v.explicitFields = big.NewInt(0)
	}
	v.explicitFields.Or(v.explicitFields, field)
}

// SetDisplayName sets the DisplayName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpEndpointExample) SetDisplayName(displayName *string) {
	v.DisplayName = displayName
	v.require(v2HttpEndpointExampleFieldDisplayName)
}

// SetRequest sets the Request field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpEndpointExample) SetRequest(request *V2HttpEndpointRequest) {
	v.Request = request
	v.require(v2HttpEndpointExampleFieldRequest)
}

// SetResponse sets the Response field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpEndpointExample) SetResponse(response *V2HttpEndpointResponse) {
	v.Response = response
	v.require(v2HttpEndpointExampleFieldResponse)
}

// SetCodeSamples sets the CodeSamples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpEndpointExample) SetCodeSamples(codeSamples []*V2HttpEndpointCodeSample) {
	v.CodeSamples = codeSamples
	v.require(v2HttpEndpointExampleFieldCodeSamples)
}

func (v *V2HttpEndpointExample) UnmarshalJSON(data []byte) error {
	type unmarshaler V2HttpEndpointExample
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V2HttpEndpointExample(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	return nil
}

func (v *V2HttpEndpointExample) MarshalJSON() ([]byte, error) {
	type embed V2HttpEndpointExample
	var marshaler = struct {
		embed
	}{
		embed: embed(*v),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, v.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (v *V2HttpEndpointExample) String() string {
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

var (
	v2HttpEndpointExamplesFieldUserSpecifiedExamples = big.NewInt(1 << 0)
	v2HttpEndpointExamplesFieldAutogeneratedExamples = big.NewInt(1 << 1)
)

type V2HttpEndpointExamples struct {
	UserSpecifiedExamples map[string]*V2HttpEndpointExample `json:"userSpecifiedExamples" url:"userSpecifiedExamples"`
	AutogeneratedExamples map[string]*V2HttpEndpointExample `json:"autogeneratedExamples" url:"autogeneratedExamples"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (v *V2HttpEndpointExamples) GetUserSpecifiedExamples() map[string]*V2HttpEndpointExample {
	if v == nil {
		return nil
	}
	return v.UserSpecifiedExamples
}

func (v *V2HttpEndpointExamples) GetAutogeneratedExamples() map[string]*V2HttpEndpointExample {
	if v == nil {
		return nil
	}
	return v.AutogeneratedExamples
}

func (v *V2HttpEndpointExamples) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V2HttpEndpointExamples) require(field *big.Int) {
	if v.explicitFields == nil {
		v.explicitFields = big.NewInt(0)
	}
	v.explicitFields.Or(v.explicitFields, field)
}

// SetUserSpecifiedExamples sets the UserSpecifiedExamples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpEndpointExamples) SetUserSpecifiedExamples(userSpecifiedExamples map[string]*V2HttpEndpointExample) {
	v.UserSpecifiedExamples = userSpecifiedExamples
	v.require(v2HttpEndpointExamplesFieldUserSpecifiedExamples)
}

// SetAutogeneratedExamples sets the AutogeneratedExamples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpEndpointExamples) SetAutogeneratedExamples(autogeneratedExamples map[string]*V2HttpEndpointExample) {
	v.AutogeneratedExamples = autogeneratedExamples
	v.require(v2HttpEndpointExamplesFieldAutogeneratedExamples)
}

func (v *V2HttpEndpointExamples) UnmarshalJSON(data []byte) error {
	type unmarshaler V2HttpEndpointExamples
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V2HttpEndpointExamples(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	return nil
}

func (v *V2HttpEndpointExamples) MarshalJSON() ([]byte, error) {
	type embed V2HttpEndpointExamples
	var marshaler = struct {
		embed
	}{
		embed: embed(*v),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, v.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (v *V2HttpEndpointExamples) String() string {
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

var (
	v2HttpEndpointRequestFieldDocs            = big.NewInt(1 << 0)
	v2HttpEndpointRequestFieldEndpoint        = big.NewInt(1 << 1)
	v2HttpEndpointRequestFieldBaseUrl         = big.NewInt(1 << 2)
	v2HttpEndpointRequestFieldEnvironment     = big.NewInt(1 << 3)
	v2HttpEndpointRequestFieldAuth            = big.NewInt(1 << 4)
	v2HttpEndpointRequestFieldPathParameters  = big.NewInt(1 << 5)
	v2HttpEndpointRequestFieldQueryParameters = big.NewInt(1 << 6)
	v2HttpEndpointRequestFieldHeaders         = big.NewInt(1 << 7)
	v2HttpEndpointRequestFieldRequestBody     = big.NewInt(1 << 8)
)

type V2HttpEndpointRequest struct {
	Docs            *string              `json:"docs,omitempty" url:"docs,omitempty"`
	Endpoint        *V2EndpointLocation  `json:"endpoint" url:"endpoint"`
	BaseUrl         *string              `json:"baseURL,omitempty" url:"baseURL,omitempty"`
	Environment     *V2EnvironmentValues `json:"environment,omitempty" url:"environment,omitempty"`
	Auth            *V2AuthValues        `json:"auth,omitempty" url:"auth,omitempty"`
	PathParameters  *V2ValueExamples     `json:"pathParameters,omitempty" url:"pathParameters,omitempty"`
	QueryParameters *V2ValueExamples     `json:"queryParameters,omitempty" url:"queryParameters,omitempty"`
	Headers         *V2ValueExamples     `json:"headers,omitempty" url:"headers,omitempty"`
	RequestBody     interface{}          `json:"requestBody,omitempty" url:"requestBody,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (v *V2HttpEndpointRequest) GetDocs() *string {
	if v == nil {
		return nil
	}
	return v.Docs
}

func (v *V2HttpEndpointRequest) GetEndpoint() *V2EndpointLocation {
	if v == nil {
		return nil
	}
	return v.Endpoint
}

func (v *V2HttpEndpointRequest) GetBaseUrl() *string {
	if v == nil {
		return nil
	}
	return v.BaseUrl
}

func (v *V2HttpEndpointRequest) GetEnvironment() *V2EnvironmentValues {
	if v == nil {
		return nil
	}
	return v.Environment
}

func (v *V2HttpEndpointRequest) GetAuth() *V2AuthValues {
	if v == nil {
		return nil
	}
	return v.Auth
}

func (v *V2HttpEndpointRequest) GetPathParameters() *V2ValueExamples {
	if v == nil {
		return nil
	}
	return v.PathParameters
}

func (v *V2HttpEndpointRequest) GetQueryParameters() *V2ValueExamples {
	if v == nil {
		return nil
	}
	return v.QueryParameters
}

func (v *V2HttpEndpointRequest) GetHeaders() *V2ValueExamples {
	if v == nil {
		return nil
	}
	return v.Headers
}

func (v *V2HttpEndpointRequest) GetRequestBody() interface{} {
	if v == nil {
		return nil
	}
	return v.RequestBody
}

func (v *V2HttpEndpointRequest) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V2HttpEndpointRequest) require(field *big.Int) {
	if v.explicitFields == nil {
		v.explicitFields = big.NewInt(0)
	}
	v.explicitFields.Or(v.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpEndpointRequest) SetDocs(docs *string) {
	v.Docs = docs
	v.require(v2HttpEndpointRequestFieldDocs)
}

// SetEndpoint sets the Endpoint field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpEndpointRequest) SetEndpoint(endpoint *V2EndpointLocation) {
	v.Endpoint = endpoint
	v.require(v2HttpEndpointRequestFieldEndpoint)
}

// SetBaseUrl sets the BaseUrl field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpEndpointRequest) SetBaseUrl(baseUrl *string) {
	v.BaseUrl = baseUrl
	v.require(v2HttpEndpointRequestFieldBaseUrl)
}

// SetEnvironment sets the Environment field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpEndpointRequest) SetEnvironment(environment *V2EnvironmentValues) {
	v.Environment = environment
	v.require(v2HttpEndpointRequestFieldEnvironment)
}

// SetAuth sets the Auth field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpEndpointRequest) SetAuth(auth *V2AuthValues) {
	v.Auth = auth
	v.require(v2HttpEndpointRequestFieldAuth)
}

// SetPathParameters sets the PathParameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpEndpointRequest) SetPathParameters(pathParameters *V2ValueExamples) {
	v.PathParameters = pathParameters
	v.require(v2HttpEndpointRequestFieldPathParameters)
}

// SetQueryParameters sets the QueryParameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpEndpointRequest) SetQueryParameters(queryParameters *V2ValueExamples) {
	v.QueryParameters = queryParameters
	v.require(v2HttpEndpointRequestFieldQueryParameters)
}

// SetHeaders sets the Headers field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpEndpointRequest) SetHeaders(headers *V2ValueExamples) {
	v.Headers = headers
	v.require(v2HttpEndpointRequestFieldHeaders)
}

// SetRequestBody sets the RequestBody field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpEndpointRequest) SetRequestBody(requestBody interface{}) {
	v.RequestBody = requestBody
	v.require(v2HttpEndpointRequestFieldRequestBody)
}

func (v *V2HttpEndpointRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler V2HttpEndpointRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V2HttpEndpointRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	return nil
}

func (v *V2HttpEndpointRequest) MarshalJSON() ([]byte, error) {
	type embed V2HttpEndpointRequest
	var marshaler = struct {
		embed
	}{
		embed: embed(*v),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, v.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (v *V2HttpEndpointRequest) String() string {
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

var (
	v2HttpEndpointResponseFieldDocs       = big.NewInt(1 << 0)
	v2HttpEndpointResponseFieldStatusCode = big.NewInt(1 << 1)
	v2HttpEndpointResponseFieldBody       = big.NewInt(1 << 2)
)

type V2HttpEndpointResponse struct {
	Docs       *string                     `json:"docs,omitempty" url:"docs,omitempty"`
	StatusCode *int                        `json:"statusCode,omitempty" url:"statusCode,omitempty"`
	Body       *V2HttpEndpointResponseBody `json:"body,omitempty" url:"body,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (v *V2HttpEndpointResponse) GetDocs() *string {
	if v == nil {
		return nil
	}
	return v.Docs
}

func (v *V2HttpEndpointResponse) GetStatusCode() *int {
	if v == nil {
		return nil
	}
	return v.StatusCode
}

func (v *V2HttpEndpointResponse) GetBody() *V2HttpEndpointResponseBody {
	if v == nil {
		return nil
	}
	return v.Body
}

func (v *V2HttpEndpointResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V2HttpEndpointResponse) require(field *big.Int) {
	if v.explicitFields == nil {
		v.explicitFields = big.NewInt(0)
	}
	v.explicitFields.Or(v.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpEndpointResponse) SetDocs(docs *string) {
	v.Docs = docs
	v.require(v2HttpEndpointResponseFieldDocs)
}

// SetStatusCode sets the StatusCode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpEndpointResponse) SetStatusCode(statusCode *int) {
	v.StatusCode = statusCode
	v.require(v2HttpEndpointResponseFieldStatusCode)
}

// SetBody sets the Body field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpEndpointResponse) SetBody(body *V2HttpEndpointResponseBody) {
	v.Body = body
	v.require(v2HttpEndpointResponseFieldBody)
}

func (v *V2HttpEndpointResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler V2HttpEndpointResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V2HttpEndpointResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	return nil
}

func (v *V2HttpEndpointResponse) MarshalJSON() ([]byte, error) {
	type embed V2HttpEndpointResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*v),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, v.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (v *V2HttpEndpointResponse) String() string {
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type V2HttpEndpointResponseBody struct {
	Type   string
	Error  interface{}
	Json   interface{}
	Stream []interface{}
}

func (v *V2HttpEndpointResponseBody) GetType() string {
	if v == nil {
		return ""
	}
	return v.Type
}

func (v *V2HttpEndpointResponseBody) GetError() interface{} {
	if v == nil {
		return nil
	}
	return v.Error
}

func (v *V2HttpEndpointResponseBody) GetJson() interface{} {
	if v == nil {
		return nil
	}
	return v.Json
}

func (v *V2HttpEndpointResponseBody) GetStream() []interface{} {
	if v == nil {
		return nil
	}
	return v.Stream
}

func (v *V2HttpEndpointResponseBody) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	v.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", v)
	}
	switch unmarshaler.Type {
	case "error":
		var valueUnmarshaler struct {
			Error interface{} `json:"value"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		v.Error = valueUnmarshaler.Error
	case "json":
		var valueUnmarshaler struct {
			Json interface{} `json:"value"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		v.Json = valueUnmarshaler.Json
	case "stream":
		var valueUnmarshaler struct {
			Stream []interface{} `json:"value"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		v.Stream = valueUnmarshaler.Stream
	}
	return nil
}

func (v V2HttpEndpointResponseBody) MarshalJSON() ([]byte, error) {
	if err := v.validate(); err != nil {
		return nil, err
	}
	if v.Error != nil {
		var marshaler = struct {
			Type  string      `json:"type"`
			Error interface{} `json:"value"`
		}{
			Type:  "error",
			Error: v.Error,
		}
		return json.Marshal(marshaler)
	}
	if v.Json != nil {
		var marshaler = struct {
			Type string      `json:"type"`
			Json interface{} `json:"value"`
		}{
			Type: "json",
			Json: v.Json,
		}
		return json.Marshal(marshaler)
	}
	if v.Stream != nil {
		var marshaler = struct {
			Type   string        `json:"type"`
			Stream []interface{} `json:"value"`
		}{
			Type:   "stream",
			Stream: v.Stream,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", v)
}

type V2HttpEndpointResponseBodyVisitor interface {
	VisitError(interface{}) error
	VisitJson(interface{}) error
	VisitStream([]interface{}) error
}

func (v *V2HttpEndpointResponseBody) Accept(visitor V2HttpEndpointResponseBodyVisitor) error {
	if v.Error != nil {
		return visitor.VisitError(v.Error)
	}
	if v.Json != nil {
		return visitor.VisitJson(v.Json)
	}
	if v.Stream != nil {
		return visitor.VisitStream(v.Stream)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", v)
}

func (v *V2HttpEndpointResponseBody) validate() error {
	if v == nil {
		return fmt.Errorf("type %T is nil", v)
	}
	var fields []string
	if v.Error != nil {
		fields = append(fields, "error")
	}
	if v.Json != nil {
		fields = append(fields, "json")
	}
	if v.Stream != nil {
		fields = append(fields, "stream")
	}
	if len(fields) == 0 {
		if v.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", v, v.Type)
		}
		return fmt.Errorf("type %T is empty", v)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", v, fields)
	}
	if v.Type != "" {
		field := fields[0]
		if v.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				v,
				v.Type,
				v,
			)
		}
	}
	return nil
}

type V2SchemaExample = interface{}

var (
	v2SchemaExamplesFieldUserSpecifiedExamples = big.NewInt(1 << 0)
	v2SchemaExamplesFieldAutogeneratedExamples = big.NewInt(1 << 1)
)

type V2SchemaExamples struct {
	UserSpecifiedExamples map[string]V2SchemaExample `json:"userSpecifiedExamples" url:"userSpecifiedExamples"`
	AutogeneratedExamples map[string]V2SchemaExample `json:"autogeneratedExamples" url:"autogeneratedExamples"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (v *V2SchemaExamples) GetUserSpecifiedExamples() map[string]V2SchemaExample {
	if v == nil {
		return nil
	}
	return v.UserSpecifiedExamples
}

func (v *V2SchemaExamples) GetAutogeneratedExamples() map[string]V2SchemaExample {
	if v == nil {
		return nil
	}
	return v.AutogeneratedExamples
}

func (v *V2SchemaExamples) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V2SchemaExamples) require(field *big.Int) {
	if v.explicitFields == nil {
		v.explicitFields = big.NewInt(0)
	}
	v.explicitFields.Or(v.explicitFields, field)
}

// SetUserSpecifiedExamples sets the UserSpecifiedExamples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2SchemaExamples) SetUserSpecifiedExamples(userSpecifiedExamples map[string]V2SchemaExample) {
	v.UserSpecifiedExamples = userSpecifiedExamples
	v.require(v2SchemaExamplesFieldUserSpecifiedExamples)
}

// SetAutogeneratedExamples sets the AutogeneratedExamples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2SchemaExamples) SetAutogeneratedExamples(autogeneratedExamples map[string]V2SchemaExample) {
	v.AutogeneratedExamples = autogeneratedExamples
	v.require(v2SchemaExamplesFieldAutogeneratedExamples)
}

func (v *V2SchemaExamples) UnmarshalJSON(data []byte) error {
	type unmarshaler V2SchemaExamples
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V2SchemaExamples(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	return nil
}

func (v *V2SchemaExamples) MarshalJSON() ([]byte, error) {
	type embed V2SchemaExamples
	var marshaler = struct {
		embed
	}{
		embed: embed(*v),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, v.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (v *V2SchemaExamples) String() string {
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type V2ValueExamples = map[string]interface{}

var (
	v2WebSocketEndpointLocationFieldPath = big.NewInt(1 << 0)
)

type V2WebSocketEndpointLocation struct {
	Path string `json:"path" url:"path"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (v *V2WebSocketEndpointLocation) GetPath() string {
	if v == nil {
		return ""
	}
	return v.Path
}

func (v *V2WebSocketEndpointLocation) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V2WebSocketEndpointLocation) require(field *big.Int) {
	if v.explicitFields == nil {
		v.explicitFields = big.NewInt(0)
	}
	v.explicitFields.Or(v.explicitFields, field)
}

// SetPath sets the Path field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2WebSocketEndpointLocation) SetPath(path string) {
	v.Path = path
	v.require(v2WebSocketEndpointLocationFieldPath)
}

func (v *V2WebSocketEndpointLocation) UnmarshalJSON(data []byte) error {
	type unmarshaler V2WebSocketEndpointLocation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V2WebSocketEndpointLocation(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	return nil
}

func (v *V2WebSocketEndpointLocation) MarshalJSON() ([]byte, error) {
	type embed V2WebSocketEndpointLocation
	var marshaler = struct {
		embed
	}{
		embed: embed(*v),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, v.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (v *V2WebSocketEndpointLocation) String() string {
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

var (
	v2WebSocketMessageExampleFieldType = big.NewInt(1 << 0)
	v2WebSocketMessageExampleFieldBody = big.NewInt(1 << 1)
)

type V2WebSocketMessageExample struct {
	// The same as websocket.WebsocketMessageId
	Type string      `json:"type" url:"type"`
	Body interface{} `json:"body" url:"body"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (v *V2WebSocketMessageExample) GetType() string {
	if v == nil {
		return ""
	}
	return v.Type
}

func (v *V2WebSocketMessageExample) GetBody() interface{} {
	if v == nil {
		return nil
	}
	return v.Body
}

func (v *V2WebSocketMessageExample) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V2WebSocketMessageExample) require(field *big.Int) {
	if v.explicitFields == nil {
		v.explicitFields = big.NewInt(0)
	}
	v.explicitFields.Or(v.explicitFields, field)
}

// SetType sets the Type field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2WebSocketMessageExample) SetType(type_ string) {
	v.Type = type_
	v.require(v2WebSocketMessageExampleFieldType)
}

// SetBody sets the Body field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2WebSocketMessageExample) SetBody(body interface{}) {
	v.Body = body
	v.require(v2WebSocketMessageExampleFieldBody)
}

func (v *V2WebSocketMessageExample) UnmarshalJSON(data []byte) error {
	type unmarshaler V2WebSocketMessageExample
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V2WebSocketMessageExample(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	return nil
}

func (v *V2WebSocketMessageExample) MarshalJSON() ([]byte, error) {
	type embed V2WebSocketMessageExample
	var marshaler = struct {
		embed
	}{
		embed: embed(*v),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, v.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (v *V2WebSocketMessageExample) String() string {
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

var (
	v2WebSocketSessionExampleFieldChannel         = big.NewInt(1 << 0)
	v2WebSocketSessionExampleFieldBaseUrl         = big.NewInt(1 << 1)
	v2WebSocketSessionExampleFieldEnvironment     = big.NewInt(1 << 2)
	v2WebSocketSessionExampleFieldAuth            = big.NewInt(1 << 3)
	v2WebSocketSessionExampleFieldPathParameters  = big.NewInt(1 << 4)
	v2WebSocketSessionExampleFieldQueryParameters = big.NewInt(1 << 5)
	v2WebSocketSessionExampleFieldHeaders         = big.NewInt(1 << 6)
	v2WebSocketSessionExampleFieldMessages        = big.NewInt(1 << 7)
)

type V2WebSocketSessionExample struct {
	Channel         *V2WebSocketEndpointLocation `json:"channel" url:"channel"`
	BaseUrl         *string                      `json:"baseURL,omitempty" url:"baseURL,omitempty"`
	Environment     *V2EnvironmentValues         `json:"environment,omitempty" url:"environment,omitempty"`
	Auth            *V2AuthValues                `json:"auth,omitempty" url:"auth,omitempty"`
	PathParameters  *V2ValueExamples             `json:"pathParameters,omitempty" url:"pathParameters,omitempty"`
	QueryParameters *V2ValueExamples             `json:"queryParameters,omitempty" url:"queryParameters,omitempty"`
	Headers         *V2ValueExamples             `json:"headers,omitempty" url:"headers,omitempty"`
	Messages        []*V2WebSocketMessageExample `json:"messages,omitempty" url:"messages,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (v *V2WebSocketSessionExample) GetChannel() *V2WebSocketEndpointLocation {
	if v == nil {
		return nil
	}
	return v.Channel
}

func (v *V2WebSocketSessionExample) GetBaseUrl() *string {
	if v == nil {
		return nil
	}
	return v.BaseUrl
}

func (v *V2WebSocketSessionExample) GetEnvironment() *V2EnvironmentValues {
	if v == nil {
		return nil
	}
	return v.Environment
}

func (v *V2WebSocketSessionExample) GetAuth() *V2AuthValues {
	if v == nil {
		return nil
	}
	return v.Auth
}

func (v *V2WebSocketSessionExample) GetPathParameters() *V2ValueExamples {
	if v == nil {
		return nil
	}
	return v.PathParameters
}

func (v *V2WebSocketSessionExample) GetQueryParameters() *V2ValueExamples {
	if v == nil {
		return nil
	}
	return v.QueryParameters
}

func (v *V2WebSocketSessionExample) GetHeaders() *V2ValueExamples {
	if v == nil {
		return nil
	}
	return v.Headers
}

func (v *V2WebSocketSessionExample) GetMessages() []*V2WebSocketMessageExample {
	if v == nil {
		return nil
	}
	return v.Messages
}

func (v *V2WebSocketSessionExample) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V2WebSocketSessionExample) require(field *big.Int) {
	if v.explicitFields == nil {
		v.explicitFields = big.NewInt(0)
	}
	v.explicitFields.Or(v.explicitFields, field)
}

// SetChannel sets the Channel field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2WebSocketSessionExample) SetChannel(channel *V2WebSocketEndpointLocation) {
	v.Channel = channel
	v.require(v2WebSocketSessionExampleFieldChannel)
}

// SetBaseUrl sets the BaseUrl field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2WebSocketSessionExample) SetBaseUrl(baseUrl *string) {
	v.BaseUrl = baseUrl
	v.require(v2WebSocketSessionExampleFieldBaseUrl)
}

// SetEnvironment sets the Environment field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2WebSocketSessionExample) SetEnvironment(environment *V2EnvironmentValues) {
	v.Environment = environment
	v.require(v2WebSocketSessionExampleFieldEnvironment)
}

// SetAuth sets the Auth field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2WebSocketSessionExample) SetAuth(auth *V2AuthValues) {
	v.Auth = auth
	v.require(v2WebSocketSessionExampleFieldAuth)
}

// SetPathParameters sets the PathParameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2WebSocketSessionExample) SetPathParameters(pathParameters *V2ValueExamples) {
	v.PathParameters = pathParameters
	v.require(v2WebSocketSessionExampleFieldPathParameters)
}

// SetQueryParameters sets the QueryParameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2WebSocketSessionExample) SetQueryParameters(queryParameters *V2ValueExamples) {
	v.QueryParameters = queryParameters
	v.require(v2WebSocketSessionExampleFieldQueryParameters)
}

// SetHeaders sets the Headers field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2WebSocketSessionExample) SetHeaders(headers *V2ValueExamples) {
	v.Headers = headers
	v.require(v2WebSocketSessionExampleFieldHeaders)
}

// SetMessages sets the Messages field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2WebSocketSessionExample) SetMessages(messages []*V2WebSocketMessageExample) {
	v.Messages = messages
	v.require(v2WebSocketSessionExampleFieldMessages)
}

func (v *V2WebSocketSessionExample) UnmarshalJSON(data []byte) error {
	type unmarshaler V2WebSocketSessionExample
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V2WebSocketSessionExample(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	return nil
}

func (v *V2WebSocketSessionExample) MarshalJSON() ([]byte, error) {
	type embed V2WebSocketSessionExample
	var marshaler = struct {
		embed
	}{
		embed: embed(*v),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, v.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (v *V2WebSocketSessionExample) String() string {
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

var (
	v2WebSocketSessionExamplesFieldAutogeneratedExamples = big.NewInt(1 << 0)
	v2WebSocketSessionExamplesFieldUserSpecifiedExamples = big.NewInt(1 << 1)
)

type V2WebSocketSessionExamples struct {
	AutogeneratedExamples map[string]*V2WebSocketSessionExample `json:"autogeneratedExamples" url:"autogeneratedExamples"`
	UserSpecifiedExamples map[string]*V2WebSocketSessionExample `json:"userSpecifiedExamples" url:"userSpecifiedExamples"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (v *V2WebSocketSessionExamples) GetAutogeneratedExamples() map[string]*V2WebSocketSessionExample {
	if v == nil {
		return nil
	}
	return v.AutogeneratedExamples
}

func (v *V2WebSocketSessionExamples) GetUserSpecifiedExamples() map[string]*V2WebSocketSessionExample {
	if v == nil {
		return nil
	}
	return v.UserSpecifiedExamples
}

func (v *V2WebSocketSessionExamples) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V2WebSocketSessionExamples) require(field *big.Int) {
	if v.explicitFields == nil {
		v.explicitFields = big.NewInt(0)
	}
	v.explicitFields.Or(v.explicitFields, field)
}

// SetAutogeneratedExamples sets the AutogeneratedExamples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2WebSocketSessionExamples) SetAutogeneratedExamples(autogeneratedExamples map[string]*V2WebSocketSessionExample) {
	v.AutogeneratedExamples = autogeneratedExamples
	v.require(v2WebSocketSessionExamplesFieldAutogeneratedExamples)
}

// SetUserSpecifiedExamples sets the UserSpecifiedExamples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2WebSocketSessionExamples) SetUserSpecifiedExamples(userSpecifiedExamples map[string]*V2WebSocketSessionExample) {
	v.UserSpecifiedExamples = userSpecifiedExamples
	v.require(v2WebSocketSessionExamplesFieldUserSpecifiedExamples)
}

func (v *V2WebSocketSessionExamples) UnmarshalJSON(data []byte) error {
	type unmarshaler V2WebSocketSessionExamples
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V2WebSocketSessionExamples(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	return nil
}

func (v *V2WebSocketSessionExamples) MarshalJSON() ([]byte, error) {
	type embed V2WebSocketSessionExamples
	var marshaler = struct {
		embed
	}{
		embed: embed(*v),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, v.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (v *V2WebSocketSessionExamples) String() string {
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

var (
	v2WebhookExampleFieldName    = big.NewInt(1 << 0)
	v2WebhookExampleFieldPayload = big.NewInt(1 << 1)
)

type V2WebhookExample struct {
	Name    *string     `json:"name,omitempty" url:"name,omitempty"`
	Payload interface{} `json:"payload" url:"payload"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (v *V2WebhookExample) GetName() *string {
	if v == nil {
		return nil
	}
	return v.Name
}

func (v *V2WebhookExample) GetPayload() interface{} {
	if v == nil {
		return nil
	}
	return v.Payload
}

func (v *V2WebhookExample) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V2WebhookExample) require(field *big.Int) {
	if v.explicitFields == nil {
		v.explicitFields = big.NewInt(0)
	}
	v.explicitFields.Or(v.explicitFields, field)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2WebhookExample) SetName(name *string) {
	v.Name = name
	v.require(v2WebhookExampleFieldName)
}

// SetPayload sets the Payload field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2WebhookExample) SetPayload(payload interface{}) {
	v.Payload = payload
	v.require(v2WebhookExampleFieldPayload)
}

func (v *V2WebhookExample) UnmarshalJSON(data []byte) error {
	type unmarshaler V2WebhookExample
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V2WebhookExample(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	return nil
}

func (v *V2WebhookExample) MarshalJSON() ([]byte, error) {
	type embed V2WebhookExample
	var marshaler = struct {
		embed
	}{
		embed: embed(*v),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, v.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (v *V2WebhookExample) String() string {
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

var (
	v2WebhookExamplesFieldUserSpecifiedExamples = big.NewInt(1 << 0)
	v2WebhookExamplesFieldAutogeneratedExamples = big.NewInt(1 << 1)
)

type V2WebhookExamples struct {
	UserSpecifiedExamples map[string]*V2WebhookExample `json:"userSpecifiedExamples" url:"userSpecifiedExamples"`
	AutogeneratedExamples map[string]*V2WebhookExample `json:"autogeneratedExamples" url:"autogeneratedExamples"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (v *V2WebhookExamples) GetUserSpecifiedExamples() map[string]*V2WebhookExample {
	if v == nil {
		return nil
	}
	return v.UserSpecifiedExamples
}

func (v *V2WebhookExamples) GetAutogeneratedExamples() map[string]*V2WebhookExample {
	if v == nil {
		return nil
	}
	return v.AutogeneratedExamples
}

func (v *V2WebhookExamples) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V2WebhookExamples) require(field *big.Int) {
	if v.explicitFields == nil {
		v.explicitFields = big.NewInt(0)
	}
	v.explicitFields.Or(v.explicitFields, field)
}

// SetUserSpecifiedExamples sets the UserSpecifiedExamples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2WebhookExamples) SetUserSpecifiedExamples(userSpecifiedExamples map[string]*V2WebhookExample) {
	v.UserSpecifiedExamples = userSpecifiedExamples
	v.require(v2WebhookExamplesFieldUserSpecifiedExamples)
}

// SetAutogeneratedExamples sets the AutogeneratedExamples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2WebhookExamples) SetAutogeneratedExamples(autogeneratedExamples map[string]*V2WebhookExample) {
	v.AutogeneratedExamples = autogeneratedExamples
	v.require(v2WebhookExamplesFieldAutogeneratedExamples)
}

func (v *V2WebhookExamples) UnmarshalJSON(data []byte) error {
	type unmarshaler V2WebhookExamples
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V2WebhookExamples(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	return nil
}

func (v *V2WebhookExamples) MarshalJSON() ([]byte, error) {
	type embed V2WebhookExamples
	var marshaler = struct {
		embed
	}{
		embed: embed(*v),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, v.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (v *V2WebhookExamples) String() string {
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

var (
	withV2ExamplesFieldV2Examples = big.NewInt(1 << 0)
)

type WithV2Examples struct {
	V2Examples *V2SchemaExamples `json:"v2Examples,omitempty" url:"v2Examples,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (w *WithV2Examples) GetV2Examples() *V2SchemaExamples {
	if w == nil {
		return nil
	}
	return w.V2Examples
}

func (w *WithV2Examples) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WithV2Examples) require(field *big.Int) {
	if w.explicitFields == nil {
		w.explicitFields = big.NewInt(0)
	}
	w.explicitFields.Or(w.explicitFields, field)
}

// SetV2Examples sets the V2Examples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (w *WithV2Examples) SetV2Examples(v2Examples *V2SchemaExamples) {
	w.V2Examples = v2Examples
	w.require(withV2ExamplesFieldV2Examples)
}

func (w *WithV2Examples) UnmarshalJSON(data []byte) error {
	type unmarshaler WithV2Examples
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WithV2Examples(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	return nil
}

func (w *WithV2Examples) MarshalJSON() ([]byte, error) {
	type embed WithV2Examples
	var marshaler = struct {
		embed
	}{
		embed: embed(*w),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, w.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (w *WithV2Examples) String() string {
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}
