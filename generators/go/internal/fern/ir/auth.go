// Code generated by Fern. DO NOT EDIT.

package ir

import (
	json "encoding/json"
	fmt "fmt"
	big "math/big"

	common "github.com/fern-api/fern-go/internal/fern/ir/common"
	internal "github.com/fern-api/fern-go/internal/fern/ir/internal"
)

var (
	apiAuthFieldDocs        = big.NewInt(1 << 0)
	apiAuthFieldRequirement = big.NewInt(1 << 1)
	apiAuthFieldSchemes     = big.NewInt(1 << 2)
)

type ApiAuth struct {
	Docs        *string                `json:"docs,omitempty" url:"docs,omitempty"`
	Requirement AuthSchemesRequirement `json:"requirement" url:"requirement"`
	Schemes     []*AuthScheme          `json:"schemes" url:"schemes"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (a *ApiAuth) GetDocs() *string {
	if a == nil {
		return nil
	}
	return a.Docs
}

func (a *ApiAuth) GetRequirement() AuthSchemesRequirement {
	if a == nil {
		return ""
	}
	return a.Requirement
}

func (a *ApiAuth) GetSchemes() []*AuthScheme {
	if a == nil {
		return nil
	}
	return a.Schemes
}

func (a *ApiAuth) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApiAuth) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *ApiAuth) SetDocs(docs *string) {
	a.Docs = docs
	a.require(apiAuthFieldDocs)
}

// SetRequirement sets the Requirement field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *ApiAuth) SetRequirement(requirement AuthSchemesRequirement) {
	a.Requirement = requirement
	a.require(apiAuthFieldRequirement)
}

// SetSchemes sets the Schemes field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *ApiAuth) SetSchemes(schemes []*AuthScheme) {
	a.Schemes = schemes
	a.require(apiAuthFieldSchemes)
}

func (a *ApiAuth) UnmarshalJSON(data []byte) error {
	type unmarshaler ApiAuth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApiAuth(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	return nil
}

func (a *ApiAuth) MarshalJSON() ([]byte, error) {
	type embed ApiAuth
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *ApiAuth) String() string {
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AuthScheme struct {
	Type     string
	Bearer   *BearerAuthScheme
	Basic    *BasicAuthScheme
	Header   *HeaderAuthScheme
	Oauth    *OAuthScheme
	Inferred *InferredAuthScheme
}

func (a *AuthScheme) GetType() string {
	if a == nil {
		return ""
	}
	return a.Type
}

func (a *AuthScheme) GetBearer() *BearerAuthScheme {
	if a == nil {
		return nil
	}
	return a.Bearer
}

func (a *AuthScheme) GetBasic() *BasicAuthScheme {
	if a == nil {
		return nil
	}
	return a.Basic
}

func (a *AuthScheme) GetHeader() *HeaderAuthScheme {
	if a == nil {
		return nil
	}
	return a.Header
}

func (a *AuthScheme) GetOauth() *OAuthScheme {
	if a == nil {
		return nil
	}
	return a.Oauth
}

func (a *AuthScheme) GetInferred() *InferredAuthScheme {
	if a == nil {
		return nil
	}
	return a.Inferred
}

func (a *AuthScheme) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"_type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	a.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant _type", a)
	}
	switch unmarshaler.Type {
	case "bearer":
		value := new(BearerAuthScheme)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Bearer = value
	case "basic":
		value := new(BasicAuthScheme)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Basic = value
	case "header":
		value := new(HeaderAuthScheme)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Header = value
	case "oauth":
		value := new(OAuthScheme)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Oauth = value
	case "inferred":
		value := new(InferredAuthScheme)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Inferred = value
	}
	return nil
}

func (a AuthScheme) MarshalJSON() ([]byte, error) {
	if err := a.validate(); err != nil {
		return nil, err
	}
	if a.Bearer != nil {
		return internal.MarshalJSONWithExtraProperty(a.Bearer, "_type", "bearer")
	}
	if a.Basic != nil {
		return internal.MarshalJSONWithExtraProperty(a.Basic, "_type", "basic")
	}
	if a.Header != nil {
		return internal.MarshalJSONWithExtraProperty(a.Header, "_type", "header")
	}
	if a.Oauth != nil {
		return internal.MarshalJSONWithExtraProperty(a.Oauth, "_type", "oauth")
	}
	if a.Inferred != nil {
		return internal.MarshalJSONWithExtraProperty(a.Inferred, "_type", "inferred")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", a)
}

type AuthSchemeVisitor interface {
	VisitBearer(*BearerAuthScheme) error
	VisitBasic(*BasicAuthScheme) error
	VisitHeader(*HeaderAuthScheme) error
	VisitOauth(*OAuthScheme) error
	VisitInferred(*InferredAuthScheme) error
}

func (a *AuthScheme) Accept(visitor AuthSchemeVisitor) error {
	if a.Bearer != nil {
		return visitor.VisitBearer(a.Bearer)
	}
	if a.Basic != nil {
		return visitor.VisitBasic(a.Basic)
	}
	if a.Header != nil {
		return visitor.VisitHeader(a.Header)
	}
	if a.Oauth != nil {
		return visitor.VisitOauth(a.Oauth)
	}
	if a.Inferred != nil {
		return visitor.VisitInferred(a.Inferred)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", a)
}

func (a *AuthScheme) validate() error {
	if a == nil {
		return fmt.Errorf("type %T is nil", a)
	}
	var fields []string
	if a.Bearer != nil {
		fields = append(fields, "bearer")
	}
	if a.Basic != nil {
		fields = append(fields, "basic")
	}
	if a.Header != nil {
		fields = append(fields, "header")
	}
	if a.Oauth != nil {
		fields = append(fields, "oauth")
	}
	if a.Inferred != nil {
		fields = append(fields, "inferred")
	}
	if len(fields) == 0 {
		if a.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", a, a.Type)
		}
		return fmt.Errorf("type %T is empty", a)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", a, fields)
	}
	if a.Type != "" {
		field := fields[0]
		if a.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				a,
				a.Type,
				a,
			)
		}
	}
	return nil
}

type AuthSchemeKey = string

type AuthSchemesRequirement string

const (
	AuthSchemesRequirementAll AuthSchemesRequirement = "ALL"
	AuthSchemesRequirementAny AuthSchemesRequirement = "ANY"
)

func NewAuthSchemesRequirementFromString(s string) (AuthSchemesRequirement, error) {
	switch s {
	case "ALL":
		return AuthSchemesRequirementAll, nil
	case "ANY":
		return AuthSchemesRequirementAny, nil
	}
	var t AuthSchemesRequirement
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AuthSchemesRequirement) Ptr() *AuthSchemesRequirement {
	return &a
}

type AuthScope = string

var (
	baseAuthSchemeFieldDocs = big.NewInt(1 << 0)
	baseAuthSchemeFieldKey  = big.NewInt(1 << 1)
)

type BaseAuthScheme struct {
	Docs *string `json:"docs,omitempty" url:"docs,omitempty"`
	// The unique key for this auth scheme. This will be used to reference the scheme in endpoint auth requirements.
	// Defaults to the type of the auth scheme if not provided.
	Key AuthSchemeKey `json:"key" url:"key"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (b *BaseAuthScheme) GetDocs() *string {
	if b == nil {
		return nil
	}
	return b.Docs
}

func (b *BaseAuthScheme) GetKey() AuthSchemeKey {
	if b == nil {
		return ""
	}
	return b.Key
}

func (b *BaseAuthScheme) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BaseAuthScheme) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseAuthScheme) SetDocs(docs *string) {
	b.Docs = docs
	b.require(baseAuthSchemeFieldDocs)
}

// SetKey sets the Key field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BaseAuthScheme) SetKey(key AuthSchemeKey) {
	b.Key = key
	b.require(baseAuthSchemeFieldKey)
}

func (b *BaseAuthScheme) UnmarshalJSON(data []byte) error {
	type unmarshaler BaseAuthScheme
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BaseAuthScheme(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	return nil
}

func (b *BaseAuthScheme) MarshalJSON() ([]byte, error) {
	type embed BaseAuthScheme
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BaseAuthScheme) String() string {
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	basicAuthSchemeFieldDocs           = big.NewInt(1 << 0)
	basicAuthSchemeFieldKey            = big.NewInt(1 << 1)
	basicAuthSchemeFieldUsername       = big.NewInt(1 << 2)
	basicAuthSchemeFieldUsernameEnvVar = big.NewInt(1 << 3)
	basicAuthSchemeFieldPassword       = big.NewInt(1 << 4)
	basicAuthSchemeFieldPasswordEnvVar = big.NewInt(1 << 5)
)

type BasicAuthScheme struct {
	Docs *string `json:"docs,omitempty" url:"docs,omitempty"`
	// The unique key for this auth scheme. This will be used to reference the scheme in endpoint auth requirements.
	// Defaults to the type of the auth scheme if not provided.
	Key      AuthSchemeKey `json:"key" url:"key"`
	Username *common.Name  `json:"username" url:"username"`
	// The environment variable the SDK should use to read the username.
	UsernameEnvVar *EnvironmentVariable `json:"usernameEnvVar,omitempty" url:"usernameEnvVar,omitempty"`
	Password       *common.Name         `json:"password" url:"password"`
	// The environment variable the SDK should use to read the password.
	PasswordEnvVar *EnvironmentVariable `json:"passwordEnvVar,omitempty" url:"passwordEnvVar,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (b *BasicAuthScheme) GetDocs() *string {
	if b == nil {
		return nil
	}
	return b.Docs
}

func (b *BasicAuthScheme) GetKey() AuthSchemeKey {
	if b == nil {
		return ""
	}
	return b.Key
}

func (b *BasicAuthScheme) GetUsername() *common.Name {
	if b == nil {
		return nil
	}
	return b.Username
}

func (b *BasicAuthScheme) GetUsernameEnvVar() *EnvironmentVariable {
	if b == nil {
		return nil
	}
	return b.UsernameEnvVar
}

func (b *BasicAuthScheme) GetPassword() *common.Name {
	if b == nil {
		return nil
	}
	return b.Password
}

func (b *BasicAuthScheme) GetPasswordEnvVar() *EnvironmentVariable {
	if b == nil {
		return nil
	}
	return b.PasswordEnvVar
}

func (b *BasicAuthScheme) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BasicAuthScheme) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BasicAuthScheme) SetDocs(docs *string) {
	b.Docs = docs
	b.require(basicAuthSchemeFieldDocs)
}

// SetKey sets the Key field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BasicAuthScheme) SetKey(key AuthSchemeKey) {
	b.Key = key
	b.require(basicAuthSchemeFieldKey)
}

// SetUsername sets the Username field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BasicAuthScheme) SetUsername(username *common.Name) {
	b.Username = username
	b.require(basicAuthSchemeFieldUsername)
}

// SetUsernameEnvVar sets the UsernameEnvVar field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BasicAuthScheme) SetUsernameEnvVar(usernameEnvVar *EnvironmentVariable) {
	b.UsernameEnvVar = usernameEnvVar
	b.require(basicAuthSchemeFieldUsernameEnvVar)
}

// SetPassword sets the Password field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BasicAuthScheme) SetPassword(password *common.Name) {
	b.Password = password
	b.require(basicAuthSchemeFieldPassword)
}

// SetPasswordEnvVar sets the PasswordEnvVar field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BasicAuthScheme) SetPasswordEnvVar(passwordEnvVar *EnvironmentVariable) {
	b.PasswordEnvVar = passwordEnvVar
	b.require(basicAuthSchemeFieldPasswordEnvVar)
}

func (b *BasicAuthScheme) UnmarshalJSON(data []byte) error {
	type unmarshaler BasicAuthScheme
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BasicAuthScheme(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	return nil
}

func (b *BasicAuthScheme) MarshalJSON() ([]byte, error) {
	type embed BasicAuthScheme
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BasicAuthScheme) String() string {
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	bearerAuthSchemeFieldDocs        = big.NewInt(1 << 0)
	bearerAuthSchemeFieldKey         = big.NewInt(1 << 1)
	bearerAuthSchemeFieldToken       = big.NewInt(1 << 2)
	bearerAuthSchemeFieldTokenEnvVar = big.NewInt(1 << 3)
)

type BearerAuthScheme struct {
	Docs *string `json:"docs,omitempty" url:"docs,omitempty"`
	// The unique key for this auth scheme. This will be used to reference the scheme in endpoint auth requirements.
	// Defaults to the type of the auth scheme if not provided.
	Key   AuthSchemeKey `json:"key" url:"key"`
	Token *common.Name  `json:"token" url:"token"`
	// The environment variable the SDK should use to read the token.
	TokenEnvVar *EnvironmentVariable `json:"tokenEnvVar,omitempty" url:"tokenEnvVar,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (b *BearerAuthScheme) GetDocs() *string {
	if b == nil {
		return nil
	}
	return b.Docs
}

func (b *BearerAuthScheme) GetKey() AuthSchemeKey {
	if b == nil {
		return ""
	}
	return b.Key
}

func (b *BearerAuthScheme) GetToken() *common.Name {
	if b == nil {
		return nil
	}
	return b.Token
}

func (b *BearerAuthScheme) GetTokenEnvVar() *EnvironmentVariable {
	if b == nil {
		return nil
	}
	return b.TokenEnvVar
}

func (b *BearerAuthScheme) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BearerAuthScheme) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BearerAuthScheme) SetDocs(docs *string) {
	b.Docs = docs
	b.require(bearerAuthSchemeFieldDocs)
}

// SetKey sets the Key field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BearerAuthScheme) SetKey(key AuthSchemeKey) {
	b.Key = key
	b.require(bearerAuthSchemeFieldKey)
}

// SetToken sets the Token field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BearerAuthScheme) SetToken(token *common.Name) {
	b.Token = token
	b.require(bearerAuthSchemeFieldToken)
}

// SetTokenEnvVar sets the TokenEnvVar field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BearerAuthScheme) SetTokenEnvVar(tokenEnvVar *EnvironmentVariable) {
	b.TokenEnvVar = tokenEnvVar
	b.require(bearerAuthSchemeFieldTokenEnvVar)
}

func (b *BearerAuthScheme) UnmarshalJSON(data []byte) error {
	type unmarshaler BearerAuthScheme
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BearerAuthScheme(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	return nil
}

func (b *BearerAuthScheme) MarshalJSON() ([]byte, error) {
	type embed BearerAuthScheme
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BearerAuthScheme) String() string {
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type EnvironmentVariable = string

var (
	headerAuthSchemeFieldDocs         = big.NewInt(1 << 0)
	headerAuthSchemeFieldKey          = big.NewInt(1 << 1)
	headerAuthSchemeFieldName         = big.NewInt(1 << 2)
	headerAuthSchemeFieldValueType    = big.NewInt(1 << 3)
	headerAuthSchemeFieldPrefix       = big.NewInt(1 << 4)
	headerAuthSchemeFieldHeaderEnvVar = big.NewInt(1 << 5)
)

type HeaderAuthScheme struct {
	Docs *string `json:"docs,omitempty" url:"docs,omitempty"`
	// The unique key for this auth scheme. This will be used to reference the scheme in endpoint auth requirements.
	// Defaults to the type of the auth scheme if not provided.
	Key       AuthSchemeKey            `json:"key" url:"key"`
	Name      *common.NameAndWireValue `json:"name" url:"name"`
	ValueType *TypeReference           `json:"valueType" url:"valueType"`
	Prefix    *string                  `json:"prefix,omitempty" url:"prefix,omitempty"`
	// The environment variable the SDK should use to read the header.
	HeaderEnvVar *EnvironmentVariable `json:"headerEnvVar,omitempty" url:"headerEnvVar,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (h *HeaderAuthScheme) GetDocs() *string {
	if h == nil {
		return nil
	}
	return h.Docs
}

func (h *HeaderAuthScheme) GetKey() AuthSchemeKey {
	if h == nil {
		return ""
	}
	return h.Key
}

func (h *HeaderAuthScheme) GetName() *common.NameAndWireValue {
	if h == nil {
		return nil
	}
	return h.Name
}

func (h *HeaderAuthScheme) GetValueType() *TypeReference {
	if h == nil {
		return nil
	}
	return h.ValueType
}

func (h *HeaderAuthScheme) GetPrefix() *string {
	if h == nil {
		return nil
	}
	return h.Prefix
}

func (h *HeaderAuthScheme) GetHeaderEnvVar() *EnvironmentVariable {
	if h == nil {
		return nil
	}
	return h.HeaderEnvVar
}

func (h *HeaderAuthScheme) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HeaderAuthScheme) require(field *big.Int) {
	if h.explicitFields == nil {
		h.explicitFields = big.NewInt(0)
	}
	h.explicitFields.Or(h.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HeaderAuthScheme) SetDocs(docs *string) {
	h.Docs = docs
	h.require(headerAuthSchemeFieldDocs)
}

// SetKey sets the Key field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HeaderAuthScheme) SetKey(key AuthSchemeKey) {
	h.Key = key
	h.require(headerAuthSchemeFieldKey)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HeaderAuthScheme) SetName(name *common.NameAndWireValue) {
	h.Name = name
	h.require(headerAuthSchemeFieldName)
}

// SetValueType sets the ValueType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HeaderAuthScheme) SetValueType(valueType *TypeReference) {
	h.ValueType = valueType
	h.require(headerAuthSchemeFieldValueType)
}

// SetPrefix sets the Prefix field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HeaderAuthScheme) SetPrefix(prefix *string) {
	h.Prefix = prefix
	h.require(headerAuthSchemeFieldPrefix)
}

// SetHeaderEnvVar sets the HeaderEnvVar field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HeaderAuthScheme) SetHeaderEnvVar(headerEnvVar *EnvironmentVariable) {
	h.HeaderEnvVar = headerEnvVar
	h.require(headerAuthSchemeFieldHeaderEnvVar)
}

func (h *HeaderAuthScheme) UnmarshalJSON(data []byte) error {
	type unmarshaler HeaderAuthScheme
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HeaderAuthScheme(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	return nil
}

func (h *HeaderAuthScheme) MarshalJSON() ([]byte, error) {
	type embed HeaderAuthScheme
	var marshaler = struct {
		embed
	}{
		embed: embed(*h),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, h.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (h *HeaderAuthScheme) String() string {
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

var (
	inferredAuthSchemeFieldDocs          = big.NewInt(1 << 0)
	inferredAuthSchemeFieldKey           = big.NewInt(1 << 1)
	inferredAuthSchemeFieldTokenEndpoint = big.NewInt(1 << 2)
)

type InferredAuthScheme struct {
	Docs *string `json:"docs,omitempty" url:"docs,omitempty"`
	// The unique key for this auth scheme. This will be used to reference the scheme in endpoint auth requirements.
	// Defaults to the type of the auth scheme if not provided.
	Key           AuthSchemeKey                    `json:"key" url:"key"`
	TokenEndpoint *InferredAuthSchemeTokenEndpoint `json:"tokenEndpoint" url:"tokenEndpoint"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (i *InferredAuthScheme) GetDocs() *string {
	if i == nil {
		return nil
	}
	return i.Docs
}

func (i *InferredAuthScheme) GetKey() AuthSchemeKey {
	if i == nil {
		return ""
	}
	return i.Key
}

func (i *InferredAuthScheme) GetTokenEndpoint() *InferredAuthSchemeTokenEndpoint {
	if i == nil {
		return nil
	}
	return i.TokenEndpoint
}

func (i *InferredAuthScheme) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InferredAuthScheme) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InferredAuthScheme) SetDocs(docs *string) {
	i.Docs = docs
	i.require(inferredAuthSchemeFieldDocs)
}

// SetKey sets the Key field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InferredAuthScheme) SetKey(key AuthSchemeKey) {
	i.Key = key
	i.require(inferredAuthSchemeFieldKey)
}

// SetTokenEndpoint sets the TokenEndpoint field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InferredAuthScheme) SetTokenEndpoint(tokenEndpoint *InferredAuthSchemeTokenEndpoint) {
	i.TokenEndpoint = tokenEndpoint
	i.require(inferredAuthSchemeFieldTokenEndpoint)
}

func (i *InferredAuthScheme) UnmarshalJSON(data []byte) error {
	type unmarshaler InferredAuthScheme
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InferredAuthScheme(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	return nil
}

func (i *InferredAuthScheme) MarshalJSON() ([]byte, error) {
	type embed InferredAuthScheme
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *InferredAuthScheme) String() string {
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

var (
	inferredAuthSchemeTokenEndpointFieldEndpoint                    = big.NewInt(1 << 0)
	inferredAuthSchemeTokenEndpointFieldExpiryProperty              = big.NewInt(1 << 1)
	inferredAuthSchemeTokenEndpointFieldAuthenticatedRequestHeaders = big.NewInt(1 << 2)
)

type InferredAuthSchemeTokenEndpoint struct {
	Endpoint                    *EndpointReference                    `json:"endpoint" url:"endpoint"`
	ExpiryProperty              *ResponseProperty                     `json:"expiryProperty,omitempty" url:"expiryProperty,omitempty"`
	AuthenticatedRequestHeaders []*InferredAuthenticatedRequestHeader `json:"authenticatedRequestHeaders" url:"authenticatedRequestHeaders"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (i *InferredAuthSchemeTokenEndpoint) GetEndpoint() *EndpointReference {
	if i == nil {
		return nil
	}
	return i.Endpoint
}

func (i *InferredAuthSchemeTokenEndpoint) GetExpiryProperty() *ResponseProperty {
	if i == nil {
		return nil
	}
	return i.ExpiryProperty
}

func (i *InferredAuthSchemeTokenEndpoint) GetAuthenticatedRequestHeaders() []*InferredAuthenticatedRequestHeader {
	if i == nil {
		return nil
	}
	return i.AuthenticatedRequestHeaders
}

func (i *InferredAuthSchemeTokenEndpoint) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InferredAuthSchemeTokenEndpoint) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetEndpoint sets the Endpoint field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InferredAuthSchemeTokenEndpoint) SetEndpoint(endpoint *EndpointReference) {
	i.Endpoint = endpoint
	i.require(inferredAuthSchemeTokenEndpointFieldEndpoint)
}

// SetExpiryProperty sets the ExpiryProperty field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InferredAuthSchemeTokenEndpoint) SetExpiryProperty(expiryProperty *ResponseProperty) {
	i.ExpiryProperty = expiryProperty
	i.require(inferredAuthSchemeTokenEndpointFieldExpiryProperty)
}

// SetAuthenticatedRequestHeaders sets the AuthenticatedRequestHeaders field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InferredAuthSchemeTokenEndpoint) SetAuthenticatedRequestHeaders(authenticatedRequestHeaders []*InferredAuthenticatedRequestHeader) {
	i.AuthenticatedRequestHeaders = authenticatedRequestHeaders
	i.require(inferredAuthSchemeTokenEndpointFieldAuthenticatedRequestHeaders)
}

func (i *InferredAuthSchemeTokenEndpoint) UnmarshalJSON(data []byte) error {
	type unmarshaler InferredAuthSchemeTokenEndpoint
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InferredAuthSchemeTokenEndpoint(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	return nil
}

func (i *InferredAuthSchemeTokenEndpoint) MarshalJSON() ([]byte, error) {
	type embed InferredAuthSchemeTokenEndpoint
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *InferredAuthSchemeTokenEndpoint) String() string {
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// A header that will be set on HTTP requests when the inferred auth scheme is applied to an endpoint. These are not headers for the authorization endpoint.
var (
	inferredAuthenticatedRequestHeaderFieldResponseProperty = big.NewInt(1 << 0)
	inferredAuthenticatedRequestHeaderFieldHeaderName       = big.NewInt(1 << 1)
	inferredAuthenticatedRequestHeaderFieldValuePrefix      = big.NewInt(1 << 2)
)

type InferredAuthenticatedRequestHeader struct {
	// The property to retrieve the header value from the get token or refresh endpoint response.
	ResponseProperty *ResponseProperty `json:"responseProperty" url:"responseProperty"`
	// The header name to put the token in for any authenticated HTTP request.
	// Defaults to `Authorization`.
	HeaderName string `json:"headerName" url:"headerName"`
	// Commonly used for setting the `Authorization` scheme, but could be used for other things.
	// For `Authorization` header, the default will be `Bearer `, but `undefined` for other headers.
	ValuePrefix *string `json:"valuePrefix,omitempty" url:"valuePrefix,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (i *InferredAuthenticatedRequestHeader) GetResponseProperty() *ResponseProperty {
	if i == nil {
		return nil
	}
	return i.ResponseProperty
}

func (i *InferredAuthenticatedRequestHeader) GetHeaderName() string {
	if i == nil {
		return ""
	}
	return i.HeaderName
}

func (i *InferredAuthenticatedRequestHeader) GetValuePrefix() *string {
	if i == nil {
		return nil
	}
	return i.ValuePrefix
}

func (i *InferredAuthenticatedRequestHeader) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InferredAuthenticatedRequestHeader) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetResponseProperty sets the ResponseProperty field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InferredAuthenticatedRequestHeader) SetResponseProperty(responseProperty *ResponseProperty) {
	i.ResponseProperty = responseProperty
	i.require(inferredAuthenticatedRequestHeaderFieldResponseProperty)
}

// SetHeaderName sets the HeaderName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InferredAuthenticatedRequestHeader) SetHeaderName(headerName string) {
	i.HeaderName = headerName
	i.require(inferredAuthenticatedRequestHeaderFieldHeaderName)
}

// SetValuePrefix sets the ValuePrefix field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InferredAuthenticatedRequestHeader) SetValuePrefix(valuePrefix *string) {
	i.ValuePrefix = valuePrefix
	i.require(inferredAuthenticatedRequestHeaderFieldValuePrefix)
}

func (i *InferredAuthenticatedRequestHeader) UnmarshalJSON(data []byte) error {
	type unmarshaler InferredAuthenticatedRequestHeader
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InferredAuthenticatedRequestHeader(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	return nil
}

func (i *InferredAuthenticatedRequestHeader) MarshalJSON() ([]byte, error) {
	type embed InferredAuthenticatedRequestHeader
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *InferredAuthenticatedRequestHeader) String() string {
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// The properties required to retrieve an OAuth token.
var (
	oAuthAccessTokenRequestPropertiesFieldClientId         = big.NewInt(1 << 0)
	oAuthAccessTokenRequestPropertiesFieldClientSecret     = big.NewInt(1 << 1)
	oAuthAccessTokenRequestPropertiesFieldScopes           = big.NewInt(1 << 2)
	oAuthAccessTokenRequestPropertiesFieldCustomProperties = big.NewInt(1 << 3)
)

type OAuthAccessTokenRequestProperties struct {
	ClientId         *RequestProperty   `json:"clientId" url:"clientId"`
	ClientSecret     *RequestProperty   `json:"clientSecret" url:"clientSecret"`
	Scopes           *RequestProperty   `json:"scopes,omitempty" url:"scopes,omitempty"`
	CustomProperties []*RequestProperty `json:"customProperties,omitempty" url:"customProperties,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (o *OAuthAccessTokenRequestProperties) GetClientId() *RequestProperty {
	if o == nil {
		return nil
	}
	return o.ClientId
}

func (o *OAuthAccessTokenRequestProperties) GetClientSecret() *RequestProperty {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

func (o *OAuthAccessTokenRequestProperties) GetScopes() *RequestProperty {
	if o == nil {
		return nil
	}
	return o.Scopes
}

func (o *OAuthAccessTokenRequestProperties) GetCustomProperties() []*RequestProperty {
	if o == nil {
		return nil
	}
	return o.CustomProperties
}

func (o *OAuthAccessTokenRequestProperties) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OAuthAccessTokenRequestProperties) require(field *big.Int) {
	if o.explicitFields == nil {
		o.explicitFields = big.NewInt(0)
	}
	o.explicitFields.Or(o.explicitFields, field)
}

// SetClientId sets the ClientId field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthAccessTokenRequestProperties) SetClientId(clientId *RequestProperty) {
	o.ClientId = clientId
	o.require(oAuthAccessTokenRequestPropertiesFieldClientId)
}

// SetClientSecret sets the ClientSecret field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthAccessTokenRequestProperties) SetClientSecret(clientSecret *RequestProperty) {
	o.ClientSecret = clientSecret
	o.require(oAuthAccessTokenRequestPropertiesFieldClientSecret)
}

// SetScopes sets the Scopes field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthAccessTokenRequestProperties) SetScopes(scopes *RequestProperty) {
	o.Scopes = scopes
	o.require(oAuthAccessTokenRequestPropertiesFieldScopes)
}

// SetCustomProperties sets the CustomProperties field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthAccessTokenRequestProperties) SetCustomProperties(customProperties []*RequestProperty) {
	o.CustomProperties = customProperties
	o.require(oAuthAccessTokenRequestPropertiesFieldCustomProperties)
}

func (o *OAuthAccessTokenRequestProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler OAuthAccessTokenRequestProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OAuthAccessTokenRequestProperties(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	return nil
}

func (o *OAuthAccessTokenRequestProperties) MarshalJSON() ([]byte, error) {
	type embed OAuthAccessTokenRequestProperties
	var marshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, o.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (o *OAuthAccessTokenRequestProperties) String() string {
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// The properties to map to the corresponding OAuth token primitive.
var (
	oAuthAccessTokenResponsePropertiesFieldAccessToken  = big.NewInt(1 << 0)
	oAuthAccessTokenResponsePropertiesFieldExpiresIn    = big.NewInt(1 << 1)
	oAuthAccessTokenResponsePropertiesFieldRefreshToken = big.NewInt(1 << 2)
)

type OAuthAccessTokenResponseProperties struct {
	AccessToken  *ResponseProperty `json:"accessToken" url:"accessToken"`
	ExpiresIn    *ResponseProperty `json:"expiresIn,omitempty" url:"expiresIn,omitempty"`
	RefreshToken *ResponseProperty `json:"refreshToken,omitempty" url:"refreshToken,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (o *OAuthAccessTokenResponseProperties) GetAccessToken() *ResponseProperty {
	if o == nil {
		return nil
	}
	return o.AccessToken
}

func (o *OAuthAccessTokenResponseProperties) GetExpiresIn() *ResponseProperty {
	if o == nil {
		return nil
	}
	return o.ExpiresIn
}

func (o *OAuthAccessTokenResponseProperties) GetRefreshToken() *ResponseProperty {
	if o == nil {
		return nil
	}
	return o.RefreshToken
}

func (o *OAuthAccessTokenResponseProperties) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OAuthAccessTokenResponseProperties) require(field *big.Int) {
	if o.explicitFields == nil {
		o.explicitFields = big.NewInt(0)
	}
	o.explicitFields.Or(o.explicitFields, field)
}

// SetAccessToken sets the AccessToken field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthAccessTokenResponseProperties) SetAccessToken(accessToken *ResponseProperty) {
	o.AccessToken = accessToken
	o.require(oAuthAccessTokenResponsePropertiesFieldAccessToken)
}

// SetExpiresIn sets the ExpiresIn field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthAccessTokenResponseProperties) SetExpiresIn(expiresIn *ResponseProperty) {
	o.ExpiresIn = expiresIn
	o.require(oAuthAccessTokenResponsePropertiesFieldExpiresIn)
}

// SetRefreshToken sets the RefreshToken field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthAccessTokenResponseProperties) SetRefreshToken(refreshToken *ResponseProperty) {
	o.RefreshToken = refreshToken
	o.require(oAuthAccessTokenResponsePropertiesFieldRefreshToken)
}

func (o *OAuthAccessTokenResponseProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler OAuthAccessTokenResponseProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OAuthAccessTokenResponseProperties(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	return nil
}

func (o *OAuthAccessTokenResponseProperties) MarshalJSON() ([]byte, error) {
	type embed OAuthAccessTokenResponseProperties
	var marshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, o.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (o *OAuthAccessTokenResponseProperties) String() string {
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

var (
	oAuthClientCredentialsFieldClientIdEnvVar     = big.NewInt(1 << 0)
	oAuthClientCredentialsFieldClientSecretEnvVar = big.NewInt(1 << 1)
	oAuthClientCredentialsFieldTokenPrefix        = big.NewInt(1 << 2)
	oAuthClientCredentialsFieldTokenHeader        = big.NewInt(1 << 3)
	oAuthClientCredentialsFieldScopes             = big.NewInt(1 << 4)
	oAuthClientCredentialsFieldTokenEndpoint      = big.NewInt(1 << 5)
	oAuthClientCredentialsFieldRefreshEndpoint    = big.NewInt(1 << 6)
)

type OAuthClientCredentials struct {
	ClientIdEnvVar     *EnvironmentVariable  `json:"clientIdEnvVar,omitempty" url:"clientIdEnvVar,omitempty"`
	ClientSecretEnvVar *EnvironmentVariable  `json:"clientSecretEnvVar,omitempty" url:"clientSecretEnvVar,omitempty"`
	TokenPrefix        *string               `json:"tokenPrefix,omitempty" url:"tokenPrefix,omitempty"`
	TokenHeader        *string               `json:"tokenHeader,omitempty" url:"tokenHeader,omitempty"`
	Scopes             []string              `json:"scopes,omitempty" url:"scopes,omitempty"`
	TokenEndpoint      *OAuthTokenEndpoint   `json:"tokenEndpoint" url:"tokenEndpoint"`
	RefreshEndpoint    *OAuthRefreshEndpoint `json:"refreshEndpoint,omitempty" url:"refreshEndpoint,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (o *OAuthClientCredentials) GetClientIdEnvVar() *EnvironmentVariable {
	if o == nil {
		return nil
	}
	return o.ClientIdEnvVar
}

func (o *OAuthClientCredentials) GetClientSecretEnvVar() *EnvironmentVariable {
	if o == nil {
		return nil
	}
	return o.ClientSecretEnvVar
}

func (o *OAuthClientCredentials) GetTokenPrefix() *string {
	if o == nil {
		return nil
	}
	return o.TokenPrefix
}

func (o *OAuthClientCredentials) GetTokenHeader() *string {
	if o == nil {
		return nil
	}
	return o.TokenHeader
}

func (o *OAuthClientCredentials) GetScopes() []string {
	if o == nil {
		return nil
	}
	return o.Scopes
}

func (o *OAuthClientCredentials) GetTokenEndpoint() *OAuthTokenEndpoint {
	if o == nil {
		return nil
	}
	return o.TokenEndpoint
}

func (o *OAuthClientCredentials) GetRefreshEndpoint() *OAuthRefreshEndpoint {
	if o == nil {
		return nil
	}
	return o.RefreshEndpoint
}

func (o *OAuthClientCredentials) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OAuthClientCredentials) require(field *big.Int) {
	if o.explicitFields == nil {
		o.explicitFields = big.NewInt(0)
	}
	o.explicitFields.Or(o.explicitFields, field)
}

// SetClientIdEnvVar sets the ClientIdEnvVar field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthClientCredentials) SetClientIdEnvVar(clientIdEnvVar *EnvironmentVariable) {
	o.ClientIdEnvVar = clientIdEnvVar
	o.require(oAuthClientCredentialsFieldClientIdEnvVar)
}

// SetClientSecretEnvVar sets the ClientSecretEnvVar field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthClientCredentials) SetClientSecretEnvVar(clientSecretEnvVar *EnvironmentVariable) {
	o.ClientSecretEnvVar = clientSecretEnvVar
	o.require(oAuthClientCredentialsFieldClientSecretEnvVar)
}

// SetTokenPrefix sets the TokenPrefix field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthClientCredentials) SetTokenPrefix(tokenPrefix *string) {
	o.TokenPrefix = tokenPrefix
	o.require(oAuthClientCredentialsFieldTokenPrefix)
}

// SetTokenHeader sets the TokenHeader field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthClientCredentials) SetTokenHeader(tokenHeader *string) {
	o.TokenHeader = tokenHeader
	o.require(oAuthClientCredentialsFieldTokenHeader)
}

// SetScopes sets the Scopes field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthClientCredentials) SetScopes(scopes []string) {
	o.Scopes = scopes
	o.require(oAuthClientCredentialsFieldScopes)
}

// SetTokenEndpoint sets the TokenEndpoint field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthClientCredentials) SetTokenEndpoint(tokenEndpoint *OAuthTokenEndpoint) {
	o.TokenEndpoint = tokenEndpoint
	o.require(oAuthClientCredentialsFieldTokenEndpoint)
}

// SetRefreshEndpoint sets the RefreshEndpoint field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthClientCredentials) SetRefreshEndpoint(refreshEndpoint *OAuthRefreshEndpoint) {
	o.RefreshEndpoint = refreshEndpoint
	o.require(oAuthClientCredentialsFieldRefreshEndpoint)
}

func (o *OAuthClientCredentials) UnmarshalJSON(data []byte) error {
	type unmarshaler OAuthClientCredentials
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OAuthClientCredentials(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	return nil
}

func (o *OAuthClientCredentials) MarshalJSON() ([]byte, error) {
	type embed OAuthClientCredentials
	var marshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, o.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (o *OAuthClientCredentials) String() string {
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OAuthConfiguration struct {
	Type              string
	ClientCredentials *OAuthClientCredentials
}

func (o *OAuthConfiguration) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *OAuthConfiguration) GetClientCredentials() *OAuthClientCredentials {
	if o == nil {
		return nil
	}
	return o.ClientCredentials
}

func (o *OAuthConfiguration) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	o.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", o)
	}
	switch unmarshaler.Type {
	case "clientCredentials":
		value := new(OAuthClientCredentials)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.ClientCredentials = value
	}
	return nil
}

func (o OAuthConfiguration) MarshalJSON() ([]byte, error) {
	if err := o.validate(); err != nil {
		return nil, err
	}
	if o.ClientCredentials != nil {
		return internal.MarshalJSONWithExtraProperty(o.ClientCredentials, "type", "clientCredentials")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", o)
}

type OAuthConfigurationVisitor interface {
	VisitClientCredentials(*OAuthClientCredentials) error
}

func (o *OAuthConfiguration) Accept(visitor OAuthConfigurationVisitor) error {
	if o.ClientCredentials != nil {
		return visitor.VisitClientCredentials(o.ClientCredentials)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", o)
}

func (o *OAuthConfiguration) validate() error {
	if o == nil {
		return fmt.Errorf("type %T is nil", o)
	}
	var fields []string
	if o.ClientCredentials != nil {
		fields = append(fields, "clientCredentials")
	}
	if len(fields) == 0 {
		if o.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", o, o.Type)
		}
		return fmt.Errorf("type %T is empty", o)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", o, fields)
	}
	if o.Type != "" {
		field := fields[0]
		if o.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				o,
				o.Type,
				o,
			)
		}
	}
	return nil
}

var (
	oAuthRefreshEndpointFieldEndpointReference  = big.NewInt(1 << 0)
	oAuthRefreshEndpointFieldRequestProperties  = big.NewInt(1 << 1)
	oAuthRefreshEndpointFieldResponseProperties = big.NewInt(1 << 2)
)

type OAuthRefreshEndpoint struct {
	EndpointReference  *EndpointReference                  `json:"endpointReference" url:"endpointReference"`
	RequestProperties  *OAuthRefreshTokenRequestProperties `json:"requestProperties" url:"requestProperties"`
	ResponseProperties *OAuthAccessTokenResponseProperties `json:"responseProperties" url:"responseProperties"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (o *OAuthRefreshEndpoint) GetEndpointReference() *EndpointReference {
	if o == nil {
		return nil
	}
	return o.EndpointReference
}

func (o *OAuthRefreshEndpoint) GetRequestProperties() *OAuthRefreshTokenRequestProperties {
	if o == nil {
		return nil
	}
	return o.RequestProperties
}

func (o *OAuthRefreshEndpoint) GetResponseProperties() *OAuthAccessTokenResponseProperties {
	if o == nil {
		return nil
	}
	return o.ResponseProperties
}

func (o *OAuthRefreshEndpoint) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OAuthRefreshEndpoint) require(field *big.Int) {
	if o.explicitFields == nil {
		o.explicitFields = big.NewInt(0)
	}
	o.explicitFields.Or(o.explicitFields, field)
}

// SetEndpointReference sets the EndpointReference field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthRefreshEndpoint) SetEndpointReference(endpointReference *EndpointReference) {
	o.EndpointReference = endpointReference
	o.require(oAuthRefreshEndpointFieldEndpointReference)
}

// SetRequestProperties sets the RequestProperties field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthRefreshEndpoint) SetRequestProperties(requestProperties *OAuthRefreshTokenRequestProperties) {
	o.RequestProperties = requestProperties
	o.require(oAuthRefreshEndpointFieldRequestProperties)
}

// SetResponseProperties sets the ResponseProperties field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthRefreshEndpoint) SetResponseProperties(responseProperties *OAuthAccessTokenResponseProperties) {
	o.ResponseProperties = responseProperties
	o.require(oAuthRefreshEndpointFieldResponseProperties)
}

func (o *OAuthRefreshEndpoint) UnmarshalJSON(data []byte) error {
	type unmarshaler OAuthRefreshEndpoint
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OAuthRefreshEndpoint(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	return nil
}

func (o *OAuthRefreshEndpoint) MarshalJSON() ([]byte, error) {
	type embed OAuthRefreshEndpoint
	var marshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, o.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (o *OAuthRefreshEndpoint) String() string {
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// The properties required to retrieve an OAuth refresh token.
var (
	oAuthRefreshTokenRequestPropertiesFieldRefreshToken = big.NewInt(1 << 0)
)

type OAuthRefreshTokenRequestProperties struct {
	RefreshToken *RequestProperty `json:"refreshToken" url:"refreshToken"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (o *OAuthRefreshTokenRequestProperties) GetRefreshToken() *RequestProperty {
	if o == nil {
		return nil
	}
	return o.RefreshToken
}

func (o *OAuthRefreshTokenRequestProperties) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OAuthRefreshTokenRequestProperties) require(field *big.Int) {
	if o.explicitFields == nil {
		o.explicitFields = big.NewInt(0)
	}
	o.explicitFields.Or(o.explicitFields, field)
}

// SetRefreshToken sets the RefreshToken field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthRefreshTokenRequestProperties) SetRefreshToken(refreshToken *RequestProperty) {
	o.RefreshToken = refreshToken
	o.require(oAuthRefreshTokenRequestPropertiesFieldRefreshToken)
}

func (o *OAuthRefreshTokenRequestProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler OAuthRefreshTokenRequestProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OAuthRefreshTokenRequestProperties(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	return nil
}

func (o *OAuthRefreshTokenRequestProperties) MarshalJSON() ([]byte, error) {
	type embed OAuthRefreshTokenRequestProperties
	var marshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, o.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (o *OAuthRefreshTokenRequestProperties) String() string {
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// We currently assume the resultant token is leveraged as a bearer token, e.g. "Authorization Bearer"
var (
	oAuthSchemeFieldDocs          = big.NewInt(1 << 0)
	oAuthSchemeFieldKey           = big.NewInt(1 << 1)
	oAuthSchemeFieldConfiguration = big.NewInt(1 << 2)
)

type OAuthScheme struct {
	Docs *string `json:"docs,omitempty" url:"docs,omitempty"`
	// The unique key for this auth scheme. This will be used to reference the scheme in endpoint auth requirements.
	// Defaults to the type of the auth scheme if not provided.
	Key           AuthSchemeKey       `json:"key" url:"key"`
	Configuration *OAuthConfiguration `json:"configuration" url:"configuration"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (o *OAuthScheme) GetDocs() *string {
	if o == nil {
		return nil
	}
	return o.Docs
}

func (o *OAuthScheme) GetKey() AuthSchemeKey {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *OAuthScheme) GetConfiguration() *OAuthConfiguration {
	if o == nil {
		return nil
	}
	return o.Configuration
}

func (o *OAuthScheme) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OAuthScheme) require(field *big.Int) {
	if o.explicitFields == nil {
		o.explicitFields = big.NewInt(0)
	}
	o.explicitFields.Or(o.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthScheme) SetDocs(docs *string) {
	o.Docs = docs
	o.require(oAuthSchemeFieldDocs)
}

// SetKey sets the Key field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthScheme) SetKey(key AuthSchemeKey) {
	o.Key = key
	o.require(oAuthSchemeFieldKey)
}

// SetConfiguration sets the Configuration field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthScheme) SetConfiguration(configuration *OAuthConfiguration) {
	o.Configuration = configuration
	o.require(oAuthSchemeFieldConfiguration)
}

func (o *OAuthScheme) UnmarshalJSON(data []byte) error {
	type unmarshaler OAuthScheme
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OAuthScheme(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	return nil
}

func (o *OAuthScheme) MarshalJSON() ([]byte, error) {
	type embed OAuthScheme
	var marshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, o.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (o *OAuthScheme) String() string {
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

var (
	oAuthTokenEndpointFieldEndpointReference  = big.NewInt(1 << 0)
	oAuthTokenEndpointFieldRequestProperties  = big.NewInt(1 << 1)
	oAuthTokenEndpointFieldResponseProperties = big.NewInt(1 << 2)
)

type OAuthTokenEndpoint struct {
	EndpointReference  *EndpointReference                  `json:"endpointReference" url:"endpointReference"`
	RequestProperties  *OAuthAccessTokenRequestProperties  `json:"requestProperties" url:"requestProperties"`
	ResponseProperties *OAuthAccessTokenResponseProperties `json:"responseProperties" url:"responseProperties"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (o *OAuthTokenEndpoint) GetEndpointReference() *EndpointReference {
	if o == nil {
		return nil
	}
	return o.EndpointReference
}

func (o *OAuthTokenEndpoint) GetRequestProperties() *OAuthAccessTokenRequestProperties {
	if o == nil {
		return nil
	}
	return o.RequestProperties
}

func (o *OAuthTokenEndpoint) GetResponseProperties() *OAuthAccessTokenResponseProperties {
	if o == nil {
		return nil
	}
	return o.ResponseProperties
}

func (o *OAuthTokenEndpoint) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OAuthTokenEndpoint) require(field *big.Int) {
	if o.explicitFields == nil {
		o.explicitFields = big.NewInt(0)
	}
	o.explicitFields.Or(o.explicitFields, field)
}

// SetEndpointReference sets the EndpointReference field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthTokenEndpoint) SetEndpointReference(endpointReference *EndpointReference) {
	o.EndpointReference = endpointReference
	o.require(oAuthTokenEndpointFieldEndpointReference)
}

// SetRequestProperties sets the RequestProperties field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthTokenEndpoint) SetRequestProperties(requestProperties *OAuthAccessTokenRequestProperties) {
	o.RequestProperties = requestProperties
	o.require(oAuthTokenEndpointFieldRequestProperties)
}

// SetResponseProperties sets the ResponseProperties field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OAuthTokenEndpoint) SetResponseProperties(responseProperties *OAuthAccessTokenResponseProperties) {
	o.ResponseProperties = responseProperties
	o.require(oAuthTokenEndpointFieldResponseProperties)
}

func (o *OAuthTokenEndpoint) UnmarshalJSON(data []byte) error {
	type unmarshaler OAuthTokenEndpoint
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OAuthTokenEndpoint(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	return nil
}

func (o *OAuthTokenEndpoint) MarshalJSON() ([]byte, error) {
	type embed OAuthTokenEndpoint
	var marshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, o.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (o *OAuthTokenEndpoint) String() string {
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}
