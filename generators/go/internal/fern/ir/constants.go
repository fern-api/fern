// Code generated by Fern. DO NOT EDIT.

package ir

import (
	json "encoding/json"
	fmt "fmt"
	big "math/big"

	common "github.com/fern-api/fern-go/internal/fern/ir/common"
	internal "github.com/fern-api/fern-go/internal/fern/ir/internal"
)

var (
	constantsFieldErrorInstanceIdKey = big.NewInt(1 << 0)
)

type Constants struct {
	ErrorInstanceIdKey *common.NameAndWireValue `json:"errorInstanceIdKey" url:"errorInstanceIdKey"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (c *Constants) GetErrorInstanceIdKey() *common.NameAndWireValue {
	if c == nil {
		return nil
	}
	return c.ErrorInstanceIdKey
}

func (c *Constants) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Constants) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetErrorInstanceIdKey sets the ErrorInstanceIdKey field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *Constants) SetErrorInstanceIdKey(errorInstanceIdKey *common.NameAndWireValue) {
	c.ErrorInstanceIdKey = errorInstanceIdKey
	c.require(constantsFieldErrorInstanceIdKey)
}

func (c *Constants) UnmarshalJSON(data []byte) error {
	type unmarshaler Constants
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Constants(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	return nil
}

func (c *Constants) MarshalJSON() ([]byte, error) {
	type embed Constants
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *Constants) String() string {
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}
