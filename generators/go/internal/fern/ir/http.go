// Code generated by Fern. DO NOT EDIT.

package ir

import (
	json "encoding/json"
	fmt "fmt"
	big "math/big"

	common "github.com/fern-api/fern-go/internal/fern/ir/common"
	internal "github.com/fern-api/fern-go/internal/fern/ir/internal"
)

var (
	autogeneratedEndpointExampleFieldExample = big.NewInt(1 << 0)
)

type AutogeneratedEndpointExample struct {
	Example *ExampleEndpointCall `json:"example" url:"example"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (a *AutogeneratedEndpointExample) GetExample() *ExampleEndpointCall {
	if a == nil {
		return nil
	}
	return a.Example
}

func (a *AutogeneratedEndpointExample) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AutogeneratedEndpointExample) require(field *big.Int) {
	if a.explicitFields == nil {
		a.explicitFields = big.NewInt(0)
	}
	a.explicitFields.Or(a.explicitFields, field)
}

// SetExample sets the Example field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (a *AutogeneratedEndpointExample) SetExample(example *ExampleEndpointCall) {
	a.Example = example
	a.require(autogeneratedEndpointExampleFieldExample)
}

func (a *AutogeneratedEndpointExample) UnmarshalJSON(data []byte) error {
	type unmarshaler AutogeneratedEndpointExample
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AutogeneratedEndpointExample(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	return nil
}

func (a *AutogeneratedEndpointExample) MarshalJSON() ([]byte, error) {
	type embed AutogeneratedEndpointExample
	var marshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, a.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (a *AutogeneratedEndpointExample) String() string {
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

var (
	bytesRequestFieldDocs        = big.NewInt(1 << 0)
	bytesRequestFieldV2Examples  = big.NewInt(1 << 1)
	bytesRequestFieldContentType = big.NewInt(1 << 2)
	bytesRequestFieldIsOptional  = big.NewInt(1 << 3)
)

type BytesRequest struct {
	Docs        *string           `json:"docs,omitempty" url:"docs,omitempty"`
	V2Examples  *V2SchemaExamples `json:"v2Examples,omitempty" url:"v2Examples,omitempty"`
	ContentType *string           `json:"contentType,omitempty" url:"contentType,omitempty"`
	IsOptional  bool              `json:"isOptional" url:"isOptional"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (b *BytesRequest) GetDocs() *string {
	if b == nil {
		return nil
	}
	return b.Docs
}

func (b *BytesRequest) GetV2Examples() *V2SchemaExamples {
	if b == nil {
		return nil
	}
	return b.V2Examples
}

func (b *BytesRequest) GetContentType() *string {
	if b == nil {
		return nil
	}
	return b.ContentType
}

func (b *BytesRequest) GetIsOptional() bool {
	if b == nil {
		return false
	}
	return b.IsOptional
}

func (b *BytesRequest) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BytesRequest) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BytesRequest) SetDocs(docs *string) {
	b.Docs = docs
	b.require(bytesRequestFieldDocs)
}

// SetV2Examples sets the V2Examples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BytesRequest) SetV2Examples(v2Examples *V2SchemaExamples) {
	b.V2Examples = v2Examples
	b.require(bytesRequestFieldV2Examples)
}

// SetContentType sets the ContentType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BytesRequest) SetContentType(contentType *string) {
	b.ContentType = contentType
	b.require(bytesRequestFieldContentType)
}

// SetIsOptional sets the IsOptional field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BytesRequest) SetIsOptional(isOptional bool) {
	b.IsOptional = isOptional
	b.require(bytesRequestFieldIsOptional)
}

func (b *BytesRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler BytesRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BytesRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	return nil
}

func (b *BytesRequest) MarshalJSON() ([]byte, error) {
	type embed BytesRequest
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BytesRequest) String() string {
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

var (
	bytesResponseFieldDocs       = big.NewInt(1 << 0)
	bytesResponseFieldV2Examples = big.NewInt(1 << 1)
)

type BytesResponse struct {
	Docs       *string           `json:"docs,omitempty" url:"docs,omitempty"`
	V2Examples *V2SchemaExamples `json:"v2Examples,omitempty" url:"v2Examples,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (b *BytesResponse) GetDocs() *string {
	if b == nil {
		return nil
	}
	return b.Docs
}

func (b *BytesResponse) GetV2Examples() *V2SchemaExamples {
	if b == nil {
		return nil
	}
	return b.V2Examples
}

func (b *BytesResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BytesResponse) require(field *big.Int) {
	if b.explicitFields == nil {
		b.explicitFields = big.NewInt(0)
	}
	b.explicitFields.Or(b.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BytesResponse) SetDocs(docs *string) {
	b.Docs = docs
	b.require(bytesResponseFieldDocs)
}

// SetV2Examples sets the V2Examples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (b *BytesResponse) SetV2Examples(v2Examples *V2SchemaExamples) {
	b.V2Examples = v2Examples
	b.require(bytesResponseFieldV2Examples)
}

func (b *BytesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BytesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BytesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	return nil
}

func (b *BytesResponse) MarshalJSON() ([]byte, error) {
	type embed BytesResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, b.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (b *BytesResponse) String() string {
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// If set, the endpoint will be generated with auto-pagination features.
//
// The page must be defined as a property defined on the request, whereas
// the next page and results are resolved from properties defined on the
// response.
var (
	cursorPaginationFieldPage    = big.NewInt(1 << 0)
	cursorPaginationFieldNext    = big.NewInt(1 << 1)
	cursorPaginationFieldResults = big.NewInt(1 << 2)
)

type CursorPagination struct {
	Page    *RequestProperty  `json:"page" url:"page"`
	Next    *ResponseProperty `json:"next" url:"next"`
	Results *ResponseProperty `json:"results" url:"results"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (c *CursorPagination) GetPage() *RequestProperty {
	if c == nil {
		return nil
	}
	return c.Page
}

func (c *CursorPagination) GetNext() *ResponseProperty {
	if c == nil {
		return nil
	}
	return c.Next
}

func (c *CursorPagination) GetResults() *ResponseProperty {
	if c == nil {
		return nil
	}
	return c.Results
}

func (c *CursorPagination) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CursorPagination) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetPage sets the Page field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CursorPagination) SetPage(page *RequestProperty) {
	c.Page = page
	c.require(cursorPaginationFieldPage)
}

// SetNext sets the Next field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CursorPagination) SetNext(next *ResponseProperty) {
	c.Next = next
	c.require(cursorPaginationFieldNext)
}

// SetResults sets the Results field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CursorPagination) SetResults(results *ResponseProperty) {
	c.Results = results
	c.require(cursorPaginationFieldResults)
}

func (c *CursorPagination) UnmarshalJSON(data []byte) error {
	type unmarshaler CursorPagination
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CursorPagination(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	return nil
}

func (c *CursorPagination) MarshalJSON() ([]byte, error) {
	type embed CursorPagination
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *CursorPagination) String() string {
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Pagination where the SDK author is responsible for implementing the pagination
// logic in the SDK.
var (
	customPaginationFieldResults = big.NewInt(1 << 0)
)

type CustomPagination struct {
	// The response property is used to determine the results response type
	// generated in the endpoint.
	Results *ResponseProperty `json:"results" url:"results"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (c *CustomPagination) GetResults() *ResponseProperty {
	if c == nil {
		return nil
	}
	return c.Results
}

func (c *CustomPagination) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CustomPagination) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetResults sets the Results field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CustomPagination) SetResults(results *ResponseProperty) {
	c.Results = results
	c.require(customPaginationFieldResults)
}

func (c *CustomPagination) UnmarshalJSON(data []byte) error {
	type unmarshaler CustomPagination
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CustomPagination(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	return nil
}

func (c *CustomPagination) MarshalJSON() ([]byte, error) {
	type embed CustomPagination
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *CustomPagination) String() string {
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

var (
	declaredServiceNameFieldFernFilepath = big.NewInt(1 << 0)
)

type DeclaredServiceName struct {
	FernFilepath *common.FernFilepath `json:"fernFilepath" url:"fernFilepath"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (d *DeclaredServiceName) GetFernFilepath() *common.FernFilepath {
	if d == nil {
		return nil
	}
	return d.FernFilepath
}

func (d *DeclaredServiceName) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeclaredServiceName) require(field *big.Int) {
	if d.explicitFields == nil {
		d.explicitFields = big.NewInt(0)
	}
	d.explicitFields.Or(d.explicitFields, field)
}

// SetFernFilepath sets the FernFilepath field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (d *DeclaredServiceName) SetFernFilepath(fernFilepath *common.FernFilepath) {
	d.FernFilepath = fernFilepath
	d.require(declaredServiceNameFieldFernFilepath)
}

func (d *DeclaredServiceName) UnmarshalJSON(data []byte) error {
	type unmarshaler DeclaredServiceName
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeclaredServiceName(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	return nil
}

func (d *DeclaredServiceName) MarshalJSON() ([]byte, error) {
	type embed DeclaredServiceName
	var marshaler = struct {
		embed
	}{
		embed: embed(*d),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, d.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (d *DeclaredServiceName) String() string {
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type EndpointName = *common.Name

type ExampleCodeSample struct {
	Type     string
	Language *ExampleCodeSampleLanguage
	Sdk      *ExampleCodeSampleSdk
}

func (e *ExampleCodeSample) GetType() string {
	if e == nil {
		return ""
	}
	return e.Type
}

func (e *ExampleCodeSample) GetLanguage() *ExampleCodeSampleLanguage {
	if e == nil {
		return nil
	}
	return e.Language
}

func (e *ExampleCodeSample) GetSdk() *ExampleCodeSampleSdk {
	if e == nil {
		return nil
	}
	return e.Sdk
}

func (e *ExampleCodeSample) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", e)
	}
	switch unmarshaler.Type {
	case "language":
		value := new(ExampleCodeSampleLanguage)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Language = value
	case "sdk":
		value := new(ExampleCodeSampleSdk)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Sdk = value
	}
	return nil
}

func (e ExampleCodeSample) MarshalJSON() ([]byte, error) {
	if err := e.validate(); err != nil {
		return nil, err
	}
	if e.Language != nil {
		return internal.MarshalJSONWithExtraProperty(e.Language, "type", "language")
	}
	if e.Sdk != nil {
		return internal.MarshalJSONWithExtraProperty(e.Sdk, "type", "sdk")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExampleCodeSampleVisitor interface {
	VisitLanguage(*ExampleCodeSampleLanguage) error
	VisitSdk(*ExampleCodeSampleSdk) error
}

func (e *ExampleCodeSample) Accept(visitor ExampleCodeSampleVisitor) error {
	if e.Language != nil {
		return visitor.VisitLanguage(e.Language)
	}
	if e.Sdk != nil {
		return visitor.VisitSdk(e.Sdk)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}

func (e *ExampleCodeSample) validate() error {
	if e == nil {
		return fmt.Errorf("type %T is nil", e)
	}
	var fields []string
	if e.Language != nil {
		fields = append(fields, "language")
	}
	if e.Sdk != nil {
		fields = append(fields, "sdk")
	}
	if len(fields) == 0 {
		if e.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", e, e.Type)
		}
		return fmt.Errorf("type %T is empty", e)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", e, fields)
	}
	if e.Type != "" {
		field := fields[0]
		if e.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				e,
				e.Type,
				e,
			)
		}
	}
	return nil
}

// This is intended to co-exist with the auto-generated code samples.
var (
	exampleCodeSampleLanguageFieldDocs     = big.NewInt(1 << 0)
	exampleCodeSampleLanguageFieldName     = big.NewInt(1 << 1)
	exampleCodeSampleLanguageFieldLanguage = big.NewInt(1 << 2)
	exampleCodeSampleLanguageFieldCode     = big.NewInt(1 << 3)
	exampleCodeSampleLanguageFieldInstall  = big.NewInt(1 << 4)
)

type ExampleCodeSampleLanguage struct {
	Docs *string `json:"docs,omitempty" url:"docs,omitempty"`
	// Override the example name.
	Name     *common.Name `json:"name,omitempty" url:"name,omitempty"`
	Language string       `json:"language" url:"language"`
	Code     string       `json:"code" url:"code"`
	// The command to install the dependencies for the code sample.
	// For example, `npm install` or `pip install -r requirements.txt`.
	Install *string `json:"install,omitempty" url:"install,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (e *ExampleCodeSampleLanguage) GetDocs() *string {
	if e == nil {
		return nil
	}
	return e.Docs
}

func (e *ExampleCodeSampleLanguage) GetName() *common.Name {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *ExampleCodeSampleLanguage) GetLanguage() string {
	if e == nil {
		return ""
	}
	return e.Language
}

func (e *ExampleCodeSampleLanguage) GetCode() string {
	if e == nil {
		return ""
	}
	return e.Code
}

func (e *ExampleCodeSampleLanguage) GetInstall() *string {
	if e == nil {
		return nil
	}
	return e.Install
}

func (e *ExampleCodeSampleLanguage) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExampleCodeSampleLanguage) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleCodeSampleLanguage) SetDocs(docs *string) {
	e.Docs = docs
	e.require(exampleCodeSampleLanguageFieldDocs)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleCodeSampleLanguage) SetName(name *common.Name) {
	e.Name = name
	e.require(exampleCodeSampleLanguageFieldName)
}

// SetLanguage sets the Language field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleCodeSampleLanguage) SetLanguage(language string) {
	e.Language = language
	e.require(exampleCodeSampleLanguageFieldLanguage)
}

// SetCode sets the Code field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleCodeSampleLanguage) SetCode(code string) {
	e.Code = code
	e.require(exampleCodeSampleLanguageFieldCode)
}

// SetInstall sets the Install field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleCodeSampleLanguage) SetInstall(install *string) {
	e.Install = install
	e.require(exampleCodeSampleLanguageFieldInstall)
}

func (e *ExampleCodeSampleLanguage) UnmarshalJSON(data []byte) error {
	type unmarshaler ExampleCodeSampleLanguage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExampleCodeSampleLanguage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	return nil
}

func (e *ExampleCodeSampleLanguage) MarshalJSON() ([]byte, error) {
	type embed ExampleCodeSampleLanguage
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ExampleCodeSampleLanguage) String() string {
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// This will be used to replace the auto-generated code samples.
var (
	exampleCodeSampleSdkFieldDocs = big.NewInt(1 << 0)
	exampleCodeSampleSdkFieldName = big.NewInt(1 << 1)
	exampleCodeSampleSdkFieldSdk  = big.NewInt(1 << 2)
	exampleCodeSampleSdkFieldCode = big.NewInt(1 << 3)
)

type ExampleCodeSampleSdk struct {
	Docs *string `json:"docs,omitempty" url:"docs,omitempty"`
	// Override the example name.
	Name *common.Name         `json:"name,omitempty" url:"name,omitempty"`
	Sdk  SupportedSdkLanguage `json:"sdk" url:"sdk"`
	Code string               `json:"code" url:"code"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (e *ExampleCodeSampleSdk) GetDocs() *string {
	if e == nil {
		return nil
	}
	return e.Docs
}

func (e *ExampleCodeSampleSdk) GetName() *common.Name {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *ExampleCodeSampleSdk) GetSdk() SupportedSdkLanguage {
	if e == nil {
		return ""
	}
	return e.Sdk
}

func (e *ExampleCodeSampleSdk) GetCode() string {
	if e == nil {
		return ""
	}
	return e.Code
}

func (e *ExampleCodeSampleSdk) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExampleCodeSampleSdk) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleCodeSampleSdk) SetDocs(docs *string) {
	e.Docs = docs
	e.require(exampleCodeSampleSdkFieldDocs)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleCodeSampleSdk) SetName(name *common.Name) {
	e.Name = name
	e.require(exampleCodeSampleSdkFieldName)
}

// SetSdk sets the Sdk field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleCodeSampleSdk) SetSdk(sdk SupportedSdkLanguage) {
	e.Sdk = sdk
	e.require(exampleCodeSampleSdkFieldSdk)
}

// SetCode sets the Code field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleCodeSampleSdk) SetCode(code string) {
	e.Code = code
	e.require(exampleCodeSampleSdkFieldCode)
}

func (e *ExampleCodeSampleSdk) UnmarshalJSON(data []byte) error {
	type unmarshaler ExampleCodeSampleSdk
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExampleCodeSampleSdk(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	return nil
}

func (e *ExampleCodeSampleSdk) MarshalJSON() ([]byte, error) {
	type embed ExampleCodeSampleSdk
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ExampleCodeSampleSdk) String() string {
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

var (
	exampleEndpointCallFieldDocs                   = big.NewInt(1 << 0)
	exampleEndpointCallFieldId                     = big.NewInt(1 << 1)
	exampleEndpointCallFieldName                   = big.NewInt(1 << 2)
	exampleEndpointCallFieldUrl                    = big.NewInt(1 << 3)
	exampleEndpointCallFieldRootPathParameters     = big.NewInt(1 << 4)
	exampleEndpointCallFieldServicePathParameters  = big.NewInt(1 << 5)
	exampleEndpointCallFieldEndpointPathParameters = big.NewInt(1 << 6)
	exampleEndpointCallFieldServiceHeaders         = big.NewInt(1 << 7)
	exampleEndpointCallFieldEndpointHeaders        = big.NewInt(1 << 8)
	exampleEndpointCallFieldQueryParameters        = big.NewInt(1 << 9)
	exampleEndpointCallFieldRequest                = big.NewInt(1 << 10)
	exampleEndpointCallFieldResponse               = big.NewInt(1 << 11)
)

type ExampleEndpointCall struct {
	Docs                   *string                  `json:"docs,omitempty" url:"docs,omitempty"`
	Id                     *string                  `json:"id,omitempty" url:"id,omitempty"`
	Name                   *common.Name             `json:"name,omitempty" url:"name,omitempty"`
	Url                    string                   `json:"url" url:"url"`
	RootPathParameters     []*ExamplePathParameter  `json:"rootPathParameters" url:"rootPathParameters"`
	ServicePathParameters  []*ExamplePathParameter  `json:"servicePathParameters" url:"servicePathParameters"`
	EndpointPathParameters []*ExamplePathParameter  `json:"endpointPathParameters" url:"endpointPathParameters"`
	ServiceHeaders         []*ExampleHeader         `json:"serviceHeaders" url:"serviceHeaders"`
	EndpointHeaders        []*ExampleHeader         `json:"endpointHeaders" url:"endpointHeaders"`
	QueryParameters        []*ExampleQueryParameter `json:"queryParameters" url:"queryParameters"`
	Request                *ExampleRequestBody      `json:"request,omitempty" url:"request,omitempty"`
	Response               *ExampleResponse         `json:"response" url:"response"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (e *ExampleEndpointCall) GetDocs() *string {
	if e == nil {
		return nil
	}
	return e.Docs
}

func (e *ExampleEndpointCall) GetId() *string {
	if e == nil {
		return nil
	}
	return e.Id
}

func (e *ExampleEndpointCall) GetName() *common.Name {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *ExampleEndpointCall) GetUrl() string {
	if e == nil {
		return ""
	}
	return e.Url
}

func (e *ExampleEndpointCall) GetRootPathParameters() []*ExamplePathParameter {
	if e == nil {
		return nil
	}
	return e.RootPathParameters
}

func (e *ExampleEndpointCall) GetServicePathParameters() []*ExamplePathParameter {
	if e == nil {
		return nil
	}
	return e.ServicePathParameters
}

func (e *ExampleEndpointCall) GetEndpointPathParameters() []*ExamplePathParameter {
	if e == nil {
		return nil
	}
	return e.EndpointPathParameters
}

func (e *ExampleEndpointCall) GetServiceHeaders() []*ExampleHeader {
	if e == nil {
		return nil
	}
	return e.ServiceHeaders
}

func (e *ExampleEndpointCall) GetEndpointHeaders() []*ExampleHeader {
	if e == nil {
		return nil
	}
	return e.EndpointHeaders
}

func (e *ExampleEndpointCall) GetQueryParameters() []*ExampleQueryParameter {
	if e == nil {
		return nil
	}
	return e.QueryParameters
}

func (e *ExampleEndpointCall) GetRequest() *ExampleRequestBody {
	if e == nil {
		return nil
	}
	return e.Request
}

func (e *ExampleEndpointCall) GetResponse() *ExampleResponse {
	if e == nil {
		return nil
	}
	return e.Response
}

func (e *ExampleEndpointCall) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExampleEndpointCall) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleEndpointCall) SetDocs(docs *string) {
	e.Docs = docs
	e.require(exampleEndpointCallFieldDocs)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleEndpointCall) SetId(id *string) {
	e.Id = id
	e.require(exampleEndpointCallFieldId)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleEndpointCall) SetName(name *common.Name) {
	e.Name = name
	e.require(exampleEndpointCallFieldName)
}

// SetUrl sets the Url field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleEndpointCall) SetUrl(url string) {
	e.Url = url
	e.require(exampleEndpointCallFieldUrl)
}

// SetRootPathParameters sets the RootPathParameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleEndpointCall) SetRootPathParameters(rootPathParameters []*ExamplePathParameter) {
	e.RootPathParameters = rootPathParameters
	e.require(exampleEndpointCallFieldRootPathParameters)
}

// SetServicePathParameters sets the ServicePathParameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleEndpointCall) SetServicePathParameters(servicePathParameters []*ExamplePathParameter) {
	e.ServicePathParameters = servicePathParameters
	e.require(exampleEndpointCallFieldServicePathParameters)
}

// SetEndpointPathParameters sets the EndpointPathParameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleEndpointCall) SetEndpointPathParameters(endpointPathParameters []*ExamplePathParameter) {
	e.EndpointPathParameters = endpointPathParameters
	e.require(exampleEndpointCallFieldEndpointPathParameters)
}

// SetServiceHeaders sets the ServiceHeaders field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleEndpointCall) SetServiceHeaders(serviceHeaders []*ExampleHeader) {
	e.ServiceHeaders = serviceHeaders
	e.require(exampleEndpointCallFieldServiceHeaders)
}

// SetEndpointHeaders sets the EndpointHeaders field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleEndpointCall) SetEndpointHeaders(endpointHeaders []*ExampleHeader) {
	e.EndpointHeaders = endpointHeaders
	e.require(exampleEndpointCallFieldEndpointHeaders)
}

// SetQueryParameters sets the QueryParameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleEndpointCall) SetQueryParameters(queryParameters []*ExampleQueryParameter) {
	e.QueryParameters = queryParameters
	e.require(exampleEndpointCallFieldQueryParameters)
}

// SetRequest sets the Request field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleEndpointCall) SetRequest(request *ExampleRequestBody) {
	e.Request = request
	e.require(exampleEndpointCallFieldRequest)
}

// SetResponse sets the Response field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleEndpointCall) SetResponse(response *ExampleResponse) {
	e.Response = response
	e.require(exampleEndpointCallFieldResponse)
}

func (e *ExampleEndpointCall) UnmarshalJSON(data []byte) error {
	type unmarshaler ExampleEndpointCall
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExampleEndpointCall(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	return nil
}

func (e *ExampleEndpointCall) MarshalJSON() ([]byte, error) {
	type embed ExampleEndpointCall
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ExampleEndpointCall) String() string {
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

var (
	exampleEndpointErrorResponseFieldError = big.NewInt(1 << 0)
	exampleEndpointErrorResponseFieldBody  = big.NewInt(1 << 1)
)

type ExampleEndpointErrorResponse struct {
	Error *DeclaredErrorName    `json:"error" url:"error"`
	Body  *ExampleTypeReference `json:"body,omitempty" url:"body,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (e *ExampleEndpointErrorResponse) GetError() *DeclaredErrorName {
	if e == nil {
		return nil
	}
	return e.Error
}

func (e *ExampleEndpointErrorResponse) GetBody() *ExampleTypeReference {
	if e == nil {
		return nil
	}
	return e.Body
}

func (e *ExampleEndpointErrorResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExampleEndpointErrorResponse) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetError sets the Error field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleEndpointErrorResponse) SetError(error_ *DeclaredErrorName) {
	e.Error = error_
	e.require(exampleEndpointErrorResponseFieldError)
}

// SetBody sets the Body field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleEndpointErrorResponse) SetBody(body *ExampleTypeReference) {
	e.Body = body
	e.require(exampleEndpointErrorResponseFieldBody)
}

func (e *ExampleEndpointErrorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ExampleEndpointErrorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExampleEndpointErrorResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	return nil
}

func (e *ExampleEndpointErrorResponse) MarshalJSON() ([]byte, error) {
	type embed ExampleEndpointErrorResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ExampleEndpointErrorResponse) String() string {
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExampleEndpointSuccessResponse struct {
	Type   string
	Body   *ExampleTypeReference
	Stream []*ExampleTypeReference
	Sse    []*ExampleServerSideEvent
}

func (e *ExampleEndpointSuccessResponse) GetType() string {
	if e == nil {
		return ""
	}
	return e.Type
}

func (e *ExampleEndpointSuccessResponse) GetBody() *ExampleTypeReference {
	if e == nil {
		return nil
	}
	return e.Body
}

func (e *ExampleEndpointSuccessResponse) GetStream() []*ExampleTypeReference {
	if e == nil {
		return nil
	}
	return e.Stream
}

func (e *ExampleEndpointSuccessResponse) GetSse() []*ExampleServerSideEvent {
	if e == nil {
		return nil
	}
	return e.Sse
}

func (e *ExampleEndpointSuccessResponse) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", e)
	}
	switch unmarshaler.Type {
	case "body":
		var valueUnmarshaler struct {
			Body *ExampleTypeReference `json:"value,omitempty"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		e.Body = valueUnmarshaler.Body
	case "stream":
		var valueUnmarshaler struct {
			Stream []*ExampleTypeReference `json:"value"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		e.Stream = valueUnmarshaler.Stream
	case "sse":
		var valueUnmarshaler struct {
			Sse []*ExampleServerSideEvent `json:"value"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		e.Sse = valueUnmarshaler.Sse
	}
	return nil
}

func (e ExampleEndpointSuccessResponse) MarshalJSON() ([]byte, error) {
	if err := e.validate(); err != nil {
		return nil, err
	}
	if e.Body != nil {
		var marshaler = struct {
			Type string                `json:"type"`
			Body *ExampleTypeReference `json:"value,omitempty"`
		}{
			Type: "body",
			Body: e.Body,
		}
		return json.Marshal(marshaler)
	}
	if e.Stream != nil {
		var marshaler = struct {
			Type   string                  `json:"type"`
			Stream []*ExampleTypeReference `json:"value"`
		}{
			Type:   "stream",
			Stream: e.Stream,
		}
		return json.Marshal(marshaler)
	}
	if e.Sse != nil {
		var marshaler = struct {
			Type string                    `json:"type"`
			Sse  []*ExampleServerSideEvent `json:"value"`
		}{
			Type: "sse",
			Sse:  e.Sse,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExampleEndpointSuccessResponseVisitor interface {
	VisitBody(*ExampleTypeReference) error
	VisitStream([]*ExampleTypeReference) error
	VisitSse([]*ExampleServerSideEvent) error
}

func (e *ExampleEndpointSuccessResponse) Accept(visitor ExampleEndpointSuccessResponseVisitor) error {
	if e.Body != nil {
		return visitor.VisitBody(e.Body)
	}
	if e.Stream != nil {
		return visitor.VisitStream(e.Stream)
	}
	if e.Sse != nil {
		return visitor.VisitSse(e.Sse)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}

func (e *ExampleEndpointSuccessResponse) validate() error {
	if e == nil {
		return fmt.Errorf("type %T is nil", e)
	}
	var fields []string
	if e.Body != nil {
		fields = append(fields, "body")
	}
	if e.Stream != nil {
		fields = append(fields, "stream")
	}
	if e.Sse != nil {
		fields = append(fields, "sse")
	}
	if len(fields) == 0 {
		if e.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", e, e.Type)
		}
		return fmt.Errorf("type %T is empty", e)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", e, fields)
	}
	if e.Type != "" {
		field := fields[0]
		if e.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				e,
				e.Type,
				e,
			)
		}
	}
	return nil
}

var (
	exampleHeaderFieldName  = big.NewInt(1 << 0)
	exampleHeaderFieldValue = big.NewInt(1 << 1)
)

type ExampleHeader struct {
	Name  *common.NameAndWireValue `json:"name" url:"name"`
	Value *ExampleTypeReference    `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (e *ExampleHeader) GetName() *common.NameAndWireValue {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *ExampleHeader) GetValue() *ExampleTypeReference {
	if e == nil {
		return nil
	}
	return e.Value
}

func (e *ExampleHeader) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExampleHeader) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleHeader) SetName(name *common.NameAndWireValue) {
	e.Name = name
	e.require(exampleHeaderFieldName)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleHeader) SetValue(value *ExampleTypeReference) {
	e.Value = value
	e.require(exampleHeaderFieldValue)
}

func (e *ExampleHeader) UnmarshalJSON(data []byte) error {
	type unmarshaler ExampleHeader
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExampleHeader(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	return nil
}

func (e *ExampleHeader) MarshalJSON() ([]byte, error) {
	type embed ExampleHeader
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ExampleHeader) String() string {
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

var (
	exampleInlinedRequestBodyFieldJsonExample = big.NewInt(1 << 0)
	exampleInlinedRequestBodyFieldProperties  = big.NewInt(1 << 1)
)

type ExampleInlinedRequestBody struct {
	JsonExample interface{}                          `json:"jsonExample" url:"jsonExample"`
	Properties  []*ExampleInlinedRequestBodyProperty `json:"properties" url:"properties"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (e *ExampleInlinedRequestBody) GetJsonExample() interface{} {
	if e == nil {
		return nil
	}
	return e.JsonExample
}

func (e *ExampleInlinedRequestBody) GetProperties() []*ExampleInlinedRequestBodyProperty {
	if e == nil {
		return nil
	}
	return e.Properties
}

func (e *ExampleInlinedRequestBody) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExampleInlinedRequestBody) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetJsonExample sets the JsonExample field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleInlinedRequestBody) SetJsonExample(jsonExample interface{}) {
	e.JsonExample = jsonExample
	e.require(exampleInlinedRequestBodyFieldJsonExample)
}

// SetProperties sets the Properties field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleInlinedRequestBody) SetProperties(properties []*ExampleInlinedRequestBodyProperty) {
	e.Properties = properties
	e.require(exampleInlinedRequestBodyFieldProperties)
}

func (e *ExampleInlinedRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler ExampleInlinedRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExampleInlinedRequestBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	return nil
}

func (e *ExampleInlinedRequestBody) MarshalJSON() ([]byte, error) {
	type embed ExampleInlinedRequestBody
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ExampleInlinedRequestBody) String() string {
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

var (
	exampleInlinedRequestBodyPropertyFieldName                    = big.NewInt(1 << 0)
	exampleInlinedRequestBodyPropertyFieldValue                   = big.NewInt(1 << 1)
	exampleInlinedRequestBodyPropertyFieldOriginalTypeDeclaration = big.NewInt(1 << 2)
)

type ExampleInlinedRequestBodyProperty struct {
	Name  *common.NameAndWireValue `json:"name" url:"name"`
	Value *ExampleTypeReference    `json:"value" url:"value"`
	// This property may have been brought in via extension. originalTypeDeclaration
	// is the name of the type that contains this property
	OriginalTypeDeclaration *DeclaredTypeName `json:"originalTypeDeclaration,omitempty" url:"originalTypeDeclaration,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (e *ExampleInlinedRequestBodyProperty) GetName() *common.NameAndWireValue {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *ExampleInlinedRequestBodyProperty) GetValue() *ExampleTypeReference {
	if e == nil {
		return nil
	}
	return e.Value
}

func (e *ExampleInlinedRequestBodyProperty) GetOriginalTypeDeclaration() *DeclaredTypeName {
	if e == nil {
		return nil
	}
	return e.OriginalTypeDeclaration
}

func (e *ExampleInlinedRequestBodyProperty) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExampleInlinedRequestBodyProperty) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleInlinedRequestBodyProperty) SetName(name *common.NameAndWireValue) {
	e.Name = name
	e.require(exampleInlinedRequestBodyPropertyFieldName)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleInlinedRequestBodyProperty) SetValue(value *ExampleTypeReference) {
	e.Value = value
	e.require(exampleInlinedRequestBodyPropertyFieldValue)
}

// SetOriginalTypeDeclaration sets the OriginalTypeDeclaration field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleInlinedRequestBodyProperty) SetOriginalTypeDeclaration(originalTypeDeclaration *DeclaredTypeName) {
	e.OriginalTypeDeclaration = originalTypeDeclaration
	e.require(exampleInlinedRequestBodyPropertyFieldOriginalTypeDeclaration)
}

func (e *ExampleInlinedRequestBodyProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler ExampleInlinedRequestBodyProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExampleInlinedRequestBodyProperty(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	return nil
}

func (e *ExampleInlinedRequestBodyProperty) MarshalJSON() ([]byte, error) {
	type embed ExampleInlinedRequestBodyProperty
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ExampleInlinedRequestBodyProperty) String() string {
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

var (
	examplePathParameterFieldName  = big.NewInt(1 << 0)
	examplePathParameterFieldValue = big.NewInt(1 << 1)
)

type ExamplePathParameter struct {
	Name  *common.Name          `json:"name" url:"name"`
	Value *ExampleTypeReference `json:"value" url:"value"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (e *ExamplePathParameter) GetName() *common.Name {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *ExamplePathParameter) GetValue() *ExampleTypeReference {
	if e == nil {
		return nil
	}
	return e.Value
}

func (e *ExamplePathParameter) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExamplePathParameter) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExamplePathParameter) SetName(name *common.Name) {
	e.Name = name
	e.require(examplePathParameterFieldName)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExamplePathParameter) SetValue(value *ExampleTypeReference) {
	e.Value = value
	e.require(examplePathParameterFieldValue)
}

func (e *ExamplePathParameter) UnmarshalJSON(data []byte) error {
	type unmarshaler ExamplePathParameter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExamplePathParameter(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	return nil
}

func (e *ExamplePathParameter) MarshalJSON() ([]byte, error) {
	type embed ExamplePathParameter
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ExamplePathParameter) String() string {
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

var (
	exampleQueryParameterFieldName  = big.NewInt(1 << 0)
	exampleQueryParameterFieldValue = big.NewInt(1 << 1)
	exampleQueryParameterFieldShape = big.NewInt(1 << 2)
)

type ExampleQueryParameter struct {
	Name  *common.NameAndWireValue    `json:"name" url:"name"`
	Value *ExampleTypeReference       `json:"value" url:"value"`
	Shape *ExampleQueryParameterShape `json:"shape,omitempty" url:"shape,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (e *ExampleQueryParameter) GetName() *common.NameAndWireValue {
	if e == nil {
		return nil
	}
	return e.Name
}

func (e *ExampleQueryParameter) GetValue() *ExampleTypeReference {
	if e == nil {
		return nil
	}
	return e.Value
}

func (e *ExampleQueryParameter) GetShape() *ExampleQueryParameterShape {
	if e == nil {
		return nil
	}
	return e.Shape
}

func (e *ExampleQueryParameter) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExampleQueryParameter) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleQueryParameter) SetName(name *common.NameAndWireValue) {
	e.Name = name
	e.require(exampleQueryParameterFieldName)
}

// SetValue sets the Value field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleQueryParameter) SetValue(value *ExampleTypeReference) {
	e.Value = value
	e.require(exampleQueryParameterFieldValue)
}

// SetShape sets the Shape field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleQueryParameter) SetShape(shape *ExampleQueryParameterShape) {
	e.Shape = shape
	e.require(exampleQueryParameterFieldShape)
}

func (e *ExampleQueryParameter) UnmarshalJSON(data []byte) error {
	type unmarshaler ExampleQueryParameter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExampleQueryParameter(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	return nil
}

func (e *ExampleQueryParameter) MarshalJSON() ([]byte, error) {
	type embed ExampleQueryParameter
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ExampleQueryParameter) String() string {
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExampleQueryParameterShape struct {
	Type           string
	Single         interface{}
	Exploded       interface{}
	CommaSeparated interface{}
}

func (e *ExampleQueryParameterShape) GetType() string {
	if e == nil {
		return ""
	}
	return e.Type
}

func (e *ExampleQueryParameterShape) GetSingle() interface{} {
	if e == nil {
		return nil
	}
	return e.Single
}

func (e *ExampleQueryParameterShape) GetExploded() interface{} {
	if e == nil {
		return nil
	}
	return e.Exploded
}

func (e *ExampleQueryParameterShape) GetCommaSeparated() interface{} {
	if e == nil {
		return nil
	}
	return e.CommaSeparated
}

func (e *ExampleQueryParameterShape) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", e)
	}
	switch unmarshaler.Type {
	case "single":
		value := make(map[string]interface{})
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Single = value
	case "exploded":
		value := make(map[string]interface{})
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Exploded = value
	case "commaSeparated":
		value := make(map[string]interface{})
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.CommaSeparated = value
	}
	return nil
}

func (e ExampleQueryParameterShape) MarshalJSON() ([]byte, error) {
	if err := e.validate(); err != nil {
		return nil, err
	}
	if e.Single != nil {
		var marshaler = struct {
			Type   string      `json:"type"`
			Single interface{} `json:"single,omitempty"`
		}{
			Type:   "single",
			Single: e.Single,
		}
		return json.Marshal(marshaler)
	}
	if e.Exploded != nil {
		var marshaler = struct {
			Type     string      `json:"type"`
			Exploded interface{} `json:"exploded,omitempty"`
		}{
			Type:     "exploded",
			Exploded: e.Exploded,
		}
		return json.Marshal(marshaler)
	}
	if e.CommaSeparated != nil {
		var marshaler = struct {
			Type           string      `json:"type"`
			CommaSeparated interface{} `json:"commaSeparated,omitempty"`
		}{
			Type:           "commaSeparated",
			CommaSeparated: e.CommaSeparated,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExampleQueryParameterShapeVisitor interface {
	VisitSingle(interface{}) error
	VisitExploded(interface{}) error
	VisitCommaSeparated(interface{}) error
}

func (e *ExampleQueryParameterShape) Accept(visitor ExampleQueryParameterShapeVisitor) error {
	if e.Single != nil {
		return visitor.VisitSingle(e.Single)
	}
	if e.Exploded != nil {
		return visitor.VisitExploded(e.Exploded)
	}
	if e.CommaSeparated != nil {
		return visitor.VisitCommaSeparated(e.CommaSeparated)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}

func (e *ExampleQueryParameterShape) validate() error {
	if e == nil {
		return fmt.Errorf("type %T is nil", e)
	}
	var fields []string
	if e.Single != nil {
		fields = append(fields, "single")
	}
	if e.Exploded != nil {
		fields = append(fields, "exploded")
	}
	if e.CommaSeparated != nil {
		fields = append(fields, "commaSeparated")
	}
	if len(fields) == 0 {
		if e.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", e, e.Type)
		}
		return fmt.Errorf("type %T is empty", e)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", e, fields)
	}
	if e.Type != "" {
		field := fields[0]
		if e.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				e,
				e.Type,
				e,
			)
		}
	}
	return nil
}

type ExampleRequestBody struct {
	Type               string
	InlinedRequestBody *ExampleInlinedRequestBody
	Reference          *ExampleTypeReference
}

func (e *ExampleRequestBody) GetType() string {
	if e == nil {
		return ""
	}
	return e.Type
}

func (e *ExampleRequestBody) GetInlinedRequestBody() *ExampleInlinedRequestBody {
	if e == nil {
		return nil
	}
	return e.InlinedRequestBody
}

func (e *ExampleRequestBody) GetReference() *ExampleTypeReference {
	if e == nil {
		return nil
	}
	return e.Reference
}

func (e *ExampleRequestBody) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", e)
	}
	switch unmarshaler.Type {
	case "inlinedRequestBody":
		value := new(ExampleInlinedRequestBody)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.InlinedRequestBody = value
	case "reference":
		value := new(ExampleTypeReference)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Reference = value
	}
	return nil
}

func (e ExampleRequestBody) MarshalJSON() ([]byte, error) {
	if err := e.validate(); err != nil {
		return nil, err
	}
	if e.InlinedRequestBody != nil {
		return internal.MarshalJSONWithExtraProperty(e.InlinedRequestBody, "type", "inlinedRequestBody")
	}
	if e.Reference != nil {
		return internal.MarshalJSONWithExtraProperty(e.Reference, "type", "reference")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExampleRequestBodyVisitor interface {
	VisitInlinedRequestBody(*ExampleInlinedRequestBody) error
	VisitReference(*ExampleTypeReference) error
}

func (e *ExampleRequestBody) Accept(visitor ExampleRequestBodyVisitor) error {
	if e.InlinedRequestBody != nil {
		return visitor.VisitInlinedRequestBody(e.InlinedRequestBody)
	}
	if e.Reference != nil {
		return visitor.VisitReference(e.Reference)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}

func (e *ExampleRequestBody) validate() error {
	if e == nil {
		return fmt.Errorf("type %T is nil", e)
	}
	var fields []string
	if e.InlinedRequestBody != nil {
		fields = append(fields, "inlinedRequestBody")
	}
	if e.Reference != nil {
		fields = append(fields, "reference")
	}
	if len(fields) == 0 {
		if e.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", e, e.Type)
		}
		return fmt.Errorf("type %T is empty", e)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", e, fields)
	}
	if e.Type != "" {
		field := fields[0]
		if e.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				e,
				e.Type,
				e,
			)
		}
	}
	return nil
}

type ExampleResponse struct {
	Type  string
	Ok    *ExampleEndpointSuccessResponse
	Error *ExampleEndpointErrorResponse
}

func (e *ExampleResponse) GetType() string {
	if e == nil {
		return ""
	}
	return e.Type
}

func (e *ExampleResponse) GetOk() *ExampleEndpointSuccessResponse {
	if e == nil {
		return nil
	}
	return e.Ok
}

func (e *ExampleResponse) GetError() *ExampleEndpointErrorResponse {
	if e == nil {
		return nil
	}
	return e.Error
}

func (e *ExampleResponse) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", e)
	}
	switch unmarshaler.Type {
	case "ok":
		var valueUnmarshaler struct {
			Ok *ExampleEndpointSuccessResponse `json:"value"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		e.Ok = valueUnmarshaler.Ok
	case "error":
		value := new(ExampleEndpointErrorResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Error = value
	}
	return nil
}

func (e ExampleResponse) MarshalJSON() ([]byte, error) {
	if err := e.validate(); err != nil {
		return nil, err
	}
	if e.Ok != nil {
		var marshaler = struct {
			Type string                          `json:"type"`
			Ok   *ExampleEndpointSuccessResponse `json:"value"`
		}{
			Type: "ok",
			Ok:   e.Ok,
		}
		return json.Marshal(marshaler)
	}
	if e.Error != nil {
		return internal.MarshalJSONWithExtraProperty(e.Error, "type", "error")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExampleResponseVisitor interface {
	VisitOk(*ExampleEndpointSuccessResponse) error
	VisitError(*ExampleEndpointErrorResponse) error
}

func (e *ExampleResponse) Accept(visitor ExampleResponseVisitor) error {
	if e.Ok != nil {
		return visitor.VisitOk(e.Ok)
	}
	if e.Error != nil {
		return visitor.VisitError(e.Error)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}

func (e *ExampleResponse) validate() error {
	if e == nil {
		return fmt.Errorf("type %T is nil", e)
	}
	var fields []string
	if e.Ok != nil {
		fields = append(fields, "ok")
	}
	if e.Error != nil {
		fields = append(fields, "error")
	}
	if len(fields) == 0 {
		if e.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", e, e.Type)
		}
		return fmt.Errorf("type %T is empty", e)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", e, fields)
	}
	if e.Type != "" {
		field := fields[0]
		if e.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				e,
				e.Type,
				e,
			)
		}
	}
	return nil
}

var (
	exampleServerSideEventFieldEvent = big.NewInt(1 << 0)
	exampleServerSideEventFieldData  = big.NewInt(1 << 1)
)

type ExampleServerSideEvent struct {
	Event string                `json:"event" url:"event"`
	Data  *ExampleTypeReference `json:"data" url:"data"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (e *ExampleServerSideEvent) GetEvent() string {
	if e == nil {
		return ""
	}
	return e.Event
}

func (e *ExampleServerSideEvent) GetData() *ExampleTypeReference {
	if e == nil {
		return nil
	}
	return e.Data
}

func (e *ExampleServerSideEvent) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExampleServerSideEvent) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetEvent sets the Event field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleServerSideEvent) SetEvent(event string) {
	e.Event = event
	e.require(exampleServerSideEventFieldEvent)
}

// SetData sets the Data field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *ExampleServerSideEvent) SetData(data *ExampleTypeReference) {
	e.Data = data
	e.require(exampleServerSideEventFieldData)
}

func (e *ExampleServerSideEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler ExampleServerSideEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExampleServerSideEvent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	return nil
}

func (e *ExampleServerSideEvent) MarshalJSON() ([]byte, error) {
	type embed ExampleServerSideEvent
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *ExampleServerSideEvent) String() string {
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

var (
	fileDownloadResponseFieldDocs       = big.NewInt(1 << 0)
	fileDownloadResponseFieldV2Examples = big.NewInt(1 << 1)
)

type FileDownloadResponse struct {
	Docs       *string           `json:"docs,omitempty" url:"docs,omitempty"`
	V2Examples *V2SchemaExamples `json:"v2Examples,omitempty" url:"v2Examples,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (f *FileDownloadResponse) GetDocs() *string {
	if f == nil {
		return nil
	}
	return f.Docs
}

func (f *FileDownloadResponse) GetV2Examples() *V2SchemaExamples {
	if f == nil {
		return nil
	}
	return f.V2Examples
}

func (f *FileDownloadResponse) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FileDownloadResponse) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FileDownloadResponse) SetDocs(docs *string) {
	f.Docs = docs
	f.require(fileDownloadResponseFieldDocs)
}

// SetV2Examples sets the V2Examples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FileDownloadResponse) SetV2Examples(v2Examples *V2SchemaExamples) {
	f.V2Examples = v2Examples
	f.require(fileDownloadResponseFieldV2Examples)
}

func (f *FileDownloadResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler FileDownloadResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FileDownloadResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	return nil
}

func (f *FileDownloadResponse) MarshalJSON() ([]byte, error) {
	type embed FileDownloadResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FileDownloadResponse) String() string {
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FileProperty struct {
	Type      string
	File      *FilePropertySingle
	FileArray *FilePropertyArray
}

func (f *FileProperty) GetType() string {
	if f == nil {
		return ""
	}
	return f.Type
}

func (f *FileProperty) GetFile() *FilePropertySingle {
	if f == nil {
		return nil
	}
	return f.File
}

func (f *FileProperty) GetFileArray() *FilePropertyArray {
	if f == nil {
		return nil
	}
	return f.FileArray
}

func (f *FileProperty) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	f.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", f)
	}
	switch unmarshaler.Type {
	case "file":
		value := new(FilePropertySingle)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		f.File = value
	case "fileArray":
		value := new(FilePropertyArray)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		f.FileArray = value
	}
	return nil
}

func (f FileProperty) MarshalJSON() ([]byte, error) {
	if err := f.validate(); err != nil {
		return nil, err
	}
	if f.File != nil {
		return internal.MarshalJSONWithExtraProperty(f.File, "type", "file")
	}
	if f.FileArray != nil {
		return internal.MarshalJSONWithExtraProperty(f.FileArray, "type", "fileArray")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", f)
}

type FilePropertyVisitor interface {
	VisitFile(*FilePropertySingle) error
	VisitFileArray(*FilePropertyArray) error
}

func (f *FileProperty) Accept(visitor FilePropertyVisitor) error {
	if f.File != nil {
		return visitor.VisitFile(f.File)
	}
	if f.FileArray != nil {
		return visitor.VisitFileArray(f.FileArray)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", f)
}

func (f *FileProperty) validate() error {
	if f == nil {
		return fmt.Errorf("type %T is nil", f)
	}
	var fields []string
	if f.File != nil {
		fields = append(fields, "file")
	}
	if f.FileArray != nil {
		fields = append(fields, "fileArray")
	}
	if len(fields) == 0 {
		if f.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", f, f.Type)
		}
		return fmt.Errorf("type %T is empty", f)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", f, fields)
	}
	if f.Type != "" {
		field := fields[0]
		if f.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				f,
				f.Type,
				f,
			)
		}
	}
	return nil
}

var (
	filePropertyArrayFieldDocs        = big.NewInt(1 << 0)
	filePropertyArrayFieldKey         = big.NewInt(1 << 1)
	filePropertyArrayFieldIsOptional  = big.NewInt(1 << 2)
	filePropertyArrayFieldContentType = big.NewInt(1 << 3)
)

type FilePropertyArray struct {
	Docs        *string                  `json:"docs,omitempty" url:"docs,omitempty"`
	Key         *common.NameAndWireValue `json:"key" url:"key"`
	IsOptional  bool                     `json:"isOptional" url:"isOptional"`
	ContentType *string                  `json:"contentType,omitempty" url:"contentType,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (f *FilePropertyArray) GetDocs() *string {
	if f == nil {
		return nil
	}
	return f.Docs
}

func (f *FilePropertyArray) GetKey() *common.NameAndWireValue {
	if f == nil {
		return nil
	}
	return f.Key
}

func (f *FilePropertyArray) GetIsOptional() bool {
	if f == nil {
		return false
	}
	return f.IsOptional
}

func (f *FilePropertyArray) GetContentType() *string {
	if f == nil {
		return nil
	}
	return f.ContentType
}

func (f *FilePropertyArray) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FilePropertyArray) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FilePropertyArray) SetDocs(docs *string) {
	f.Docs = docs
	f.require(filePropertyArrayFieldDocs)
}

// SetKey sets the Key field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FilePropertyArray) SetKey(key *common.NameAndWireValue) {
	f.Key = key
	f.require(filePropertyArrayFieldKey)
}

// SetIsOptional sets the IsOptional field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FilePropertyArray) SetIsOptional(isOptional bool) {
	f.IsOptional = isOptional
	f.require(filePropertyArrayFieldIsOptional)
}

// SetContentType sets the ContentType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FilePropertyArray) SetContentType(contentType *string) {
	f.ContentType = contentType
	f.require(filePropertyArrayFieldContentType)
}

func (f *FilePropertyArray) UnmarshalJSON(data []byte) error {
	type unmarshaler FilePropertyArray
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FilePropertyArray(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	return nil
}

func (f *FilePropertyArray) MarshalJSON() ([]byte, error) {
	type embed FilePropertyArray
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FilePropertyArray) String() string {
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	filePropertySingleFieldDocs        = big.NewInt(1 << 0)
	filePropertySingleFieldKey         = big.NewInt(1 << 1)
	filePropertySingleFieldIsOptional  = big.NewInt(1 << 2)
	filePropertySingleFieldContentType = big.NewInt(1 << 3)
)

type FilePropertySingle struct {
	Docs        *string                  `json:"docs,omitempty" url:"docs,omitempty"`
	Key         *common.NameAndWireValue `json:"key" url:"key"`
	IsOptional  bool                     `json:"isOptional" url:"isOptional"`
	ContentType *string                  `json:"contentType,omitempty" url:"contentType,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (f *FilePropertySingle) GetDocs() *string {
	if f == nil {
		return nil
	}
	return f.Docs
}

func (f *FilePropertySingle) GetKey() *common.NameAndWireValue {
	if f == nil {
		return nil
	}
	return f.Key
}

func (f *FilePropertySingle) GetIsOptional() bool {
	if f == nil {
		return false
	}
	return f.IsOptional
}

func (f *FilePropertySingle) GetContentType() *string {
	if f == nil {
		return nil
	}
	return f.ContentType
}

func (f *FilePropertySingle) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FilePropertySingle) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FilePropertySingle) SetDocs(docs *string) {
	f.Docs = docs
	f.require(filePropertySingleFieldDocs)
}

// SetKey sets the Key field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FilePropertySingle) SetKey(key *common.NameAndWireValue) {
	f.Key = key
	f.require(filePropertySingleFieldKey)
}

// SetIsOptional sets the IsOptional field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FilePropertySingle) SetIsOptional(isOptional bool) {
	f.IsOptional = isOptional
	f.require(filePropertySingleFieldIsOptional)
}

// SetContentType sets the ContentType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FilePropertySingle) SetContentType(contentType *string) {
	f.ContentType = contentType
	f.require(filePropertySingleFieldContentType)
}

func (f *FilePropertySingle) UnmarshalJSON(data []byte) error {
	type unmarshaler FilePropertySingle
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FilePropertySingle(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	return nil
}

func (f *FilePropertySingle) MarshalJSON() ([]byte, error) {
	type embed FilePropertySingle
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FilePropertySingle) String() string {
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

var (
	fileUploadBodyPropertyFieldDocs           = big.NewInt(1 << 0)
	fileUploadBodyPropertyFieldAvailability   = big.NewInt(1 << 1)
	fileUploadBodyPropertyFieldName           = big.NewInt(1 << 2)
	fileUploadBodyPropertyFieldValueType      = big.NewInt(1 << 3)
	fileUploadBodyPropertyFieldV2Examples     = big.NewInt(1 << 4)
	fileUploadBodyPropertyFieldPropertyAccess = big.NewInt(1 << 5)
	fileUploadBodyPropertyFieldContentType    = big.NewInt(1 << 6)
	fileUploadBodyPropertyFieldStyle          = big.NewInt(1 << 7)
)

type FileUploadBodyProperty struct {
	Docs           *string                         `json:"docs,omitempty" url:"docs,omitempty"`
	Availability   *Availability                   `json:"availability,omitempty" url:"availability,omitempty"`
	Name           *common.NameAndWireValue        `json:"name" url:"name"`
	ValueType      *TypeReference                  `json:"valueType" url:"valueType"`
	V2Examples     *V2SchemaExamples               `json:"v2Examples,omitempty" url:"v2Examples,omitempty"`
	PropertyAccess *common.ObjectPropertyAccess    `json:"propertyAccess,omitempty" url:"propertyAccess,omitempty"`
	ContentType    *string                         `json:"contentType,omitempty" url:"contentType,omitempty"`
	Style          *FileUploadBodyPropertyEncoding `json:"style,omitempty" url:"style,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (f *FileUploadBodyProperty) GetDocs() *string {
	if f == nil {
		return nil
	}
	return f.Docs
}

func (f *FileUploadBodyProperty) GetAvailability() *Availability {
	if f == nil {
		return nil
	}
	return f.Availability
}

func (f *FileUploadBodyProperty) GetName() *common.NameAndWireValue {
	if f == nil {
		return nil
	}
	return f.Name
}

func (f *FileUploadBodyProperty) GetValueType() *TypeReference {
	if f == nil {
		return nil
	}
	return f.ValueType
}

func (f *FileUploadBodyProperty) GetV2Examples() *V2SchemaExamples {
	if f == nil {
		return nil
	}
	return f.V2Examples
}

func (f *FileUploadBodyProperty) GetPropertyAccess() *common.ObjectPropertyAccess {
	if f == nil {
		return nil
	}
	return f.PropertyAccess
}

func (f *FileUploadBodyProperty) GetContentType() *string {
	if f == nil {
		return nil
	}
	return f.ContentType
}

func (f *FileUploadBodyProperty) GetStyle() *FileUploadBodyPropertyEncoding {
	if f == nil {
		return nil
	}
	return f.Style
}

func (f *FileUploadBodyProperty) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FileUploadBodyProperty) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FileUploadBodyProperty) SetDocs(docs *string) {
	f.Docs = docs
	f.require(fileUploadBodyPropertyFieldDocs)
}

// SetAvailability sets the Availability field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FileUploadBodyProperty) SetAvailability(availability *Availability) {
	f.Availability = availability
	f.require(fileUploadBodyPropertyFieldAvailability)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FileUploadBodyProperty) SetName(name *common.NameAndWireValue) {
	f.Name = name
	f.require(fileUploadBodyPropertyFieldName)
}

// SetValueType sets the ValueType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FileUploadBodyProperty) SetValueType(valueType *TypeReference) {
	f.ValueType = valueType
	f.require(fileUploadBodyPropertyFieldValueType)
}

// SetV2Examples sets the V2Examples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FileUploadBodyProperty) SetV2Examples(v2Examples *V2SchemaExamples) {
	f.V2Examples = v2Examples
	f.require(fileUploadBodyPropertyFieldV2Examples)
}

// SetPropertyAccess sets the PropertyAccess field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FileUploadBodyProperty) SetPropertyAccess(propertyAccess *common.ObjectPropertyAccess) {
	f.PropertyAccess = propertyAccess
	f.require(fileUploadBodyPropertyFieldPropertyAccess)
}

// SetContentType sets the ContentType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FileUploadBodyProperty) SetContentType(contentType *string) {
	f.ContentType = contentType
	f.require(fileUploadBodyPropertyFieldContentType)
}

// SetStyle sets the Style field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FileUploadBodyProperty) SetStyle(style *FileUploadBodyPropertyEncoding) {
	f.Style = style
	f.require(fileUploadBodyPropertyFieldStyle)
}

func (f *FileUploadBodyProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler FileUploadBodyProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FileUploadBodyProperty(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	return nil
}

func (f *FileUploadBodyProperty) MarshalJSON() ([]byte, error) {
	type embed FileUploadBodyProperty
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FileUploadBodyProperty) String() string {
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FileUploadBodyPropertyEncoding string

const (
	FileUploadBodyPropertyEncodingExploded FileUploadBodyPropertyEncoding = "exploded"
	FileUploadBodyPropertyEncodingJson     FileUploadBodyPropertyEncoding = "json"
	FileUploadBodyPropertyEncodingForm     FileUploadBodyPropertyEncoding = "form"
)

func NewFileUploadBodyPropertyEncodingFromString(s string) (FileUploadBodyPropertyEncoding, error) {
	switch s {
	case "exploded":
		return FileUploadBodyPropertyEncodingExploded, nil
	case "json":
		return FileUploadBodyPropertyEncodingJson, nil
	case "form":
		return FileUploadBodyPropertyEncodingForm, nil
	}
	var t FileUploadBodyPropertyEncoding
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FileUploadBodyPropertyEncoding) Ptr() *FileUploadBodyPropertyEncoding {
	return &f
}

var (
	fileUploadRequestFieldDocs        = big.NewInt(1 << 0)
	fileUploadRequestFieldV2Examples  = big.NewInt(1 << 1)
	fileUploadRequestFieldContentType = big.NewInt(1 << 2)
	fileUploadRequestFieldName        = big.NewInt(1 << 3)
	fileUploadRequestFieldProperties  = big.NewInt(1 << 4)
)

type FileUploadRequest struct {
	Docs        *string                      `json:"docs,omitempty" url:"docs,omitempty"`
	V2Examples  *V2SchemaExamples            `json:"v2Examples,omitempty" url:"v2Examples,omitempty"`
	ContentType *string                      `json:"contentType,omitempty" url:"contentType,omitempty"`
	Name        *common.Name                 `json:"name" url:"name"`
	Properties  []*FileUploadRequestProperty `json:"properties" url:"properties"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (f *FileUploadRequest) GetDocs() *string {
	if f == nil {
		return nil
	}
	return f.Docs
}

func (f *FileUploadRequest) GetV2Examples() *V2SchemaExamples {
	if f == nil {
		return nil
	}
	return f.V2Examples
}

func (f *FileUploadRequest) GetContentType() *string {
	if f == nil {
		return nil
	}
	return f.ContentType
}

func (f *FileUploadRequest) GetName() *common.Name {
	if f == nil {
		return nil
	}
	return f.Name
}

func (f *FileUploadRequest) GetProperties() []*FileUploadRequestProperty {
	if f == nil {
		return nil
	}
	return f.Properties
}

func (f *FileUploadRequest) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FileUploadRequest) require(field *big.Int) {
	if f.explicitFields == nil {
		f.explicitFields = big.NewInt(0)
	}
	f.explicitFields.Or(f.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FileUploadRequest) SetDocs(docs *string) {
	f.Docs = docs
	f.require(fileUploadRequestFieldDocs)
}

// SetV2Examples sets the V2Examples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FileUploadRequest) SetV2Examples(v2Examples *V2SchemaExamples) {
	f.V2Examples = v2Examples
	f.require(fileUploadRequestFieldV2Examples)
}

// SetContentType sets the ContentType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FileUploadRequest) SetContentType(contentType *string) {
	f.ContentType = contentType
	f.require(fileUploadRequestFieldContentType)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FileUploadRequest) SetName(name *common.Name) {
	f.Name = name
	f.require(fileUploadRequestFieldName)
}

// SetProperties sets the Properties field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (f *FileUploadRequest) SetProperties(properties []*FileUploadRequestProperty) {
	f.Properties = properties
	f.require(fileUploadRequestFieldProperties)
}

func (f *FileUploadRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler FileUploadRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FileUploadRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	return nil
}

func (f *FileUploadRequest) MarshalJSON() ([]byte, error) {
	type embed FileUploadRequest
	var marshaler = struct {
		embed
	}{
		embed: embed(*f),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, f.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (f *FileUploadRequest) String() string {
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FileUploadRequestProperty struct {
	Type         string
	File         *FileProperty
	BodyProperty *FileUploadBodyProperty
}

func (f *FileUploadRequestProperty) GetType() string {
	if f == nil {
		return ""
	}
	return f.Type
}

func (f *FileUploadRequestProperty) GetFile() *FileProperty {
	if f == nil {
		return nil
	}
	return f.File
}

func (f *FileUploadRequestProperty) GetBodyProperty() *FileUploadBodyProperty {
	if f == nil {
		return nil
	}
	return f.BodyProperty
}

func (f *FileUploadRequestProperty) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	f.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", f)
	}
	switch unmarshaler.Type {
	case "file":
		var valueUnmarshaler struct {
			File *FileProperty `json:"value"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		f.File = valueUnmarshaler.File
	case "bodyProperty":
		value := new(FileUploadBodyProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		f.BodyProperty = value
	}
	return nil
}

func (f FileUploadRequestProperty) MarshalJSON() ([]byte, error) {
	if err := f.validate(); err != nil {
		return nil, err
	}
	if f.File != nil {
		var marshaler = struct {
			Type string        `json:"type"`
			File *FileProperty `json:"value"`
		}{
			Type: "file",
			File: f.File,
		}
		return json.Marshal(marshaler)
	}
	if f.BodyProperty != nil {
		return internal.MarshalJSONWithExtraProperty(f.BodyProperty, "type", "bodyProperty")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", f)
}

type FileUploadRequestPropertyVisitor interface {
	VisitFile(*FileProperty) error
	VisitBodyProperty(*FileUploadBodyProperty) error
}

func (f *FileUploadRequestProperty) Accept(visitor FileUploadRequestPropertyVisitor) error {
	if f.File != nil {
		return visitor.VisitFile(f.File)
	}
	if f.BodyProperty != nil {
		return visitor.VisitBodyProperty(f.BodyProperty)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", f)
}

func (f *FileUploadRequestProperty) validate() error {
	if f == nil {
		return fmt.Errorf("type %T is nil", f)
	}
	var fields []string
	if f.File != nil {
		fields = append(fields, "file")
	}
	if f.BodyProperty != nil {
		fields = append(fields, "bodyProperty")
	}
	if len(fields) == 0 {
		if f.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", f, f.Type)
		}
		return fmt.Errorf("type %T is empty", f)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", f, fields)
	}
	if f.Type != "" {
		field := fields[0]
		if f.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				f,
				f.Type,
				f,
			)
		}
	}
	return nil
}

var (
	grpcTransportFieldService = big.NewInt(1 << 0)
)

type GrpcTransport struct {
	Service *ProtobufService `json:"service" url:"service"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (g *GrpcTransport) GetService() *ProtobufService {
	if g == nil {
		return nil
	}
	return g.Service
}

func (g *GrpcTransport) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GrpcTransport) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetService sets the Service field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GrpcTransport) SetService(service *ProtobufService) {
	g.Service = service
	g.require(grpcTransportFieldService)
}

func (g *GrpcTransport) UnmarshalJSON(data []byte) error {
	type unmarshaler GrpcTransport
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GrpcTransport(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	return nil
}

func (g *GrpcTransport) MarshalJSON() ([]byte, error) {
	type embed GrpcTransport
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, g.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (g *GrpcTransport) String() string {
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

var (
	httpEndpointFieldDocs                  = big.NewInt(1 << 0)
	httpEndpointFieldAvailability          = big.NewInt(1 << 1)
	httpEndpointFieldId                    = big.NewInt(1 << 2)
	httpEndpointFieldName                  = big.NewInt(1 << 3)
	httpEndpointFieldDisplayName           = big.NewInt(1 << 4)
	httpEndpointFieldMethod                = big.NewInt(1 << 5)
	httpEndpointFieldHeaders               = big.NewInt(1 << 6)
	httpEndpointFieldBaseUrl               = big.NewInt(1 << 7)
	httpEndpointFieldV2BaseUrls            = big.NewInt(1 << 8)
	httpEndpointFieldBasePath              = big.NewInt(1 << 9)
	httpEndpointFieldPath                  = big.NewInt(1 << 10)
	httpEndpointFieldFullPath              = big.NewInt(1 << 11)
	httpEndpointFieldPathParameters        = big.NewInt(1 << 12)
	httpEndpointFieldAllPathParameters     = big.NewInt(1 << 13)
	httpEndpointFieldQueryParameters       = big.NewInt(1 << 14)
	httpEndpointFieldRequestBody           = big.NewInt(1 << 15)
	httpEndpointFieldV2RequestBodies       = big.NewInt(1 << 16)
	httpEndpointFieldSdkRequest            = big.NewInt(1 << 17)
	httpEndpointFieldResponse              = big.NewInt(1 << 18)
	httpEndpointFieldV2Responses           = big.NewInt(1 << 19)
	httpEndpointFieldErrors                = big.NewInt(1 << 20)
	httpEndpointFieldAuth                  = big.NewInt(1 << 21)
	httpEndpointFieldSecurity              = big.NewInt(1 << 22)
	httpEndpointFieldIdempotent            = big.NewInt(1 << 23)
	httpEndpointFieldPagination            = big.NewInt(1 << 24)
	httpEndpointFieldUserSpecifiedExamples = big.NewInt(1 << 25)
	httpEndpointFieldAutogeneratedExamples = big.NewInt(1 << 26)
	httpEndpointFieldV2Examples            = big.NewInt(1 << 27)
	httpEndpointFieldTransport             = big.NewInt(1 << 28)
	httpEndpointFieldSource                = big.NewInt(1 << 29)
	httpEndpointFieldAudiences             = big.NewInt(1 << 30)
	httpEndpointFieldRetries               = big.NewInt(1 << 31)
)

type HttpEndpoint struct {
	Docs         *string                       `json:"docs,omitempty" url:"docs,omitempty"`
	Availability *Availability                 `json:"availability,omitempty" url:"availability,omitempty"`
	Id           common.EndpointId             `json:"id" url:"id"`
	Name         EndpointName                  `json:"name" url:"name"`
	DisplayName  *string                       `json:"displayName,omitempty" url:"displayName,omitempty"`
	Method       common.HttpMethod             `json:"method" url:"method"`
	Headers      []*HttpHeader                 `json:"headers" url:"headers"`
	BaseUrl      *common.EnvironmentBaseUrlId  `json:"baseUrl,omitempty" url:"baseUrl,omitempty"`
	V2BaseUrls   []common.EnvironmentBaseUrlId `json:"v2BaseUrls,omitempty" url:"v2BaseUrls,omitempty"`
	// Overrides the service and endpoint level base paths
	BasePath          *HttpPath            `json:"basePath,omitempty" url:"basePath,omitempty"`
	Path              *HttpPath            `json:"path" url:"path"`
	FullPath          *HttpPath            `json:"fullPath" url:"fullPath"`
	PathParameters    []*PathParameter     `json:"pathParameters" url:"pathParameters"`
	AllPathParameters []*PathParameter     `json:"allPathParameters" url:"allPathParameters"`
	QueryParameters   []*QueryParameter    `json:"queryParameters" url:"queryParameters"`
	RequestBody       *HttpRequestBody     `json:"requestBody,omitempty" url:"requestBody,omitempty"`
	V2RequestBodies   *V2HttpRequestBodies `json:"v2RequestBodies,omitempty" url:"v2RequestBodies,omitempty"`
	SdkRequest        *SdkRequest          `json:"sdkRequest,omitempty" url:"sdkRequest,omitempty"`
	Response          *HttpResponse        `json:"response,omitempty" url:"response,omitempty"`
	V2Responses       *V2HttpResponses     `json:"v2Responses,omitempty" url:"v2Responses,omitempty"`
	Errors            ResponseErrors       `json:"errors" url:"errors"`
	Auth              bool                 `json:"auth" url:"auth"`
	// A list of auth scheme collections.
	// To satisfy the security requirements, the caller must satisfy at least one collection of schemes.
	Security              []HttpEndpointSecurityItem      `json:"security,omitempty" url:"security,omitempty"`
	Idempotent            bool                            `json:"idempotent" url:"idempotent"`
	Pagination            *Pagination                     `json:"pagination,omitempty" url:"pagination,omitempty"`
	UserSpecifiedExamples []*UserSpecifiedEndpointExample `json:"userSpecifiedExamples" url:"userSpecifiedExamples"`
	AutogeneratedExamples []*AutogeneratedEndpointExample `json:"autogeneratedExamples" url:"autogeneratedExamples"`
	V2Examples            *V2HttpEndpointExamples         `json:"v2Examples,omitempty" url:"v2Examples,omitempty"`
	Transport             *Transport                      `json:"transport,omitempty" url:"transport,omitempty"`
	Source                *HttpEndpointSource             `json:"source,omitempty" url:"source,omitempty"`
	Audiences             []AudienceReference             `json:"audiences,omitempty" url:"audiences,omitempty"`
	Retries               *RetriesConfiguration           `json:"retries,omitempty" url:"retries,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (h *HttpEndpoint) GetDocs() *string {
	if h == nil {
		return nil
	}
	return h.Docs
}

func (h *HttpEndpoint) GetAvailability() *Availability {
	if h == nil {
		return nil
	}
	return h.Availability
}

func (h *HttpEndpoint) GetId() common.EndpointId {
	if h == nil {
		return ""
	}
	return h.Id
}

func (h *HttpEndpoint) GetName() EndpointName {
	if h == nil {
		return nil
	}
	return h.Name
}

func (h *HttpEndpoint) GetDisplayName() *string {
	if h == nil {
		return nil
	}
	return h.DisplayName
}

func (h *HttpEndpoint) GetMethod() common.HttpMethod {
	if h == nil {
		return ""
	}
	return h.Method
}

func (h *HttpEndpoint) GetHeaders() []*HttpHeader {
	if h == nil {
		return nil
	}
	return h.Headers
}

func (h *HttpEndpoint) GetBaseUrl() *common.EnvironmentBaseUrlId {
	if h == nil {
		return nil
	}
	return h.BaseUrl
}

func (h *HttpEndpoint) GetV2BaseUrls() []common.EnvironmentBaseUrlId {
	if h == nil {
		return nil
	}
	return h.V2BaseUrls
}

func (h *HttpEndpoint) GetBasePath() *HttpPath {
	if h == nil {
		return nil
	}
	return h.BasePath
}

func (h *HttpEndpoint) GetPath() *HttpPath {
	if h == nil {
		return nil
	}
	return h.Path
}

func (h *HttpEndpoint) GetFullPath() *HttpPath {
	if h == nil {
		return nil
	}
	return h.FullPath
}

func (h *HttpEndpoint) GetPathParameters() []*PathParameter {
	if h == nil {
		return nil
	}
	return h.PathParameters
}

func (h *HttpEndpoint) GetAllPathParameters() []*PathParameter {
	if h == nil {
		return nil
	}
	return h.AllPathParameters
}

func (h *HttpEndpoint) GetQueryParameters() []*QueryParameter {
	if h == nil {
		return nil
	}
	return h.QueryParameters
}

func (h *HttpEndpoint) GetRequestBody() *HttpRequestBody {
	if h == nil {
		return nil
	}
	return h.RequestBody
}

func (h *HttpEndpoint) GetV2RequestBodies() *V2HttpRequestBodies {
	if h == nil {
		return nil
	}
	return h.V2RequestBodies
}

func (h *HttpEndpoint) GetSdkRequest() *SdkRequest {
	if h == nil {
		return nil
	}
	return h.SdkRequest
}

func (h *HttpEndpoint) GetResponse() *HttpResponse {
	if h == nil {
		return nil
	}
	return h.Response
}

func (h *HttpEndpoint) GetV2Responses() *V2HttpResponses {
	if h == nil {
		return nil
	}
	return h.V2Responses
}

func (h *HttpEndpoint) GetErrors() ResponseErrors {
	if h == nil {
		return nil
	}
	return h.Errors
}

func (h *HttpEndpoint) GetAuth() bool {
	if h == nil {
		return false
	}
	return h.Auth
}

func (h *HttpEndpoint) GetSecurity() []HttpEndpointSecurityItem {
	if h == nil {
		return nil
	}
	return h.Security
}

func (h *HttpEndpoint) GetIdempotent() bool {
	if h == nil {
		return false
	}
	return h.Idempotent
}

func (h *HttpEndpoint) GetPagination() *Pagination {
	if h == nil {
		return nil
	}
	return h.Pagination
}

func (h *HttpEndpoint) GetUserSpecifiedExamples() []*UserSpecifiedEndpointExample {
	if h == nil {
		return nil
	}
	return h.UserSpecifiedExamples
}

func (h *HttpEndpoint) GetAutogeneratedExamples() []*AutogeneratedEndpointExample {
	if h == nil {
		return nil
	}
	return h.AutogeneratedExamples
}

func (h *HttpEndpoint) GetV2Examples() *V2HttpEndpointExamples {
	if h == nil {
		return nil
	}
	return h.V2Examples
}

func (h *HttpEndpoint) GetTransport() *Transport {
	if h == nil {
		return nil
	}
	return h.Transport
}

func (h *HttpEndpoint) GetSource() *HttpEndpointSource {
	if h == nil {
		return nil
	}
	return h.Source
}

func (h *HttpEndpoint) GetAudiences() []AudienceReference {
	if h == nil {
		return nil
	}
	return h.Audiences
}

func (h *HttpEndpoint) GetRetries() *RetriesConfiguration {
	if h == nil {
		return nil
	}
	return h.Retries
}

func (h *HttpEndpoint) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HttpEndpoint) require(field *big.Int) {
	if h.explicitFields == nil {
		h.explicitFields = big.NewInt(0)
	}
	h.explicitFields.Or(h.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetDocs(docs *string) {
	h.Docs = docs
	h.require(httpEndpointFieldDocs)
}

// SetAvailability sets the Availability field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetAvailability(availability *Availability) {
	h.Availability = availability
	h.require(httpEndpointFieldAvailability)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetId(id common.EndpointId) {
	h.Id = id
	h.require(httpEndpointFieldId)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetName(name EndpointName) {
	h.Name = name
	h.require(httpEndpointFieldName)
}

// SetDisplayName sets the DisplayName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetDisplayName(displayName *string) {
	h.DisplayName = displayName
	h.require(httpEndpointFieldDisplayName)
}

// SetMethod sets the Method field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetMethod(method common.HttpMethod) {
	h.Method = method
	h.require(httpEndpointFieldMethod)
}

// SetHeaders sets the Headers field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetHeaders(headers []*HttpHeader) {
	h.Headers = headers
	h.require(httpEndpointFieldHeaders)
}

// SetBaseUrl sets the BaseUrl field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetBaseUrl(baseUrl *common.EnvironmentBaseUrlId) {
	h.BaseUrl = baseUrl
	h.require(httpEndpointFieldBaseUrl)
}

// SetV2BaseUrls sets the V2BaseUrls field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetV2BaseUrls(v2BaseUrls []common.EnvironmentBaseUrlId) {
	h.V2BaseUrls = v2BaseUrls
	h.require(httpEndpointFieldV2BaseUrls)
}

// SetBasePath sets the BasePath field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetBasePath(basePath *HttpPath) {
	h.BasePath = basePath
	h.require(httpEndpointFieldBasePath)
}

// SetPath sets the Path field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetPath(path *HttpPath) {
	h.Path = path
	h.require(httpEndpointFieldPath)
}

// SetFullPath sets the FullPath field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetFullPath(fullPath *HttpPath) {
	h.FullPath = fullPath
	h.require(httpEndpointFieldFullPath)
}

// SetPathParameters sets the PathParameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetPathParameters(pathParameters []*PathParameter) {
	h.PathParameters = pathParameters
	h.require(httpEndpointFieldPathParameters)
}

// SetAllPathParameters sets the AllPathParameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetAllPathParameters(allPathParameters []*PathParameter) {
	h.AllPathParameters = allPathParameters
	h.require(httpEndpointFieldAllPathParameters)
}

// SetQueryParameters sets the QueryParameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetQueryParameters(queryParameters []*QueryParameter) {
	h.QueryParameters = queryParameters
	h.require(httpEndpointFieldQueryParameters)
}

// SetRequestBody sets the RequestBody field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetRequestBody(requestBody *HttpRequestBody) {
	h.RequestBody = requestBody
	h.require(httpEndpointFieldRequestBody)
}

// SetV2RequestBodies sets the V2RequestBodies field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetV2RequestBodies(v2RequestBodies *V2HttpRequestBodies) {
	h.V2RequestBodies = v2RequestBodies
	h.require(httpEndpointFieldV2RequestBodies)
}

// SetSdkRequest sets the SdkRequest field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetSdkRequest(sdkRequest *SdkRequest) {
	h.SdkRequest = sdkRequest
	h.require(httpEndpointFieldSdkRequest)
}

// SetResponse sets the Response field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetResponse(response *HttpResponse) {
	h.Response = response
	h.require(httpEndpointFieldResponse)
}

// SetV2Responses sets the V2Responses field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetV2Responses(v2Responses *V2HttpResponses) {
	h.V2Responses = v2Responses
	h.require(httpEndpointFieldV2Responses)
}

// SetErrors sets the Errors field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetErrors(errors ResponseErrors) {
	h.Errors = errors
	h.require(httpEndpointFieldErrors)
}

// SetAuth sets the Auth field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetAuth(auth bool) {
	h.Auth = auth
	h.require(httpEndpointFieldAuth)
}

// SetSecurity sets the Security field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetSecurity(security []HttpEndpointSecurityItem) {
	h.Security = security
	h.require(httpEndpointFieldSecurity)
}

// SetIdempotent sets the Idempotent field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetIdempotent(idempotent bool) {
	h.Idempotent = idempotent
	h.require(httpEndpointFieldIdempotent)
}

// SetPagination sets the Pagination field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetPagination(pagination *Pagination) {
	h.Pagination = pagination
	h.require(httpEndpointFieldPagination)
}

// SetUserSpecifiedExamples sets the UserSpecifiedExamples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetUserSpecifiedExamples(userSpecifiedExamples []*UserSpecifiedEndpointExample) {
	h.UserSpecifiedExamples = userSpecifiedExamples
	h.require(httpEndpointFieldUserSpecifiedExamples)
}

// SetAutogeneratedExamples sets the AutogeneratedExamples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetAutogeneratedExamples(autogeneratedExamples []*AutogeneratedEndpointExample) {
	h.AutogeneratedExamples = autogeneratedExamples
	h.require(httpEndpointFieldAutogeneratedExamples)
}

// SetV2Examples sets the V2Examples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetV2Examples(v2Examples *V2HttpEndpointExamples) {
	h.V2Examples = v2Examples
	h.require(httpEndpointFieldV2Examples)
}

// SetTransport sets the Transport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetTransport(transport *Transport) {
	h.Transport = transport
	h.require(httpEndpointFieldTransport)
}

// SetSource sets the Source field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetSource(source *HttpEndpointSource) {
	h.Source = source
	h.require(httpEndpointFieldSource)
}

// SetAudiences sets the Audiences field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetAudiences(audiences []AudienceReference) {
	h.Audiences = audiences
	h.require(httpEndpointFieldAudiences)
}

// SetRetries sets the Retries field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpEndpoint) SetRetries(retries *RetriesConfiguration) {
	h.Retries = retries
	h.require(httpEndpointFieldRetries)
}

func (h *HttpEndpoint) UnmarshalJSON(data []byte) error {
	type unmarshaler HttpEndpoint
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HttpEndpoint(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	return nil
}

func (h *HttpEndpoint) MarshalJSON() ([]byte, error) {
	type embed HttpEndpoint
	var marshaler = struct {
		embed
	}{
		embed: embed(*h),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, h.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (h *HttpEndpoint) String() string {
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

// A collection of auth schemes that all need to be satisfied for the endpoint.
type HttpEndpointSecurityItem = map[AuthSchemeKey][]AuthScope

type HttpEndpointSource struct {
	Type    string
	Proto   *ProtoSourceInfo
	Openapi interface{}
	Openrpc interface{}
}

func (h *HttpEndpointSource) GetType() string {
	if h == nil {
		return ""
	}
	return h.Type
}

func (h *HttpEndpointSource) GetProto() *ProtoSourceInfo {
	if h == nil {
		return nil
	}
	return h.Proto
}

func (h *HttpEndpointSource) GetOpenapi() interface{} {
	if h == nil {
		return nil
	}
	return h.Openapi
}

func (h *HttpEndpointSource) GetOpenrpc() interface{} {
	if h == nil {
		return nil
	}
	return h.Openrpc
}

func (h *HttpEndpointSource) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	h.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", h)
	}
	switch unmarshaler.Type {
	case "proto":
		value := new(ProtoSourceInfo)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		h.Proto = value
	case "openapi":
		value := make(map[string]interface{})
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		h.Openapi = value
	case "openrpc":
		value := make(map[string]interface{})
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		h.Openrpc = value
	}
	return nil
}

func (h HttpEndpointSource) MarshalJSON() ([]byte, error) {
	if err := h.validate(); err != nil {
		return nil, err
	}
	if h.Proto != nil {
		return internal.MarshalJSONWithExtraProperty(h.Proto, "type", "proto")
	}
	if h.Openapi != nil {
		var marshaler = struct {
			Type    string      `json:"type"`
			Openapi interface{} `json:"openapi,omitempty"`
		}{
			Type:    "openapi",
			Openapi: h.Openapi,
		}
		return json.Marshal(marshaler)
	}
	if h.Openrpc != nil {
		var marshaler = struct {
			Type    string      `json:"type"`
			Openrpc interface{} `json:"openrpc,omitempty"`
		}{
			Type:    "openrpc",
			Openrpc: h.Openrpc,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", h)
}

type HttpEndpointSourceVisitor interface {
	VisitProto(*ProtoSourceInfo) error
	VisitOpenapi(interface{}) error
	VisitOpenrpc(interface{}) error
}

func (h *HttpEndpointSource) Accept(visitor HttpEndpointSourceVisitor) error {
	if h.Proto != nil {
		return visitor.VisitProto(h.Proto)
	}
	if h.Openapi != nil {
		return visitor.VisitOpenapi(h.Openapi)
	}
	if h.Openrpc != nil {
		return visitor.VisitOpenrpc(h.Openrpc)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", h)
}

func (h *HttpEndpointSource) validate() error {
	if h == nil {
		return fmt.Errorf("type %T is nil", h)
	}
	var fields []string
	if h.Proto != nil {
		fields = append(fields, "proto")
	}
	if h.Openapi != nil {
		fields = append(fields, "openapi")
	}
	if h.Openrpc != nil {
		fields = append(fields, "openrpc")
	}
	if len(fields) == 0 {
		if h.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", h, h.Type)
		}
		return fmt.Errorf("type %T is empty", h)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", h, fields)
	}
	if h.Type != "" {
		field := fields[0]
		if h.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				h,
				h.Type,
				h,
			)
		}
	}
	return nil
}

var (
	httpHeaderFieldDocs         = big.NewInt(1 << 0)
	httpHeaderFieldAvailability = big.NewInt(1 << 1)
	httpHeaderFieldName         = big.NewInt(1 << 2)
	httpHeaderFieldValueType    = big.NewInt(1 << 3)
	httpHeaderFieldEnv          = big.NewInt(1 << 4)
	httpHeaderFieldV2Examples   = big.NewInt(1 << 5)
)

type HttpHeader struct {
	Docs         *string                  `json:"docs,omitempty" url:"docs,omitempty"`
	Availability *Availability            `json:"availability,omitempty" url:"availability,omitempty"`
	Name         *common.NameAndWireValue `json:"name" url:"name"`
	ValueType    *TypeReference           `json:"valueType" url:"valueType"`
	Env          *string                  `json:"env,omitempty" url:"env,omitempty"`
	V2Examples   *V2SchemaExamples        `json:"v2Examples,omitempty" url:"v2Examples,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (h *HttpHeader) GetDocs() *string {
	if h == nil {
		return nil
	}
	return h.Docs
}

func (h *HttpHeader) GetAvailability() *Availability {
	if h == nil {
		return nil
	}
	return h.Availability
}

func (h *HttpHeader) GetName() *common.NameAndWireValue {
	if h == nil {
		return nil
	}
	return h.Name
}

func (h *HttpHeader) GetValueType() *TypeReference {
	if h == nil {
		return nil
	}
	return h.ValueType
}

func (h *HttpHeader) GetEnv() *string {
	if h == nil {
		return nil
	}
	return h.Env
}

func (h *HttpHeader) GetV2Examples() *V2SchemaExamples {
	if h == nil {
		return nil
	}
	return h.V2Examples
}

func (h *HttpHeader) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HttpHeader) require(field *big.Int) {
	if h.explicitFields == nil {
		h.explicitFields = big.NewInt(0)
	}
	h.explicitFields.Or(h.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpHeader) SetDocs(docs *string) {
	h.Docs = docs
	h.require(httpHeaderFieldDocs)
}

// SetAvailability sets the Availability field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpHeader) SetAvailability(availability *Availability) {
	h.Availability = availability
	h.require(httpHeaderFieldAvailability)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpHeader) SetName(name *common.NameAndWireValue) {
	h.Name = name
	h.require(httpHeaderFieldName)
}

// SetValueType sets the ValueType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpHeader) SetValueType(valueType *TypeReference) {
	h.ValueType = valueType
	h.require(httpHeaderFieldValueType)
}

// SetEnv sets the Env field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpHeader) SetEnv(env *string) {
	h.Env = env
	h.require(httpHeaderFieldEnv)
}

// SetV2Examples sets the V2Examples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpHeader) SetV2Examples(v2Examples *V2SchemaExamples) {
	h.V2Examples = v2Examples
	h.require(httpHeaderFieldV2Examples)
}

func (h *HttpHeader) UnmarshalJSON(data []byte) error {
	type unmarshaler HttpHeader
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HttpHeader(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	return nil
}

func (h *HttpHeader) MarshalJSON() ([]byte, error) {
	type embed HttpHeader
	var marshaler = struct {
		embed
	}{
		embed: embed(*h),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, h.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (h *HttpHeader) String() string {
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

var (
	httpPathFieldHead  = big.NewInt(1 << 0)
	httpPathFieldParts = big.NewInt(1 << 1)
)

type HttpPath struct {
	Head  string          `json:"head" url:"head"`
	Parts []*HttpPathPart `json:"parts" url:"parts"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (h *HttpPath) GetHead() string {
	if h == nil {
		return ""
	}
	return h.Head
}

func (h *HttpPath) GetParts() []*HttpPathPart {
	if h == nil {
		return nil
	}
	return h.Parts
}

func (h *HttpPath) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HttpPath) require(field *big.Int) {
	if h.explicitFields == nil {
		h.explicitFields = big.NewInt(0)
	}
	h.explicitFields.Or(h.explicitFields, field)
}

// SetHead sets the Head field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpPath) SetHead(head string) {
	h.Head = head
	h.require(httpPathFieldHead)
}

// SetParts sets the Parts field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpPath) SetParts(parts []*HttpPathPart) {
	h.Parts = parts
	h.require(httpPathFieldParts)
}

func (h *HttpPath) UnmarshalJSON(data []byte) error {
	type unmarshaler HttpPath
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HttpPath(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	return nil
}

func (h *HttpPath) MarshalJSON() ([]byte, error) {
	type embed HttpPath
	var marshaler = struct {
		embed
	}{
		embed: embed(*h),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, h.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (h *HttpPath) String() string {
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

var (
	httpPathPartFieldPathParameter = big.NewInt(1 << 0)
	httpPathPartFieldTail          = big.NewInt(1 << 1)
)

type HttpPathPart struct {
	PathParameter string `json:"pathParameter" url:"pathParameter"`
	Tail          string `json:"tail" url:"tail"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (h *HttpPathPart) GetPathParameter() string {
	if h == nil {
		return ""
	}
	return h.PathParameter
}

func (h *HttpPathPart) GetTail() string {
	if h == nil {
		return ""
	}
	return h.Tail
}

func (h *HttpPathPart) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HttpPathPart) require(field *big.Int) {
	if h.explicitFields == nil {
		h.explicitFields = big.NewInt(0)
	}
	h.explicitFields.Or(h.explicitFields, field)
}

// SetPathParameter sets the PathParameter field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpPathPart) SetPathParameter(pathParameter string) {
	h.PathParameter = pathParameter
	h.require(httpPathPartFieldPathParameter)
}

// SetTail sets the Tail field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpPathPart) SetTail(tail string) {
	h.Tail = tail
	h.require(httpPathPartFieldTail)
}

func (h *HttpPathPart) UnmarshalJSON(data []byte) error {
	type unmarshaler HttpPathPart
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HttpPathPart(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	return nil
}

func (h *HttpPathPart) MarshalJSON() ([]byte, error) {
	type embed HttpPathPart
	var marshaler = struct {
		embed
	}{
		embed: embed(*h),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, h.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (h *HttpPathPart) String() string {
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type HttpRequestBody struct {
	Type               string
	InlinedRequestBody *InlinedRequestBody
	Reference          *HttpRequestBodyReference
	FileUpload         *FileUploadRequest
	Bytes              *BytesRequest
}

func (h *HttpRequestBody) GetType() string {
	if h == nil {
		return ""
	}
	return h.Type
}

func (h *HttpRequestBody) GetInlinedRequestBody() *InlinedRequestBody {
	if h == nil {
		return nil
	}
	return h.InlinedRequestBody
}

func (h *HttpRequestBody) GetReference() *HttpRequestBodyReference {
	if h == nil {
		return nil
	}
	return h.Reference
}

func (h *HttpRequestBody) GetFileUpload() *FileUploadRequest {
	if h == nil {
		return nil
	}
	return h.FileUpload
}

func (h *HttpRequestBody) GetBytes() *BytesRequest {
	if h == nil {
		return nil
	}
	return h.Bytes
}

func (h *HttpRequestBody) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	h.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", h)
	}
	switch unmarshaler.Type {
	case "inlinedRequestBody":
		value := new(InlinedRequestBody)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		h.InlinedRequestBody = value
	case "reference":
		value := new(HttpRequestBodyReference)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		h.Reference = value
	case "fileUpload":
		value := new(FileUploadRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		h.FileUpload = value
	case "bytes":
		value := new(BytesRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		h.Bytes = value
	}
	return nil
}

func (h HttpRequestBody) MarshalJSON() ([]byte, error) {
	if err := h.validate(); err != nil {
		return nil, err
	}
	if h.InlinedRequestBody != nil {
		return internal.MarshalJSONWithExtraProperty(h.InlinedRequestBody, "type", "inlinedRequestBody")
	}
	if h.Reference != nil {
		return internal.MarshalJSONWithExtraProperty(h.Reference, "type", "reference")
	}
	if h.FileUpload != nil {
		return internal.MarshalJSONWithExtraProperty(h.FileUpload, "type", "fileUpload")
	}
	if h.Bytes != nil {
		return internal.MarshalJSONWithExtraProperty(h.Bytes, "type", "bytes")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", h)
}

type HttpRequestBodyVisitor interface {
	VisitInlinedRequestBody(*InlinedRequestBody) error
	VisitReference(*HttpRequestBodyReference) error
	VisitFileUpload(*FileUploadRequest) error
	VisitBytes(*BytesRequest) error
}

func (h *HttpRequestBody) Accept(visitor HttpRequestBodyVisitor) error {
	if h.InlinedRequestBody != nil {
		return visitor.VisitInlinedRequestBody(h.InlinedRequestBody)
	}
	if h.Reference != nil {
		return visitor.VisitReference(h.Reference)
	}
	if h.FileUpload != nil {
		return visitor.VisitFileUpload(h.FileUpload)
	}
	if h.Bytes != nil {
		return visitor.VisitBytes(h.Bytes)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", h)
}

func (h *HttpRequestBody) validate() error {
	if h == nil {
		return fmt.Errorf("type %T is nil", h)
	}
	var fields []string
	if h.InlinedRequestBody != nil {
		fields = append(fields, "inlinedRequestBody")
	}
	if h.Reference != nil {
		fields = append(fields, "reference")
	}
	if h.FileUpload != nil {
		fields = append(fields, "fileUpload")
	}
	if h.Bytes != nil {
		fields = append(fields, "bytes")
	}
	if len(fields) == 0 {
		if h.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", h, h.Type)
		}
		return fmt.Errorf("type %T is empty", h)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", h, fields)
	}
	if h.Type != "" {
		field := fields[0]
		if h.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				h,
				h.Type,
				h,
			)
		}
	}
	return nil
}

var (
	httpRequestBodyReferenceFieldDocs            = big.NewInt(1 << 0)
	httpRequestBodyReferenceFieldContentType     = big.NewInt(1 << 1)
	httpRequestBodyReferenceFieldV2Examples      = big.NewInt(1 << 2)
	httpRequestBodyReferenceFieldRequestBodyType = big.NewInt(1 << 3)
)

type HttpRequestBodyReference struct {
	Docs            *string           `json:"docs,omitempty" url:"docs,omitempty"`
	ContentType     *string           `json:"contentType,omitempty" url:"contentType,omitempty"`
	V2Examples      *V2SchemaExamples `json:"v2Examples,omitempty" url:"v2Examples,omitempty"`
	RequestBodyType *TypeReference    `json:"requestBodyType" url:"requestBodyType"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (h *HttpRequestBodyReference) GetDocs() *string {
	if h == nil {
		return nil
	}
	return h.Docs
}

func (h *HttpRequestBodyReference) GetContentType() *string {
	if h == nil {
		return nil
	}
	return h.ContentType
}

func (h *HttpRequestBodyReference) GetV2Examples() *V2SchemaExamples {
	if h == nil {
		return nil
	}
	return h.V2Examples
}

func (h *HttpRequestBodyReference) GetRequestBodyType() *TypeReference {
	if h == nil {
		return nil
	}
	return h.RequestBodyType
}

func (h *HttpRequestBodyReference) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HttpRequestBodyReference) require(field *big.Int) {
	if h.explicitFields == nil {
		h.explicitFields = big.NewInt(0)
	}
	h.explicitFields.Or(h.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpRequestBodyReference) SetDocs(docs *string) {
	h.Docs = docs
	h.require(httpRequestBodyReferenceFieldDocs)
}

// SetContentType sets the ContentType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpRequestBodyReference) SetContentType(contentType *string) {
	h.ContentType = contentType
	h.require(httpRequestBodyReferenceFieldContentType)
}

// SetV2Examples sets the V2Examples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpRequestBodyReference) SetV2Examples(v2Examples *V2SchemaExamples) {
	h.V2Examples = v2Examples
	h.require(httpRequestBodyReferenceFieldV2Examples)
}

// SetRequestBodyType sets the RequestBodyType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpRequestBodyReference) SetRequestBodyType(requestBodyType *TypeReference) {
	h.RequestBodyType = requestBodyType
	h.require(httpRequestBodyReferenceFieldRequestBodyType)
}

func (h *HttpRequestBodyReference) UnmarshalJSON(data []byte) error {
	type unmarshaler HttpRequestBodyReference
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HttpRequestBodyReference(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	return nil
}

func (h *HttpRequestBodyReference) MarshalJSON() ([]byte, error) {
	type embed HttpRequestBodyReference
	var marshaler = struct {
		embed
	}{
		embed: embed(*h),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, h.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (h *HttpRequestBodyReference) String() string {
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

var (
	httpResponseFieldStatusCode = big.NewInt(1 << 0)
	httpResponseFieldBody       = big.NewInt(1 << 1)
)

type HttpResponse struct {
	StatusCode *int              `json:"status-code,omitempty" url:"status-code,omitempty"`
	Body       *HttpResponseBody `json:"body,omitempty" url:"body,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (h *HttpResponse) GetStatusCode() *int {
	if h == nil {
		return nil
	}
	return h.StatusCode
}

func (h *HttpResponse) GetBody() *HttpResponseBody {
	if h == nil {
		return nil
	}
	return h.Body
}

func (h *HttpResponse) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HttpResponse) require(field *big.Int) {
	if h.explicitFields == nil {
		h.explicitFields = big.NewInt(0)
	}
	h.explicitFields.Or(h.explicitFields, field)
}

// SetStatusCode sets the StatusCode field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpResponse) SetStatusCode(statusCode *int) {
	h.StatusCode = statusCode
	h.require(httpResponseFieldStatusCode)
}

// SetBody sets the Body field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpResponse) SetBody(body *HttpResponseBody) {
	h.Body = body
	h.require(httpResponseFieldBody)
}

func (h *HttpResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler HttpResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HttpResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	return nil
}

func (h *HttpResponse) MarshalJSON() ([]byte, error) {
	type embed HttpResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*h),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, h.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (h *HttpResponse) String() string {
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type HttpResponseBody struct {
	Type         string
	Json         *JsonResponse
	FileDownload *FileDownloadResponse
	Text         *TextResponse
	Bytes        *BytesResponse
	Streaming    *StreamingResponse
	// If there is a parameter that controls whether the response is streaming or not. Note
	// that if this is the response then `sdkRequest.streamParameter` will always be populated.
	StreamParameter *StreamParameterResponse
}

func (h *HttpResponseBody) GetType() string {
	if h == nil {
		return ""
	}
	return h.Type
}

func (h *HttpResponseBody) GetJson() *JsonResponse {
	if h == nil {
		return nil
	}
	return h.Json
}

func (h *HttpResponseBody) GetFileDownload() *FileDownloadResponse {
	if h == nil {
		return nil
	}
	return h.FileDownload
}

func (h *HttpResponseBody) GetText() *TextResponse {
	if h == nil {
		return nil
	}
	return h.Text
}

func (h *HttpResponseBody) GetBytes() *BytesResponse {
	if h == nil {
		return nil
	}
	return h.Bytes
}

func (h *HttpResponseBody) GetStreaming() *StreamingResponse {
	if h == nil {
		return nil
	}
	return h.Streaming
}

func (h *HttpResponseBody) GetStreamParameter() *StreamParameterResponse {
	if h == nil {
		return nil
	}
	return h.StreamParameter
}

func (h *HttpResponseBody) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	h.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", h)
	}
	switch unmarshaler.Type {
	case "json":
		var valueUnmarshaler struct {
			Json *JsonResponse `json:"value"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		h.Json = valueUnmarshaler.Json
	case "fileDownload":
		value := new(FileDownloadResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		h.FileDownload = value
	case "text":
		value := new(TextResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		h.Text = value
	case "bytes":
		value := new(BytesResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		h.Bytes = value
	case "streaming":
		var valueUnmarshaler struct {
			Streaming *StreamingResponse `json:"value"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		h.Streaming = valueUnmarshaler.Streaming
	case "streamParameter":
		value := new(StreamParameterResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		h.StreamParameter = value
	}
	return nil
}

func (h HttpResponseBody) MarshalJSON() ([]byte, error) {
	if err := h.validate(); err != nil {
		return nil, err
	}
	if h.Json != nil {
		var marshaler = struct {
			Type string        `json:"type"`
			Json *JsonResponse `json:"value"`
		}{
			Type: "json",
			Json: h.Json,
		}
		return json.Marshal(marshaler)
	}
	if h.FileDownload != nil {
		return internal.MarshalJSONWithExtraProperty(h.FileDownload, "type", "fileDownload")
	}
	if h.Text != nil {
		return internal.MarshalJSONWithExtraProperty(h.Text, "type", "text")
	}
	if h.Bytes != nil {
		return internal.MarshalJSONWithExtraProperty(h.Bytes, "type", "bytes")
	}
	if h.Streaming != nil {
		var marshaler = struct {
			Type      string             `json:"type"`
			Streaming *StreamingResponse `json:"value"`
		}{
			Type:      "streaming",
			Streaming: h.Streaming,
		}
		return json.Marshal(marshaler)
	}
	if h.StreamParameter != nil {
		return internal.MarshalJSONWithExtraProperty(h.StreamParameter, "type", "streamParameter")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", h)
}

type HttpResponseBodyVisitor interface {
	VisitJson(*JsonResponse) error
	VisitFileDownload(*FileDownloadResponse) error
	VisitText(*TextResponse) error
	VisitBytes(*BytesResponse) error
	VisitStreaming(*StreamingResponse) error
	VisitStreamParameter(*StreamParameterResponse) error
}

func (h *HttpResponseBody) Accept(visitor HttpResponseBodyVisitor) error {
	if h.Json != nil {
		return visitor.VisitJson(h.Json)
	}
	if h.FileDownload != nil {
		return visitor.VisitFileDownload(h.FileDownload)
	}
	if h.Text != nil {
		return visitor.VisitText(h.Text)
	}
	if h.Bytes != nil {
		return visitor.VisitBytes(h.Bytes)
	}
	if h.Streaming != nil {
		return visitor.VisitStreaming(h.Streaming)
	}
	if h.StreamParameter != nil {
		return visitor.VisitStreamParameter(h.StreamParameter)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", h)
}

func (h *HttpResponseBody) validate() error {
	if h == nil {
		return fmt.Errorf("type %T is nil", h)
	}
	var fields []string
	if h.Json != nil {
		fields = append(fields, "json")
	}
	if h.FileDownload != nil {
		fields = append(fields, "fileDownload")
	}
	if h.Text != nil {
		fields = append(fields, "text")
	}
	if h.Bytes != nil {
		fields = append(fields, "bytes")
	}
	if h.Streaming != nil {
		fields = append(fields, "streaming")
	}
	if h.StreamParameter != nil {
		fields = append(fields, "streamParameter")
	}
	if len(fields) == 0 {
		if h.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", h, h.Type)
		}
		return fmt.Errorf("type %T is empty", h)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", h, fields)
	}
	if h.Type != "" {
		field := fields[0]
		if h.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				h,
				h.Type,
				h,
			)
		}
	}
	return nil
}

var (
	httpServiceFieldAvailability   = big.NewInt(1 << 0)
	httpServiceFieldName           = big.NewInt(1 << 1)
	httpServiceFieldDisplayName    = big.NewInt(1 << 2)
	httpServiceFieldBasePath       = big.NewInt(1 << 3)
	httpServiceFieldEndpoints      = big.NewInt(1 << 4)
	httpServiceFieldHeaders        = big.NewInt(1 << 5)
	httpServiceFieldPathParameters = big.NewInt(1 << 6)
	httpServiceFieldEncoding       = big.NewInt(1 << 7)
	httpServiceFieldTransport      = big.NewInt(1 << 8)
	httpServiceFieldAudiences      = big.NewInt(1 << 9)
)

type HttpService struct {
	Availability   *Availability        `json:"availability,omitempty" url:"availability,omitempty"`
	Name           *DeclaredServiceName `json:"name" url:"name"`
	DisplayName    *string              `json:"displayName,omitempty" url:"displayName,omitempty"`
	BasePath       *HttpPath            `json:"basePath" url:"basePath"`
	Endpoints      []*HttpEndpoint      `json:"endpoints" url:"endpoints"`
	Headers        []*HttpHeader        `json:"headers" url:"headers"`
	PathParameters []*PathParameter     `json:"pathParameters" url:"pathParameters"`
	Encoding       *Encoding            `json:"encoding,omitempty" url:"encoding,omitempty"`
	Transport      *Transport           `json:"transport,omitempty" url:"transport,omitempty"`
	Audiences      []AudienceReference  `json:"audiences,omitempty" url:"audiences,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (h *HttpService) GetAvailability() *Availability {
	if h == nil {
		return nil
	}
	return h.Availability
}

func (h *HttpService) GetName() *DeclaredServiceName {
	if h == nil {
		return nil
	}
	return h.Name
}

func (h *HttpService) GetDisplayName() *string {
	if h == nil {
		return nil
	}
	return h.DisplayName
}

func (h *HttpService) GetBasePath() *HttpPath {
	if h == nil {
		return nil
	}
	return h.BasePath
}

func (h *HttpService) GetEndpoints() []*HttpEndpoint {
	if h == nil {
		return nil
	}
	return h.Endpoints
}

func (h *HttpService) GetHeaders() []*HttpHeader {
	if h == nil {
		return nil
	}
	return h.Headers
}

func (h *HttpService) GetPathParameters() []*PathParameter {
	if h == nil {
		return nil
	}
	return h.PathParameters
}

func (h *HttpService) GetEncoding() *Encoding {
	if h == nil {
		return nil
	}
	return h.Encoding
}

func (h *HttpService) GetTransport() *Transport {
	if h == nil {
		return nil
	}
	return h.Transport
}

func (h *HttpService) GetAudiences() []AudienceReference {
	if h == nil {
		return nil
	}
	return h.Audiences
}

func (h *HttpService) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HttpService) require(field *big.Int) {
	if h.explicitFields == nil {
		h.explicitFields = big.NewInt(0)
	}
	h.explicitFields.Or(h.explicitFields, field)
}

// SetAvailability sets the Availability field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpService) SetAvailability(availability *Availability) {
	h.Availability = availability
	h.require(httpServiceFieldAvailability)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpService) SetName(name *DeclaredServiceName) {
	h.Name = name
	h.require(httpServiceFieldName)
}

// SetDisplayName sets the DisplayName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpService) SetDisplayName(displayName *string) {
	h.DisplayName = displayName
	h.require(httpServiceFieldDisplayName)
}

// SetBasePath sets the BasePath field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpService) SetBasePath(basePath *HttpPath) {
	h.BasePath = basePath
	h.require(httpServiceFieldBasePath)
}

// SetEndpoints sets the Endpoints field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpService) SetEndpoints(endpoints []*HttpEndpoint) {
	h.Endpoints = endpoints
	h.require(httpServiceFieldEndpoints)
}

// SetHeaders sets the Headers field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpService) SetHeaders(headers []*HttpHeader) {
	h.Headers = headers
	h.require(httpServiceFieldHeaders)
}

// SetPathParameters sets the PathParameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpService) SetPathParameters(pathParameters []*PathParameter) {
	h.PathParameters = pathParameters
	h.require(httpServiceFieldPathParameters)
}

// SetEncoding sets the Encoding field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpService) SetEncoding(encoding *Encoding) {
	h.Encoding = encoding
	h.require(httpServiceFieldEncoding)
}

// SetTransport sets the Transport field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpService) SetTransport(transport *Transport) {
	h.Transport = transport
	h.require(httpServiceFieldTransport)
}

// SetAudiences sets the Audiences field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (h *HttpService) SetAudiences(audiences []AudienceReference) {
	h.Audiences = audiences
	h.require(httpServiceFieldAudiences)
}

func (h *HttpService) UnmarshalJSON(data []byte) error {
	type unmarshaler HttpService
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HttpService(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	return nil
}

func (h *HttpService) MarshalJSON() ([]byte, error) {
	type embed HttpService
	var marshaler = struct {
		embed
	}{
		embed: embed(*h),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, h.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (h *HttpService) String() string {
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

var (
	inlinedRequestBodyFieldDocs               = big.NewInt(1 << 0)
	inlinedRequestBodyFieldV2Examples         = big.NewInt(1 << 1)
	inlinedRequestBodyFieldContentType        = big.NewInt(1 << 2)
	inlinedRequestBodyFieldName               = big.NewInt(1 << 3)
	inlinedRequestBodyFieldExtends            = big.NewInt(1 << 4)
	inlinedRequestBodyFieldProperties         = big.NewInt(1 << 5)
	inlinedRequestBodyFieldExtendedProperties = big.NewInt(1 << 6)
	inlinedRequestBodyFieldExtraProperties    = big.NewInt(1 << 7)
)

type InlinedRequestBody struct {
	Docs        *string                       `json:"docs,omitempty" url:"docs,omitempty"`
	V2Examples  *V2SchemaExamples             `json:"v2Examples,omitempty" url:"v2Examples,omitempty"`
	ContentType *string                       `json:"contentType,omitempty" url:"contentType,omitempty"`
	Name        *common.Name                  `json:"name" url:"name"`
	Extends     []*DeclaredTypeName           `json:"extends" url:"extends"`
	Properties  []*InlinedRequestBodyProperty `json:"properties" url:"properties"`
	// A list of properties that all the parents of this request have.
	ExtendedProperties []*ObjectProperty `json:"extendedProperties,omitempty" url:"extendedProperties,omitempty"`
	// Whether to allow extra properties on the request.
	ExtraProperties bool `json:"extra-properties" url:"extra-properties"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (i *InlinedRequestBody) GetDocs() *string {
	if i == nil {
		return nil
	}
	return i.Docs
}

func (i *InlinedRequestBody) GetV2Examples() *V2SchemaExamples {
	if i == nil {
		return nil
	}
	return i.V2Examples
}

func (i *InlinedRequestBody) GetContentType() *string {
	if i == nil {
		return nil
	}
	return i.ContentType
}

func (i *InlinedRequestBody) GetName() *common.Name {
	if i == nil {
		return nil
	}
	return i.Name
}

func (i *InlinedRequestBody) GetExtends() []*DeclaredTypeName {
	if i == nil {
		return nil
	}
	return i.Extends
}

func (i *InlinedRequestBody) GetProperties() []*InlinedRequestBodyProperty {
	if i == nil {
		return nil
	}
	return i.Properties
}

func (i *InlinedRequestBody) GetExtendedProperties() []*ObjectProperty {
	if i == nil {
		return nil
	}
	return i.ExtendedProperties
}

// func (i *InlinedRequestBody) GetExtraProperties() bool {
// 	if i == nil {
// 		return false
// 	}
// 	return i.ExtraProperties
// }

func (i *InlinedRequestBody) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InlinedRequestBody) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InlinedRequestBody) SetDocs(docs *string) {
	i.Docs = docs
	i.require(inlinedRequestBodyFieldDocs)
}

// SetV2Examples sets the V2Examples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InlinedRequestBody) SetV2Examples(v2Examples *V2SchemaExamples) {
	i.V2Examples = v2Examples
	i.require(inlinedRequestBodyFieldV2Examples)
}

// SetContentType sets the ContentType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InlinedRequestBody) SetContentType(contentType *string) {
	i.ContentType = contentType
	i.require(inlinedRequestBodyFieldContentType)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InlinedRequestBody) SetName(name *common.Name) {
	i.Name = name
	i.require(inlinedRequestBodyFieldName)
}

// SetExtends sets the Extends field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InlinedRequestBody) SetExtends(extends []*DeclaredTypeName) {
	i.Extends = extends
	i.require(inlinedRequestBodyFieldExtends)
}

// SetProperties sets the Properties field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InlinedRequestBody) SetProperties(properties []*InlinedRequestBodyProperty) {
	i.Properties = properties
	i.require(inlinedRequestBodyFieldProperties)
}

// SetExtendedProperties sets the ExtendedProperties field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InlinedRequestBody) SetExtendedProperties(extendedProperties []*ObjectProperty) {
	i.ExtendedProperties = extendedProperties
	i.require(inlinedRequestBodyFieldExtendedProperties)
}

// SetExtraProperties sets the ExtraProperties field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InlinedRequestBody) SetExtraProperties(extraProperties bool) {
	i.ExtraProperties = extraProperties
	i.require(inlinedRequestBodyFieldExtraProperties)
}

func (i *InlinedRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler InlinedRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InlinedRequestBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	return nil
}

func (i *InlinedRequestBody) MarshalJSON() ([]byte, error) {
	type embed InlinedRequestBody
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *InlinedRequestBody) String() string {
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

var (
	inlinedRequestBodyPropertyFieldDocs           = big.NewInt(1 << 0)
	inlinedRequestBodyPropertyFieldAvailability   = big.NewInt(1 << 1)
	inlinedRequestBodyPropertyFieldName           = big.NewInt(1 << 2)
	inlinedRequestBodyPropertyFieldValueType      = big.NewInt(1 << 3)
	inlinedRequestBodyPropertyFieldV2Examples     = big.NewInt(1 << 4)
	inlinedRequestBodyPropertyFieldPropertyAccess = big.NewInt(1 << 5)
)

type InlinedRequestBodyProperty struct {
	Docs           *string                      `json:"docs,omitempty" url:"docs,omitempty"`
	Availability   *Availability                `json:"availability,omitempty" url:"availability,omitempty"`
	Name           *common.NameAndWireValue     `json:"name" url:"name"`
	ValueType      *TypeReference               `json:"valueType" url:"valueType"`
	V2Examples     *V2SchemaExamples            `json:"v2Examples,omitempty" url:"v2Examples,omitempty"`
	PropertyAccess *common.ObjectPropertyAccess `json:"propertyAccess,omitempty" url:"propertyAccess,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (i *InlinedRequestBodyProperty) GetDocs() *string {
	if i == nil {
		return nil
	}
	return i.Docs
}

func (i *InlinedRequestBodyProperty) GetAvailability() *Availability {
	if i == nil {
		return nil
	}
	return i.Availability
}

func (i *InlinedRequestBodyProperty) GetName() *common.NameAndWireValue {
	if i == nil {
		return nil
	}
	return i.Name
}

func (i *InlinedRequestBodyProperty) GetValueType() *TypeReference {
	if i == nil {
		return nil
	}
	return i.ValueType
}

func (i *InlinedRequestBodyProperty) GetV2Examples() *V2SchemaExamples {
	if i == nil {
		return nil
	}
	return i.V2Examples
}

func (i *InlinedRequestBodyProperty) GetPropertyAccess() *common.ObjectPropertyAccess {
	if i == nil {
		return nil
	}
	return i.PropertyAccess
}

func (i *InlinedRequestBodyProperty) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InlinedRequestBodyProperty) require(field *big.Int) {
	if i.explicitFields == nil {
		i.explicitFields = big.NewInt(0)
	}
	i.explicitFields.Or(i.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InlinedRequestBodyProperty) SetDocs(docs *string) {
	i.Docs = docs
	i.require(inlinedRequestBodyPropertyFieldDocs)
}

// SetAvailability sets the Availability field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InlinedRequestBodyProperty) SetAvailability(availability *Availability) {
	i.Availability = availability
	i.require(inlinedRequestBodyPropertyFieldAvailability)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InlinedRequestBodyProperty) SetName(name *common.NameAndWireValue) {
	i.Name = name
	i.require(inlinedRequestBodyPropertyFieldName)
}

// SetValueType sets the ValueType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InlinedRequestBodyProperty) SetValueType(valueType *TypeReference) {
	i.ValueType = valueType
	i.require(inlinedRequestBodyPropertyFieldValueType)
}

// SetV2Examples sets the V2Examples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InlinedRequestBodyProperty) SetV2Examples(v2Examples *V2SchemaExamples) {
	i.V2Examples = v2Examples
	i.require(inlinedRequestBodyPropertyFieldV2Examples)
}

// SetPropertyAccess sets the PropertyAccess field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (i *InlinedRequestBodyProperty) SetPropertyAccess(propertyAccess *common.ObjectPropertyAccess) {
	i.PropertyAccess = propertyAccess
	i.require(inlinedRequestBodyPropertyFieldPropertyAccess)
}

func (i *InlinedRequestBodyProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler InlinedRequestBodyProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InlinedRequestBodyProperty(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	return nil
}

func (i *InlinedRequestBodyProperty) MarshalJSON() ([]byte, error) {
	type embed InlinedRequestBodyProperty
	var marshaler = struct {
		embed
	}{
		embed: embed(*i),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, i.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (i *InlinedRequestBodyProperty) String() string {
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type JsonResponse struct {
	Type                     string
	Response                 *JsonResponseBody
	NestedPropertyAsResponse *JsonResponseBodyWithProperty
}

func (j *JsonResponse) GetType() string {
	if j == nil {
		return ""
	}
	return j.Type
}

func (j *JsonResponse) GetResponse() *JsonResponseBody {
	if j == nil {
		return nil
	}
	return j.Response
}

func (j *JsonResponse) GetNestedPropertyAsResponse() *JsonResponseBodyWithProperty {
	if j == nil {
		return nil
	}
	return j.NestedPropertyAsResponse
}

func (j *JsonResponse) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	j.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", j)
	}
	switch unmarshaler.Type {
	case "response":
		value := new(JsonResponseBody)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		j.Response = value
	case "nestedPropertyAsResponse":
		value := new(JsonResponseBodyWithProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		j.NestedPropertyAsResponse = value
	}
	return nil
}

func (j JsonResponse) MarshalJSON() ([]byte, error) {
	if err := j.validate(); err != nil {
		return nil, err
	}
	if j.Response != nil {
		return internal.MarshalJSONWithExtraProperty(j.Response, "type", "response")
	}
	if j.NestedPropertyAsResponse != nil {
		return internal.MarshalJSONWithExtraProperty(j.NestedPropertyAsResponse, "type", "nestedPropertyAsResponse")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", j)
}

type JsonResponseVisitor interface {
	VisitResponse(*JsonResponseBody) error
	VisitNestedPropertyAsResponse(*JsonResponseBodyWithProperty) error
}

func (j *JsonResponse) Accept(visitor JsonResponseVisitor) error {
	if j.Response != nil {
		return visitor.VisitResponse(j.Response)
	}
	if j.NestedPropertyAsResponse != nil {
		return visitor.VisitNestedPropertyAsResponse(j.NestedPropertyAsResponse)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", j)
}

func (j *JsonResponse) validate() error {
	if j == nil {
		return fmt.Errorf("type %T is nil", j)
	}
	var fields []string
	if j.Response != nil {
		fields = append(fields, "response")
	}
	if j.NestedPropertyAsResponse != nil {
		fields = append(fields, "nestedPropertyAsResponse")
	}
	if len(fields) == 0 {
		if j.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", j, j.Type)
		}
		return fmt.Errorf("type %T is empty", j)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", j, fields)
	}
	if j.Type != "" {
		field := fields[0]
		if j.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				j,
				j.Type,
				j,
			)
		}
	}
	return nil
}

var (
	jsonResponseBodyFieldDocs             = big.NewInt(1 << 0)
	jsonResponseBodyFieldV2Examples       = big.NewInt(1 << 1)
	jsonResponseBodyFieldResponseBodyType = big.NewInt(1 << 2)
)

type JsonResponseBody struct {
	Docs             *string           `json:"docs,omitempty" url:"docs,omitempty"`
	V2Examples       *V2SchemaExamples `json:"v2Examples,omitempty" url:"v2Examples,omitempty"`
	ResponseBodyType *TypeReference    `json:"responseBodyType" url:"responseBodyType"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (j *JsonResponseBody) GetDocs() *string {
	if j == nil {
		return nil
	}
	return j.Docs
}

func (j *JsonResponseBody) GetV2Examples() *V2SchemaExamples {
	if j == nil {
		return nil
	}
	return j.V2Examples
}

func (j *JsonResponseBody) GetResponseBodyType() *TypeReference {
	if j == nil {
		return nil
	}
	return j.ResponseBodyType
}

func (j *JsonResponseBody) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JsonResponseBody) require(field *big.Int) {
	if j.explicitFields == nil {
		j.explicitFields = big.NewInt(0)
	}
	j.explicitFields.Or(j.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JsonResponseBody) SetDocs(docs *string) {
	j.Docs = docs
	j.require(jsonResponseBodyFieldDocs)
}

// SetV2Examples sets the V2Examples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JsonResponseBody) SetV2Examples(v2Examples *V2SchemaExamples) {
	j.V2Examples = v2Examples
	j.require(jsonResponseBodyFieldV2Examples)
}

// SetResponseBodyType sets the ResponseBodyType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JsonResponseBody) SetResponseBodyType(responseBodyType *TypeReference) {
	j.ResponseBodyType = responseBodyType
	j.require(jsonResponseBodyFieldResponseBodyType)
}

func (j *JsonResponseBody) UnmarshalJSON(data []byte) error {
	type unmarshaler JsonResponseBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JsonResponseBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties
	return nil
}

func (j *JsonResponseBody) MarshalJSON() ([]byte, error) {
	type embed JsonResponseBody
	var marshaler = struct {
		embed
	}{
		embed: embed(*j),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, j.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (j *JsonResponseBody) String() string {
	if value, err := internal.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

var (
	jsonResponseBodyWithPropertyFieldDocs             = big.NewInt(1 << 0)
	jsonResponseBodyWithPropertyFieldV2Examples       = big.NewInt(1 << 1)
	jsonResponseBodyWithPropertyFieldResponseBodyType = big.NewInt(1 << 2)
	jsonResponseBodyWithPropertyFieldResponseProperty = big.NewInt(1 << 3)
)

type JsonResponseBodyWithProperty struct {
	Docs             *string           `json:"docs,omitempty" url:"docs,omitempty"`
	V2Examples       *V2SchemaExamples `json:"v2Examples,omitempty" url:"v2Examples,omitempty"`
	ResponseBodyType *TypeReference    `json:"responseBodyType" url:"responseBodyType"`
	// If set, the SDK will return this property from
	// the response, rather than the response itself.
	//
	// This is particularly useful for JSON API structures
	// (e.g. configure 'data' to return 'response.data').
	ResponseProperty *ObjectProperty `json:"responseProperty,omitempty" url:"responseProperty,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (j *JsonResponseBodyWithProperty) GetDocs() *string {
	if j == nil {
		return nil
	}
	return j.Docs
}

func (j *JsonResponseBodyWithProperty) GetV2Examples() *V2SchemaExamples {
	if j == nil {
		return nil
	}
	return j.V2Examples
}

func (j *JsonResponseBodyWithProperty) GetResponseBodyType() *TypeReference {
	if j == nil {
		return nil
	}
	return j.ResponseBodyType
}

func (j *JsonResponseBodyWithProperty) GetResponseProperty() *ObjectProperty {
	if j == nil {
		return nil
	}
	return j.ResponseProperty
}

func (j *JsonResponseBodyWithProperty) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JsonResponseBodyWithProperty) require(field *big.Int) {
	if j.explicitFields == nil {
		j.explicitFields = big.NewInt(0)
	}
	j.explicitFields.Or(j.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JsonResponseBodyWithProperty) SetDocs(docs *string) {
	j.Docs = docs
	j.require(jsonResponseBodyWithPropertyFieldDocs)
}

// SetV2Examples sets the V2Examples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JsonResponseBodyWithProperty) SetV2Examples(v2Examples *V2SchemaExamples) {
	j.V2Examples = v2Examples
	j.require(jsonResponseBodyWithPropertyFieldV2Examples)
}

// SetResponseBodyType sets the ResponseBodyType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JsonResponseBodyWithProperty) SetResponseBodyType(responseBodyType *TypeReference) {
	j.ResponseBodyType = responseBodyType
	j.require(jsonResponseBodyWithPropertyFieldResponseBodyType)
}

// SetResponseProperty sets the ResponseProperty field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JsonResponseBodyWithProperty) SetResponseProperty(responseProperty *ObjectProperty) {
	j.ResponseProperty = responseProperty
	j.require(jsonResponseBodyWithPropertyFieldResponseProperty)
}

func (j *JsonResponseBodyWithProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler JsonResponseBodyWithProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JsonResponseBodyWithProperty(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties
	return nil
}

func (j *JsonResponseBodyWithProperty) MarshalJSON() ([]byte, error) {
	type embed JsonResponseBodyWithProperty
	var marshaler = struct {
		embed
	}{
		embed: embed(*j),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, j.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (j *JsonResponseBodyWithProperty) String() string {
	if value, err := internal.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

var (
	jsonStreamChunkFieldDocs       = big.NewInt(1 << 0)
	jsonStreamChunkFieldV2Examples = big.NewInt(1 << 1)
	jsonStreamChunkFieldPayload    = big.NewInt(1 << 2)
	jsonStreamChunkFieldTerminator = big.NewInt(1 << 3)
)

type JsonStreamChunk struct {
	Docs       *string           `json:"docs,omitempty" url:"docs,omitempty"`
	V2Examples *V2SchemaExamples `json:"v2Examples,omitempty" url:"v2Examples,omitempty"`
	Payload    *TypeReference    `json:"payload" url:"payload"`
	Terminator *string           `json:"terminator,omitempty" url:"terminator,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (j *JsonStreamChunk) GetDocs() *string {
	if j == nil {
		return nil
	}
	return j.Docs
}

func (j *JsonStreamChunk) GetV2Examples() *V2SchemaExamples {
	if j == nil {
		return nil
	}
	return j.V2Examples
}

func (j *JsonStreamChunk) GetPayload() *TypeReference {
	if j == nil {
		return nil
	}
	return j.Payload
}

func (j *JsonStreamChunk) GetTerminator() *string {
	if j == nil {
		return nil
	}
	return j.Terminator
}

func (j *JsonStreamChunk) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JsonStreamChunk) require(field *big.Int) {
	if j.explicitFields == nil {
		j.explicitFields = big.NewInt(0)
	}
	j.explicitFields.Or(j.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JsonStreamChunk) SetDocs(docs *string) {
	j.Docs = docs
	j.require(jsonStreamChunkFieldDocs)
}

// SetV2Examples sets the V2Examples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JsonStreamChunk) SetV2Examples(v2Examples *V2SchemaExamples) {
	j.V2Examples = v2Examples
	j.require(jsonStreamChunkFieldV2Examples)
}

// SetPayload sets the Payload field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JsonStreamChunk) SetPayload(payload *TypeReference) {
	j.Payload = payload
	j.require(jsonStreamChunkFieldPayload)
}

// SetTerminator sets the Terminator field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JsonStreamChunk) SetTerminator(terminator *string) {
	j.Terminator = terminator
	j.require(jsonStreamChunkFieldTerminator)
}

func (j *JsonStreamChunk) UnmarshalJSON(data []byte) error {
	type unmarshaler JsonStreamChunk
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JsonStreamChunk(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties
	return nil
}

func (j *JsonStreamChunk) MarshalJSON() ([]byte, error) {
	type embed JsonStreamChunk
	var marshaler = struct {
		embed
	}{
		embed: embed(*j),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, j.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (j *JsonStreamChunk) String() string {
	if value, err := internal.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

type NonStreamHttpResponseBody struct {
	Type         string
	Json         *JsonResponse
	FileDownload *FileDownloadResponse
	Text         *TextResponse
	Bytes        *BytesResponse
}

func (n *NonStreamHttpResponseBody) GetType() string {
	if n == nil {
		return ""
	}
	return n.Type
}

func (n *NonStreamHttpResponseBody) GetJson() *JsonResponse {
	if n == nil {
		return nil
	}
	return n.Json
}

func (n *NonStreamHttpResponseBody) GetFileDownload() *FileDownloadResponse {
	if n == nil {
		return nil
	}
	return n.FileDownload
}

func (n *NonStreamHttpResponseBody) GetText() *TextResponse {
	if n == nil {
		return nil
	}
	return n.Text
}

func (n *NonStreamHttpResponseBody) GetBytes() *BytesResponse {
	if n == nil {
		return nil
	}
	return n.Bytes
}

func (n *NonStreamHttpResponseBody) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	n.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", n)
	}
	switch unmarshaler.Type {
	case "json":
		var valueUnmarshaler struct {
			Json *JsonResponse `json:"value"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		n.Json = valueUnmarshaler.Json
	case "fileDownload":
		value := new(FileDownloadResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.FileDownload = value
	case "text":
		value := new(TextResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Text = value
	case "bytes":
		value := new(BytesResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Bytes = value
	}
	return nil
}

func (n NonStreamHttpResponseBody) MarshalJSON() ([]byte, error) {
	if err := n.validate(); err != nil {
		return nil, err
	}
	if n.Json != nil {
		var marshaler = struct {
			Type string        `json:"type"`
			Json *JsonResponse `json:"value"`
		}{
			Type: "json",
			Json: n.Json,
		}
		return json.Marshal(marshaler)
	}
	if n.FileDownload != nil {
		return internal.MarshalJSONWithExtraProperty(n.FileDownload, "type", "fileDownload")
	}
	if n.Text != nil {
		return internal.MarshalJSONWithExtraProperty(n.Text, "type", "text")
	}
	if n.Bytes != nil {
		return internal.MarshalJSONWithExtraProperty(n.Bytes, "type", "bytes")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", n)
}

type NonStreamHttpResponseBodyVisitor interface {
	VisitJson(*JsonResponse) error
	VisitFileDownload(*FileDownloadResponse) error
	VisitText(*TextResponse) error
	VisitBytes(*BytesResponse) error
}

func (n *NonStreamHttpResponseBody) Accept(visitor NonStreamHttpResponseBodyVisitor) error {
	if n.Json != nil {
		return visitor.VisitJson(n.Json)
	}
	if n.FileDownload != nil {
		return visitor.VisitFileDownload(n.FileDownload)
	}
	if n.Text != nil {
		return visitor.VisitText(n.Text)
	}
	if n.Bytes != nil {
		return visitor.VisitBytes(n.Bytes)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", n)
}

func (n *NonStreamHttpResponseBody) validate() error {
	if n == nil {
		return fmt.Errorf("type %T is nil", n)
	}
	var fields []string
	if n.Json != nil {
		fields = append(fields, "json")
	}
	if n.FileDownload != nil {
		fields = append(fields, "fileDownload")
	}
	if n.Text != nil {
		fields = append(fields, "text")
	}
	if n.Bytes != nil {
		fields = append(fields, "bytes")
	}
	if len(fields) == 0 {
		if n.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", n, n.Type)
		}
		return fmt.Errorf("type %T is empty", n)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", n, fields)
	}
	if n.Type != "" {
		field := fields[0]
		if n.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				n,
				n.Type,
				n,
			)
		}
	}
	return nil
}

// The page must be defined as a query parameter included in the request,
// whereas the results are resolved from properties defined on the response.
//
// The page index is auto-incremented between every additional page request.
var (
	offsetPaginationFieldPage        = big.NewInt(1 << 0)
	offsetPaginationFieldResults     = big.NewInt(1 << 1)
	offsetPaginationFieldHasNextPage = big.NewInt(1 << 2)
	offsetPaginationFieldStep        = big.NewInt(1 << 3)
)

type OffsetPagination struct {
	Page    *RequestProperty  `json:"page" url:"page"`
	Results *ResponseProperty `json:"results" url:"results"`
	// A response property that indicates whether there is a next page or not.
	HasNextPage *ResponseProperty `json:"hasNextPage,omitempty" url:"hasNextPage,omitempty"`
	// The step size used to increment the page offset between every new page.
	Step *RequestProperty `json:"step,omitempty" url:"step,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (o *OffsetPagination) GetPage() *RequestProperty {
	if o == nil {
		return nil
	}
	return o.Page
}

func (o *OffsetPagination) GetResults() *ResponseProperty {
	if o == nil {
		return nil
	}
	return o.Results
}

func (o *OffsetPagination) GetHasNextPage() *ResponseProperty {
	if o == nil {
		return nil
	}
	return o.HasNextPage
}

func (o *OffsetPagination) GetStep() *RequestProperty {
	if o == nil {
		return nil
	}
	return o.Step
}

func (o *OffsetPagination) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OffsetPagination) require(field *big.Int) {
	if o.explicitFields == nil {
		o.explicitFields = big.NewInt(0)
	}
	o.explicitFields.Or(o.explicitFields, field)
}

// SetPage sets the Page field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OffsetPagination) SetPage(page *RequestProperty) {
	o.Page = page
	o.require(offsetPaginationFieldPage)
}

// SetResults sets the Results field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OffsetPagination) SetResults(results *ResponseProperty) {
	o.Results = results
	o.require(offsetPaginationFieldResults)
}

// SetHasNextPage sets the HasNextPage field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OffsetPagination) SetHasNextPage(hasNextPage *ResponseProperty) {
	o.HasNextPage = hasNextPage
	o.require(offsetPaginationFieldHasNextPage)
}

// SetStep sets the Step field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (o *OffsetPagination) SetStep(step *RequestProperty) {
	o.Step = step
	o.require(offsetPaginationFieldStep)
}

func (o *OffsetPagination) UnmarshalJSON(data []byte) error {
	type unmarshaler OffsetPagination
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OffsetPagination(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	return nil
}

func (o *OffsetPagination) MarshalJSON() ([]byte, error) {
	type embed OffsetPagination
	var marshaler = struct {
		embed
	}{
		embed: embed(*o),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, o.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (o *OffsetPagination) String() string {
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// If set, the endpoint will be generated with auto-pagination features.
type Pagination struct {
	Type   string
	Cursor *CursorPagination
	Offset *OffsetPagination
	Custom *CustomPagination
}

func (p *Pagination) GetType() string {
	if p == nil {
		return ""
	}
	return p.Type
}

func (p *Pagination) GetCursor() *CursorPagination {
	if p == nil {
		return nil
	}
	return p.Cursor
}

func (p *Pagination) GetOffset() *OffsetPagination {
	if p == nil {
		return nil
	}
	return p.Offset
}

func (p *Pagination) GetCustom() *CustomPagination {
	if p == nil {
		return nil
	}
	return p.Custom
}

func (p *Pagination) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	p.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", p)
	}
	switch unmarshaler.Type {
	case "cursor":
		value := new(CursorPagination)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Cursor = value
	case "offset":
		value := new(OffsetPagination)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Offset = value
	case "custom":
		value := new(CustomPagination)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Custom = value
	}
	return nil
}

func (p Pagination) MarshalJSON() ([]byte, error) {
	if err := p.validate(); err != nil {
		return nil, err
	}
	if p.Cursor != nil {
		return internal.MarshalJSONWithExtraProperty(p.Cursor, "type", "cursor")
	}
	if p.Offset != nil {
		return internal.MarshalJSONWithExtraProperty(p.Offset, "type", "offset")
	}
	if p.Custom != nil {
		return internal.MarshalJSONWithExtraProperty(p.Custom, "type", "custom")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", p)
}

type PaginationVisitor interface {
	VisitCursor(*CursorPagination) error
	VisitOffset(*OffsetPagination) error
	VisitCustom(*CustomPagination) error
}

func (p *Pagination) Accept(visitor PaginationVisitor) error {
	if p.Cursor != nil {
		return visitor.VisitCursor(p.Cursor)
	}
	if p.Offset != nil {
		return visitor.VisitOffset(p.Offset)
	}
	if p.Custom != nil {
		return visitor.VisitCustom(p.Custom)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", p)
}

func (p *Pagination) validate() error {
	if p == nil {
		return fmt.Errorf("type %T is nil", p)
	}
	var fields []string
	if p.Cursor != nil {
		fields = append(fields, "cursor")
	}
	if p.Offset != nil {
		fields = append(fields, "offset")
	}
	if p.Custom != nil {
		fields = append(fields, "custom")
	}
	if len(fields) == 0 {
		if p.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", p, p.Type)
		}
		return fmt.Errorf("type %T is empty", p)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", p, fields)
	}
	if p.Type != "" {
		field := fields[0]
		if p.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				p,
				p.Type,
				p,
			)
		}
	}
	return nil
}

var (
	pathParameterFieldDocs       = big.NewInt(1 << 0)
	pathParameterFieldName       = big.NewInt(1 << 1)
	pathParameterFieldValueType  = big.NewInt(1 << 2)
	pathParameterFieldLocation   = big.NewInt(1 << 3)
	pathParameterFieldVariable   = big.NewInt(1 << 4)
	pathParameterFieldV2Examples = big.NewInt(1 << 5)
)

type PathParameter struct {
	Docs       *string               `json:"docs,omitempty" url:"docs,omitempty"`
	Name       *common.Name          `json:"name" url:"name"`
	ValueType  *TypeReference        `json:"valueType" url:"valueType"`
	Location   PathParameterLocation `json:"location" url:"location"`
	Variable   *VariableId           `json:"variable,omitempty" url:"variable,omitempty"`
	V2Examples *V2SchemaExamples     `json:"v2Examples,omitempty" url:"v2Examples,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (p *PathParameter) GetDocs() *string {
	if p == nil {
		return nil
	}
	return p.Docs
}

func (p *PathParameter) GetName() *common.Name {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *PathParameter) GetValueType() *TypeReference {
	if p == nil {
		return nil
	}
	return p.ValueType
}

func (p *PathParameter) GetLocation() PathParameterLocation {
	if p == nil {
		return ""
	}
	return p.Location
}

func (p *PathParameter) GetVariable() *VariableId {
	if p == nil {
		return nil
	}
	return p.Variable
}

func (p *PathParameter) GetV2Examples() *V2SchemaExamples {
	if p == nil {
		return nil
	}
	return p.V2Examples
}

func (p *PathParameter) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PathParameter) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PathParameter) SetDocs(docs *string) {
	p.Docs = docs
	p.require(pathParameterFieldDocs)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PathParameter) SetName(name *common.Name) {
	p.Name = name
	p.require(pathParameterFieldName)
}

// SetValueType sets the ValueType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PathParameter) SetValueType(valueType *TypeReference) {
	p.ValueType = valueType
	p.require(pathParameterFieldValueType)
}

// SetLocation sets the Location field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PathParameter) SetLocation(location PathParameterLocation) {
	p.Location = location
	p.require(pathParameterFieldLocation)
}

// SetVariable sets the Variable field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PathParameter) SetVariable(variable *VariableId) {
	p.Variable = variable
	p.require(pathParameterFieldVariable)
}

// SetV2Examples sets the V2Examples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PathParameter) SetV2Examples(v2Examples *V2SchemaExamples) {
	p.V2Examples = v2Examples
	p.require(pathParameterFieldV2Examples)
}

func (p *PathParameter) UnmarshalJSON(data []byte) error {
	type unmarshaler PathParameter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PathParameter(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	return nil
}

func (p *PathParameter) MarshalJSON() ([]byte, error) {
	type embed PathParameter
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PathParameter) String() string {
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PathParameterLocation string

const (
	PathParameterLocationRoot     PathParameterLocation = "ROOT"
	PathParameterLocationService  PathParameterLocation = "SERVICE"
	PathParameterLocationEndpoint PathParameterLocation = "ENDPOINT"
)

func NewPathParameterLocationFromString(s string) (PathParameterLocation, error) {
	switch s {
	case "ROOT":
		return PathParameterLocationRoot, nil
	case "SERVICE":
		return PathParameterLocationService, nil
	case "ENDPOINT":
		return PathParameterLocationEndpoint, nil
	}
	var t PathParameterLocation
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PathParameterLocation) Ptr() *PathParameterLocation {
	return &p
}

var (
	propertyPathItemFieldName = big.NewInt(1 << 0)
	propertyPathItemFieldType = big.NewInt(1 << 1)
)

type PropertyPathItem struct {
	Name *common.Name   `json:"name" url:"name"`
	Type *TypeReference `json:"type" url:"type"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (p *PropertyPathItem) GetName() *common.Name {
	if p == nil {
		return nil
	}
	return p.Name
}

func (p *PropertyPathItem) GetType() *TypeReference {
	if p == nil {
		return nil
	}
	return p.Type
}

func (p *PropertyPathItem) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PropertyPathItem) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PropertyPathItem) SetName(name *common.Name) {
	p.Name = name
	p.require(propertyPathItemFieldName)
}

// SetType sets the Type field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PropertyPathItem) SetType(type_ *TypeReference) {
	p.Type = type_
	p.require(propertyPathItemFieldType)
}

func (p *PropertyPathItem) UnmarshalJSON(data []byte) error {
	type unmarshaler PropertyPathItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PropertyPathItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	return nil
}

func (p *PropertyPathItem) MarshalJSON() ([]byte, error) {
	type embed PropertyPathItem
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PropertyPathItem) String() string {
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

var (
	protoSourceInfoFieldMethodType = big.NewInt(1 << 0)
)

type ProtoSourceInfo struct {
	MethodType *ProtobufMethodType `json:"methodType,omitempty" url:"methodType,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (p *ProtoSourceInfo) GetMethodType() *ProtobufMethodType {
	if p == nil {
		return nil
	}
	return p.MethodType
}

func (p *ProtoSourceInfo) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProtoSourceInfo) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetMethodType sets the MethodType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *ProtoSourceInfo) SetMethodType(methodType *ProtobufMethodType) {
	p.MethodType = methodType
	p.require(protoSourceInfoFieldMethodType)
}

func (p *ProtoSourceInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ProtoSourceInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProtoSourceInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	return nil
}

func (p *ProtoSourceInfo) MarshalJSON() ([]byte, error) {
	type embed ProtoSourceInfo
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *ProtoSourceInfo) String() string {
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

var (
	queryParameterFieldDocs          = big.NewInt(1 << 0)
	queryParameterFieldAvailability  = big.NewInt(1 << 1)
	queryParameterFieldName          = big.NewInt(1 << 2)
	queryParameterFieldValueType     = big.NewInt(1 << 3)
	queryParameterFieldAllowMultiple = big.NewInt(1 << 4)
	queryParameterFieldV2Examples    = big.NewInt(1 << 5)
)

type QueryParameter struct {
	Docs          *string                  `json:"docs,omitempty" url:"docs,omitempty"`
	Availability  *Availability            `json:"availability,omitempty" url:"availability,omitempty"`
	Name          *common.NameAndWireValue `json:"name" url:"name"`
	ValueType     *TypeReference           `json:"valueType" url:"valueType"`
	AllowMultiple bool                     `json:"allowMultiple" url:"allowMultiple"`
	V2Examples    *V2SchemaExamples        `json:"v2Examples,omitempty" url:"v2Examples,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (q *QueryParameter) GetDocs() *string {
	if q == nil {
		return nil
	}
	return q.Docs
}

func (q *QueryParameter) GetAvailability() *Availability {
	if q == nil {
		return nil
	}
	return q.Availability
}

func (q *QueryParameter) GetName() *common.NameAndWireValue {
	if q == nil {
		return nil
	}
	return q.Name
}

func (q *QueryParameter) GetValueType() *TypeReference {
	if q == nil {
		return nil
	}
	return q.ValueType
}

func (q *QueryParameter) GetAllowMultiple() bool {
	if q == nil {
		return false
	}
	return q.AllowMultiple
}

func (q *QueryParameter) GetV2Examples() *V2SchemaExamples {
	if q == nil {
		return nil
	}
	return q.V2Examples
}

func (q *QueryParameter) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QueryParameter) require(field *big.Int) {
	if q.explicitFields == nil {
		q.explicitFields = big.NewInt(0)
	}
	q.explicitFields.Or(q.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (q *QueryParameter) SetDocs(docs *string) {
	q.Docs = docs
	q.require(queryParameterFieldDocs)
}

// SetAvailability sets the Availability field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (q *QueryParameter) SetAvailability(availability *Availability) {
	q.Availability = availability
	q.require(queryParameterFieldAvailability)
}

// SetName sets the Name field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (q *QueryParameter) SetName(name *common.NameAndWireValue) {
	q.Name = name
	q.require(queryParameterFieldName)
}

// SetValueType sets the ValueType field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (q *QueryParameter) SetValueType(valueType *TypeReference) {
	q.ValueType = valueType
	q.require(queryParameterFieldValueType)
}

// SetAllowMultiple sets the AllowMultiple field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (q *QueryParameter) SetAllowMultiple(allowMultiple bool) {
	q.AllowMultiple = allowMultiple
	q.require(queryParameterFieldAllowMultiple)
}

// SetV2Examples sets the V2Examples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (q *QueryParameter) SetV2Examples(v2Examples *V2SchemaExamples) {
	q.V2Examples = v2Examples
	q.require(queryParameterFieldV2Examples)
}

func (q *QueryParameter) UnmarshalJSON(data []byte) error {
	type unmarshaler QueryParameter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QueryParameter(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties
	return nil
}

func (q *QueryParameter) MarshalJSON() ([]byte, error) {
	type embed QueryParameter
	var marshaler = struct {
		embed
	}{
		embed: embed(*q),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, q.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (q *QueryParameter) String() string {
	if value, err := internal.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

// A property associated with an endpoint's request.
var (
	requestPropertyFieldPropertyPath = big.NewInt(1 << 0)
	requestPropertyFieldProperty     = big.NewInt(1 << 1)
)

type RequestProperty struct {
	// If empty, the property is defined at the top-level.
	// Otherwise, the property is defined on the nested object identified
	// by the path.
	PropertyPath []*PropertyPathItem   `json:"propertyPath,omitempty" url:"propertyPath,omitempty"`
	Property     *RequestPropertyValue `json:"property" url:"property"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (r *RequestProperty) GetPropertyPath() []*PropertyPathItem {
	if r == nil {
		return nil
	}
	return r.PropertyPath
}

func (r *RequestProperty) GetProperty() *RequestPropertyValue {
	if r == nil {
		return nil
	}
	return r.Property
}

func (r *RequestProperty) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RequestProperty) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetPropertyPath sets the PropertyPath field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RequestProperty) SetPropertyPath(propertyPath []*PropertyPathItem) {
	r.PropertyPath = propertyPath
	r.require(requestPropertyFieldPropertyPath)
}

// SetProperty sets the Property field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RequestProperty) SetProperty(property *RequestPropertyValue) {
	r.Property = property
	r.require(requestPropertyFieldProperty)
}

func (r *RequestProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler RequestProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RequestProperty(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	return nil
}

func (r *RequestProperty) MarshalJSON() ([]byte, error) {
	type embed RequestProperty
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *RequestProperty) String() string {
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RequestPropertyValue struct {
	Type  string
	Query *QueryParameter
	Body  *ObjectProperty
}

func (r *RequestPropertyValue) GetType() string {
	if r == nil {
		return ""
	}
	return r.Type
}

func (r *RequestPropertyValue) GetQuery() *QueryParameter {
	if r == nil {
		return nil
	}
	return r.Query
}

func (r *RequestPropertyValue) GetBody() *ObjectProperty {
	if r == nil {
		return nil
	}
	return r.Body
}

func (r *RequestPropertyValue) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	r.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", r)
	}
	switch unmarshaler.Type {
	case "query":
		value := new(QueryParameter)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.Query = value
	case "body":
		value := new(ObjectProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		r.Body = value
	}
	return nil
}

func (r RequestPropertyValue) MarshalJSON() ([]byte, error) {
	if err := r.validate(); err != nil {
		return nil, err
	}
	if r.Query != nil {
		return internal.MarshalJSONWithExtraProperty(r.Query, "type", "query")
	}
	if r.Body != nil {
		return internal.MarshalJSONWithExtraProperty(r.Body, "type", "body")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", r)
}

type RequestPropertyValueVisitor interface {
	VisitQuery(*QueryParameter) error
	VisitBody(*ObjectProperty) error
}

func (r *RequestPropertyValue) Accept(visitor RequestPropertyValueVisitor) error {
	if r.Query != nil {
		return visitor.VisitQuery(r.Query)
	}
	if r.Body != nil {
		return visitor.VisitBody(r.Body)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", r)
}

func (r *RequestPropertyValue) validate() error {
	if r == nil {
		return fmt.Errorf("type %T is nil", r)
	}
	var fields []string
	if r.Query != nil {
		fields = append(fields, "query")
	}
	if r.Body != nil {
		fields = append(fields, "body")
	}
	if len(fields) == 0 {
		if r.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", r, r.Type)
		}
		return fmt.Errorf("type %T is empty", r)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", r, fields)
	}
	if r.Type != "" {
		field := fields[0]
		if r.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				r,
				r.Type,
				r,
			)
		}
	}
	return nil
}

var (
	responseErrorFieldDocs  = big.NewInt(1 << 0)
	responseErrorFieldError = big.NewInt(1 << 1)
)

type ResponseError struct {
	Docs  *string            `json:"docs,omitempty" url:"docs,omitempty"`
	Error *DeclaredErrorName `json:"error" url:"error"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (r *ResponseError) GetDocs() *string {
	if r == nil {
		return nil
	}
	return r.Docs
}

func (r *ResponseError) GetError() *DeclaredErrorName {
	if r == nil {
		return nil
	}
	return r.Error
}

func (r *ResponseError) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResponseError) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *ResponseError) SetDocs(docs *string) {
	r.Docs = docs
	r.require(responseErrorFieldDocs)
}

// SetError sets the Error field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *ResponseError) SetError(error_ *DeclaredErrorName) {
	r.Error = error_
	r.require(responseErrorFieldError)
}

func (r *ResponseError) UnmarshalJSON(data []byte) error {
	type unmarshaler ResponseError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResponseError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	return nil
}

func (r *ResponseError) MarshalJSON() ([]byte, error) {
	type embed ResponseError
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *ResponseError) String() string {
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ResponseErrors = []*ResponseError

// A property associated with a paginated endpoint's request or response.
var (
	responsePropertyFieldPropertyPath = big.NewInt(1 << 0)
	responsePropertyFieldProperty     = big.NewInt(1 << 1)
)

type ResponseProperty struct {
	// If empty, the property is defined at the top-level.
	// Otherwise, the property is defined on the nested object identified
	// by the path.
	PropertyPath []*PropertyPathItem `json:"propertyPath,omitempty" url:"propertyPath,omitempty"`
	Property     *ObjectProperty     `json:"property" url:"property"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (r *ResponseProperty) GetPropertyPath() []*PropertyPathItem {
	if r == nil {
		return nil
	}
	return r.PropertyPath
}

func (r *ResponseProperty) GetProperty() *ObjectProperty {
	if r == nil {
		return nil
	}
	return r.Property
}

func (r *ResponseProperty) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResponseProperty) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetPropertyPath sets the PropertyPath field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *ResponseProperty) SetPropertyPath(propertyPath []*PropertyPathItem) {
	r.PropertyPath = propertyPath
	r.require(responsePropertyFieldPropertyPath)
}

// SetProperty sets the Property field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *ResponseProperty) SetProperty(property *ObjectProperty) {
	r.Property = property
	r.require(responsePropertyFieldProperty)
}

func (r *ResponseProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler ResponseProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResponseProperty(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	return nil
}

func (r *ResponseProperty) MarshalJSON() ([]byte, error) {
	type embed ResponseProperty
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *ResponseProperty) String() string {
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RetriesConfiguration struct {
	RetriesDisabledSchema *RetriesDisabledSchema

	typ string
}

func (r *RetriesConfiguration) GetRetriesDisabledSchema() *RetriesDisabledSchema {
	if r == nil {
		return nil
	}
	return r.RetriesDisabledSchema
}

func (r *RetriesConfiguration) UnmarshalJSON(data []byte) error {
	valueRetriesDisabledSchema := new(RetriesDisabledSchema)
	if err := json.Unmarshal(data, &valueRetriesDisabledSchema); err == nil {
		r.typ = "RetriesDisabledSchema"
		r.RetriesDisabledSchema = valueRetriesDisabledSchema
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RetriesConfiguration) MarshalJSON() ([]byte, error) {
	if r.typ == "RetriesDisabledSchema" || r.RetriesDisabledSchema != nil {
		return json.Marshal(r.RetriesDisabledSchema)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RetriesConfigurationVisitor interface {
	VisitRetriesDisabledSchema(*RetriesDisabledSchema) error
}

func (r *RetriesConfiguration) Accept(visitor RetriesConfigurationVisitor) error {
	if r.typ == "RetriesDisabledSchema" || r.RetriesDisabledSchema != nil {
		return visitor.VisitRetriesDisabledSchema(r.RetriesDisabledSchema)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

var (
	retriesDisabledSchemaFieldDisabled = big.NewInt(1 << 0)
)

type RetriesDisabledSchema struct {
	Disabled *bool `json:"disabled,omitempty" url:"disabled,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (r *RetriesDisabledSchema) GetDisabled() *bool {
	if r == nil {
		return nil
	}
	return r.Disabled
}

func (r *RetriesDisabledSchema) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RetriesDisabledSchema) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetDisabled sets the Disabled field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RetriesDisabledSchema) SetDisabled(disabled *bool) {
	r.Disabled = disabled
	r.require(retriesDisabledSchemaFieldDisabled)
}

func (r *RetriesDisabledSchema) UnmarshalJSON(data []byte) error {
	type unmarshaler RetriesDisabledSchema
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RetriesDisabledSchema(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	return nil
}

func (r *RetriesDisabledSchema) MarshalJSON() ([]byte, error) {
	type embed RetriesDisabledSchema
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *RetriesDisabledSchema) String() string {
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

var (
	sdkRequestFieldStreamParameter      = big.NewInt(1 << 0)
	sdkRequestFieldRequestParameterName = big.NewInt(1 << 1)
	sdkRequestFieldShape                = big.NewInt(1 << 2)
)

type SdkRequest struct {
	// The request property that controls whether or not the response is streamed.
	StreamParameter      *RequestProperty `json:"streamParameter,omitempty" url:"streamParameter,omitempty"`
	RequestParameterName *common.Name     `json:"requestParameterName" url:"requestParameterName"`
	Shape                *SdkRequestShape `json:"shape" url:"shape"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (s *SdkRequest) GetStreamParameter() *RequestProperty {
	if s == nil {
		return nil
	}
	return s.StreamParameter
}

func (s *SdkRequest) GetRequestParameterName() *common.Name {
	if s == nil {
		return nil
	}
	return s.RequestParameterName
}

func (s *SdkRequest) GetShape() *SdkRequestShape {
	if s == nil {
		return nil
	}
	return s.Shape
}

func (s *SdkRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SdkRequest) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetStreamParameter sets the StreamParameter field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SdkRequest) SetStreamParameter(streamParameter *RequestProperty) {
	s.StreamParameter = streamParameter
	s.require(sdkRequestFieldStreamParameter)
}

// SetRequestParameterName sets the RequestParameterName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SdkRequest) SetRequestParameterName(requestParameterName *common.Name) {
	s.RequestParameterName = requestParameterName
	s.require(sdkRequestFieldRequestParameterName)
}

// SetShape sets the Shape field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SdkRequest) SetShape(shape *SdkRequestShape) {
	s.Shape = shape
	s.require(sdkRequestFieldShape)
}

func (s *SdkRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SdkRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SdkRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	return nil
}

func (s *SdkRequest) MarshalJSON() ([]byte, error) {
	type embed SdkRequest
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SdkRequest) String() string {
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SdkRequestBodyType struct {
	Type          string
	TypeReference *HttpRequestBodyReference
	Bytes         *BytesRequest
}

func (s *SdkRequestBodyType) GetType() string {
	if s == nil {
		return ""
	}
	return s.Type
}

func (s *SdkRequestBodyType) GetTypeReference() *HttpRequestBodyReference {
	if s == nil {
		return nil
	}
	return s.TypeReference
}

func (s *SdkRequestBodyType) GetBytes() *BytesRequest {
	if s == nil {
		return nil
	}
	return s.Bytes
}

func (s *SdkRequestBodyType) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	s.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", s)
	}
	switch unmarshaler.Type {
	case "typeReference":
		value := new(HttpRequestBodyReference)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.TypeReference = value
	case "bytes":
		value := new(BytesRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.Bytes = value
	}
	return nil
}

func (s SdkRequestBodyType) MarshalJSON() ([]byte, error) {
	if err := s.validate(); err != nil {
		return nil, err
	}
	if s.TypeReference != nil {
		return internal.MarshalJSONWithExtraProperty(s.TypeReference, "type", "typeReference")
	}
	if s.Bytes != nil {
		return internal.MarshalJSONWithExtraProperty(s.Bytes, "type", "bytes")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", s)
}

type SdkRequestBodyTypeVisitor interface {
	VisitTypeReference(*HttpRequestBodyReference) error
	VisitBytes(*BytesRequest) error
}

func (s *SdkRequestBodyType) Accept(visitor SdkRequestBodyTypeVisitor) error {
	if s.TypeReference != nil {
		return visitor.VisitTypeReference(s.TypeReference)
	}
	if s.Bytes != nil {
		return visitor.VisitBytes(s.Bytes)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", s)
}

func (s *SdkRequestBodyType) validate() error {
	if s == nil {
		return fmt.Errorf("type %T is nil", s)
	}
	var fields []string
	if s.TypeReference != nil {
		fields = append(fields, "typeReference")
	}
	if s.Bytes != nil {
		fields = append(fields, "bytes")
	}
	if len(fields) == 0 {
		if s.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", s, s.Type)
		}
		return fmt.Errorf("type %T is empty", s)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", s, fields)
	}
	if s.Type != "" {
		field := fields[0]
		if s.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				s,
				s.Type,
				s,
			)
		}
	}
	return nil
}

type SdkRequestShape struct {
	Type            string
	JustRequestBody *SdkRequestBodyType
	Wrapper         *SdkRequestWrapper
}

func (s *SdkRequestShape) GetType() string {
	if s == nil {
		return ""
	}
	return s.Type
}

func (s *SdkRequestShape) GetJustRequestBody() *SdkRequestBodyType {
	if s == nil {
		return nil
	}
	return s.JustRequestBody
}

func (s *SdkRequestShape) GetWrapper() *SdkRequestWrapper {
	if s == nil {
		return nil
	}
	return s.Wrapper
}

func (s *SdkRequestShape) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	s.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", s)
	}
	switch unmarshaler.Type {
	case "justRequestBody":
		var valueUnmarshaler struct {
			JustRequestBody *SdkRequestBodyType `json:"value"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		s.JustRequestBody = valueUnmarshaler.JustRequestBody
	case "wrapper":
		value := new(SdkRequestWrapper)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.Wrapper = value
	}
	return nil
}

func (s SdkRequestShape) MarshalJSON() ([]byte, error) {
	if err := s.validate(); err != nil {
		return nil, err
	}
	if s.JustRequestBody != nil {
		var marshaler = struct {
			Type            string              `json:"type"`
			JustRequestBody *SdkRequestBodyType `json:"value"`
		}{
			Type:            "justRequestBody",
			JustRequestBody: s.JustRequestBody,
		}
		return json.Marshal(marshaler)
	}
	if s.Wrapper != nil {
		return internal.MarshalJSONWithExtraProperty(s.Wrapper, "type", "wrapper")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", s)
}

type SdkRequestShapeVisitor interface {
	VisitJustRequestBody(*SdkRequestBodyType) error
	VisitWrapper(*SdkRequestWrapper) error
}

func (s *SdkRequestShape) Accept(visitor SdkRequestShapeVisitor) error {
	if s.JustRequestBody != nil {
		return visitor.VisitJustRequestBody(s.JustRequestBody)
	}
	if s.Wrapper != nil {
		return visitor.VisitWrapper(s.Wrapper)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", s)
}

func (s *SdkRequestShape) validate() error {
	if s == nil {
		return fmt.Errorf("type %T is nil", s)
	}
	var fields []string
	if s.JustRequestBody != nil {
		fields = append(fields, "justRequestBody")
	}
	if s.Wrapper != nil {
		fields = append(fields, "wrapper")
	}
	if len(fields) == 0 {
		if s.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", s, s.Type)
		}
		return fmt.Errorf("type %T is empty", s)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", s, fields)
	}
	if s.Type != "" {
		field := fields[0]
		if s.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				s,
				s.Type,
				s,
			)
		}
	}
	return nil
}

var (
	sdkRequestWrapperFieldWrapperName           = big.NewInt(1 << 0)
	sdkRequestWrapperFieldBodyKey               = big.NewInt(1 << 1)
	sdkRequestWrapperFieldIncludePathParameters = big.NewInt(1 << 2)
	sdkRequestWrapperFieldOnlyPathParameters    = big.NewInt(1 << 3)
)

type SdkRequestWrapper struct {
	WrapperName           *common.Name `json:"wrapperName" url:"wrapperName"`
	BodyKey               *common.Name `json:"bodyKey" url:"bodyKey"`
	IncludePathParameters *bool        `json:"includePathParameters,omitempty" url:"includePathParameters,omitempty"`
	OnlyPathParameters    *bool        `json:"onlyPathParameters,omitempty" url:"onlyPathParameters,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (s *SdkRequestWrapper) GetWrapperName() *common.Name {
	if s == nil {
		return nil
	}
	return s.WrapperName
}

func (s *SdkRequestWrapper) GetBodyKey() *common.Name {
	if s == nil {
		return nil
	}
	return s.BodyKey
}

func (s *SdkRequestWrapper) GetIncludePathParameters() *bool {
	if s == nil {
		return nil
	}
	return s.IncludePathParameters
}

func (s *SdkRequestWrapper) GetOnlyPathParameters() *bool {
	if s == nil {
		return nil
	}
	return s.OnlyPathParameters
}

func (s *SdkRequestWrapper) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SdkRequestWrapper) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetWrapperName sets the WrapperName field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SdkRequestWrapper) SetWrapperName(wrapperName *common.Name) {
	s.WrapperName = wrapperName
	s.require(sdkRequestWrapperFieldWrapperName)
}

// SetBodyKey sets the BodyKey field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SdkRequestWrapper) SetBodyKey(bodyKey *common.Name) {
	s.BodyKey = bodyKey
	s.require(sdkRequestWrapperFieldBodyKey)
}

// SetIncludePathParameters sets the IncludePathParameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SdkRequestWrapper) SetIncludePathParameters(includePathParameters *bool) {
	s.IncludePathParameters = includePathParameters
	s.require(sdkRequestWrapperFieldIncludePathParameters)
}

// SetOnlyPathParameters sets the OnlyPathParameters field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SdkRequestWrapper) SetOnlyPathParameters(onlyPathParameters *bool) {
	s.OnlyPathParameters = onlyPathParameters
	s.require(sdkRequestWrapperFieldOnlyPathParameters)
}

func (s *SdkRequestWrapper) UnmarshalJSON(data []byte) error {
	type unmarshaler SdkRequestWrapper
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SdkRequestWrapper(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	return nil
}

func (s *SdkRequestWrapper) MarshalJSON() ([]byte, error) {
	type embed SdkRequestWrapper
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SdkRequestWrapper) String() string {
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	sseStreamChunkFieldDocs       = big.NewInt(1 << 0)
	sseStreamChunkFieldV2Examples = big.NewInt(1 << 1)
	sseStreamChunkFieldPayload    = big.NewInt(1 << 2)
	sseStreamChunkFieldTerminator = big.NewInt(1 << 3)
)

type SseStreamChunk struct {
	Docs       *string           `json:"docs,omitempty" url:"docs,omitempty"`
	V2Examples *V2SchemaExamples `json:"v2Examples,omitempty" url:"v2Examples,omitempty"`
	Payload    *TypeReference    `json:"payload" url:"payload"`
	Terminator *string           `json:"terminator,omitempty" url:"terminator,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (s *SseStreamChunk) GetDocs() *string {
	if s == nil {
		return nil
	}
	return s.Docs
}

func (s *SseStreamChunk) GetV2Examples() *V2SchemaExamples {
	if s == nil {
		return nil
	}
	return s.V2Examples
}

func (s *SseStreamChunk) GetPayload() *TypeReference {
	if s == nil {
		return nil
	}
	return s.Payload
}

func (s *SseStreamChunk) GetTerminator() *string {
	if s == nil {
		return nil
	}
	return s.Terminator
}

func (s *SseStreamChunk) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SseStreamChunk) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SseStreamChunk) SetDocs(docs *string) {
	s.Docs = docs
	s.require(sseStreamChunkFieldDocs)
}

// SetV2Examples sets the V2Examples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SseStreamChunk) SetV2Examples(v2Examples *V2SchemaExamples) {
	s.V2Examples = v2Examples
	s.require(sseStreamChunkFieldV2Examples)
}

// SetPayload sets the Payload field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SseStreamChunk) SetPayload(payload *TypeReference) {
	s.Payload = payload
	s.require(sseStreamChunkFieldPayload)
}

// SetTerminator sets the Terminator field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *SseStreamChunk) SetTerminator(terminator *string) {
	s.Terminator = terminator
	s.require(sseStreamChunkFieldTerminator)
}

func (s *SseStreamChunk) UnmarshalJSON(data []byte) error {
	type unmarshaler SseStreamChunk
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SseStreamChunk(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	return nil
}

func (s *SseStreamChunk) MarshalJSON() ([]byte, error) {
	type embed SseStreamChunk
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *SseStreamChunk) String() string {
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

var (
	streamParameterResponseFieldNonStreamResponse = big.NewInt(1 << 0)
	streamParameterResponseFieldStreamResponse    = big.NewInt(1 << 1)
)

type StreamParameterResponse struct {
	NonStreamResponse *NonStreamHttpResponseBody `json:"nonStreamResponse" url:"nonStreamResponse"`
	StreamResponse    *StreamingResponse         `json:"streamResponse" url:"streamResponse"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (s *StreamParameterResponse) GetNonStreamResponse() *NonStreamHttpResponseBody {
	if s == nil {
		return nil
	}
	return s.NonStreamResponse
}

func (s *StreamParameterResponse) GetStreamResponse() *StreamingResponse {
	if s == nil {
		return nil
	}
	return s.StreamResponse
}

func (s *StreamParameterResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StreamParameterResponse) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetNonStreamResponse sets the NonStreamResponse field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StreamParameterResponse) SetNonStreamResponse(nonStreamResponse *NonStreamHttpResponseBody) {
	s.NonStreamResponse = nonStreamResponse
	s.require(streamParameterResponseFieldNonStreamResponse)
}

// SetStreamResponse sets the StreamResponse field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *StreamParameterResponse) SetStreamResponse(streamResponse *StreamingResponse) {
	s.StreamResponse = streamResponse
	s.require(streamParameterResponseFieldStreamResponse)
}

func (s *StreamParameterResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler StreamParameterResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StreamParameterResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	return nil
}

func (s *StreamParameterResponse) MarshalJSON() ([]byte, error) {
	type embed StreamParameterResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *StreamParameterResponse) String() string {
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type StreamingResponse struct {
	Type string
	Json *JsonStreamChunk
	Text *TextStreamChunk
	Sse  *SseStreamChunk
}

func (s *StreamingResponse) GetType() string {
	if s == nil {
		return ""
	}
	return s.Type
}

func (s *StreamingResponse) GetJson() *JsonStreamChunk {
	if s == nil {
		return nil
	}
	return s.Json
}

func (s *StreamingResponse) GetText() *TextStreamChunk {
	if s == nil {
		return nil
	}
	return s.Text
}

func (s *StreamingResponse) GetSse() *SseStreamChunk {
	if s == nil {
		return nil
	}
	return s.Sse
}

func (s *StreamingResponse) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	s.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", s)
	}
	switch unmarshaler.Type {
	case "json":
		value := new(JsonStreamChunk)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.Json = value
	case "text":
		value := new(TextStreamChunk)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.Text = value
	case "sse":
		value := new(SseStreamChunk)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.Sse = value
	}
	return nil
}

func (s StreamingResponse) MarshalJSON() ([]byte, error) {
	if err := s.validate(); err != nil {
		return nil, err
	}
	if s.Json != nil {
		return internal.MarshalJSONWithExtraProperty(s.Json, "type", "json")
	}
	if s.Text != nil {
		return internal.MarshalJSONWithExtraProperty(s.Text, "type", "text")
	}
	if s.Sse != nil {
		return internal.MarshalJSONWithExtraProperty(s.Sse, "type", "sse")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", s)
}

type StreamingResponseVisitor interface {
	VisitJson(*JsonStreamChunk) error
	VisitText(*TextStreamChunk) error
	VisitSse(*SseStreamChunk) error
}

func (s *StreamingResponse) Accept(visitor StreamingResponseVisitor) error {
	if s.Json != nil {
		return visitor.VisitJson(s.Json)
	}
	if s.Text != nil {
		return visitor.VisitText(s.Text)
	}
	if s.Sse != nil {
		return visitor.VisitSse(s.Sse)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", s)
}

func (s *StreamingResponse) validate() error {
	if s == nil {
		return fmt.Errorf("type %T is nil", s)
	}
	var fields []string
	if s.Json != nil {
		fields = append(fields, "json")
	}
	if s.Text != nil {
		fields = append(fields, "text")
	}
	if s.Sse != nil {
		fields = append(fields, "sse")
	}
	if len(fields) == 0 {
		if s.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", s, s.Type)
		}
		return fmt.Errorf("type %T is empty", s)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", s, fields)
	}
	if s.Type != "" {
		field := fields[0]
		if s.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				s,
				s.Type,
				s,
			)
		}
	}
	return nil
}

type SupportedSdkLanguage string

const (
	SupportedSdkLanguageCurl       SupportedSdkLanguage = "curl"
	SupportedSdkLanguagePython     SupportedSdkLanguage = "python"
	SupportedSdkLanguageJavascript SupportedSdkLanguage = "javascript"
	SupportedSdkLanguageTypescript SupportedSdkLanguage = "typescript"
	SupportedSdkLanguageGo         SupportedSdkLanguage = "go"
	SupportedSdkLanguageRuby       SupportedSdkLanguage = "ruby"
	SupportedSdkLanguageCsharp     SupportedSdkLanguage = "csharp"
	SupportedSdkLanguageJava       SupportedSdkLanguage = "java"
	SupportedSdkLanguagePhp        SupportedSdkLanguage = "php"
	SupportedSdkLanguageRust       SupportedSdkLanguage = "rust"
	SupportedSdkLanguageSwift      SupportedSdkLanguage = "swift"
)

func NewSupportedSdkLanguageFromString(s string) (SupportedSdkLanguage, error) {
	switch s {
	case "curl":
		return SupportedSdkLanguageCurl, nil
	case "python":
		return SupportedSdkLanguagePython, nil
	case "javascript":
		return SupportedSdkLanguageJavascript, nil
	case "typescript":
		return SupportedSdkLanguageTypescript, nil
	case "go":
		return SupportedSdkLanguageGo, nil
	case "ruby":
		return SupportedSdkLanguageRuby, nil
	case "csharp":
		return SupportedSdkLanguageCsharp, nil
	case "java":
		return SupportedSdkLanguageJava, nil
	case "php":
		return SupportedSdkLanguagePhp, nil
	case "rust":
		return SupportedSdkLanguageRust, nil
	case "swift":
		return SupportedSdkLanguageSwift, nil
	}
	var t SupportedSdkLanguage
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SupportedSdkLanguage) Ptr() *SupportedSdkLanguage {
	return &s
}

var (
	textResponseFieldDocs       = big.NewInt(1 << 0)
	textResponseFieldV2Examples = big.NewInt(1 << 1)
)

type TextResponse struct {
	Docs       *string           `json:"docs,omitempty" url:"docs,omitempty"`
	V2Examples *V2SchemaExamples `json:"v2Examples,omitempty" url:"v2Examples,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (t *TextResponse) GetDocs() *string {
	if t == nil {
		return nil
	}
	return t.Docs
}

func (t *TextResponse) GetV2Examples() *V2SchemaExamples {
	if t == nil {
		return nil
	}
	return t.V2Examples
}

func (t *TextResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TextResponse) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TextResponse) SetDocs(docs *string) {
	t.Docs = docs
	t.require(textResponseFieldDocs)
}

// SetV2Examples sets the V2Examples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TextResponse) SetV2Examples(v2Examples *V2SchemaExamples) {
	t.V2Examples = v2Examples
	t.require(textResponseFieldV2Examples)
}

func (t *TextResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TextResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TextResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	return nil
}

func (t *TextResponse) MarshalJSON() ([]byte, error) {
	type embed TextResponse
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TextResponse) String() string {
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

var (
	textStreamChunkFieldDocs       = big.NewInt(1 << 0)
	textStreamChunkFieldV2Examples = big.NewInt(1 << 1)
)

type TextStreamChunk struct {
	Docs       *string           `json:"docs,omitempty" url:"docs,omitempty"`
	V2Examples *V2SchemaExamples `json:"v2Examples,omitempty" url:"v2Examples,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (t *TextStreamChunk) GetDocs() *string {
	if t == nil {
		return nil
	}
	return t.Docs
}

func (t *TextStreamChunk) GetV2Examples() *V2SchemaExamples {
	if t == nil {
		return nil
	}
	return t.V2Examples
}

func (t *TextStreamChunk) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TextStreamChunk) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetDocs sets the Docs field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TextStreamChunk) SetDocs(docs *string) {
	t.Docs = docs
	t.require(textStreamChunkFieldDocs)
}

// SetV2Examples sets the V2Examples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TextStreamChunk) SetV2Examples(v2Examples *V2SchemaExamples) {
	t.V2Examples = v2Examples
	t.require(textStreamChunkFieldV2Examples)
}

func (t *TextStreamChunk) UnmarshalJSON(data []byte) error {
	type unmarshaler TextStreamChunk
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TextStreamChunk(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	return nil
}

func (t *TextStreamChunk) MarshalJSON() ([]byte, error) {
	type embed TextStreamChunk
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TextStreamChunk) String() string {
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type Transport struct {
	Type string
	Http interface{}
	Grpc *GrpcTransport
}

func (t *Transport) GetType() string {
	if t == nil {
		return ""
	}
	return t.Type
}

func (t *Transport) GetHttp() interface{} {
	if t == nil {
		return nil
	}
	return t.Http
}

func (t *Transport) GetGrpc() *GrpcTransport {
	if t == nil {
		return nil
	}
	return t.Grpc
}

func (t *Transport) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	t.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", t)
	}
	switch unmarshaler.Type {
	case "http":
		value := make(map[string]interface{})
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Http = value
	case "grpc":
		value := new(GrpcTransport)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Grpc = value
	}
	return nil
}

func (t Transport) MarshalJSON() ([]byte, error) {
	if err := t.validate(); err != nil {
		return nil, err
	}
	if t.Http != nil {
		var marshaler = struct {
			Type string      `json:"type"`
			Http interface{} `json:"http,omitempty"`
		}{
			Type: "http",
			Http: t.Http,
		}
		return json.Marshal(marshaler)
	}
	if t.Grpc != nil {
		return internal.MarshalJSONWithExtraProperty(t.Grpc, "type", "grpc")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TransportVisitor interface {
	VisitHttp(interface{}) error
	VisitGrpc(*GrpcTransport) error
}

func (t *Transport) Accept(visitor TransportVisitor) error {
	if t.Http != nil {
		return visitor.VisitHttp(t.Http)
	}
	if t.Grpc != nil {
		return visitor.VisitGrpc(t.Grpc)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", t)
}

func (t *Transport) validate() error {
	if t == nil {
		return fmt.Errorf("type %T is nil", t)
	}
	var fields []string
	if t.Http != nil {
		fields = append(fields, "http")
	}
	if t.Grpc != nil {
		fields = append(fields, "grpc")
	}
	if len(fields) == 0 {
		if t.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", t, t.Type)
		}
		return fmt.Errorf("type %T is empty", t)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", t, fields)
	}
	if t.Type != "" {
		field := fields[0]
		if t.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				t,
				t.Type,
				t,
			)
		}
	}
	return nil
}

var (
	userSpecifiedEndpointExampleFieldCodeSamples = big.NewInt(1 << 0)
	userSpecifiedEndpointExampleFieldExample     = big.NewInt(1 << 1)
)

type UserSpecifiedEndpointExample struct {
	// Manually written code samples specified by the user
	CodeSamples []*ExampleCodeSample `json:"codeSamples,omitempty" url:"codeSamples,omitempty"`
	// Manually written example specified by the user
	Example *ExampleEndpointCall `json:"example,omitempty" url:"example,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (u *UserSpecifiedEndpointExample) GetCodeSamples() []*ExampleCodeSample {
	if u == nil {
		return nil
	}
	return u.CodeSamples
}

func (u *UserSpecifiedEndpointExample) GetExample() *ExampleEndpointCall {
	if u == nil {
		return nil
	}
	return u.Example
}

func (u *UserSpecifiedEndpointExample) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserSpecifiedEndpointExample) require(field *big.Int) {
	if u.explicitFields == nil {
		u.explicitFields = big.NewInt(0)
	}
	u.explicitFields.Or(u.explicitFields, field)
}

// SetCodeSamples sets the CodeSamples field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserSpecifiedEndpointExample) SetCodeSamples(codeSamples []*ExampleCodeSample) {
	u.CodeSamples = codeSamples
	u.require(userSpecifiedEndpointExampleFieldCodeSamples)
}

// SetExample sets the Example field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (u *UserSpecifiedEndpointExample) SetExample(example *ExampleEndpointCall) {
	u.Example = example
	u.require(userSpecifiedEndpointExampleFieldExample)
}

func (u *UserSpecifiedEndpointExample) UnmarshalJSON(data []byte) error {
	type unmarshaler UserSpecifiedEndpointExample
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserSpecifiedEndpointExample(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	return nil
}

func (u *UserSpecifiedEndpointExample) MarshalJSON() ([]byte, error) {
	type embed UserSpecifiedEndpointExample
	var marshaler = struct {
		embed
	}{
		embed: embed(*u),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, u.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (u *UserSpecifiedEndpointExample) String() string {
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

var (
	v2HttpRequestBodiesFieldRequestBodies = big.NewInt(1 << 0)
)

type V2HttpRequestBodies struct {
	RequestBodies []*HttpRequestBody `json:"requestBodies,omitempty" url:"requestBodies,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (v *V2HttpRequestBodies) GetRequestBodies() []*HttpRequestBody {
	if v == nil {
		return nil
	}
	return v.RequestBodies
}

func (v *V2HttpRequestBodies) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V2HttpRequestBodies) require(field *big.Int) {
	if v.explicitFields == nil {
		v.explicitFields = big.NewInt(0)
	}
	v.explicitFields.Or(v.explicitFields, field)
}

// SetRequestBodies sets the RequestBodies field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpRequestBodies) SetRequestBodies(requestBodies []*HttpRequestBody) {
	v.RequestBodies = requestBodies
	v.require(v2HttpRequestBodiesFieldRequestBodies)
}

func (v *V2HttpRequestBodies) UnmarshalJSON(data []byte) error {
	type unmarshaler V2HttpRequestBodies
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V2HttpRequestBodies(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	return nil
}

func (v *V2HttpRequestBodies) MarshalJSON() ([]byte, error) {
	type embed V2HttpRequestBodies
	var marshaler = struct {
		embed
	}{
		embed: embed(*v),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, v.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (v *V2HttpRequestBodies) String() string {
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

var (
	v2HttpResponsesFieldResponses = big.NewInt(1 << 0)
)

type V2HttpResponses struct {
	Responses []*HttpResponse `json:"responses,omitempty" url:"responses,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
}

func (v *V2HttpResponses) GetResponses() []*HttpResponse {
	if v == nil {
		return nil
	}
	return v.Responses
}

func (v *V2HttpResponses) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *V2HttpResponses) require(field *big.Int) {
	if v.explicitFields == nil {
		v.explicitFields = big.NewInt(0)
	}
	v.explicitFields.Or(v.explicitFields, field)
}

// SetResponses sets the Responses field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (v *V2HttpResponses) SetResponses(responses []*HttpResponse) {
	v.Responses = responses
	v.require(v2HttpResponsesFieldResponses)
}

func (v *V2HttpResponses) UnmarshalJSON(data []byte) error {
	type unmarshaler V2HttpResponses
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V2HttpResponses(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	return nil
}

func (v *V2HttpResponses) MarshalJSON() ([]byte, error) {
	type embed V2HttpResponses
	var marshaler = struct {
		embed
	}{
		embed: embed(*v),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, v.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (v *V2HttpResponses) String() string {
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}
