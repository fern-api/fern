// This file was auto-generated by Fern from our API Definition.

package client

import (
	context "context"
	fixtures "github.com/fern-api/fern-go/internal/testdata/sdk/packages/fixtures"
	configclient "github.com/fern-api/fern-go/internal/testdata/sdk/packages/fixtures/config/client"
	core "github.com/fern-api/fern-go/internal/testdata/sdk/packages/fixtures/core"
	internal "github.com/fern-api/fern-go/internal/testdata/sdk/packages/fixtures/internal"
	option "github.com/fern-api/fern-go/internal/testdata/sdk/packages/fixtures/option"
	organizationclient "github.com/fern-api/fern-go/internal/testdata/sdk/packages/fixtures/organization/client"
	userclient "github.com/fern-api/fern-go/internal/testdata/sdk/packages/fixtures/user/client"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header

	User         *userclient.Client
	Config       *configclient.Client
	Organization *organizationclient.Client
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header:       options.ToHeader(),
		User:         userclient.NewClient(opts...),
		Config:       configclient.NewClient(opts...),
		Organization: organizationclient.NewClient(opts...),
	}
}

func (c *Client) GetFoo(
	ctx context.Context,
	opts ...option.RequestOption,
) ([]*fixtures.Foo, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.foo.io/v1",
	)
	endpointURL := baseURL + "/foo"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response []*fixtures.Foo
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

func (c *Client) PostFoo(
	ctx context.Context,
	request *fixtures.Foo,
	opts ...option.RequestOption,
) (*fixtures.Foo, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.foo.io/v1",
	)
	endpointURL := baseURL + "/foo"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		409: func(apiError *core.APIError) error {
			return &fixtures.ConflictError{
				APIError: apiError,
			}
		},
		422: func(apiError *core.APIError) error {
			return &fixtures.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}

	var response *fixtures.Foo
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
