// This file was auto-generated by Fern from our API Definition.

package metrics

import (
	json "encoding/json"
	fmt "fmt"
)

type Tag struct {
	Type    string
	Number  int
	String  string
	Boolean bool
}

func NewTagFromNumber(value int) *Tag {
	return &Tag{Type: "number", Number: value}
}

func NewTagFromString(value string) *Tag {
	return &Tag{Type: "string", String: value}
}

func NewTagFromBoolean(value bool) *Tag {
	return &Tag{Type: "boolean", Boolean: value}
}

func (t *Tag) GetType() string {
	if t == nil {
		return ""
	}
	return t.Type
}

func (t *Tag) GetNumber() int {
	if t == nil {
		return 0
	}
	return t.Number
}

func (t *Tag) GetString() string {
	if t == nil {
		return ""
	}
	return t.String
}

func (t *Tag) GetBoolean() bool {
	if t == nil {
		return false
	}
	return t.Boolean
}

func (t *Tag) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	t.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", t)
	}
	switch unmarshaler.Type {
	case "number":
		var valueUnmarshaler struct {
			Number int `json:"value"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		t.Number = valueUnmarshaler.Number
	case "string":
		var valueUnmarshaler struct {
			String string `json:"value"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		t.String = valueUnmarshaler.String
	case "boolean":
		var valueUnmarshaler struct {
			Boolean bool `json:"value"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		t.Boolean = valueUnmarshaler.Boolean
	}
	return nil
}

func (t Tag) MarshalJSON() ([]byte, error) {
	if err := t.validate(); err != nil {
		return nil, err
	}
	switch t.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.Type, t)
	case "number":
		var marshaler = struct {
			Type   string `json:"type"`
			Number int    `json:"value"`
		}{
			Type:   "number",
			Number: t.Number,
		}
		return json.Marshal(marshaler)
	case "string":
		var marshaler = struct {
			Type   string `json:"type"`
			String string `json:"value"`
		}{
			Type:   "string",
			String: t.String,
		}
		return json.Marshal(marshaler)
	case "boolean":
		var marshaler = struct {
			Type    string `json:"type"`
			Boolean bool   `json:"value"`
		}{
			Type:    "boolean",
			Boolean: t.Boolean,
		}
		return json.Marshal(marshaler)
	}
}

type TagVisitor interface {
	VisitNumber(int) error
	VisitString(string) error
	VisitBoolean(bool) error
}

func (t *Tag) Accept(visitor TagVisitor) error {
	switch t.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", t.Type, t)
	case "number":
		return visitor.VisitNumber(t.Number)
	case "string":
		return visitor.VisitString(t.String)
	case "boolean":
		return visitor.VisitBoolean(t.Boolean)
	}
}

func (t *Tag) validate() error {
	if t == nil {
		return fmt.Errorf("type %T is nil", t)
	}
	var fields []string
	if t.Number != 0 {
		fields = append(fields, "number")
	}
	if t.String != "" {
		fields = append(fields, "string")
	}
	if t.Boolean != false {
		fields = append(fields, "boolean")
	}
	if len(fields) == 0 {
		if t.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", t, t.Type)
		}
		return fmt.Errorf("type %T is empty", t)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", t, fields)
	}
	if t.Type != "" {
		field := fields[0]
		if t.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				t,
				t.Type,
				t,
			)
		}
	}
	return nil
}
