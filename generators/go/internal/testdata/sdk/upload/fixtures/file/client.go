// This file was auto-generated by Fern from our API Definition.

package file

import (
	context "context"
	fmt "fmt"
	fixtures "github.com/fern-api/fern-go/internal/testdata/sdk/upload/fixtures"
	core "github.com/fern-api/fern-go/internal/testdata/sdk/upload/fixtures/core"
	internal "github.com/fern-api/fern-go/internal/testdata/sdk/upload/fixtures/internal"
	option "github.com/fern-api/fern-go/internal/testdata/sdk/upload/fixtures/option"
	io "io"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

func (c *Client) Upload(
	ctx context.Context,
	file io.Reader,
	request *fixtures.UploadRequest,
	opts ...option.RequestOption,
) (string, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"",
	)
	endpointURL := baseURL + "/file/upload"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	writer := internal.NewMultipartWriter()
	if err := writer.WriteFile("file", file); err != nil {
		return "", err
	}
	if err := writer.WriteField("fern", fmt.Sprintf("%v", "fern")); err != nil {
		return "", err
	}
	if err := writer.WriteField("status", fmt.Sprintf("%v", request.Status)); err != nil {
		return "", err
	}
	if err := writer.Close(); err != nil {
		return "", err
	}
	headers.Set("Content-Type", writer.ContentType())

	var response string
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         writer.Buffer(),
			Response:        &response,
		},
	); err != nil {
		return "", err
	}
	return response, nil
}

func (c *Client) UploadSimple(
	ctx context.Context,
	file io.Reader,
	opts ...option.RequestOption,
) (string, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"",
	)
	endpointURL := baseURL + "/file/upload-simple"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	writer := internal.NewMultipartWriter()
	if err := writer.WriteFile("file", file); err != nil {
		return "", err
	}
	if err := writer.Close(); err != nil {
		return "", err
	}
	headers.Set("Content-Type", writer.ContentType())

	var response string
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         writer.Buffer(),
			Response:        &response,
		},
	); err != nil {
		return "", err
	}
	return response, nil
}

func (c *Client) UploadMultiple(
	ctx context.Context,
	file io.Reader,
	optionalFile io.Reader,
	request *fixtures.UploadMultiRequest,
	opts ...option.RequestOption,
) (string, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"",
	)
	endpointURL := baseURL + "/file/upload-multi"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	writer := internal.NewMultipartWriter()
	if err := writer.WriteFile("file", file); err != nil {
		return "", err
	}
	if optionalFile != nil {
		if err := writer.WriteFile("optionalFile", optionalFile); err != nil {
			return "", err
		}
	}
	if err := writer.WriteField("status", fmt.Sprintf("%v", request.Status)); err != nil {
		return "", err
	}
	if err := writer.Close(); err != nil {
		return "", err
	}
	headers.Set("Content-Type", writer.ContentType())

	var response string
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         writer.Buffer(),
			Response:        &response,
		},
	); err != nil {
		return "", err
	}
	return response, nil
}
