# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

types:
  TaskNew:
    properties: {}
    extends:
      - Task

  Task:
    properties:
      id:
        type: optional<id>
      name:
        docs: >
          An optional name of the Task. This string must not contain more than
          100
          characters.
        type: optional<string>
      queue:
        docs: >
          The name of the of the Task queue. This string must not contain more
          than
          100 characters.
        type: optional<string>
      status:
        docs: The status of this Task.
        type: optional<TaskStatus>
      request:
        type: optional<Request>
      scheduled_for:
        docs: >
          The [ISO 8601
          timestamp](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations)
          for when the Task is scheduled to be executed. Example:
          "2021-10-01T15:53:05Z".
          When not present, the Task will be scheduled for immediate execution.
        type: optional<string>
      delay:
        docs: >
          A duration string containing numbers and a unit suffix of "s" for
          seconds,
          "m" for minutes, and "h" for hours. Examples: "5s"; "1.5h"; "2h45m"
          When both `delay` and `scheduled_for` are present, `delay` will be
          added
          to `scheduled_for`.
        type: optional<string>
      created_at:
        type: optional<created_at>

  TaskStatus:
    docs: The status of this Task.
    enum:
      - name: queued
        value: queued
      - name: working
        value: working
      - name: success
        value: success
      - name: failure
        value: failure

  Schedule:
    properties:
      id:
        type: optional<id>
      name:
        docs: >
          An optional name of the Schedule. This string must not contain more
          than
          100 characters.
        type: optional<string>
      queue:
        docs: >
          The name of the of the queue to schedule the Task on. This string must
          not
          contain more than 100 characters.
        type: optional<string>
      description:
        docs: >
          An optional description of the Schedule. This string must not contain
          more
          than 500 characters.
        type: optional<string>
      cron:
        docs: |
          A [cron expression](https://crontab.guru/examples.html) describing the
          Schedule on which Tasks will run (UTC).
          Note: execution n + 1 of a Task will not begin until execution n has
          completed successfully.
          You must pass either `cron` or `rrule` when creating a new Schedule.
        type: optional<string>
      rrule:
        docs: >
          An [iCal RRule
          expression](https://icalendar.org/iCalendar-RFC-5545/3-8-5-3-recurrence-rule.html)
          describing the Schedule on which Tasks will run (UTC). The time of
          Schedule creation will be used as the start of the recurrence interval
          (i.e. `DTSTART`).
          Note: execution n + 1 of a Task will not begin until execution n has
          completed successfully.
          You must pass either `cron` or `rrule` when creating a new Schedule.
        type: optional<string>
      dtstart:
        docs: >
          The [ISO 8601
          timestamp](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations)
          denoting the start of an RRULE schedule. Example:
          "2021-10-01T15:53:05Z".
          When not set, it will be set to the current time, and the first Task
          will
          be scheduled immediately.
          Ignored for `cron`-type Schedules.
        type: optional<string>
      paused:
        docs: >
          If `true`, the Schedule will be paused immediately. If `false`, a
          paused
          Schedule will be resumed.
        type: optional<boolean>
      request:
        type: optional<Request>
      created_at:
        type: optional<created_at>

  id:
    type: string
    docs: A unique ID assigned upon creation.

  Request:
    properties:
      url:
        type: string
        docs: |
          The URL that the POST request will be sent to.
          For localhost development, use something like ngrok to get a publicly
          accessible URL for your local service. See https://docs.mergent.co for
          more info.
      headers:
        docs: |
          The headers that will accompany any Task's HTTP request. For
          example, you can use this to set Content-Type to "application/json"
          or "application/octet-stream".
        type: optional<map<string, unknown>>
      body:
        docs: The HTTP request body as a string.
        type: optional<string>

  created_at:
    type: string
    docs: >-
      The [ISO 8601
      timestamp](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations)
      representing when the object was created.

  Error:
    properties:
      message:
        docs: A human-readable message providing more details about the error(s).
        type: optional<string>
      param:
        docs: >-
          If the error is parameter-specific, the parameter related to the
          error.
        type: optional<string>
      errors:
        docs: >-
          If multiple errors occured (e.g., with param validation), the list of
          errors that occured.
        type: optional<list<Error>>

service:
  auth: false
  base-path: ""
  endpoints:
    getTasks:
      path: /tasks
      method: GET
      auth: true
      display-name: Get Tasks
      response:
        docs: OK
        type: list<Task>
      errors: []

    postTasks:
      path: /tasks
      method: POST
      auth: true
      display-name: Create Task
      request:
        body:
          type: TaskNew
      response:
        docs: Created
        type: Task
      errors:
        - ConflictError
        - UnprocessableEntityError

    getTasksTaskId:
      path: /tasks/{task_id}
      method: GET
      auth: true
      path-parameters:
        task_id:
          docs: Task ID
          type: id
      display-name: Get Task
      response:
        docs: OK
        type: Task
      errors:
        - NotFoundError

    patchTasksTaskId:
      path: /tasks/{task_id}
      method: PATCH
      auth: true
      path-parameters:
        task_id:
          docs: Task ID
          type: id
      display-name: Update Task
      request:
        body:
          type: Task
      response:
        docs: OK
        type: Task
      errors:
        - NotFoundError
        - ConflictError
        - UnprocessableEntityError

    deleteTasksTaskId:
      path: /tasks/{task_id}
      method: DELETE
      auth: true
      path-parameters:
        task_id:
          docs: Task ID
          type: id
      display-name: Delete Task
      errors:
        - NotFoundError

    postTasksTaskIdRun:
      path: /tasks/{task_id}/run
      method: POST
      auth: true
      docs: Reschedules a queued Task to be run immediately.
      path-parameters:
        task_id:
          docs: Task ID
          type: id
      display-name: Run Task
      response:
        docs: OK
        type: Task
      errors:
        - NotFoundError
        - ConflictError

    postTasksBatchCreate:
      path: /tasks/batch-create
      method: POST
      auth: true
      docs: |
        A maximum of 100 Tasks are accepted per request.
        This operation is atomic: it will succeed for all Tasks or fail for all
        Tasks; there is no partial success.
        This endpoint is in beta and may change at any time without notice.
      display-name: Batch Create Tasks (Beta)
      request:
        body:
          type: list<TaskNew>
      response:
        docs: Created
        type: list<Task>
      errors:
        - NotFoundError
        - ConflictError
        - ContentTooLargeError
        - UnprocessableEntityError

    postTasksBatchDelete:
      path: /tasks/batch-delete
      method: POST
      auth: true
      docs: |
        A maximum of 100 Task IDs are accepted per request.
        This operation is atomic: it will succeed for all Tasks or fail for all
        Tasks; there is no partial success.
        This endpoint is in beta and may change at any time without notice.
      display-name: Batch Delete Tasks (Beta)
      request:
        body:
          type: list<id>
      errors:
        - NotFoundError
        - ContentTooLargeError

    getSchedules:
      path: /schedules
      method: GET
      auth: true
      display-name: Get Schedules
      response:
        docs: OK
        type: list<Schedule>
      errors: []

    postSchedules:
      path: /schedules
      method: POST
      auth: true
      display-name: Create Schedule
      request:
        name: ScheduleNew
        body:
          properties: {}
          extends:
            - Schedule
      response:
        docs: OK
        type: Schedule
      errors:
        - UnprocessableEntityError

    getSchedulesScheduleId:
      path: /schedules/{schedule_id}
      method: GET
      auth: true
      path-parameters:
        schedule_id:
          docs: Schedule ID
          type: id
      display-name: Get Schedule
      response:
        docs: OK
        type: Schedule
      errors:
        - NotFoundError

    patchSchedulesScheduleId:
      path: /schedules/{schedule_id}
      method: PATCH
      auth: true
      path-parameters:
        schedule_id:
          docs: Schedule ID
          type: id
      display-name: Update Schedule
      request:
        body:
          type: Schedule
      response:
        docs: OK
        type: Schedule
      errors:
        - NotFoundError
        - UnprocessableEntityError

    deleteSchedulesScheduleId:
      path: /schedules/{schedule_id}
      method: DELETE
      auth: true
      path-parameters:
        schedule_id:
          docs: Schedule ID
          type: id
      display-name: Delete Schedule
      errors:
        - NotFoundError

    getSchedulesScheduleIdTasks:
      path: /schedules/{schedule_id}/tasks
      method: GET
      auth: true
      path-parameters:
        schedule_id:
          docs: Schedule ID
          type: id
      display-name: Get Schedule Tasks
      response:
        docs: OK
        type: list<Task>
      errors:
        - NotFoundError

errors:
  NotFoundError:
    status-code: 404
    type: Error

  ConflictError:
    status-code: 409
    type: Error

  ContentTooLargeError:
    status-code: 413
    type: Error

  UnprocessableEntityError:
    status-code: 422
    type: Error
