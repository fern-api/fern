// This file was auto-generated by Fern from our API Definition.

package client

import (
	context "context"
	fixtures "github.com/fern-api/fern-go/internal/testdata/sdk/mergent/fixtures"
	core "github.com/fern-api/fern-go/internal/testdata/sdk/mergent/fixtures/core"
	internal "github.com/fern-api/fern-go/internal/testdata/sdk/mergent/fixtures/internal"
	option "github.com/fern-api/fern-go/internal/testdata/sdk/mergent/fixtures/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

func (c *Client) GetTasks(
	ctx context.Context,
	opts ...option.RequestOption,
) ([]*fixtures.Task, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.mergent.co/v2",
	)
	endpointURL := baseURL + "/tasks"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response []*fixtures.Task
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

func (c *Client) PostTasks(
	ctx context.Context,
	request *fixtures.TaskNew,
	opts ...option.RequestOption,
) (*fixtures.Task, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.mergent.co/v2",
	)
	endpointURL := baseURL + "/tasks"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		409: func(apiError *core.APIError) error {
			return &fixtures.ConflictError{
				APIError: apiError,
			}
		},
		422: func(apiError *core.APIError) error {
			return &fixtures.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}

	var response *fixtures.Task
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

func (c *Client) GetTasksTaskId(
	ctx context.Context,
	// Task ID
	taskId fixtures.Id,
	opts ...option.RequestOption,
) (*fixtures.Task, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.mergent.co/v2",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/tasks/%v",
		taskId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &fixtures.NotFoundError{
				APIError: apiError,
			}
		},
	}

	var response *fixtures.Task
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

func (c *Client) PatchTasksTaskId(
	ctx context.Context,
	// Task ID
	taskId fixtures.Id,
	request *fixtures.Task,
	opts ...option.RequestOption,
) (*fixtures.Task, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.mergent.co/v2",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/tasks/%v",
		taskId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &fixtures.NotFoundError{
				APIError: apiError,
			}
		},
		409: func(apiError *core.APIError) error {
			return &fixtures.ConflictError{
				APIError: apiError,
			}
		},
		422: func(apiError *core.APIError) error {
			return &fixtures.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}

	var response *fixtures.Task
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPatch,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

func (c *Client) DeleteTasksTaskId(
	ctx context.Context,
	// Task ID
	taskId fixtures.Id,
	opts ...option.RequestOption,
) error {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.mergent.co/v2",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/tasks/%v",
		taskId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &fixtures.NotFoundError{
				APIError: apiError,
			}
		},
	}

	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return err
	}
	return nil
}

// Reschedules a queued Task to be run immediately.
func (c *Client) PostTasksTaskIdRun(
	ctx context.Context,
	// Task ID
	taskId fixtures.Id,
	opts ...option.RequestOption,
) (*fixtures.Task, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.mergent.co/v2",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/tasks/%v/run",
		taskId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &fixtures.NotFoundError{
				APIError: apiError,
			}
		},
		409: func(apiError *core.APIError) error {
			return &fixtures.ConflictError{
				APIError: apiError,
			}
		},
	}

	var response *fixtures.Task
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// A maximum of 100 Tasks are accepted per request.
// This operation is atomic: it will succeed for all Tasks or fail for all
// Tasks; there is no partial success.
// This endpoint is in beta and may change at any time without notice.
func (c *Client) PostTasksBatchCreate(
	ctx context.Context,
	request []*fixtures.TaskNew,
	opts ...option.RequestOption,
) ([]*fixtures.Task, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.mergent.co/v2",
	)
	endpointURL := baseURL + "/tasks/batch-create"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &fixtures.NotFoundError{
				APIError: apiError,
			}
		},
		409: func(apiError *core.APIError) error {
			return &fixtures.ConflictError{
				APIError: apiError,
			}
		},
		413: func(apiError *core.APIError) error {
			return &fixtures.ContentTooLargeError{
				APIError: apiError,
			}
		},
		422: func(apiError *core.APIError) error {
			return &fixtures.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}

	var response []*fixtures.Task
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// A maximum of 100 Task IDs are accepted per request.
// This operation is atomic: it will succeed for all Tasks or fail for all
// Tasks; there is no partial success.
// This endpoint is in beta and may change at any time without notice.
func (c *Client) PostTasksBatchDelete(
	ctx context.Context,
	request []fixtures.Id,
	opts ...option.RequestOption,
) error {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.mergent.co/v2",
	)
	endpointURL := baseURL + "/tasks/batch-delete"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &fixtures.NotFoundError{
				APIError: apiError,
			}
		},
		413: func(apiError *core.APIError) error {
			return &fixtures.ContentTooLargeError{
				APIError: apiError,
			}
		},
	}

	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return err
	}
	return nil
}

func (c *Client) GetSchedules(
	ctx context.Context,
	opts ...option.RequestOption,
) ([]*fixtures.Schedule, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.mergent.co/v2",
	)
	endpointURL := baseURL + "/schedules"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)

	var response []*fixtures.Schedule
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

func (c *Client) PostSchedules(
	ctx context.Context,
	request *fixtures.ScheduleNew,
	opts ...option.RequestOption,
) (*fixtures.Schedule, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.mergent.co/v2",
	)
	endpointURL := baseURL + "/schedules"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		422: func(apiError *core.APIError) error {
			return &fixtures.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}

	var response *fixtures.Schedule
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

func (c *Client) GetSchedulesScheduleId(
	ctx context.Context,
	// Schedule ID
	scheduleId fixtures.Id,
	opts ...option.RequestOption,
) (*fixtures.Schedule, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.mergent.co/v2",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/schedules/%v",
		scheduleId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &fixtures.NotFoundError{
				APIError: apiError,
			}
		},
	}

	var response *fixtures.Schedule
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

func (c *Client) PatchSchedulesScheduleId(
	ctx context.Context,
	// Schedule ID
	scheduleId fixtures.Id,
	request *fixtures.Schedule,
	opts ...option.RequestOption,
) (*fixtures.Schedule, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.mergent.co/v2",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/schedules/%v",
		scheduleId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &fixtures.NotFoundError{
				APIError: apiError,
			}
		},
		422: func(apiError *core.APIError) error {
			return &fixtures.UnprocessableEntityError{
				APIError: apiError,
			}
		},
	}

	var response *fixtures.Schedule
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPatch,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

func (c *Client) DeleteSchedulesScheduleId(
	ctx context.Context,
	// Schedule ID
	scheduleId fixtures.Id,
	opts ...option.RequestOption,
) error {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.mergent.co/v2",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/schedules/%v",
		scheduleId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &fixtures.NotFoundError{
				APIError: apiError,
			}
		},
	}

	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return err
	}
	return nil
}

func (c *Client) GetSchedulesScheduleIdTasks(
	ctx context.Context,
	// Schedule ID
	scheduleId fixtures.Id,
	opts ...option.RequestOption,
) ([]*fixtures.Task, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"https://api.mergent.co/v2",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/schedules/%v/tasks",
		scheduleId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		404: func(apiError *core.APIError) error {
			return &fixtures.NotFoundError{
				APIError: apiError,
			}
		},
	}

	var response []*fixtures.Task
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
