// This file was auto-generated by Fern from our API Definition.

package upload

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	fixtures "github.com/fern-api/fern-go/internal/testdata/sdk/bytes/fixtures"
	core "github.com/fern-api/fern-go/internal/testdata/sdk/bytes/fixtures/core"
	internal "github.com/fern-api/fern-go/internal/testdata/sdk/bytes/fixtures/internal"
	option "github.com/fern-api/fern-go/internal/testdata/sdk/bytes/fixtures/option"
	io "io"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

func (c *Client) Upload(
	ctx context.Context,
	id string,
	request []byte,
	opts ...option.RequestOption,
) (bool, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/upload/%v",
		id,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/custom-format")
	requestBuffer := bytes.NewBuffer(request)

	var response bool
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         requestBuffer,
			Response:        &response,
		},
	); err != nil {
		return false, err
	}
	return response, nil
}

func (c *Client) UploadOptional(
	ctx context.Context,
	id string,
	request []byte,
	opts ...option.RequestOption,
) (bool, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/upload/optional/%v",
		id,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/custom-format")
	var requestBuffer io.Reader
	if request != nil {
		requestBuffer = bytes.NewBuffer(request)
	}

	var response bool
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         requestBuffer,
			Response:        &response,
		},
	); err != nil {
		return false, err
	}
	return response, nil
}

func (c *Client) UploadWithHeader(
	ctx context.Context,
	id string,
	request *fixtures.UploadWithHeaderRequest,
	opts ...option.RequestOption,
) (bool, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/upload_with_header/%v",
		id,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Add("X-Upload-File-Size", fmt.Sprintf("%v", request.XUploadFileSize))
	headers.Set("Content-Type", "application/custom-format")
	requestBuffer := bytes.NewBuffer(request.Body)

	var response bool
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         requestBuffer,
			Response:        &response,
		},
	); err != nil {
		return false, err
	}
	return response, nil
}

func (c *Client) UploadOptionalWithHeader(
	ctx context.Context,
	id string,
	request *fixtures.UploadOptionalWithHeaderRequest,
	opts ...option.RequestOption,
) (bool, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/upload_with_header/optional/%v",
		id,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Add("X-Upload-File-Size", fmt.Sprintf("%v", request.XUploadFileSize))
	headers.Set("Content-Type", "application/custom-format")
	var requestBuffer io.Reader
	if request.Body != nil {
		requestBuffer = bytes.NewBuffer(request.Body)
	}

	var response bool
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         requestBuffer,
			Response:        &response,
		},
	); err != nil {
		return false, err
	}
	return response, nil
}
