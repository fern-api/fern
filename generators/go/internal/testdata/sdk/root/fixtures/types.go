// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/fern-api/fern-go/internal/testdata/sdk/root/fixtures/internal"
)

type Bar struct {
	Id      *Id      `json:"id,omitempty" url:"id,omitempty"`
	Name    *string  `json:"name,omitempty" url:"name,omitempty"`
	List    *string  `json:"list,omitempty" url:"list,omitempty"`
	Type    *FooType `json:"type,omitempty" url:"type,omitempty"`
	Request *Request `json:"request,omitempty" url:"request,omitempty"`
	Delay   *string  `json:"delay,omitempty" url:"delay,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *Bar) GetId() *Id {
	if b == nil {
		return nil
	}
	return b.Id
}

func (b *Bar) GetName() *string {
	if b == nil {
		return nil
	}
	return b.Name
}

func (b *Bar) GetList() *string {
	if b == nil {
		return nil
	}
	return b.List
}

func (b *Bar) GetType() *FooType {
	if b == nil {
		return nil
	}
	return b.Type
}

func (b *Bar) GetRequest() *Request {
	if b == nil {
		return nil
	}
	return b.Request
}

func (b *Bar) GetDelay() *string {
	if b == nil {
		return nil
	}
	return b.Delay
}

func (b *Bar) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *Bar) UnmarshalJSON(data []byte) error {
	type unmarshaler Bar
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = Bar(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *Bar) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type Baz struct {
	Id          *Id     `json:"id,omitempty" url:"id,omitempty"`
	Name        *string `json:"name,omitempty" url:"name,omitempty"`
	List        *string `json:"list,omitempty" url:"list,omitempty"`
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// This field has documentation, so it should be rendered
	// just above the field.
	// Note: Newlines should be preserved.
	HasDocs *string `json:"hasDocs,omitempty" url:"hasDocs,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *Baz) GetId() *Id {
	if b == nil {
		return nil
	}
	return b.Id
}

func (b *Baz) GetName() *string {
	if b == nil {
		return nil
	}
	return b.Name
}

func (b *Baz) GetList() *string {
	if b == nil {
		return nil
	}
	return b.List
}

func (b *Baz) GetDescription() *string {
	if b == nil {
		return nil
	}
	return b.Description
}

func (b *Baz) GetHasDocs() *string {
	if b == nil {
		return nil
	}
	return b.HasDocs
}

func (b *Baz) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *Baz) UnmarshalJSON(data []byte) error {
	type unmarshaler Baz
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = Baz(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *Baz) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type Error struct {
	Message   *string  `json:"message,omitempty" url:"message,omitempty"`
	Recursive []*Error `json:"recursive,omitempty" url:"recursive,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *Error) GetMessage() *string {
	if e == nil {
		return nil
	}
	return e.Message
}

func (e *Error) GetRecursive() []*Error {
	if e == nil {
		return nil
	}
	return e.Recursive
}

func (e *Error) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *Error) UnmarshalJSON(data []byte) error {
	type unmarshaler Error
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = Error(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *Error) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type Foo struct {
	Id      *Id      `json:"id,omitempty" url:"id,omitempty"`
	Name    *string  `json:"name,omitempty" url:"name,omitempty"`
	List    *string  `json:"list,omitempty" url:"list,omitempty"`
	Type    *FooType `json:"type,omitempty" url:"type,omitempty"`
	Request *Request `json:"request,omitempty" url:"request,omitempty"`
	Delay   *string  `json:"delay,omitempty" url:"delay,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *Foo) GetId() *Id {
	if f == nil {
		return nil
	}
	return f.Id
}

func (f *Foo) GetName() *string {
	if f == nil {
		return nil
	}
	return f.Name
}

func (f *Foo) GetList() *string {
	if f == nil {
		return nil
	}
	return f.List
}

func (f *Foo) GetType() *FooType {
	if f == nil {
		return nil
	}
	return f.Type
}

func (f *Foo) GetRequest() *Request {
	if f == nil {
		return nil
	}
	return f.Request
}

func (f *Foo) GetDelay() *string {
	if f == nil {
		return nil
	}
	return f.Delay
}

func (f *Foo) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *Foo) UnmarshalJSON(data []byte) error {
	type unmarshaler Foo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = Foo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *Foo) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FooType string

const (
	FooTypeOne   FooType = "one"
	FooTypeTwo   FooType = "two"
	FooTypeThree FooType = "three"
	FooTypeFour  FooType = "four"
)

func NewFooTypeFromString(s string) (FooType, error) {
	switch s {
	case "one":
		return FooTypeOne, nil
	case "two":
		return FooTypeTwo, nil
	case "three":
		return FooTypeThree, nil
	case "four":
		return FooTypeFour, nil
	}
	var t FooType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FooType) Ptr() *FooType {
	return &f
}

type Request struct {
	Url      string                 `json:"url" url:"url"`
	Headers  map[string]interface{} `json:"headers,omitempty" url:"headers,omitempty"`
	Body     *string                `json:"body,omitempty" url:"body,omitempty"`
	Platform *string                `json:"platform,omitempty" url:"platform,omitempty"`
	Unknown  interface{}            `json:"unknown,omitempty" url:"unknown,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *Request) GetUrl() string {
	if r == nil {
		return ""
	}
	return r.Url
}

func (r *Request) GetHeaders() map[string]interface{} {
	if r == nil {
		return nil
	}
	return r.Headers
}

func (r *Request) GetBody() *string {
	if r == nil {
		return nil
	}
	return r.Body
}

func (r *Request) GetUnknown() interface{} {
	if r == nil {
		return nil
	}
	return r.Unknown
}

func (r *Request) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *Request) UnmarshalJSON(data []byte) error {
	type unmarshaler Request
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = Request(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *Request) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type Id = string
