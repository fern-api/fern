// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/fern-api/fern-go/internal/testdata/model/undiscriminated/fixtures/core"
	time "time"
)

type AnotherUnion struct {
	typeName          string
	String            string
	fernStringLiteral string
	Foo               *Foo
}

func NewAnotherUnionFromString(value string) *AnotherUnion {
	return &AnotherUnion{typeName: "string", String: value}
}

func NewAnotherUnionWithFernStringLiteral() *AnotherUnion {
	return &AnotherUnion{typeName: "fernStringLiteral", fernStringLiteral: "fern"}
}

func NewAnotherUnionFromFoo(value *Foo) *AnotherUnion {
	return &AnotherUnion{typeName: "foo", Foo: value}
}

func (a *AnotherUnion) FernStringLiteral() string {
	return a.fernStringLiteral
}

func (a *AnotherUnion) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	var valueFernStringLiteral string
	if err := json.Unmarshal(data, &valueFernStringLiteral); err == nil {
		if valueFernStringLiteral == "fern" {
			a.typeName = "fernStringLiteral"
			a.fernStringLiteral = valueFernStringLiteral
			return nil
		}
	}
	valueFoo := new(Foo)
	if err := json.Unmarshal(data, &valueFoo); err == nil {
		a.typeName = "foo"
		a.Foo = valueFoo
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AnotherUnion) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "fernStringLiteral":
		return json.Marshal("fern")
	case "foo":
		return json.Marshal(a.Foo)
	}
}

type AnotherUnionVisitor interface {
	VisitString(string) error
	VisitFernStringLiteral(string) error
	VisitFoo(*Foo) error
}

func (a *AnotherUnion) Accept(visitor AnotherUnionVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return visitor.VisitString(a.String)
	case "fernStringLiteral":
		return visitor.VisitFernStringLiteral(a.fernStringLiteral)
	case "foo":
		return visitor.VisitFoo(a.Foo)
	}
}

type Bar struct {
	Name string `json:"name" url:"name"`
}

func (b *Bar) String() string {
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type Baz struct {
	Id string `json:"id" url:"id"`
}

func (b *Baz) String() string {
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type Foo struct {
	Name string `json:"name" url:"name"`
}

func (f *Foo) String() string {
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type Union struct {
	typeName             string
	Foo                  *Foo
	Bar                  *Bar
	Baz                  *Baz
	String               string
	IntegerOptional      *int
	StringBooleanMap     map[string]bool
	StringList           []string
	StringListList       [][]string
	DoubleSet            []float64
	fernStringLiteral    string
	anotherStringLiteral string
}

func NewUnionFromFoo(value *Foo) *Union {
	return &Union{typeName: "foo", Foo: value}
}

func NewUnionFromBar(value *Bar) *Union {
	return &Union{typeName: "bar", Bar: value}
}

func NewUnionFromBaz(value *Baz) *Union {
	return &Union{typeName: "baz", Baz: value}
}

func NewUnionFromString(value string) *Union {
	return &Union{typeName: "string", String: value}
}

func NewUnionFromIntegerOptional(value *int) *Union {
	return &Union{typeName: "integerOptional", IntegerOptional: value}
}

func NewUnionFromStringBooleanMap(value map[string]bool) *Union {
	return &Union{typeName: "stringBooleanMap", StringBooleanMap: value}
}

func NewUnionFromStringList(value []string) *Union {
	return &Union{typeName: "stringList", StringList: value}
}

func NewUnionFromStringListList(value [][]string) *Union {
	return &Union{typeName: "stringListList", StringListList: value}
}

func NewUnionFromDoubleSet(value []float64) *Union {
	return &Union{typeName: "doubleSet", DoubleSet: value}
}

func NewUnionWithFernStringLiteral() *Union {
	return &Union{typeName: "fernStringLiteral", fernStringLiteral: "fern"}
}

func NewUnionWithAnotherStringLiteral() *Union {
	return &Union{typeName: "anotherStringLiteral", anotherStringLiteral: "another"}
}

func (u *Union) FernStringLiteral() string {
	return u.fernStringLiteral
}

func (u *Union) AnotherStringLiteral() string {
	return u.anotherStringLiteral
}

func (u *Union) UnmarshalJSON(data []byte) error {
	valueFoo := new(Foo)
	if err := json.Unmarshal(data, &valueFoo); err == nil {
		u.typeName = "foo"
		u.Foo = valueFoo
		return nil
	}
	valueBar := new(Bar)
	if err := json.Unmarshal(data, &valueBar); err == nil {
		u.typeName = "bar"
		u.Bar = valueBar
		return nil
	}
	valueBaz := new(Baz)
	if err := json.Unmarshal(data, &valueBaz); err == nil {
		u.typeName = "baz"
		u.Baz = valueBaz
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		u.typeName = "string"
		u.String = valueString
		return nil
	}
	var valueIntegerOptional *int
	if err := json.Unmarshal(data, &valueIntegerOptional); err == nil {
		u.typeName = "integerOptional"
		u.IntegerOptional = valueIntegerOptional
		return nil
	}
	var valueStringBooleanMap map[string]bool
	if err := json.Unmarshal(data, &valueStringBooleanMap); err == nil {
		u.typeName = "stringBooleanMap"
		u.StringBooleanMap = valueStringBooleanMap
		return nil
	}
	var valueStringList []string
	if err := json.Unmarshal(data, &valueStringList); err == nil {
		u.typeName = "stringList"
		u.StringList = valueStringList
		return nil
	}
	var valueStringListList [][]string
	if err := json.Unmarshal(data, &valueStringListList); err == nil {
		u.typeName = "stringListList"
		u.StringListList = valueStringListList
		return nil
	}
	var valueDoubleSet []float64
	if err := json.Unmarshal(data, &valueDoubleSet); err == nil {
		u.typeName = "doubleSet"
		u.DoubleSet = valueDoubleSet
		return nil
	}
	var valueFernStringLiteral string
	if err := json.Unmarshal(data, &valueFernStringLiteral); err == nil {
		if valueFernStringLiteral == "fern" {
			u.typeName = "fernStringLiteral"
			u.fernStringLiteral = valueFernStringLiteral
			return nil
		}
	}
	var valueAnotherStringLiteral string
	if err := json.Unmarshal(data, &valueAnotherStringLiteral); err == nil {
		if valueAnotherStringLiteral == "another" {
			u.typeName = "anotherStringLiteral"
			u.anotherStringLiteral = valueAnotherStringLiteral
			return nil
		}
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u Union) MarshalJSON() ([]byte, error) {
	switch u.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "foo":
		return json.Marshal(u.Foo)
	case "bar":
		return json.Marshal(u.Bar)
	case "baz":
		return json.Marshal(u.Baz)
	case "string":
		return json.Marshal(u.String)
	case "integerOptional":
		return json.Marshal(u.IntegerOptional)
	case "stringBooleanMap":
		return json.Marshal(u.StringBooleanMap)
	case "stringList":
		return json.Marshal(u.StringList)
	case "stringListList":
		return json.Marshal(u.StringListList)
	case "doubleSet":
		return json.Marshal(u.DoubleSet)
	case "fernStringLiteral":
		return json.Marshal("fern")
	case "anotherStringLiteral":
		return json.Marshal("another")
	}
}

type UnionVisitor interface {
	VisitFoo(*Foo) error
	VisitBar(*Bar) error
	VisitBaz(*Baz) error
	VisitString(string) error
	VisitIntegerOptional(*int) error
	VisitStringBooleanMap(map[string]bool) error
	VisitStringList([]string) error
	VisitStringListList([][]string) error
	VisitDoubleSet([]float64) error
	VisitFernStringLiteral(string) error
	VisitAnotherStringLiteral(string) error
}

func (u *Union) Accept(visitor UnionVisitor) error {
	switch u.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "foo":
		return visitor.VisitFoo(u.Foo)
	case "bar":
		return visitor.VisitBar(u.Bar)
	case "baz":
		return visitor.VisitBaz(u.Baz)
	case "string":
		return visitor.VisitString(u.String)
	case "integerOptional":
		return visitor.VisitIntegerOptional(u.IntegerOptional)
	case "stringBooleanMap":
		return visitor.VisitStringBooleanMap(u.StringBooleanMap)
	case "stringList":
		return visitor.VisitStringList(u.StringList)
	case "stringListList":
		return visitor.VisitStringListList(u.StringListList)
	case "doubleSet":
		return visitor.VisitDoubleSet(u.DoubleSet)
	case "fernStringLiteral":
		return visitor.VisitFernStringLiteral(u.fernStringLiteral)
	case "anotherStringLiteral":
		return visitor.VisitAnotherStringLiteral(u.anotherStringLiteral)
	}
}

type UnionWithLiteral struct {
	typeName          string
	fernStringLiteral string
	String            string
}

func NewUnionWithLiteralWithFernStringLiteral() *UnionWithLiteral {
	return &UnionWithLiteral{typeName: "fernStringLiteral", fernStringLiteral: "fern"}
}

func NewUnionWithLiteralFromString(value string) *UnionWithLiteral {
	return &UnionWithLiteral{typeName: "string", String: value}
}

func (u *UnionWithLiteral) FernStringLiteral() string {
	return u.fernStringLiteral
}

func (u *UnionWithLiteral) UnmarshalJSON(data []byte) error {
	var valueFernStringLiteral string
	if err := json.Unmarshal(data, &valueFernStringLiteral); err == nil {
		if valueFernStringLiteral == "fern" {
			u.typeName = "fernStringLiteral"
			u.fernStringLiteral = valueFernStringLiteral
			return nil
		}
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		u.typeName = "string"
		u.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UnionWithLiteral) MarshalJSON() ([]byte, error) {
	switch u.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "fernStringLiteral":
		return json.Marshal("fern")
	case "string":
		return json.Marshal(u.String)
	}
}

type UnionWithLiteralVisitor interface {
	VisitFernStringLiteral(string) error
	VisitString(string) error
}

func (u *UnionWithLiteral) Accept(visitor UnionWithLiteralVisitor) error {
	switch u.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "fernStringLiteral":
		return visitor.VisitFernStringLiteral(u.fernStringLiteral)
	case "string":
		return visitor.VisitString(u.String)
	}
}

type UnionWithOptionalTime struct {
	typeName         string
	DateOptional     *time.Time
	DateTimeOptional *time.Time
}

func NewUnionWithOptionalTimeFromDateOptional(value *time.Time) *UnionWithOptionalTime {
	return &UnionWithOptionalTime{typeName: "dateOptional", DateOptional: value}
}

func NewUnionWithOptionalTimeFromDateTimeOptional(value *time.Time) *UnionWithOptionalTime {
	return &UnionWithOptionalTime{typeName: "dateTimeOptional", DateTimeOptional: value}
}

func (u *UnionWithOptionalTime) UnmarshalJSON(data []byte) error {
	var valueDateOptional *core.Date
	if err := json.Unmarshal(data, &valueDateOptional); err == nil {
		u.typeName = "dateOptional"
		u.DateOptional = valueDateOptional.TimePtr()
		return nil
	}
	var valueDateTimeOptional *core.DateTime
	if err := json.Unmarshal(data, &valueDateTimeOptional); err == nil {
		u.typeName = "dateTimeOptional"
		u.DateTimeOptional = valueDateTimeOptional.TimePtr()
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UnionWithOptionalTime) MarshalJSON() ([]byte, error) {
	switch u.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "dateOptional":
		return json.Marshal(core.NewOptionalDate(u.DateOptional))
	case "dateTimeOptional":
		return json.Marshal(core.NewOptionalDateTime(u.DateTimeOptional))
	}
}

type UnionWithOptionalTimeVisitor interface {
	VisitDateOptional(*time.Time) error
	VisitDateTimeOptional(*time.Time) error
}

func (u *UnionWithOptionalTime) Accept(visitor UnionWithOptionalTimeVisitor) error {
	switch u.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "dateOptional":
		return visitor.VisitDateOptional(u.DateOptional)
	case "dateTimeOptional":
		return visitor.VisitDateTimeOptional(u.DateTimeOptional)
	}
}

type UnionWithTime struct {
	typeName         string
	Integer          int
	Date             time.Time
	DateTime         time.Time
	DateOptional     *time.Time
	DateTimeOptional *time.Time
}

func NewUnionWithTimeFromInteger(value int) *UnionWithTime {
	return &UnionWithTime{typeName: "integer", Integer: value}
}

func NewUnionWithTimeFromDate(value time.Time) *UnionWithTime {
	return &UnionWithTime{typeName: "date", Date: value}
}

func NewUnionWithTimeFromDateTime(value time.Time) *UnionWithTime {
	return &UnionWithTime{typeName: "dateTime", DateTime: value}
}

func NewUnionWithTimeFromDateOptional(value *time.Time) *UnionWithTime {
	return &UnionWithTime{typeName: "dateOptional", DateOptional: value}
}

func NewUnionWithTimeFromDateTimeOptional(value *time.Time) *UnionWithTime {
	return &UnionWithTime{typeName: "dateTimeOptional", DateTimeOptional: value}
}

func (u *UnionWithTime) UnmarshalJSON(data []byte) error {
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		u.typeName = "integer"
		u.Integer = valueInteger
		return nil
	}
	var valueDate *core.Date
	if err := json.Unmarshal(data, &valueDate); err == nil {
		u.typeName = "date"
		u.Date = valueDate.Time()
		return nil
	}
	var valueDateTime *core.DateTime
	if err := json.Unmarshal(data, &valueDateTime); err == nil {
		u.typeName = "dateTime"
		u.DateTime = valueDateTime.Time()
		return nil
	}
	var valueDateOptional *core.Date
	if err := json.Unmarshal(data, &valueDateOptional); err == nil {
		u.typeName = "dateOptional"
		u.DateOptional = valueDateOptional.TimePtr()
		return nil
	}
	var valueDateTimeOptional *core.DateTime
	if err := json.Unmarshal(data, &valueDateTimeOptional); err == nil {
		u.typeName = "dateTimeOptional"
		u.DateTimeOptional = valueDateTimeOptional.TimePtr()
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UnionWithTime) MarshalJSON() ([]byte, error) {
	switch u.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "integer":
		return json.Marshal(u.Integer)
	case "date":
		return json.Marshal(core.NewDate(u.Date))
	case "dateTime":
		return json.Marshal(core.NewDateTime(u.DateTime))
	case "dateOptional":
		return json.Marshal(core.NewOptionalDate(u.DateOptional))
	case "dateTimeOptional":
		return json.Marshal(core.NewOptionalDateTime(u.DateTimeOptional))
	}
}

type UnionWithTimeVisitor interface {
	VisitInteger(int) error
	VisitDate(time.Time) error
	VisitDateTime(time.Time) error
	VisitDateOptional(*time.Time) error
	VisitDateTimeOptional(*time.Time) error
}

func (u *UnionWithTime) Accept(visitor UnionWithTimeVisitor) error {
	switch u.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "integer":
		return visitor.VisitInteger(u.Integer)
	case "date":
		return visitor.VisitDate(u.Date)
	case "dateTime":
		return visitor.VisitDateTime(u.DateTime)
	case "dateOptional":
		return visitor.VisitDateOptional(u.DateOptional)
	case "dateTimeOptional":
		return visitor.VisitDateTimeOptional(u.DateTimeOptional)
	}
}
