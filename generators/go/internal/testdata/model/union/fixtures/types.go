// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/fern-api/fern-go/internal/testdata/model/union/fixtures/core"
	time "time"
)

type Bar struct {
	Name string `json:"name" url:"name"`
}

func (b *Bar) String() string {
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type Baz struct {
	extended string
}

func (b *Baz) Extended() string {
	return b.extended
}

func (b *Baz) UnmarshalJSON(data []byte) error {
	type embed Baz
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = Baz(unmarshaler.embed)
	b.extended = "extended"
	return nil
}

func (b *Baz) MarshalJSON() ([]byte, error) {
	type embed Baz
	var marshaler = struct {
		embed
		Extended string `json:"extended"`
	}{
		embed:    embed(*b),
		Extended: "extended",
	}
	return json.Marshal(marshaler)
}

func (b *Baz) String() string {
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type Foo struct {
	Name string `json:"name" url:"name"`
}

func (f *Foo) String() string {
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// This is a simple union.
type Union struct {
	Type string
	Foo  *Foo
	Bar  *Bar
}

func NewUnionFromFoo(value *Foo) *Union {
	return &Union{Type: "foo", Foo: value}
}

func NewUnionFromBar(value *Bar) *Union {
	return &Union{Type: "bar", Bar: value}
}

func (u *Union) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	u.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "foo":
		var valueUnmarshaler struct {
			Foo *Foo `json:"foo,omitempty"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		u.Foo = valueUnmarshaler.Foo
	case "bar":
		var valueUnmarshaler struct {
			Bar *Bar `json:"bar,omitempty"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		u.Bar = valueUnmarshaler.Bar
	}
	return nil
}

func (u Union) MarshalJSON() ([]byte, error) {
	switch u.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", u.Type, u)
	case "foo":
		var marshaler = struct {
			Type string `json:"type"`
			Foo  *Foo   `json:"foo,omitempty"`
		}{
			Type: u.Type,
			Foo:  u.Foo,
		}
		return json.Marshal(marshaler)
	case "bar":
		var marshaler = struct {
			Type string `json:"type"`
			Bar  *Bar   `json:"bar,omitempty"`
		}{
			Type: u.Type,
			Bar:  u.Bar,
		}
		return json.Marshal(marshaler)
	}
}

type UnionVisitor interface {
	VisitFoo(*Foo) error
	VisitBar(*Bar) error
}

func (u *Union) Accept(visitor UnionVisitor) error {
	switch u.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", u.Type, u)
	case "foo":
		return visitor.VisitFoo(u.Foo)
	case "bar":
		return visitor.VisitBar(u.Bar)
	}
}

type UnionWithDiscriminant struct {
	Type string
	// This is a Foo field.
	Foo *Foo
	Bar *Bar
}

func NewUnionWithDiscriminantFromFoo(value *Foo) *UnionWithDiscriminant {
	return &UnionWithDiscriminant{Type: "foo", Foo: value}
}

func NewUnionWithDiscriminantFromBar(value *Bar) *UnionWithDiscriminant {
	return &UnionWithDiscriminant{Type: "bar", Bar: value}
}

func (u *UnionWithDiscriminant) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"_type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	u.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "foo":
		var valueUnmarshaler struct {
			Foo *Foo `json:"foo,omitempty"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		u.Foo = valueUnmarshaler.Foo
	case "bar":
		var valueUnmarshaler struct {
			Bar *Bar `json:"bar,omitempty"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		u.Bar = valueUnmarshaler.Bar
	}
	return nil
}

func (u UnionWithDiscriminant) MarshalJSON() ([]byte, error) {
	switch u.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", u.Type, u)
	case "foo":
		var marshaler = struct {
			Type string `json:"_type"`
			Foo  *Foo   `json:"foo,omitempty"`
		}{
			Type: u.Type,
			Foo:  u.Foo,
		}
		return json.Marshal(marshaler)
	case "bar":
		var marshaler = struct {
			Type string `json:"_type"`
			Bar  *Bar   `json:"bar,omitempty"`
		}{
			Type: u.Type,
			Bar:  u.Bar,
		}
		return json.Marshal(marshaler)
	}
}

type UnionWithDiscriminantVisitor interface {
	VisitFoo(*Foo) error
	VisitBar(*Bar) error
}

func (u *UnionWithDiscriminant) Accept(visitor UnionWithDiscriminantVisitor) error {
	switch u.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", u.Type, u)
	case "foo":
		return visitor.VisitFoo(u.Foo)
	case "bar":
		return visitor.VisitBar(u.Bar)
	}
}

type UnionWithLiteral struct {
	Type     string
	fern     string
	extended string
	base     string
}

func NewUnionWithLiteralWithFern() *UnionWithLiteral {
	return &UnionWithLiteral{Type: "fern", fern: "fern"}
}

func (u *UnionWithLiteral) Extended() string {
	return u.extended
}

func (u *UnionWithLiteral) Base() string {
	return u.base
}

func (u *UnionWithLiteral) Fern() string {
	return u.fern
}

func (u *UnionWithLiteral) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	u.Type = unmarshaler.Type
	u.extended = "extended"
	u.base = "base"
	switch unmarshaler.Type {
	case "fern":
		u.fern = "fern"
	}
	return nil
}

func (u UnionWithLiteral) MarshalJSON() ([]byte, error) {
	switch u.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", u.Type, u)
	case "fern":
		var marshaler = struct {
			Type     string `json:"type"`
			Extended string `json:"extended"`
			Base     string `json:"base"`
			Fern     string `json:"value,omitempty"`
		}{
			Type:     u.Type,
			Extended: "extended",
			Base:     "base",
			Fern:     "fern",
		}
		return json.Marshal(marshaler)
	}
}

type UnionWithLiteralVisitor interface {
	VisitFern(string) error
}

func (u *UnionWithLiteral) Accept(visitor UnionWithLiteralVisitor) error {
	switch u.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", u.Type, u)
	case "fern":
		return visitor.VisitFern(u.fern)
	}
}

type UnionWithOptionalTime struct {
	Type     string
	Date     *time.Time
	Dateimte *time.Time
}

func NewUnionWithOptionalTimeFromDate(value *time.Time) *UnionWithOptionalTime {
	return &UnionWithOptionalTime{Type: "date", Date: value}
}

func NewUnionWithOptionalTimeFromDateimte(value *time.Time) *UnionWithOptionalTime {
	return &UnionWithOptionalTime{Type: "dateimte", Dateimte: value}
}

func (u *UnionWithOptionalTime) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	u.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "date":
		var valueUnmarshaler struct {
			Date *core.Date `json:"value,omitempty" format:"date"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		u.Date = valueUnmarshaler.Date.TimePtr()
	case "dateimte":
		var valueUnmarshaler struct {
			Dateimte *core.DateTime `json:"value,omitempty"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		u.Dateimte = valueUnmarshaler.Dateimte.TimePtr()
	}
	return nil
}

func (u UnionWithOptionalTime) MarshalJSON() ([]byte, error) {
	switch u.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", u.Type, u)
	case "date":
		var marshaler = struct {
			Type string     `json:"type"`
			Date *core.Date `json:"value,omitempty" format:"date"`
		}{
			Type: u.Type,
			Date: core.NewOptionalDate(u.Date),
		}
		return json.Marshal(marshaler)
	case "dateimte":
		var marshaler = struct {
			Type     string         `json:"type"`
			Dateimte *core.DateTime `json:"value,omitempty"`
		}{
			Type:     u.Type,
			Dateimte: core.NewOptionalDateTime(u.Dateimte),
		}
		return json.Marshal(marshaler)
	}
}

type UnionWithOptionalTimeVisitor interface {
	VisitDate(*time.Time) error
	VisitDateimte(*time.Time) error
}

func (u *UnionWithOptionalTime) Accept(visitor UnionWithOptionalTimeVisitor) error {
	switch u.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", u.Type, u)
	case "date":
		return visitor.VisitDate(u.Date)
	case "dateimte":
		return visitor.VisitDateimte(u.Dateimte)
	}
}

type UnionWithPrimitive struct {
	Type    string
	Boolean bool
	String  string
}

func NewUnionWithPrimitiveFromBoolean(value bool) *UnionWithPrimitive {
	return &UnionWithPrimitive{Type: "boolean", Boolean: value}
}

func NewUnionWithPrimitiveFromString(value string) *UnionWithPrimitive {
	return &UnionWithPrimitive{Type: "string", String: value}
}

func (u *UnionWithPrimitive) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	u.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "boolean":
		var valueUnmarshaler struct {
			Boolean bool `json:"value"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		u.Boolean = valueUnmarshaler.Boolean
	case "string":
		var valueUnmarshaler struct {
			String string `json:"value"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		u.String = valueUnmarshaler.String
	}
	return nil
}

func (u UnionWithPrimitive) MarshalJSON() ([]byte, error) {
	switch u.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", u.Type, u)
	case "boolean":
		var marshaler = struct {
			Type    string `json:"type"`
			Boolean bool   `json:"value"`
		}{
			Type:    u.Type,
			Boolean: u.Boolean,
		}
		return json.Marshal(marshaler)
	case "string":
		var marshaler = struct {
			Type   string `json:"type"`
			String string `json:"value"`
		}{
			Type:   u.Type,
			String: u.String,
		}
		return json.Marshal(marshaler)
	}
}

type UnionWithPrimitiveVisitor interface {
	VisitBoolean(bool) error
	VisitString(string) error
}

func (u *UnionWithPrimitive) Accept(visitor UnionWithPrimitiveVisitor) error {
	switch u.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", u.Type, u)
	case "boolean":
		return visitor.VisitBoolean(u.Boolean)
	case "string":
		return visitor.VisitString(u.String)
	}
}

type UnionWithTime struct {
	Type     string
	Value    int
	Date     time.Time
	Datetime time.Time
}

func NewUnionWithTimeFromValue(value int) *UnionWithTime {
	return &UnionWithTime{Type: "value", Value: value}
}

func NewUnionWithTimeFromDate(value time.Time) *UnionWithTime {
	return &UnionWithTime{Type: "date", Date: value}
}

func NewUnionWithTimeFromDatetime(value time.Time) *UnionWithTime {
	return &UnionWithTime{Type: "datetime", Datetime: value}
}

func (u *UnionWithTime) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	u.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "value":
		var valueUnmarshaler struct {
			Value int `json:"value"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		u.Value = valueUnmarshaler.Value
	case "date":
		var valueUnmarshaler struct {
			Date *core.Date `json:"value" format:"date"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		u.Date = valueUnmarshaler.Date.Time()
	case "datetime":
		var valueUnmarshaler struct {
			Datetime *core.DateTime `json:"value"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		u.Datetime = valueUnmarshaler.Datetime.Time()
	}
	return nil
}

func (u UnionWithTime) MarshalJSON() ([]byte, error) {
	switch u.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", u.Type, u)
	case "value":
		var marshaler = struct {
			Type  string `json:"type"`
			Value int    `json:"value"`
		}{
			Type:  u.Type,
			Value: u.Value,
		}
		return json.Marshal(marshaler)
	case "date":
		var marshaler = struct {
			Type string     `json:"type"`
			Date *core.Date `json:"value" format:"date"`
		}{
			Type: u.Type,
			Date: core.NewDate(u.Date),
		}
		return json.Marshal(marshaler)
	case "datetime":
		var marshaler = struct {
			Type     string         `json:"type"`
			Datetime *core.DateTime `json:"value"`
		}{
			Type:     u.Type,
			Datetime: core.NewDateTime(u.Datetime),
		}
		return json.Marshal(marshaler)
	}
}

type UnionWithTimeVisitor interface {
	VisitValue(int) error
	VisitDate(time.Time) error
	VisitDatetime(time.Time) error
}

func (u *UnionWithTime) Accept(visitor UnionWithTimeVisitor) error {
	switch u.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", u.Type, u)
	case "value":
		return visitor.VisitValue(u.Value)
	case "date":
		return visitor.VisitDate(u.Date)
	case "datetime":
		return visitor.VisitDatetime(u.Datetime)
	}
}

type UnionWithUnknown struct {
	Type    string
	Foo     *Foo
	Unknown interface{}
}

func NewUnionWithUnknownFromFoo(value *Foo) *UnionWithUnknown {
	return &UnionWithUnknown{Type: "foo", Foo: value}
}

func NewUnionWithUnknownFromUnknown(value interface{}) *UnionWithUnknown {
	return &UnionWithUnknown{Type: "unknown", Unknown: value}
}

func (u *UnionWithUnknown) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	u.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "foo":
		value := new(Foo)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		u.Foo = value
	case "unknown":
		value := make(map[string]interface{})
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		u.Unknown = value
	}
	return nil
}

func (u UnionWithUnknown) MarshalJSON() ([]byte, error) {
	switch u.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", u.Type, u)
	case "foo":
		var marshaler = struct {
			Type string `json:"type"`
			*Foo
		}{
			Type: u.Type,
			Foo:  u.Foo,
		}
		return json.Marshal(marshaler)
	case "unknown":
		var marshaler = struct {
			Type    string      `json:"type"`
			Unknown interface{} `json:"unknown,omitempty"`
		}{
			Type:    u.Type,
			Unknown: u.Unknown,
		}
		return json.Marshal(marshaler)
	}
}

type UnionWithUnknownVisitor interface {
	VisitFoo(*Foo) error
	VisitUnknown(interface{}) error
}

func (u *UnionWithUnknown) Accept(visitor UnionWithUnknownVisitor) error {
	switch u.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", u.Type, u)
	case "foo":
		return visitor.VisitFoo(u.Foo)
	case "unknown":
		return visitor.VisitUnknown(u.Unknown)
	}
}

type UnionWithoutKey struct {
	Type string
	Foo  *Foo
	// This is a bar field.
	Bar *Bar
}

func NewUnionWithoutKeyFromFoo(value *Foo) *UnionWithoutKey {
	return &UnionWithoutKey{Type: "foo", Foo: value}
}

func NewUnionWithoutKeyFromBar(value *Bar) *UnionWithoutKey {
	return &UnionWithoutKey{Type: "bar", Bar: value}
}

func (u *UnionWithoutKey) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	u.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "foo":
		value := new(Foo)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		u.Foo = value
	case "bar":
		value := new(Bar)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		u.Bar = value
	}
	return nil
}

func (u UnionWithoutKey) MarshalJSON() ([]byte, error) {
	switch u.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", u.Type, u)
	case "foo":
		var marshaler = struct {
			Type string `json:"type"`
			*Foo
		}{
			Type: u.Type,
			Foo:  u.Foo,
		}
		return json.Marshal(marshaler)
	case "bar":
		var marshaler = struct {
			Type string `json:"type"`
			*Bar
		}{
			Type: u.Type,
			Bar:  u.Bar,
		}
		return json.Marshal(marshaler)
	}
}

type UnionWithoutKeyVisitor interface {
	VisitFoo(*Foo) error
	VisitBar(*Bar) error
}

func (u *UnionWithoutKey) Accept(visitor UnionWithoutKeyVisitor) error {
	switch u.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", u.Type, u)
	case "foo":
		return visitor.VisitFoo(u.Foo)
	case "bar":
		return visitor.VisitBar(u.Bar)
	}
}
