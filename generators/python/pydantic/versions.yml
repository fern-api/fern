# For unreleased changes, use unreleased.yml
- version: 1.4.8
  irVersion: 57
  changelogEntry:
    - type: internal
      summary: |
        Update the IR to v57.

- version: 1.4.7
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        The snippet writer now correctly handles base64 strings.

- version: 1.4.7-rc1
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Pydantic utilities now correctly handles cases where you have a Pydantic model, with a list of pydantic models as a field, where those models have literals.
        Effectively, `deep_union_pydantic_objects` now handles lists of objects and merges them appropriately.

- version: 1.4.7-rc0
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        When leveraging the `include_union_utils` configuration flag, the Pydantic models will no longer include transitive dependencies within
        `update_forward_ref` calls, since these should not be necessary. This effectively scopes back the changes introduced in 4.0.0-rc5, which included
        changes to improve circular reference handling in Pydantic models.

- version: 1.4.6
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: Default new pydantic alias flag to true as it is a breaking change.

- version: 1.4.5
  irVersion: 53
  changelogEntry:
    - type: chore
      summary: Remove Pydantic field aliases and leverage an internal representation
      fixed:
        - >-
          Pydantic field aliases are removed and replaced with an internal
          representation. This allows for more robust handling of field aliases
          and prevents issues with Pydantic V2 and mypy.

          Previously, you'd have for V1 and V2 compatibility in Pydantic, you'd want to conditionally apply the config class within
          the base model, however this would lead to mypy errors when filling out a model with it's field alias. To solve this, We
          used the deprecated `class Config`, regardless of the Pydantic version to satisfy mypy, which lead to warnings in the console.

          Now, we've removed the field aliases and replaced them with an internal representation, which allows us to avoid pydantic config altogether.


          If you'd like to disable this feature, you can set `use_pydantic_field_aliases` to `true` in your configuration, which will preserve the existing behavior.

          To maintain parity with pre-3.11.0 behavior, update the flag to `true`:

            ```yaml
            - name: fernapi/fern-pydantic-model
              version: 1.4.5
              config:
                use_pydantic_field_aliases: true
            ```

        - >-
          Pydantic V2 `.dict` calls are updated to be back to pre-3.10.4 logic.
          This is fix a regression where nested literals were being omitted due to the Pydantic V2 serializers not respecting the recursive .dict logic, as
          Pydantic V2 shells out `model_dump` calls to Rust library and serializers, as opposed to recursively calling `model_dump`.

          It is expected that performance will not be degraded given the Rust-based serializers have optimized performance, compared to the Pydantic V1 .dict approach.

- version: 1.4.4
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: When not leveraging mock integration tests, still run pytest over everything, not a specific directory.

# ===== Migrated versions =====

- version: 1.4.3
  createdAt: "2024-08-16"
  changelogEntry:
    - type: fix
      summary: >-
        Upgrade intermediate representation dependency to safely parse null
        unknown types.
  irVersion: 53

- version: 1.4.2
  createdAt: "2024-08-14"
  changelogEntry:
    - type: chore
      summary: Improve performance of Pydantic `.dict` calls
      changed:
        - >-
          `.dict` performance is improved, consolidating to a single call to
          Pydantic's `.dict` instead of 2 in attempts to remove unset optional
          values.
  irVersion: 53

- version: 1.4.1
  createdAt: "2024-08-13"
  changelogEntry:
    - type: fix
      summary: Unions with utils now update forward refs again
  irVersion: 53

- version: 1.4.0
  createdAt: "2024-08-06"
  changelogEntry:
    - type: feat
      summary: Exposes `package_name` configuration option
      added:
        - >-
          Exposes `package_name` configuration option for pydantic models. This
          field controls the package from which users will import your client,
          for example, the following config would allow users to use: `from
          my_custom_package import Client`
  irVersion: 53

- version: 1.3.1
  createdAt: "2024-08-05"
  changelogEntry:
    - type: fix
      summary: Auto-completion for unions leveraging union utils now works as expected.
      fixed:
        - >-
          The root type for unions with visitors now has it's parent typed
          correctly. This allows auto-complete to work once again on the union
          when it's nested within other pydantic models.
  irVersion: 53

- version: 1.3.0
  createdAt: "2024-08-05"
  changelogEntry:
    - type: feat
      summary: Generated code now respects the pydantic version configuration flag.
      changed:
        - >-
          The generated server code now respects the pydantic version flag,
          generating V1 only code and V2 only code if specified. If not, the
          server is generated as it is today, with compatibility for BOTH
          Pydantic versions. This cleans up the generated code, and brings back
          features liked wrapped aliases and custom root validators for V1-only
          servers.
  irVersion: 53

- version: 1.2.0
  createdAt: "2024-08-04"
  changelogEntry:
    - type: internal
      summary: Generator code now uses Pydantic V2, no changes to generated code.
      changed:
        - >-
          The generator has now been upgraded to use Pydantic V2 internally.
          Note that there is no change to the generated code, however by
          leveraging Pydantic V2 you should notice an improvement in `fern
          generate` times.
  irVersion: 53

- version: 1.1.0-rc0
  createdAt: "2024-07-31"
  changelogEntry:
    - type: internal
      summary: The generator now consumes IRv53.
  irVersion: 53

- version: 1.0.0-rc0
  createdAt: "2024-07-16"
  changelogEntry:
    - type: break
      summary: >-
        The generated models now support Pydantic V2 outright, it no longer uses
        `pydantic.v1` models.
      changed:
        - >-
          The generated models now support Pydantic V2 outright, it no longer
          uses `pydantic.v1` models.
        - >-
          Public fields previously prefixed with `_` are now prefixed with `f_`
          (Pydantic V2 does not allow for `_` prefixes on public fields and
          Python does not allow for a numeric prefix)
      removed:
        - wrapped aliases outside of Pydantic V1
        - custom root validators outside of Pydantic V1
  irVersion: 49

- version: 0.10.0-rc0
  createdAt: "2024-06-24"
  changelogEntry:
    - type: internal
      summary: The generator now consumes IRV49.
  irVersion: 49

- version: 0.9.1
  createdAt: "2024-06-19"
  changelogEntry:
    - type: internal
      summary: The generator now consumes IRV46.
  irVersion: 46

- version: 0.9.0
  createdAt: "2024-05-09"
  changelogEntry:
    - type: internal
      summary: Release Generator
  irVersion: 39

- version: 0.9.0-rc1
  createdAt: "2024-04-22"
  changelogEntry:
    - type: internal
      summary: The generator now consumes IRV39.
  irVersion: 39

- version: 0.9.0-rc0
  createdAt: "2024-01-29"
  changelogEntry:
    - type: internal
      summary: The generator now consumes IRV38.
    - type: break
      summary: The generator no longer supports Python 3.7
      removed:
        - The generator no longer supports Python 3.7
        - The `backports` dependency has been removed
  irVersion: 38

- version: 0.8.1-rc0
  createdAt: "2024-01-29"
  changelogEntry:
    - type: fix
      summary: >-
        Increase allowed recursion depth to account for highly nested and
        complex examples.
      fixed:
        - >-
          Recursion depth is increased to allow for highly nested and complex
          examples, this is a temporary solution while the example datamodel is
          further refined.
  irVersion: 31

- version: 0.8.0-rc0
  createdAt: "2024-01-28"
  changelogEntry:
    - type: fix
      summary: The SDK now better handles cyclical references.
      fixed:
        - >-
          The SDK now better handles cyclical references. In particular,
          cyclical references are tracked for undiscriminated unions, and
          update_forward_refs is always called with object references.
  irVersion: 31

- version: 0.7.7
  createdAt: "2024-01-21"
  changelogEntry:
    - type: internal
      summary: Initialize the changelog
  irVersion: 31
