# For unreleased changes, use unreleased.yml
- version: 1.6.3
  irVersion: 57
  changelogEntry:
    - type: internal
      summary: |
        Update the IR to v57.

- version: 1.6.2
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Support Pydantic v1_on_v2 for all variants of use_pydantic_field_aliases.

- version: 1.6.1
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Create a new release to incorporate pydantic v1 on v2.

- version: 1.6.0
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        The FastAPI generator now supports a new mode for pydantic model generation,
        to use pydantic v1 on v2 versions. 

        ```yml generators.yml
        generators: 
          server: 
            - name: fernapi/fern-fastapi-server
              version: 1.6.0
              config: 
                pydantic: 
                  version: "v1_on_v2"
        ````

- version: 1.5.0
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        The snippet writer now correctly handles base64 strings.

- version: 1.5.0-rc6
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        A missing configuration now respects the pydantic version configuration, as such, the base model for discriminated unions generated with utilities
        now respects which version of Pydantic you are generating for.

- version: 1.5.0-rc5
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Pydantic utilities now correctly handles cases where you have a Pydantic model, with a list of pydantic models as a field, where those models have literals.
        Effectively, `deep_union_pydantic_objects` now handles lists of objects and merges them appropriately.

- version: 1.5.0-rc4
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Use of `IS_PYDANTIC_V2` flag is now only used within universal base models (`pydantic_utilities.py`) and if pydantic version compatibility is not specified
        or set to `Both`. Concretely, this means that if your configuration specifies a version for Pydantic, then your generated code will respect that version, and
        generate the code for that specific version of Pydantic, as opposed to always generating code compatible with both versions of Pydantic.
      fixed:
        - |
          `exclude_unset` is now respected when passed in as an option to a model's `.dict` call.

- version: 1.5.0-rc3
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: Dependencies are sorted within the generated code to ensure that even without running isort the imports are deterministically sorted.

- version: 1.5.0-rc2
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        The FastAPI server generation now adds model configuration back onto the union utils root model a change that was made when Pydantic V2 support was rolled out, believing
        it was not allowed in Pydantic V2.

- version: 1.5.0-rc1
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        When leveraging the `include_union_utils` configuration flag, the Pydantic models will no longer include transitive dependencies within
        `update_forward_ref` calls, since these should not be necessary. This effectively scopes back the changes introduced in 1.5.0-rc0, which included
        changes to improve circular reference handling in Pydantic models.

- version: 1.5.0-rc0
  irVersion: 53
  changelogEntry:
    - type: feat
      summary: The FastAPI server generation now supports endpoints with file upload as well as endpoints with file download.

- version: 1.4.9
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: Default on `pydantic aliases`
      fixed:
        - The previous version of the FastAPI generator defaulted on a setting
          which removed pydantic aliases. Because FastAPI calls into the
          pydantic serializers itself, the generated models must have
          aliases.

- version: 1.4.8
  irVersion: 53
  changelogEntry:
    - type: chore
      summary: Remove Pydantic field aliases and leverage an internal representation
      fixed:
        - >-
          Pydantic field aliases are removed and replaced with an internal
          representation. This allows for more robust handling of field aliases
          and prevents issues with Pydantic V2 and mypy.

          Previously, you'd have for V1 and V2 compatibility in Pydantic, you'd want to conditionally apply the config class within
          the base model, however this would lead to mypy errors when filling out a model with it's field alias. To solve this, We
          used the deprecated `class Config`, regardless of the Pydantic version to satisfy mypy, which lead to warnings in the console.

          Now, we've removed the field aliases and replaced them with an internal representation, which allows us to avoid pydantic config altogether.

          If you'd like to disable this feature, you can set `use_pydantic_field_aliases` to `true` in your configuration, which will preserve the existing behavior.

          To maintain parity with pre-3.11.0 behavior, update the flag to `true`:

            ```yaml
            - name: fernapi/fern-fastapi-server
              version: 1.4.8
              config:
                pydantic_config:
                  use_pydantic_field_aliases: true
            ```

        - >-
          Pydantic V2 `.dict` calls are updated to be back to pre-3.10.4 logic.
          This is fix a regression where nested literals were being omitted due to the Pydantic V2 serializers not respecting the recursive .dict logic, as
          Pydantic V2 shells out `model_dump` calls to Rust library and serializers, as opposed to recursively calling `model_dump`.

          It is expected that performance will not be degraded given the Rust-based serializers have optimized performance, compared to the Pydantic V1 .dict approach.

- version: 1.4.7
  irVersion: 53
  changelogEntry:
    - type: chore
      summary: Release 1.4.7

- version: 1.4.6
  createdAt: "2024-08-16"
  changelogEntry:
    - type: internal
      summary: >-
        Upgrade intermediate representation dependency to safely parse null
        unknown types.
  irVersion: 53

- version: 1.4.5
  createdAt: "2024-08-14"
  changelogEntry:
    - type: chore
      summary: Improve performance of Pydantic `.dict` calls
      changed:
        - >-
          `.dict` performance is improved, consolidating to a single call to
          Pydantic's `.dict` instead of 2 in attempts to remove unset optional
          values.
  irVersion: 53

- version: 1.4.4
  createdAt: "2024-08-13"
  changelogEntry:
    - type: fix
      summary: Unions with utils now update forward refs again
  irVersion: 53

- version: 1.4.3
  createdAt: "2024-08-09"
  changelogEntry:
    - type: fix
      summary: >-
        Add back kwargs to validator decorators, a regression introduced in
        1.0.0.
  irVersion: 53

- version: 1.4.2
  createdAt: "2024-08-09"
  changelogEntry:
    - type: fix
      summary: >-
        Remove functools.wrap from validator decorators, a regression introduced
        in 1.0.0.
  irVersion: 53

- version: 1.4.1
  createdAt: "2024-08-05"
  changelogEntry:
    - type: fix
      summary: >-
        The root type for unions with visitors now has it's parent typed
        correctly. This allows auto-complete to work once again on the union
        when it's nested within other pydantic models.
  irVersion: 53

- version: 1.4.0
  createdAt: "2024-08-05"
  changelogEntry:
    - type: fix
      summary: Auto-completion for unions leveraging union utils now works as expected.
      changed:
        - >-
          The root type for unions with visitors now has it's parent typed
          correctly. This allows auto-complete to work once again on the union
          when it's nested within other pydantic models.
      fixed:
        - >-
          Partial classes created for validation now appropriately ignore the
          universal root model and only create partials off true extended
          classes.
  irVersion: 53

- version: 1.3.0
  createdAt: "2024-08-04"
  changelogEntry:
    - type: internal
      summary: Generator code now uses Pydantic V2, no changes to generated code.
      changed:
        - >-
          The generator has now been upgraded to use Pydantic V2 internally.
          Note that there is no change to the generated code, however by
          leveraging Pydantic V2 you should notice an improvement in `fern
          generate` times.
  irVersion: 53

- version: 1.2.0
  createdAt: "2024-07-31"
  changelogEntry:
    - type: feat
      summary: >-
        The FastAPI `async_handlers` configuration now accepts a list of string
        or a boolean so that users can turn on async handlers for specific
        endpoints.
  irVersion: 53

- version: 1.1.0-rc0
  createdAt: "2024-07-31"
  changelogEntry:
    - type: internal
      summary: The generator now consumes IRv53.
  irVersion: 53

- version: 1.0.0-rc0
  createdAt: "2024-07-16"
  changelogEntry:
    - type: break
      summary: >-
        The generated models now support Pydantic V2 outright, it no longer uses
        `pydantic.v1` models.
      changed:
        - >-
          The generated server stubs now support Pydantic V2 outright, it no
          longer uses `pydantic.v1` models.
        - >-
          Public fields previously prefixed with `_` are now prefixed with `f_`
          (Pydantic V2 does not allow for `_` prefixes on public fields and
          Python does not allow for a numeric prefix)
      removed:
        - wrapped aliases outside of Pydantic V1
        - custom root validators outside of Pydantic V1
  irVersion: 49

- version: 0.11.1
  createdAt: "2024-07-10"
  changelogEntry:
    - type: fix
      summary: Expose the `use_str_enums` flag.
      fixed:
        - >-
          The generator now respects the `use_str_enums` flag, and defaults it
          to `False`.
  irVersion: 49

- version: 0.11.0
  createdAt: "2024-07-10"
  changelogEntry:
    - type: fix
      summary: Correctly sanitize parameter descriptions.
      fixed:
        - >-
          The generator now correctly sanitizes parameter descriptions.
          Previously it was duplicating strings.
  irVersion: 49

- version: 0.11.0-rc0
  createdAt: "2024-06-24"
  changelogEntry:
    - type: internal
      summary: The generator now consumes IRV49.
  irVersion: 49

- version: 0.10.1
  createdAt: "2024-06-19"
  changelogEntry:
    - type: internal
      summary: The generator now consumes IRV46.
  irVersion: 46

- version: 0.10.0
  createdAt: "2024-06-19"
  changelogEntry:
    - type: chore
      summary: Expose the `extra_fields` configuration.
  irVersion: 39

- version: 0.9.3
  createdAt: "2024-06-06"
  changelogEntry:
    - type: fix
      summary: >-
        Leveraged pydantic utilities are copied over for use within the FastAPI
        server.
  irVersion: 39

- version: 0.9.2
  createdAt: "2024-05-27"
  changelogEntry:
    - type: fix
      summary: Paths are no longer prefixed with double forward slashes.
  irVersion: 39

- version: 0.9.1
  createdAt: "2024-05-09"
  changelogEntry:
    - type: internal
      summary: Release Generator
  irVersion: 39

- version: 0.9.1-rc0
  createdAt: "2024-04-22"
  changelogEntry:
    - type: fix
      summary: >-
        Leveraged pydantic utilities are copied over for use within the FastAPI
        server.
  irVersion: 39

- version: 0.9.0-rc1
  createdAt: "2024-06-19"
  changelogEntry:
    - type: internal
      summary: The generator now consumes IRV39.
  irVersion: 39

- version: 0.9.0-rc0
  createdAt: "2024-01-29"
  changelogEntry:
    - type: internal
      summary: The generator now consumes IRV38.
    - type: break
      summary: The generator no longer supports Python 3.7
      removed:
        - The generator no longer supports Python 3.7
        - The `backports` dependency has been removed
  irVersion: 38

- version: 0.8.1-rc0
  createdAt: "2024-01-29"
  changelogEntry:
    - type: fix
      summary: >-
        Increase allowed recursion depth to account for highly nested and
        complex examples.
      fixed:
        - >-
          Recursion depth is increased to allow for highly nested and complex
          examples, this is a temporary solution while the example datamodel is
          further refined.
  irVersion: 31

- version: 0.8.0-rc0
  createdAt: "2024-01-28"
  changelogEntry:
    - type: fix
      summary: The SDK now better handles cyclical references.
      fixed:
        - >-
          The SDK now better handles cyclical references. In particular,
          cyclical references are tracked for undiscriminated unions, and
          update_forward_refs is always called with object references.
  irVersion: 31

- version: 0.7.7
  createdAt: "2024-01-21"
  changelogEntry:
    - type: internal
      summary: Initialize the changelog
  irVersion: 31
