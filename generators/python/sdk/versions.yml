# For unreleased changes, use unreleased.yml

- version: 4.3.11
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        pyproject.toml now has a `[project]` block making it Poetry v2 compatible. 

- version: 4.3.10
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Pagination correctly uses specified defaults to support custom schemes.

- version: 4.3.9
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Fix indentation in generated README.md sections to ensure proper formatting and readability.

- version: 4.3.8
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Include content-type headers when available as part of endpoint request generation.

- version: 4.3.7
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Update multipart endpoint generation to propertly omit optional body parameters.

- version: 4.3.6
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Fix README.md and reference.md generation.

- version: 4.3.5
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Update README.md snippet builder to omit invalid snippets during readme config generation.

- version: 4.3.4
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Update shared http_client.py to remove omitted entries during file upload requests.

- version: 4.3.3
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        The generator now writes the reference.md configuration correctly, using `.dict()` instead of `.json()`.
        
- version: 4.3.2
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        The generator will now correctly default to the configured global `default_bytes_stream_chunk_size` when the `request_options` parameter is not provided.
        
- version: 4.3.1
  irVersion: 53
  changelogEntry:
    - type: feat
      summary: |
        Requests for file download will now allow users to pass in a `chunk_size` option that allows them to receive chunks of a specific size
        from the resultant `iter_bytes` invocation on the response byte stream.

        Concretely, a user would leverage the following:
        ```python
        client.download(
          ...,
          request_options={
            "chunk_size": 1024    # 1MB
          }
        )
        ```

- version: 4.2.8
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        The snippet writer now correctly handles base64 strings.

- version: 4.2.7
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        The generated README will now have a section that links to the generated
        SDK Reference (in `reference.md`).

        ```md
        ## Reference

        A full reference for this library can be found [here](./reference.md).
        ```

- version: 4.2.7-rc4
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: Generated readmes now include the parameter name required for the request options parameter within the example snippets.

- version: 4.2.7-rc3
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Now, when sending Snippet Templates back to Fern, the generator will not try to coerce a potentially missing ID into the `api_definition_id` field.
        This, had been a cause of the error log `Failed to upload snippet templates to FDR, this is ok: one of the hex, bytes, bytes_le, fields, or int arguments must be given`.

- version: 4.2.7-rc2
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Pydantic utilities now correctly handles cases where you have a Pydantic model, with a list of pydantic models as a field, where those models have literals.
        Effectively, `deep_union_pydantic_objects` now handles lists of objects and merges them appropriately.

- version: 4.2.7-rc1
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        When leveraging the `include_union_utils` configuration flag, the Pydantic models will no longer include transitive dependencies within
        `update_forward_ref` calls, since these should not be necessary. This effectively scopes back the changes introduced in 4.0.0-rc5, which included
        changes to improve circular reference handling in Pydantic models.

- version: 4.2.7-rc0
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Dynamic header suppliers, as used within the OAuth provider are now invoked on every request, not just the first.
        This was a regression introduced within an earlier version that is now fixed. As a results of this fix, the `refresh_token` is now correctly refreshed.

- version: 4.2.6
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Serialization utilities (necessary when pydantic aliases are removed) now respects dictionaries as well.

- version: 4.2.5
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Parameters of file upload functions now default to OMIT, not None, so that the SDK appropriately
        filters out unset parameters, while still allowing for user specified None values.

- version: 4.2.4
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Datetime examples are generated correctly once again.
        The `pydantic_utilites` file is python 3.8 compatible.

- version: 4.2.3
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        The content type of file properties is now respected for multipart
        requests. For example, if you have a file property called `image` that has the
        content type `image/jpeg`, then it will be sent as:

        ```python
        "image": core.with_content_type(file=image, content_type="image/jpeg"),
        ````

- version: 4.2.2
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        The content type of non-file properties is now respected for multipart
        requests. For example, if you have a type called `metadata` that has the
        content type `application/json`, then it will be sent as:

        ```python
        "metadata": (None, json.dumps(jsonable_encoder(metadata)), "application/json"),
        ```

- version: 4.2.1
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        When the generator runs bash commands such as `poetry install` and there is a failure,
        now the `stderr` and `stdout` is logged to help improve user debugging.

- version: 4.2.0
  irVersion: 53
  changelogEntry:
    - type: feat
      summary: |
        Allow specifying arbitrary configuration to your packages `pyproject.toml` by adding a `pyproject_toml` block to your configuration
        whatever you include in this block will be added as-is to the `pyproject.toml` file. The config, as an example is:

        ```yaml
        config:
          pyproject_toml: |
            [tool.covcheck.group.unit.coverage]
            branch = 26.0
            line = 62.0

            [tool.covcheck.group.service.coverage]
            branch = 30.0
            line = 67.0
        ```

- version: 4.1.0
  irVersion: 53
  changelogEntry:
    - type: feat
      summary: |
        Allow specifying pip extras within your `pyproject.toml`. The following config:

        ```yaml
        config:
          extra_dev_dependencies:
            covcheck:
              version: "^0.4.3"
              extras: ["toml"]
        ```

        would add the following to your `pyproject.toml`:

        ```toml
        [tool.poetry.dev-dependencies]
        covcheck = { version = "^0.4.3", extras = ["toml"] }
        ```

- version: 4.0.0
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Generated tests that expect an empty result when they are of type `text` (not JSON) now appropriately expect an empty string instead of `None` for async functions as well.
        Version 3.3.4 fixed this for sync functions only, which was a bug.

- version: 4.0.0-rc9
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: All Pydantic V2 warnings have been resolved
      fixed:
        - json_encoders have been removed from Pydantic V2, and replaced with a `model_serializer` method.
        - additional model construction functions have been added when not leveraging pydantic field aliases to allow users to construct a model from JSOn without the need for dealiasing the object themselves.

- version: 4.0.0-rc8
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Pydantic models that call `update_forward_refs` on non-union circular reference dependencies now pass in `localns` for
        the current member, a field in Pydantic V1 that provides object contexts to models in the event objects are not fully rebuilt.

- version: 4.0.0-rc7
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        The generator now respects the old use_str_enums flag again, a regression was introduced where only the new flag `enum_type`
        was respected.

- version: 4.0.0-rc6
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Pydantic models now call update forward refs on non-uion circular references. This
        prevents runtime errors in certain cases where types self reference itself through
        a union.

- version: 4.0.0-rc5
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Pydantic models now call update forward refs on non-uion circular references. This
        prevents runtime errors in certain cases where types self reference itself through
        a union.

- version: 4.0.0-rc4
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Pydantic models now call update forward refs on non-uion circular references. This
        prevents runtime errors in certain cases where types self reference itself through
        a union.

- version: 4.0.0-rc3
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: |
        Pydantic models now call update forward refs on non-uion circular references. This
        prevents runtime errors in certain cases where types self reference itself through
        a union.

- version: 4.0.0-rc2
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: Update .dict calls in Pydantic V2 to be back to pre-3.10.4 logic for SDKs that continue using Pydantic aliases.

- version: 4.0.0-rc1
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: Update .dict calls in Pydantic V2 to be back to pre-3.10.4 logic.
      fixed:
        - >-
          Pydantic V2 `.dict` calls are updated to be back to pre-3.10.4 logic.
          This is fix a regression where nested literals were being omitted due to the Pydantic V2 serializers not respecting the recursive .dict logic, as
          Pydantic V2 shells out `model_dump` calls to Rust library and serializers, as opposed to recursively calling `model_dump`.

          It is expected that performance will not be degraded given the Rust-based serializers have optimized performance, compared to the Pydantic V1 .dict approach.

- version: 4.0.0-rc0
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: Rerelease 3.11.0-rc0 as a major version, with a configuration flag to disable the behavior (`use_pydantic_field_aliases`), defaulted to `true` to preserve existing behavior.
      fixed:
        - >-
          Rerelease 3.11.0-rc0 as a major version, with a configuration flag to
          disable the behavior (`use_pydantic_field_aliases`), defaulted to `false`
          to introduce the break on a major version.

          To maintain parity with pre-3.11.0 behavior, update the flag to `true`:

            ```yaml
            - name: fernapi/fern-python-sdk
              version: 4.0.0-rc0
              config:
                pydantic_config:
                  use_pydantic_field_aliases: true
            ```
    - type: internal
      summary: The generator now shares "as is" files with Pydantic and FastAPI generators.

- version: 3.11.0-rc0
  irVersion: 53
  changelogEntry:
    - type: chore
      summary: Remove Pydantic field aliases and leverage an internal representation.
      fixed:
        - >-
          Pydantic field aliases are removed and replaced with an internal
          representation. This allows for more robust handling of field aliases
          and prevents issues with Pydantic V2 and mypy.

          Previously, you'd have for V1 and V2 compatibility in Pydantic, you'd want to conditionally apply the config class within
          the base model, however this would lead to mypy errors when filling out a model with it's field alias. To solve this, We
          used the deprecated `class Config`, regardless of the Pydantic version to satisfy mypy, which lead to warnings in the console.

          Now, we've removed the field aliases and replaced them with an internal representation, which allows us to avoid pydantic config altogether.

- version: 3.10.8
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: Allow for fields prefixed with the name `model`, a silent break introduced in Pydantic V2.

- version: 3.10.7
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: When not leveraging mock integration tests, still run pytest over everything, not a specific directory.

# ===== Migrated versions =====

# TODO: It'd be great if we generated YAML schemas so people had validation on these files
- version: 3.10.6
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: Pagination utilities assume `""` is a terminal signal for pagination.
      fixed:
        - >-
          Cursor-based pagination also assumes `""` is a terminal signal for
          pagination, same as if the next cursor were `None`.
  # This field is optional and can be omitted outside of the backfilling usecase
  # here it will default to the day the record was written to the DB
  createdAt: "2024-08-16"

- version: 3.10.3
  createdAt: "2024-08-16"
  irVersion: 53
  changelogEntry:
    - type: fix
      summary: Upgrade intermediate representation dependency to safely parse null unknown types.

- version: 3.10.4
  createdAt: "2024-08-14"
  changelogEntry:
    - type: chore
      summary: Improve performance of Pydantic `.dict` calls
      changed:
        - "`.dict` performance is improved, consolidating to a single call to Pydantic's `.dict` instead of 2 in attempts to remove unset optional values."
  irVersion: 53

- version: 3.10.3
  createdAt: "2024-08-14"
  changelogEntry:
    - type: fix
      summary: Query encoding now appropriately takes arrays of deep objects into account.
  irVersion: 53

- version: 3.10.2
  createdAt: "2024-08-13"
  changelogEntry:
    - type: fix
      summary: Unions with utils now update forward refs again, a regression that was introduced in version 3.7.0
  irVersion: 53

- version: 3.10.1
  createdAt: "2024-08-13"
  changelogEntry:
    - type: fix
      summary: If there are no autogenerated examples present, the Python SDK generator no longer fails.
  irVersion: 53

- version: 3.10.0
  createdAt: "2024-08-09"
  changelogEntry:
    - type: feat
      summary: Introduce forward compatible Python enums
      added:
        - >-
          Adds a new flag to generate forward compatible Python enums, as opposed
          to leveraging raw string enums as literals. This works through addding
          an "_UNKNOWN" member to your enum set, the value of which is the raw
          value of the unrecognized enum.
  irVersion: 53

- version: 3.9.0
  createdAt: "2024-08-09"
  changelogEntry:
    - type: feat
      summary: Introduce Pythonic naming for discriminated union members through `union_naming` configuration flag.
      added:
        - >-
          A new configuration is introduced to make discriminated union member
          naming more Pythonic. With V1 union naming, member names change from
          `<UnionName>_<DiscriminantValue>` to `<DiscriminantValue><UnionName>`.
          Concretely, union members previously named `Chat_User` will now be named
          `UserChat` under the new configuration.
  irVersion: 53

- version: 3.8.0
  createdAt: "2024-08-09"
  changelogEntry:
    - type: chore
      summary: Generated SDKs now use ruff for linting and formatting instead of Black.
  irVersion: 53

- version: 3.7.0
  createdAt: "2024-08-08"
  changelogEntry:
    - type: chore
      summary: Python circular referencing types are more robust.
  irVersion: 53

- version: 3.6.0
  createdAt: "2024-08-08"
  changelogEntry:
    - type: feat
      summary: The generator now respects returning nested properties from the returned object
  irVersion: 53

- version: 3.5.1
  createdAt: "2024-08-05"
  changelogEntry:
    - type: fix
      summary: Auto-completion for unions leveraging union utils now works as expected.
      fixed:
        - >-
          The root type for unions with visitors now has it's parent typed
          correctly. This allows auto-complete to work once again on the union
          when it's nested within other pydantic models.
  irVersion: 53

- version: 3.5.0
  createdAt: "2024-08-05"
  changelogEntry:
    - type: chore
      summary: Generated code now respects the pydantic version configuration flag.
      changed:
        - >-
          Improvement: The generated SDK now respects the pydantic version flag,
          generating V1 only code and V2 only code if specified. If not, the SDK
          is generated as it is today, with compatibility for BOTH Pydantic
          versions. This cleans up the generated code, and brings back features
          liked wrapped aliases for V1-only SDKs.
  irVersion: 53

- version: 3.4.2
  createdAt: "2024-08-05"
  changelogEntry:
    - type: fix
      summary: The Python generator now instantiates `Any` types as `Optional[Any]` to be able to mitigate breaks in Pydantic V2.
  irVersion: 53

- version: 3.4.1
  createdAt: "2024-08-04"
  changelogEntry:
    - type: chore
      summary: Literal templates are generated if they are union members
  irVersion: 53

- version: 3.4.0
  createdAt: "2024-08-02"
  changelogEntry:
    - type: internal
      summary: Generator code now uses Pydantic V2, no changes to generated code.
      changed:
        - >-
          Internal: The SDK generator has now been upgraded to use Pydantic V2
          internally. Note that there is no change to the generated code, however
          by leveraging Pydantic V2 you should notice an improvement in `fern
          generate` times.
  irVersion: 53

- version: 3.3.4
  createdAt: "2024-08-02"
  changelogEntry:
    - type: chore
      summary: Address a number of issues within generated unit tests.
      changed:
        - >-
          Improvement: Aliased literals are also defaulted within Pydantic models,
          whereas previously only direct literals were defaulted.
        - >-
          Improvement: Snippets now provide optional literals in functions and
          models.
      fixed:
        - >-
          Generated tests that expect an empty result when they are of type `text`
          (not JSON) now appropriately expect an empty string instead of `None`.
  irVersion: 53

- version: 3.3.3
  createdAt: "2024-08-02"
  changelogEntry:
    - type: fix
      summary: The generator now allows you to extend aliased types (as long as they're objects).
  irVersion: 53

- version: 3.3.2
  createdAt: "2024-08-02"
  changelogEntry:
    - type: fix
      summary: Regression in readme generation introduced in 3.3.1
  irVersion: 53

- version: 3.3.1
  createdAt: "2024-08-02"
  changelogEntry:
    - type: fix
      summary: Generated READMEs now reference RequestOptions as TypedDicts correctly.
  irVersion: 53

- version: 3.3.0-rc1
  createdAt: "2024-08-01"
  changelogEntry:
    - type: fix
      summary: TypedDict snippets now include literals where available.
  irVersion: 53

- version: 3.3.0-rc0
  createdAt: "2024-07-31"
  changelogEntry:
    - type: internal
      summary: Upgrade to IR 53.1.0
      changed:
        - "Upgrade to IR 53.1.0"
        - The Python generator now creates snippet templates for undiscriminated unions.
  irVersion: 53

- version: 3.2.0-rc1
  createdAt: "2024-07-29"
  changelogEntry:
    - type: fix
      summary: The generated README now imports `ApiError` as if it were from outside the module.
  irVersion: 49

- version: 3.2.0-rc0
  createdAt: "2024-07-25"
  changelogEntry:
    - type: feat
      summary: The Python SDK can now be generated with TypedDicts as inputs.
      added:
        - >-
          The Python SDK can now be generated such that inputs to requests are
          TypedDicts, instead of Pydantic models. This allows for consumers of the
          SDK to continue to have type hinting and autocomplete, but not need to
          import new object types when creating requests.
  irVersion: 49

- version: 3.1.0-rc0
  createdAt: "2024-07-24"
  changelogEntry:
    - type: chore
      summary: The root client is now exported from the main `__init__.py`.
      changed:
        - >-
          Improvement: The root client users interact with is now exported from
          the main `__init__.py`, this allows users to access the client via `from
          my_sdk import my_sdk_client` as opposed to `from my_sdk.client import
          my_sdk_client`.
      removed:
        - >-
          Note this comes with an edge-case break. In the unlikely event you have
          a type that conflicts in naming with the exported root client, that type
          model is post-fixed with "Model". e.g. a type `Merge` in an SDK
          exporting a client `Merge` becomes `MergeModel`.
  irVersion: 49

- version: 3.0.0-rc2
  createdAt: "2024-07-24"
  changelogEntry:
    - type: fix
      summary: "`update_forward_refs` no longer raises errors, preserving original behavior, pre-3.x."
  irVersion: 49

- version: 3.0.0-rc1
  createdAt: "2024-07-23"
  changelogEntry:
    - type: fix
      summary: "`expected_types` within our test suite are now typed as `Tuple[typing.Any, typing.Any]`."
      fixed:
        - >-
          Sometimes mypy will error on the typing of `expected_types` within our
          test suite, despite them being labeled as `typing.Any`. This updates the
          types for tuples to `typing.Tuple[tying.Any, typing.Any]` to appease
          mypy.
  irVersion: 49

- version: 3.0.0-rc0
  createdAt: "2024-07-23"
  changelogEntry:
    - type: break
      summary: The generated models now support Pydantic V2 outright, it no longer uses `pydantic.v1` models.
      changed:
        - The generated models now support Pydantic V2 outright, it no longer uses `pydantic.v1` models.
        - Public fields previously prefixed with `_` are now prefixed with `f_` (Pydantic V2 does not allow for `_` prefixes on public fields and Python does not allow for a numeric prefix)
      removed:
        - wrapped aliases outside of Pydantic V1
        - custom root validators outside of Pydantic V1
  irVersion: 49

- version: 2.16.0
  createdAt: "2024-07-16"
  changelogEntry:
    - type: feat
      summary: The generated SDK now allows for specifying whether or not to generate `streaming` functions as overloaded functions or separate functions.
  irVersion: 49

- version: 2.15.6
  createdAt: "2024-07-17"
  changelogEntry:
    - type: fix
      summary: The generated python SDK now requires an environment be specified if a default is not provided.
  irVersion: 49

- version: 2.15.5
  createdAt: "2024-07-17"
  changelogEntry:
    - type: fix
      summary: The generated python SDK Oauth client now no longer checks for an expiry when getting the access token if an expiry field is not configured.
  irVersion: 49

- version: 2.15.4
  createdAt: "2024-07-10"
  changelogEntry:
    - type: fix
      summary: The generated python SDK now serializes bytes within JSON as a utf-8 encoded string.
  irVersion: 49

- version: 2.15.3
  createdAt: "2024-07-10"
  changelogEntry:
    - type: fix
      summary: The generated python SDK no longer runs into a recursion error during snippet generation.
  irVersion: 49

- version: 2.15.2
  createdAt: "2024-07-10"
  changelogEntry:
    - type: fix
      summary: The generated python SDK no longer treats `set` as a reserved word for method names.
  irVersion: 49

- version: 2.15.1
  createdAt: "2024-07-09"
  changelogEntry:
    - type: fix
      summary: The unchecked base model no longer coerces None to a type.
      fixed:
        - The unchecked base model no longer coerces None to a type.
        - >-
          The http client appropriately defaults empty fields within
          RequestOptions.
  irVersion: 49

- version: 2.15.0
  createdAt: "2024-07-03"
  changelogEntry:
    - type: feat
      summary: The generated python SDK now respects configured defaults from the API spec.
  irVersion: 49

- version: 2.14.1
  createdAt: "2024-07-01"
  changelogEntry:
    - type: fix
      summary: typing within the Sync and AsyncPagers is now correctly passed through to the BasePager.
      fixed:
        - >-
          Sync and AsyncPage now pass through the generic type to BasePage,
          allowing the use of `.items`, etc. to be appropriately typed within your
          type checking system.
  irVersion: 49

- version: 2.14.0
  createdAt: "2024-07-01"
  changelogEntry:
    - type: fix
      summary: The offset page now allows for the usage of 0 as a page start.
      fixed:
        - >-
          offset page now allows for the usage of 0 as a page start, previously
          the use of `page or 1` made Python coerce booleans and become 1,
          ignoring the user-provided 0.
  irVersion: 49

- version: 2.14.0-rc3
  createdAt: "2024-07-01"
  changelogEntry:
    - type: feat
      summary: Generated readmes now include an "advanced" section.
      changed:
        - >-
          Generated readmes now include an "advanced" section,
          outlining usage of retries, timeouts, error handling and usage of a
          custom client.
  irVersion: 49

- version: 2.14.0-rc2
  createdAt: "2024-07-01"
  changelogEntry:
    - type: chore
      summary: Async snippets now run the async function leveraging asyncio.run to be more copy-pastable.
  irVersion: 49

- version: 2.14.0-rc1
  createdAt: "2024-06-27"
  changelogEntry:
    - type: fix
      summary: The fix from 2.5.2 is now case-insentitive
      fixed:
        - >-
          the fix from 2.5.2 is now case-insentitive Recap of 2.5.2: `Fix: Support
          `list`SDK method names instead of defaulting to`list\_`.`
  irVersion: 49

- version: 2.14.0-rc0
  createdAt: "2024-06-26"
  changelogEntry:
    - type: feat
      summary: The Python SDK now generates an accompanying SDK reference (`reference.md`) for users to review the SDK methods at a glance within the SDK's GitHub repository.
  irVersion: 49

- version: 2.13.1-rc0
  createdAt: "2024-06-20"
  changelogEntry:
    - type: fix
      summary: The Python SDK now does not send additional properties via JSON or data if the request is leveraging the other field.
      fixed:
        - >-
          the Python SDK now does not send additional properties via JSON or data
          if the request is leveraging the other field.
      changed:
        - >-
          Improvement: the Python SDK now copies unit tests over to the generated
          SDK for additional unit testing (separate from wire-format testing).
  irVersion: 49

- version: 2.13.0-rc0
  createdAt: "2024-06-20"
  changelogEntry:
    - type: internal
      summary: The Python SDK generator is now upgraded to IR V49.
  irVersion: 49

- version: 2.12.0-rc0
  createdAt: "2024-06-25"
  changelogEntry:
    - type: feat
      summary: README generation now supports a section dedicated to streaming usage, as well as one for paginated endpoints.
      added:
        - >-
          Feature: README generation now supports a section dedicated to streaming
          usage, as well as one for paginated endpoints.
      changed:
        - "Improvement: Paginated endpoint snippets now show using an iterator:"
  irVersion: 49

- version: 2.11.0-rc0
  createdAt: "2024-06-25"
  changelogEntry:
    - type: chore
      summary: Snippet templates now support auth variables within the root client.
      changed:
        - >-
          Improvement: The SDK now produces templates for the root clients within
          snippet-template.json. This allows users of the Templates API to pass in
          data for the auth variables present within the root client.
  irVersion: 49

- version: 2.10.2
  createdAt: "2024-06-20"
  changelogEntry:
    - type: fix
      summary: The SDK now handles stream termination sequences like `[DONE]`.
      fixed:
        - >-
          The SDK now handles stream termination sequences like `[DONE]`. This is
          a typical way for LLM providers to communicate when the stream has
          ended.
  irVersion: 46

- version: 2.10.1
  createdAt: "2024-06-20"
  changelogEntry:
    - type: fix
      summary: Improve the SDK to not leak `JSONDecodeError` to SDK users. Instead, an `ApiError` will be thrown with the text content of the response.
  irVersion: 46

- version: 2.10.0
  createdAt: "2024-06-20"
  changelogEntry:
    - type: feat
      summary: Add support for higher quality `README.md` generation.
  irVersion: 46

- version: 2.9.10
  createdAt: "2024-06-20"
  changelogEntry:
    - type: fix
      summary: The generator now only specifies the readme location within pyproject.toml if one was successfully created.
  irVersion: 46

- version: 2.9.9
  createdAt: "2024-06-19"
  changelogEntry:
    - type: internal
      summary: The generator now consumes IRv46.
  irVersion: 46

- version: 2.9.8
  createdAt: "2024-06-18"
  changelogEntry:
    - type: chore
      summary: The python generator only adds a publish step in github actions if credentials are specified.
  irVersion: 39

- version: 2.9.7
  createdAt: "2024-06-12"
  changelogEntry:
    - type: fix
      summary: The unchecked base model stops special casing defaults and pydantic v2.
  irVersion: 39

- version: 2.9.6
  createdAt: "2024-06-11"
  changelogEntry:
    - type: fix
      summary: Offset based pagination is now 1-based, as opposed to 0 based
      fixed:
        - Offset based pagination is now 1-based, as opposed to 0 based
        - >-
          The HTTP client now passes in additional body properties from the
          request options, even if the body is empty (regression from the client
          migration in 2.8.0)
  irVersion: 39

- version: 2.9.5
  createdAt: "2024-06-10"
  changelogEntry:
    - type: fix
      summary: Unions with elements that specify no properties are generated correctly.
      fixed:
        - Unions with elements that specify no properties are generated correctly.
        - >-
          Unions with a single type now have a valid type alias (rather than an
          invalid `typing.Union`).
  irVersion: 39

- version: 2.9.4
  createdAt: "2024-06-07"
  changelogEntry:
    - type: fix
      summary: The unchecked base model now handles pulling the discriminant from a dict, not just a model/object.
  irVersion: 39

- version: 2.9.3
  createdAt: "2024-06-06"
  changelogEntry:
    - type: fix
      summary: Snippet templates for discrminated unions now specify the `template_input` property which is required to actually see snippets of instantiating discrminated unions.
  irVersion: 39

- version: 2.9.2
  createdAt: "2024-06-06"
  changelogEntry:
    - type: fix
      summary: downgrades mypy so we can run it over all our files without concern for their pydantic bug
      fixed:
        - >-
          downgrades mypy so we can run it over all our files without concern for
          their pydantic bug
        - adds typehint to the response variable
  irVersion: 39

- version: 2.9.1
  createdAt: "2024-06-06"
  changelogEntry:
    - type: fix
      summary: The SDK removes unset query parameters from requests (regression from the client migration in 2.8.0)
      fixed:
        - >-
          The SDK removes unset query parameters from requests (regression from
          the client migration in 2.8.0)
        - >-
          The SDK fixes it's type for `files` parameters to the http client
          (regression from the client migration in 2.8.0)
  irVersion: 39

- version: 2.9.0
  createdAt: "2024-06-05"
  changelogEntry:
    - type: fix
      summary: Snippets preserve trailing slashes
  irVersion: 39

- version: 2.9.0-rc1
  createdAt: "2024-06-05"
  changelogEntry:
    - type: fix
      summary: The new http client abstraction ensures a slash is postfixed to the baseurl
  irVersion: 39

- version: 2.9.0-rc0
  createdAt: "2024-06-04"
  changelogEntry:
    - type: chore
      summary: The Python generator now runs custom unit tests in CI if configured.
  irVersion: 39

- version: 2.8.2
  createdAt: "2024-06-04"
  changelogEntry:
    - type: fix
      summary: The none-filtering function now supports mypy's invariance check.
  irVersion: 39

- version: 2.8.1
  createdAt: "2024-06-04"
  changelogEntry:
    - type: fix
      summary: The parameter comment/documentation for timeouts on the root client now reflects the custom timeout passed through within configuration.
  irVersion: 39

- version: 2.8.0
  createdAt: "2024-06-03"
  changelogEntry:
    - type: chore
      summary: >-
        Endpoint function request logic has been abstracted into
        the request function of the wrapped httpx client.
  irVersion: 39

- version: 2.7.0
  createdAt: "2024-05-30"
  changelogEntry:
    - type: internal
      summary: >-
        Improvement: The generator now outputs an `exampleId` alongside each
        generated snippet so that we can correlate snippets with the relevant
        examples. This is useful for retrieving examples from Fern's API and
        making sure that you can show multiple snippets in the generated docs.
  irVersion: 39

- version: 2.6.1
  createdAt: "2024-05-31"
  changelogEntry:
    - type: internal
      summary: >-
        this adds a back door token getter function to OAuth clients to better
        test the functionality.
  irVersion: 39

- version: 2.6.0
  createdAt: "2024-05-30"
  changelogEntry:
    - type: chore
      summary: Support adding optional dependencies and extras to your generated `pyproject.toml`.
      changed:
        - >-
          Improvement: Support adding optional dependencies and extras to your
          generated `pyproject.toml`. To use this configuration, please add the
          following:
  irVersion: 39

- version: 2.5.7
  createdAt: "2024-05-30"
  changelogEntry:
    - type: fix
      summary: tests now carry a type annotation for `expected_types` variable.
  irVersion: 39

- version: 2.5.6
  createdAt: "2024-05-29"
  changelogEntry:
    - type: chore
      summary: >-
        Literal values are now all defaulted such that users are
        not required to plug in a redundant value.
  irVersion: 39

- version: 2.5.5
  createdAt: "2024-05-29"
  changelogEntry:
    - type: fix
      summary: Auto-Pagination now respects optional return values
      fixed:
        - >-
          Optional lists returned from pagination endpoints are now appropriately
          flattened such that the `Pager` return types are correctly
          `Pager[ListItem]` as opposed to `Pager[List[ListItem]]`.
  irVersion: 39

- version: 2.5.4
  createdAt: "2024-05-28"
  changelogEntry:
    - type: internal
      summary: Add typing library for dateutils in testing lib to satisfy mypy errors.
  irVersion: 39

- version: 2.5.3
  createdAt: "2024-05-24"
  changelogEntry:
    - type: chore
      summary: Stops specifying custom licenses manually, lets poetry handle adding them.
  irVersion: 39

- version: 2.5.2
  createdAt: "2024-05-23"
  changelogEntry:
    - type: feat
      summary: Support `list` SDK method names instead of defaulting to `list_`.
  irVersion: 39

- version: 2.5.1-rc0
  createdAt: "2024-05-23"
  changelogEntry:
    - type: fix
      summary: Literal parameters are added back to the request body.
  irVersion: 39

- version: 2.5.0-rc2
  createdAt: "2024-05-23"
  changelogEntry:
    - type: fix
      summary: Do not attempt to run `fern test` in CI until the command is more widely rolled out.
  irVersion: 39

- version: 2.5.0-rc1
  createdAt: "2024-05-22"
  changelogEntry:
    - type: chore
      summary: Address `propogate` -> `propagate` typo in python codegen.
  irVersion: 39

- version: 2.5.0-rc0
  createdAt: "2024-05-22"
  changelogEntry:
    - type: fix
      summary: This version addresses issues in unit test generation and reenables the creation of unit tests.
  irVersion: 39

- version: 2.4.0-rc0
  createdAt: "2024-05-21"
  changelogEntry:
    - type: fix
      summary: >-
        The Python SDK generator now uses safe names wherever string concat is
        not used (like in client generation naming), so this will update module
        and parameter names.
  irVersion: 39

- version: 2.3.4
  createdAt: "2024-05-21"
  changelogEntry:
    - type: fix
      summary: >-
        Snippets and unit tests now correctly write optional request bodies when
        `inline_request_params` is set to `True`.
      fixed:
        - >-
          Snippets and unit tests now correctly write optional request bodies when
          `inline_request_params` is set to `True`. Previously the generator wrote
          snippets that inlined these parameters, which does not match the
          generated SDK itself.
  irVersion: 39

- version: 2.3.3
  createdAt: "2024-05-21"
  changelogEntry:
    - type: fix
      summary: Inlined body parameters now deconflict in naming with header and query parameters by prefixing the request objects name.
  irVersion: 39

- version: 2.3.2
  createdAt: "2024-05-21"
  changelogEntry:
    - type: fix
      summary: The query encoder now correctly handles none values
      fixed:
        - >-
          The `pyproject.toml` generator now writes authors in a valid format for
          `tool.poetry`, not just `project`
        - The query encoder now correctly handles none values
  irVersion: 39

- version: 2.3.1
  createdAt: "2024-05-21"
  changelogEntry:
    - type: fix
      summary: The `pyproject.toml` generator now includes project URLs when specified.
  irVersion: 39

- version: 2.3.0
  createdAt: "2024-05-21"
  changelogEntry:
    - type: chore
      summary: Users can now specify information that will appear in their pypi record.
  irVersion: 39

- version: 2.2.2
  createdAt: "2024-05-20"
  changelogEntry:
    - type: fix
      summary: Inline request parameters now deconflict in naming with the unnamed path parameter arguments.
      fixed:
        - >-
          Inline request parameters now deconflict in naming with the unnamed path
          parameter arguments. Previously, when inlining request parameters into
          the method signature, we would not deconflict naming with the unnamed
          args preceeding them. Now, conflicting unnamed parameters are post-fixed
          with an "_".
  irVersion: 39

- version: 2.2.1
  createdAt: "2024-05-17"
  changelogEntry:
    - type: internal
      summary: The generator now uses the latest FDR SDK.
  irVersion: 39

- version: 2.2.0
  createdAt: "2024-05-16"
  changelogEntry:
    - type: chore
      summary: The generated SDK will now correctly encode deep object query parameters
      changed:
        - >-
          The generated SDK will now correctly encode deep object
          query parameters. For example, if you have an object `{"test":
          {"nested": "object"}}` as a query parameter, we will now encode it as
          `test[nested]=object`.
  irVersion: 39

- version: 2.1.1
  createdAt: "2024-05-15"
  changelogEntry:
    - type: chore
      summary: add enhanced snippet support for streaming endpoints.
  irVersion: 39

- version: 2.1.0
  createdAt: "2024-05-14"
  changelogEntry:
    - type: feat
      summary: Add support for cursor and offset pagination ("auto-pagination").
  irVersion: 39

- version: 2.0.1
  createdAt: "2024-05-14"
  changelogEntry:
    - type: fix
      summary: The python generator now only excludes unset fields that are not required.
      fixed:
        - >-
          the python generator previously used `exclude_unset` on pydantic models,
          however this would remove defaulted values. This change updates this to
          only exclude none fields that were not required.
  irVersion: 39

- version: 2.0.0
  createdAt: "2024-05-09"
  changelogEntry:
    - type: break
      summary: Release of the Python SDK generator version 2, updating default configuration.
      changed:
        - >-
          The python SDK is now on major version 2, there are no
          substantial logic changes, however default configuration has changed. To
          take this upgrade without any breaks, please add the below configuration
          to your `generators.yml` file:
  irVersion: 39

- version: 1.7.0-rc0
  createdAt: "2024-05-09"
  changelogEntry:
    - type: chore
      summary: you can now declare a new python version range for your `pyproject.toml`, which will declare a new version range for your pip package.
  irVersion: 39

- version: 1.6.0-rc0
  createdAt: "2024-05-09"
  changelogEntry:
    - type: chore
      summary: You can now specify dev dependencies from your `generators.yml` file
  irVersion: 39

- version: 1.5.3-rc0
  createdAt: "2024-05-02"
  changelogEntry:
    - type: fix
      summary: the unchecked basemodel no longer tries to dereference an object if it's null.
  irVersion: 39

- version: 1.5.2-rc0
  createdAt: "2024-05-02"
  changelogEntry:
    - type: chore
      summary: The python generator now produces sync snippet templates, as opposed to just async templates as it was before
  irVersion: 39

- version: 1.5.1-rc5
  createdAt: "2024-05-01"
  changelogEntry:
    - type: fix
      summary: Snippet templates now generate the correct imports for object types.
  irVersion: 39

- version: 1.5.1-rc4
  createdAt: "2024-05-01"
  changelogEntry:
    - type: fix
      summary: The SDK now generates discriminated union snippet templates correctly.
  irVersion: 39

- version: 1.5.1-rc3
  createdAt: "2024-05-01"
  changelogEntry:
    - type: chore
      summary: Union types leverage the fern aware base model to include JSON and Dict function overrides.
  irVersion: 39

- version: 1.5.1-rc2
  createdAt: "2024-05-01"
  changelogEntry:
    - type: fix
      summary: The vanilla pydantic base model now respects the `require_optional_fields`
      fixed:
        - >-
          The vanilla pydantic base model now respects the
          `require_optional_fields`, this became a regression in 1.5.1-rc0 when we
          started to inline union properties which leverages the vanilla base
          model.
  irVersion: 39

- version: 1.5.1-rc1
  createdAt: "2024-05-01"
  changelogEntry:
    - type: fix
      summary: Improve formatting within snippet templates.
      fixed:
        - >-
          Address formatting issues with snippet templates, we now strip newlines
          off OG snippets as well as plumb through indentation metadata to places
          that were previously missing it.
  irVersion: 39

- version: 1.5.1-rc0
  createdAt: "2024-04-26"
  changelogEntry:
    - type: fix
      summary: Discriminated union variants that are objects now have inlined properties instead of extending a base type.
  irVersion: 39

- version: 1.5.0-rc0
  createdAt: "2024-04-30"
  changelogEntry:
    - type: feat
      summary: The generator now supports inlining top-level request parameters instead of requiring users create a request object.
  irVersion: 39

- version: 1.4.0
  createdAt: "2024-04-29"
  changelogEntry:
    - type: feat
      summary: keyword arguments are now ordered such that required params are ordered before optional params
      changed:
        - >-
          keyword arguments are now ordered such that required params
          are ordered before optional params. Note that since these are kwargs,
          this is a non-breaking change.
        - "docstrings now match numpydoc/PEP257 format"
  irVersion: 39

- version: 1.4.0-rc3
  createdAt: "2024-04-24"
  changelogEntry:
    - type: fix
      summary: pin mypy dependency to 1.9.0 to prevent introducing upstream bugs
      fixed:
        - >-
          Set `mypy` dev depenency in generated `pyproject.toml` to `1.9.0`. This
          prevents upstream `mypy` bugs from affecting user builds. Note that this
          is only a dev dependency, so it does not affect the behavior of the SDK.
        - Temporarily disable unit test generation.
      changed:
        - "Improvement: Use named parameters for all `httpx` request params."
  irVersion: 39

- version: 1.4.0-rc2
  createdAt: "2024-04-23"
  changelogEntry:
    - type: fix
      summary: Initialize the OAuth token provider member variables to their default values before they are set.
  irVersion: 39

- version: 1.4.0-rc1
  createdAt: "2024-04-22"
  changelogEntry:
    - type: feat
      summary: The python SDK generator now supports OAuth client generation for the client-credentials flow.
  irVersion: 39

- version: 1.4.0-rc0
  createdAt: "2024-04-22"
  changelogEntry:
    - type: chore
      summary: Generated clients now follow redirects by default.
      changed:
        - >-
          Default generated clients to follow redirects by default, this
          effectively flips the `follow_redirects_by_default` flag to `True` and
          can be reverted with the following configuration:
  irVersion: 38

- version: 1.3.1-rc0
  createdAt: "2024-04-22"
  changelogEntry:
    - type: fix
      summary: the python SDK generator now checks to make sure a header is not null before casting it to a string.
  irVersion: 38

- version: 1.3.0-rc1
  createdAt: "2024-04-22"
  changelogEntry:
    - type: internal
      summary: add logging for python snippet template generation.
  irVersion: 38

- version: 1.3.0-rc0
  createdAt: "2024-04-21"
  changelogEntry:
    - type: feat
      summary: "Beta: The generator now registers snippet templates which can be used for dynamic SDK code snippet generation."
  irVersion: 38

- version: 1.2.0-rc2
  createdAt: "2024-04-10"
  changelogEntry:
    - type: fix
      summary: The generator now correctly imports `json` when deserializing server sent events.
  irVersion: 38

- version: 1.2.0-rc0
  createdAt: "2024-04-10"
  changelogEntry:
    - type: internal
      summary: Consume IR v38
      added:
        - >-
          The generator now depends on v38 of Intermediate Representation which
          requires the latest CLI. As part of this, the generator now supports
          server sent events using `httpx-sse`.
  irVersion: 38

- version: 1.1.0-rc3
  createdAt: "2024-04-04"
  changelogEntry:
    - type: fix
      summary: The skip validation code now works as expected.
      fixed:
        - >-
          There are a number of fixes to the skip validation code as well as tests
          to reflect those updates.
  irVersion: 37

- version: 1.1.0-rc2
  createdAt: "2024-04-04"
  changelogEntry:
    - type: fix
      summary: The generator now writes the skipped-validation `cast` with a suffixing new line so that the code compiles.
  irVersion: 37

- version: 1.1.0-rc1
  createdAt: "2024-04-04"
  changelogEntry:
    - type: fix
      summary: The generator no longer attempts to create a version file if Fern does not own generating the full package (e.g. in local generation).
      fixed:
        - >-
          The generator no longer attempts to create a version file if Fern does
          not own generating the full package (e.g. in local generation). It's too
          confusing for to make the relevant changes to the package set up, and is
          also arguably not even needed in local generation.
  irVersion: 37

- version: 1.1.0-rc0
  createdAt: "2024-04-03"
  changelogEntry:
    - type: feat
      summary: The python SDK now includes a configuration option to skip pydantic validation.
      added:
        - >-
          [EXPERIMENTAL]: The python SDK now includes a configuration
          option to skip pydantic validation. This ensures that Pydantic does not
          immediately fail if the model being returned from an API does not
          exactly match the Pydantic model. This is meant to add flexibility,
          should your SDK fall behind your API, but should be used sparringly, as
          the type-hinting for users will still reflect the Pydantic model
          exactly.
  irVersion: 37

- version: 1.0.1
  createdAt: "2024-04-03"
  changelogEntry:
    - type: fix
      summary: Address Pydantic break when introducing `pydantic.v1` import within Pydantic V1
      fixed:
        - >-
          Pydantic introduced a "break" to their 1.x libs by adding in a .v1
          submodule that does not mirror the one that comes with pydantic v2. To
          get around this we now force the usage of the v1 submodule only if the
          pydantic version is v2.
  irVersion: 37

- version: 1.0.0
  createdAt: "2024-04-02"
  changelogEntry:
    - type: break
      summary: The python SDK now defaults new (breaking configuration) to introduce general improvements.
      changed:
        - >-
          Break: The python SDK now defaults new (breaking configuration) to
          introduce general improvements.
        - >-
          Improvement: The python SDK now supports specifying whether or not to
          follow redirects in requests by default, and exposes an option to
          override that functionality for consumers.
  irVersion: 37

- version: 0.13.4
  createdAt: "2024-04-03"
  changelogEntry:
    - type: fix
      summary: revert changes introduced within 0.12.2
      fixed:
        - >-
          revert the change from 0.13.2, the stream call returns a context
          manager, which is not awaited. The issue that this was meant to solve
          was actually fixed in version `0.12.2`.
  irVersion: 37

- version: 0.13.3
  createdAt: "2024-03-28"
  changelogEntry:
    - type: fix
      summary: Github workflows for publishing now work again (previously the trigger was incorrect).
  irVersion: 37

- version: 0.13.2
  createdAt: "2024-03-28"
  changelogEntry:
    - type: fix
      summary: Asynchronous calls to `httpx.stream` are now awaited. This is applicable to any file download or JSON streaming (chat completion) endpoints.
  irVersion: 37

- version: 0.13.1
  createdAt: "2024-03-26"
  changelogEntry:
    - type: feat
      summary: discriminant values in unions are now defaulted such that callers no longer need to specify the discriminant
  irVersion: 37

- version: 0.13.0
  createdAt: "2024-03-25"
  changelogEntry:
    - type: feat
      summary: the python SDK now exposes it's version through `__version__` to match module standards and expectations.
  irVersion: 37

- version: 0.12.5
  createdAt: "2024-03-22"
  changelogEntry:
    - type: fix
      summary: the python SDK uses the timeout provided to the top level client as the default per-request
      fixed:
        - >-
          the python SDK uses the timeout provided to the top level client as the
          default per-request, previously if there was no timeout override in the
          RequestOptions, we'd default to 60s, even if a timeout was provided at
          the client level.
  irVersion: 37

- version: 0.12.4
  createdAt: "2024-03-19"
  changelogEntry:
    - type: chore
      summary: Allow full forward compat with enums while keeping intellisense by unioning enum literals with `typing.AnyStr`.
  irVersion: 37

- version: 0.12.3
  createdAt: "2024-03-18"
  changelogEntry:
    - type: feat
      summary: Allow bytes requests to take in iterators of bytes, mirroring the types allowed by HTTPX.
  irVersion: 37

- version: 0.12.2
  createdAt: "2024-03-18"
  changelogEntry:
    - type: fix
      summary: Fix the returned type and value contained within the retrying wrapper for the HTTPX client (http_client.py).
  irVersion: 37

- version: 0.12.1
  createdAt: "2024-03-14"
  changelogEntry:
    - type: chore
      summary: Improves example generation and snippets for union types, as well as multi-url environments.
      changed:
        - >-
          Improves example generation and snippets for union types, as well as
          multi-url environments.
      fixed:
        - >-
          Stringifies header arguments, HTTPX was previously hard failing for
          certain types
  irVersion: 37

- version: 0.12.0
  createdAt: "2024-03-11"
  changelogEntry:
    - type: feat
      summary: Auto-generated unit and integration tests against a mock server.
      added:
        - >-
          Beta: The SDK now generates tests leveraging auto-generated
          data to test typing, as well as wire-formatting (e.g. the SDKs are
          sending and receiving data as expected). This comes out of the box
          within the generated github workflow, as well as through the fern cli:
          `fern test --command "your test command"`.
  irVersion: 37

- version: 0.11.10
  createdAt: "2024-03-08"
  changelogEntry:
    - type: feat
      summary: Expose a feature flag to pass through additional properties not specified within your pydantic model from your SDK.
      added:
        - >-
          Expose a feature flag to pass through additional properties not
          specified within your pydantic model from your SDK. This allows for
          easier forward compatibility should your SDK drift behind your spec.
  irVersion: 36

- version: 0.11.9
  createdAt: "2024-03-04"
  changelogEntry:
    - type: chore
      summary: use docstrings instead of Pydantic field descriptions.
  irVersion: 36

- version: 0.11.8-rc1
  createdAt: "2024-03-02"
  changelogEntry:
    - type: feat
      summary: Introduces a `max_retries` parameter to the RequestOptions dict accepted by all requests.
      changed:
        - >-
          Beta: Introduces a `max_retries` parameter to the
          RequestOptions dict accepted by all requests. This parameter will retry
          requests automatically, with exponential backoff and a jitter. The
          client will automatically retry requests of a 5XX status code, or
          certain 4XX codes (429, 408, 409).
  irVersion: 36

- version: 0.11.8-rc0
  createdAt: "2024-02-27"
  changelogEntry:
    - type: feat
      summary: introduces additional configuration to customize the client class and file name.
      changed:
        - >-
          Beta: Introduce a `client` custom config that allows you to specify
          class_name and filename for the client. This configuration can be used
          in several ways:
  irVersion: 36

- version: 0.11.7
  createdAt: "2024-02-27"
  changelogEntry:
    - type: feat
      summary: Introduces a flag `use_str_enums` to swap from using proper Enum classes to using Literals to represent enums.
      changed:
        - >-
          Introduces a flag `use_str_enums` to swap from using proper
          Enum classes to using Literals to represent enums. This change allows
          for forward compatibility of enums, since the user will receive the
          string back.
  irVersion: 36

- version: 0.11.6
  createdAt: "2024-02-26"
  changelogEntry:
    - type: feat
      summary: You can now specify envvars to scan for headers, not just auth scheme headers.
  irVersion: 36

- version: 0.11.5
  createdAt: "2024-02-23"
  changelogEntry:
    - type: fix
      summary: Fix the usage of ApiError when leveraging auth envvars, when the schema for ApiError was changed, this usage was missed in the update.
  irVersion: 34

- version: 0.11.4
  createdAt: "2024-02-23"
  changelogEntry:
    - type: fix
      summary: We now grab enum values appropriately when enums are within unions.
  irVersion: 34

- version: 0.11.3
  createdAt: "2024-02-22"
  changelogEntry:
    - type: fix
      summary: Transition from lists to sequences within function calls
      fixed:
        - >-
          Transition from lists to sequences within function calls, this is a fix
          as a result of how mypy handles type variance. This fix is only for
          function calls as testing shows that we do not hit the same issue within
          mypy with list[union[*]] fields on pydantic objects.
      changed:
        - >-
          Improvement: The Python SDK generator now defaults to
          `require_optional_fields = False`. This means that any requests that
          have optional fields no longer require a user to input data (or a `None`
          value) in.
  irVersion: 34

- version: 0.11.2
  createdAt: "2024-02-21"
  changelogEntry:
    - type: feat
      summary: introduce configuration to flatten the directory structure
      changed:
        - >-
          Improvement (Beta): The Python generator now supports a configuration
          option called `improved_imports`.
  irVersion: 34

- version: 0.11.1
  createdAt: "2024-02-20"
  changelogEntry:
    - type: feat
      summary: Python now supports specifying files to auto-export from the root `__init__.py` file
      changed:
        - >-
          Python now supports specifying files to auto-export from
          the root `__init__.py` file, this means you can export custom classes
          and functions from your package for users to access like so:
        - "Add a docstring for base clients to explain usage, example:"
  irVersion: 34

- version: 0.11.0
  createdAt: "2024-02-19"
  changelogEntry:
    - type: feat
      summary: Python now supports a wider range of types for file upload
      changed:
        - >-
          Python now supports a wider range of types for file upload,
          mirroring the `httpx` library used under the hood, these are grouped
          under a new type `File`:
      fixed:
        - >-
          Python now supports API specifications that leverage lists for file
          upload. Previously, Fern incorrectly made all `list<file>` type requests
          simply `file`.
  irVersion: 34

- version: 0.10.3
  createdAt: "2024-02-19"
  changelogEntry:
    - type: fix
      summary: Several bugfixes were made to related to literal properties
      fixed:
        - >-
          Several bugfixes were made to related to literal properties. If a
          literal is used as a query parameeter, header, path parameter, or
          request parameter, the user no longer has to explicitly pass it in.
  irVersion: 31

- version: 0.10.2
  createdAt: "2024-02-18"
  changelogEntry:
    - type: fix
      summary: The SDK always sends the enum wire value instead of the name of the enum.
      fixed:
        - >-
          The SDK always sends the enum wire value instead of the name of the
          enum.
        - >-
          Revert #2719 which introduced additional issues with circular references
          within our Python types.
  irVersion: 31

- version: 0.10.1
  createdAt: "2024-02-14"
  changelogEntry:
    - type: feat
      summary: Add support for a RequestOptions object for each generated function within Python SDKs
      changed:
        - >-
          Add support for a RequestOptions object for each generated
          function within Python SDKs. This parameter is an optional final
          parameter that allows for configuring timeout, as well as pass in
          arbitrary data through to the request. RequestOptions is a TypedDict,
          with optional fields, so there's no need to instantiate an object, just
          pass in the relevant keys within a dict!
  irVersion: 31

- version: 0.10.0
  createdAt: "2024-02-13"
  changelogEntry:
    - type: break
      summary: The generator no longer supports Python 3.7
      removed:
        - The generator no longer supports Python 3.7
        - The `backports` dependency has been removed
  irVersion: 31

- version: 0.9.1
  createdAt: "2024-02-11"
  changelogEntry:
    - type: fix
      summary: Remove literals from SDK function signatures, as they are not modifiable for end users
      fixed:
        - >-
          Remove literals from SDK function signatures, as they are not modifiable
          for end users.
        - >-
          Acknowledge the optionality of a `File` property, previously we were
          requiring all `File` type inputs, even if they were specified as
          optional within the OpenAPI or Fern definition. Now, we check if the
          parameter is required and make the parameter optional if it is not.
  irVersion: 31

- version: 0.9.0
  createdAt: "2024-02-11"
  changelogEntry:
    - type: feat
      summary: The SDK generator now supports whitelabelling
      added:
        - >-
          The SDK generator now supports whitelabelling. When this is turned on,
          there will be no mention of Fern in the generated code.
  irVersion: 31

- version: 0.8.3-rc0
  createdAt: "2024-01-29"
  changelogEntry:
    - type: fix
      summary: Increase recursion depth to allow for highly nested and complex examples
      fixed:
        - >-
          Increase recursion depth to allow for highly nested and complex
          examples, this is a temporary solution while the example datamodel is
          further refined.
  irVersion: 31

- version: 0.8.2-rc0
  createdAt: "2024-01-28"
  changelogEntry:
    - type: fix
      summary: The Python SDK better handles cyclical references
      fixed:
        - >-
          The Python SDK better handles cyclical references. In particular,
          cyclical references are tracked for undiscriminated unions, and
          update_forward_refs is always called with object references.
  irVersion: 31

- version: 0.8.1
  createdAt: "2024-01-26"
  changelogEntry:
    - type: feat
      summary: The generated SDK respects environment variables for authentication if specified
      added:
        - >-
          If the auth scheme has environment variables specified, the generated
          python client will scan those environment variables.
  irVersion: 31

- version: 0.8.0
  createdAt: "2024-01-25"
  changelogEntry:
    - type: fix
      summary: Enums in inlined requests send the appropriate value.
  irVersion: 31

- version: 0.7.7
  createdAt: "2024-01-21"
  changelogEntry:
    - type: internal
      summary: Initialize the changelog
  irVersion: 31
