name: Check Versions Changelog

# This workflow uses Claude Code to analyze TypeScript changes and provide
# intelligent feedback on versions.yml changelog entries.
# Requires SWIMBURGER_ANTHROPIC_API_KEY secret to be configured in the repository.
#
# Manual Trigger Usage:
# - base_ref: Branch to compare against (default: 'main')
# - head_ref: Branch/commit to compare (default: 'HEAD')
# - file_pattern: Custom file pattern override (e.g., 'packages/cli/**/*.ts')

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  workflow_dispatch:
    inputs:
      base_ref:
        description: "Base branch/ref to compare against"
        required: false
        default: "main"
        type: string
      head_ref:
        description: "Head branch/ref to compare"
        required: false
        default: "HEAD"
        type: string
      file_pattern:
        description: "File pattern to check (optional, overrides auto-detection)"
        required: false
        type: string

permissions:
  contents: read
  pull-requests: write
  issues: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  check-versions-changelog:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false)

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Claude Code
        run: |
          curl -fsSL https://claude.ai/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Get changed TypeScript files
        id: changed-files
        run: |
          echo "Event: ${{ github.event_name }}"

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Using git diff for manual trigger"
            BASE_REF="${{ inputs.base_ref || 'main' }}"
            HEAD_REF="${{ inputs.head_ref || 'HEAD' }}"
            git fetch origin "$BASE_REF" || echo "Could not fetch $BASE_REF"

            if [ -n "${{ inputs.file_pattern }}" ]; then
              CHANGED_TS_FILES=$(git diff --name-only --diff-filter=AMR "$BASE_REF" "$HEAD_REF" -- '${{ inputs.file_pattern }}' | grep -E '\.ts$' | grep -E '^(packages/|generators/)' | head -20 || true)
            else
              CHANGED_TS_FILES=$(git diff --name-only --diff-filter=AMR "$BASE_REF" "$HEAD_REF" -- '*.ts' ':!*.test.ts' ':!*.spec.ts' ':!**/generated/**' ':!**/dist/**' | grep -E '^(packages/|generators/)' | head -20 || true)
            fi
          else
            echo "Using pull request context"
            git fetch origin ${{ github.event.pull_request.base.ref }}
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            CHANGED_TS_FILES=$(git diff --name-only --diff-filter=AMR "$BASE_SHA" "$HEAD_SHA" -- '*.ts' ':!*.test.ts' ':!*.spec.ts' ':!**/generated/**' ':!**/dist/**' | grep -E '^(packages/|generators/)' | head -20 || true)
          fi

          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_TS_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          if [ -z "$CHANGED_TS_FILES" ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Found changes in: $CHANGED_TS_FILES"
          fi

      - name: Analyze changes with Claude Code
        if: steps.changed-files.outputs.has_changes == 'true'
        env:
          ANTHROPIC_API_KEY: ${{ secrets.SWIMBURGER_ANTHROPIC_API_KEY }}
        run: |
          # Create analysis prompt
          cat > analyze_prompt.md << 'EOF'
          You are an expert at analyzing code changes for Fern, a company that builds API-first development tools including CLI tools and SDK generators.

          Please analyze the TypeScript changes in this repository and determine if they warrant entries in the corresponding versions.yml changelog files.

          For context, here are the changed TypeScript files:
          ${{ steps.changed-files.outputs.changed_files }}

          The versions.yml files are located at:
          - CLI changes: packages/cli/cli/versions.yml
          - TypeScript Generator: generators/typescript/sdk/versions.yml
          - Python Generator: generators/python/sdk/versions.yml
          - Java Generator: generators/java/sdk/versions.yml
          - Go Generator: generators/go/sdk/versions.yml
          - Ruby Generator: generators/ruby-v2/sdk/versions.yml
          - C# Generator: generators/csharp/sdk/versions.yml
          - PHP Generator: generators/php/sdk/versions.yml
          - Rust Generator: generators/rust/sdk/versions.yml
          - Swift Generator: generators/swift/sdk/versions.yml

          For each component that has changes, please:
          1. Determine if the changes warrant a changelog entry (focus on customer impact)
          2. Classify the change type (feat, fix, chore, internal)
          3. Provide a suggested changelog entry with specific details
          4. Include information about feature flags, API changes, or usage examples where relevant

          Please provide your analysis in a clear, structured format that can be easily understood by developers reviewing pull requests.
          EOF

          # Use Claude Code to analyze the changes
          claude analyze_prompt.md > analysis_output.md

          # Save output for next step
          echo "analysis_file=analysis_output.md" >> $GITHUB_OUTPUT

      - name: Post results
        if: steps.changed-files.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const analysisOutput = fs.readFileSync('analysis_output.md', 'utf8');
            const isManualDispatch = '${{ github.event_name }}' === 'workflow_dispatch';
            const changedFiles = `${{ steps.changed-files.outputs.changed_files }}`.split('\n').filter(f => f.trim());

            let outputBody = `## 📋 Versions.yml Changelog Check\n\n`;

            if (isManualDispatch) {
              outputBody += `🔧 **Manual Trigger**: Comparing \`${{ inputs.head_ref || 'HEAD' }}\` against \`${{ inputs.base_ref || 'main' }}\`\n\n`;
            }

            outputBody += `🔍 **Analyzed TypeScript changes in:**\n`;
            changedFiles.forEach(file => {
              outputBody += `- \`${file}\`\n`;
            });

            outputBody += `\n### 🤖 Claude Code Analysis:\n\n`;
            outputBody += analysisOutput;

            outputBody += `\n\n---\n`;
            outputBody += `**Guidelines for good changelog entries:**\n`;
            outputBody += `- Include specific details about what changed and why\n`;
            outputBody += `- For new features: mention how to enable/use them\n`;
            outputBody += `- For bug fixes: describe what was broken and how it's fixed\n`;
            outputBody += `- For feature flags: provide enable/disable instructions\n`;
            outputBody += `- Include code examples for API changes\n\n`;
            outputBody += `*This analysis was performed by Claude Code and should be reviewed by a human.*`;

            if (isManualDispatch) {
              // For manual dispatch, log the output
              console.log('='.repeat(80));
              console.log('VERSIONS CHANGELOG CHECK RESULTS');
              console.log('='.repeat(80));
              console.log(outputBody);
              console.log('='.repeat(80));
            } else {
              // For PR, post/update comment
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });

              const botComment = comments.data.find(comment =>
                comment.user.login === 'github-actions[bot]' &&
                comment.body.includes('📋 Versions.yml Changelog Check')
              );

              if (botComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: outputBody
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: outputBody
                });
              }
            }

      - name: Skip for no changes
        if: steps.changed-files.outputs.has_changes == 'false'
        run: |
          echo "✅ No significant TypeScript changes detected in packages/ or generators/ directories."
          echo "Skipping versions.yml changelog check."
