name: Seed Snapshot Tests

on:
  push:
    branches:
      # CHRISM - temp
      - mallinson/metrics-for-seed
      # - main
  # Note: pull request trigger will be removed once repository_dispatch trigger is verified
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
  repository_dispatch:
    types: [seed-test-metrics]
  workflow_call:
  workflow_dispatch:

# Cancel previous workflows on previous push
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      post-metrics: ${{ steps.set-options.outputs.post-metrics }}
    steps:
      - name: Set Options
        id: set-options
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" && "${{ github.event.action }}" == "seed-test-metrics" ]]; then
            echo "post-metricss=true" >> $GITHUB_OUTPUT
          else
            echo "post-metrics=false" >> $GITHUB_OUTPUT
          fi

  changes:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      matrix:
        generator-name: [ruby, ruby-v2, openapi, python, postman, java, typescript, go, csharp, php, swift, rust]
        include:
          - files: |
              generators/ruby/
              seed/ruby-sdk/seed.yml
              seed/ruby-model/seed.yml
            generator-name: ruby
          - files: |
              generators/ruby-v2/
              seed/ruby-sdk-v2/seed.yml
            generator-name: ruby-v2
          - files: |
              generators/openapi/
              seed/openapi/seed.yml
            generator-name: openapi
          - files: |
              generators/python/
              seed/pydantic/seed.yml
              seed/pydantic-v2/seed.yml
              seed/python-sdk/seed.yml
              seed/fastapi/seed.yml
            generator-name: python
          - files: |
              generators/postman/
              seed/postman/seed.yml
            generator-name: postman
          - files: |
              generators/java/
              seed/java-sdk/seed.yml
              seed/java-model/seed.yml
              seed/java-spring/seed.yml
            generator-name: java
          - files: |
              generators/typescript/
              seed/ts-sdk/seed.yml
              seed/ts-express/seed.yml
            generator-name: typescript
          - files: |
              generators/go/
              seed/go-sdk/seed.yml
              seed/go-model/seed.yml
              seed/go-fiber/seed.yml
            generator-name: go
          - files: |
              generators/csharp/
              seed/csharp-sdk/seed.yml
              seed/csharp-model/seed.yml
            generator-name: csharp
          - files: |
              generators/php/
              seed/php-sdk/seed.yml
              seed/php-model/seed.yml
            generator-name: php
          - files: |
              generators/swift/
              seed/swift-sdk/seed.yml
            generator-name: swift
          - files: |
              generators/rust/
              seed/rust-model/seed.yml
              seed/rust-sdk/seed.yml
            generator-name: rust
    outputs:
      # Note: purposely excluding seed. Running every generator at once will lock up all of our runners.
      ruby: ${{ steps.set-output.outputs.ruby-changes }}
      ruby-v2: ${{ steps.set-output.outputs.ruby-v2-changes }}
      openapi: ${{ steps.set-output.outputs.openapi-changes }}
      python: ${{ steps.set-output.outputs.python-changes }}
      postman: ${{ steps.set-output.outputs.postman-changes }}
      java: ${{ steps.set-output.outputs.java-changes }}
      typescript: ${{ steps.set-output.outputs.typescript-changes }}
      go: ${{ steps.set-output.outputs.go-changes }}
      csharp: ${{ steps.set-output.outputs.csharp-changes }}
      php: ${{ steps.set-output.outputs.php-changes }}
      swift: ${{ steps.set-output.outputs.swift-changes }}
      rust: ${{ steps.set-output.outputs.rust-changes }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          # Get sufficient history to check for changes
          fetch-depth: 200
          sparse-checkout: |
            ${{ matrix.files }}
            .github/

      - name: Get generator changes for ${{ matrix.generator-name }}
        id: get-generator-changes
        uses: ./.github/actions/check-for-changed-files
        with:
          files: ${{ matrix.files }}

      - name: Set output
        id: set-output
        run: |
          # CHRISM - temp
          echo "${{ matrix.generator-name }}-changes=true" >> $GITHUB_OUTPUT
          # echo "${{ matrix.generator-name }}-changes=${{ steps.get-generator-changes.outputs.any_changed }}" >> $GITHUB_OUTPUT

  get-all-test-matrices:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false # Don't let failing generators block the passing generators
      matrix:
        sdk-name:
          [
            ruby-model,
            ruby-sdk,
            ruby-sdk-v2,
            pydantic,
            python-sdk,
            fastapi,
            openapi,
            postman,
            java-sdk,
            java-model,
            java-spring,
            ts-sdk,
            ts-express,
            go-fiber,
            go-model,
            go-sdk,
            csharp-model,
            csharp-sdk,
            php-model,
            php-sdk,
            swift-sdk,
            rust-model,
            rust-sdk
          ]
    outputs:
      ruby-model: ${{ steps.create-seed-groups-matrix.outputs.ruby-model-test-matrix }}
      ruby-sdk: ${{ steps.create-seed-groups-matrix.outputs.ruby-sdk-test-matrix }}
      ruby-sdk-v2: ${{ steps.create-seed-groups-matrix.outputs.ruby-sdk-v2-test-matrix }}
      pydantic: ${{ steps.create-seed-groups-matrix.outputs.pydantic-test-matrix }}
      python-sdk: ${{ steps.create-seed-groups-matrix.outputs.python-sdk-test-matrix }}
      fastapi: ${{ steps.create-seed-groups-matrix.outputs.fastapi-test-matrix }}
      openapi: ${{ steps.create-seed-groups-matrix.outputs.openapi-test-matrix }}
      postman: ${{ steps.create-seed-groups-matrix.outputs.postman-test-matrix }}
      java-sdk: ${{ steps.create-seed-groups-matrix.outputs.java-sdk-test-matrix }}
      java-model: ${{ steps.create-seed-groups-matrix.outputs.java-model-test-matrix }}
      java-spring: ${{ steps.create-seed-groups-matrix.outputs.java-spring-test-matrix }}
      ts-sdk: ${{ steps.create-seed-groups-matrix.outputs.ts-sdk-test-matrix }}
      ts-express: ${{ steps.create-seed-groups-matrix.outputs.ts-express-test-matrix }}
      go-fiber: ${{ steps.create-seed-groups-matrix.outputs.go-fiber-test-matrix }}
      go-model: ${{ steps.create-seed-groups-matrix.outputs.go-model-test-matrix }}
      go-sdk: ${{ steps.create-seed-groups-matrix.outputs.go-sdk-test-matrix }}
      csharp-model: ${{ steps.create-seed-groups-matrix.outputs.csharp-model-test-matrix }}
      csharp-sdk: ${{ steps.create-seed-groups-matrix.outputs.csharp-sdk-test-matrix }}
      php-model: ${{ steps.create-seed-groups-matrix.outputs.php-model-test-matrix }}
      php-sdk: ${{ steps.create-seed-groups-matrix.outputs.php-sdk-test-matrix }}
      swift-sdk: ${{ steps.create-seed-groups-matrix.outputs.swift-sdk-test-matrix }}
      rust-model: ${{ steps.create-seed-groups-matrix.outputs.rust-model-test-matrix }}
      rust-sdk: ${{ steps.create-seed-groups-matrix.outputs.rust-sdk-test-matrix }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/workflow-resource-files/seed-groups/

      - name: Verify Seed Groups File Exists
        run: |
          if [ ! -f .github/workflow-resource-files/seed-groups/${{ matrix.sdk-name }}-seed-groups.json ]; then
            echo "${{ matrix.sdk-name }}-seed-groups.json file not found. This file should be created automatically by the nightly-seed-grouping workflow."
            exit 1
          else
            echo "${{ matrix.sdk-name }}-seed-groups.json file found."
          fi

      - name: Determine Parallelization
        id: determine-parallelization
        run: |
          # Note: these times are the total time of generation and compilation for all seed tests. This is not a 
          # measurement of throughput because it does not account of concurrency or parallelization. This is not 
          # a perfect representation, but it gets the job done. 3800 seconds was chosen as it is approximately 
          # 8 minutes when running with 16 concurrent tests as is our default setting in CI.
          CUTOFF_TIME_FOR_PARALLELIZATION_SECONDS=3800
          TOTAL_TEST_TIME_SECONDS=$(jq '.totalTestTimeSeconds' .github/workflow-resource-files/seed-groups/${{ matrix.sdk-name }}-seed-groups.json)
          echo "Checking if ${{ matrix.sdk-name }} total test time of $TOTAL_TEST_TIME_SECONDS seconds is greater than $CUTOFF_TIME_FOR_PARALLELIZATION_SECONDS seconds to split tests into parallel runners"

          # Validate both times are non-negative integers (zero is allowed)
          if [[ ! $CUTOFF_TIME_FOR_PARALLELIZATION_SECONDS =~ ^[0-9]+$ ]]; then
            echo "Cut off time from seed.yml workflow is not a non-negative integer ($CUTOFF_TIME_FOR_PARALLELIZATION_SECONDS)"
            exit 1
          fi

          if [[ ! $TOTAL_TEST_TIME_SECONDS =~ ^[0-9]+$ ]]; then
            echo "Total test time from ${{ matrix.sdk-name }}-seed-groups.json is not a non-negative integer ($TOTAL_TEST_TIME_SECONDS)"
            exit 1
          fi

          # Determine if we should split tests into parallel runners based on the cutoff time
          if [[ $TOTAL_TEST_TIME_SECONDS -gt $CUTOFF_TIME_FOR_PARALLELIZATION_SECONDS ]]; then
            echo "Running ${{ matrix.sdk-name }} tests in parallel runners"
            echo "split-tests=true" >> $GITHUB_OUTPUT
          else
            echo "Running ${{ matrix.sdk-name }} tests in a single runner"
            echo "split-tests=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Seed Groups Matrix
        id: create-seed-groups-matrix
        run: |
          # Parallelize tests and add leftover test runner, or run all tests in a single runner
          # Note: "leftovers" and "all" are used as keywords in the matrix jobs following this setup
          BASH_VAR=""
          if [[ "${{ steps.determine-parallelization.outputs.split-tests }}" == "true" ]]; then
            echo "Using balanced groups from ${{ matrix.sdk-name }}-seed-groups.json and adding a group for any leftover tests"
            BASH_VAR=$(jq '[.groups[] | {fixtures: .fixtures}]' .github/workflow-resource-files/seed-groups/${{ matrix.sdk-name }}-seed-groups.json)
            WITH_LEFTOVERS=$(echo "$BASH_VAR" | jq -c '. += [{"fixtures": ["leftovers"]}]')
            echo "${{ matrix.sdk-name }}-test-matrix=$WITH_LEFTOVERS" >> $GITHUB_OUTPUT

            # Echo the data to command line for visibility
            echo "Groups for ${{ matrix.sdk-name }}-test-matrix:"
            echo "$WITH_LEFTOVERS" | jq .
          else
            echo "Using single group to run all ${{ matrix.sdk-name }} tests"
            BASH_VAR='[{"fixtures":["all"]}]'
            echo "${{ matrix.sdk-name }}-test-matrix=$BASH_VAR" >> $GITHUB_OUTPUT

            # Echo the data to command line for visibility
            echo "Single group for ${{ matrix.sdk-name }}-test-matrix:"
            echo "$BASH_VAR" | jq .
          fi

  ruby-model:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.ruby == 'true' && needs.get-all-test-matrices.outputs.ruby-model != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJSON(needs.get-all-test-matrices.outputs.ruby-model) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: ruby-model
          generator-path: generators/ruby
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  ruby-sdk:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.ruby == 'true' && needs.get-all-test-matrices.outputs.ruby-sdk != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJSON(needs.get-all-test-matrices.outputs.ruby-sdk) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: ruby-sdk
          generator-path: generators/ruby
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  ruby-sdk-v2:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.ruby-v2 == 'true' && needs.get-all-test-matrices.outputs.ruby-sdk-v2 != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJSON(needs.get-all-test-matrices.outputs.ruby-sdk-v2) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: ruby-sdk-v2
          generator-path: generators/ruby-v2
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  pydantic:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.python == 'true' && needs.get-all-test-matrices.outputs.pydantic != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJSON(needs.get-all-test-matrices.outputs.pydantic) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: pydantic
          generator-path: generators/python
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  python-sdk:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.python == 'true' && needs.get-all-test-matrices.outputs.python-sdk != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJSON(needs.get-all-test-matrices.outputs.python-sdk) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: python-sdk
          generator-path: generators/python
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  fastapi:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.python == 'true' && needs.get-all-test-matrices.outputs.fastapi != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJSON(needs.get-all-test-matrices.outputs.fastapi) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: fastapi
          generator-path: generators/python
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  openapi:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.openapi == 'true' && needs.get-all-test-matrices.outputs.openapi != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJSON(needs.get-all-test-matrices.outputs.openapi) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: openapi
          generator-path: generators/openapi
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  postman:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.postman == 'true' && needs.get-all-test-matrices.outputs.postman != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJSON(needs.get-all-test-matrices.outputs.postman) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: postman
          generator-path: generators/postman
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  java-sdk:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.java == 'true' && needs.get-all-test-matrices.outputs.java-sdk != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJSON(needs.get-all-test-matrices.outputs.java-sdk) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: java-sdk
          generator-path: generators/java generators/java-v2
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  java-model:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.java == 'true' && needs.get-all-test-matrices.outputs.java-model != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJSON(needs.get-all-test-matrices.outputs.java-model) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: java-model
          generator-path: generators/java
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  java-spring:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.java == 'true' && needs.get-all-test-matrices.outputs.java-spring != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJSON(needs.get-all-test-matrices.outputs.java-spring) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: java-spring
          generator-path: generators/java
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  ts-sdk:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.typescript == 'true' && needs.get-all-test-matrices.outputs.ts-sdk != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJson(needs.get-all-test-matrices.outputs.ts-sdk) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: ts-sdk
          generator-path: generators/typescript
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  ts-express:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.typescript == 'true' && needs.get-all-test-matrices.outputs.ts-express != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJSON(needs.get-all-test-matrices.outputs.ts-express) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: ts-express
          generator-path: generators/typescript
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  go-fiber:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.go == 'true' && needs.get-all-test-matrices.outputs.go-fiber != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJSON(needs.get-all-test-matrices.outputs.go-fiber) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: go-fiber
          generator-path: generators/go generators/go-v2
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  go-model:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.go == 'true' && needs.get-all-test-matrices.outputs.go-model != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJSON(needs.get-all-test-matrices.outputs.go-model) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: go-model
          generator-path: generators/go generators/go-v2
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  go-sdk:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.go == 'true' && needs.get-all-test-matrices.outputs.go-sdk != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJSON(needs.get-all-test-matrices.outputs.go-sdk) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: go-sdk
          generator-path: generators/go generators/go-v2
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  csharp-model:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.csharp == 'true' && needs.get-all-test-matrices.outputs.csharp-model != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJSON(needs.get-all-test-matrices.outputs.csharp-model) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: csharp-model
          generator-path: generators/csharp
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  csharp-sdk:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.csharp == 'true' && needs.get-all-test-matrices.outputs.csharp-sdk != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJSON(needs.get-all-test-matrices.outputs.csharp-sdk) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: csharp-sdk
          generator-path: generators/csharp
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  php-model:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.php == 'true' && needs.get-all-test-matrices.outputs.php-model != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJSON(needs.get-all-test-matrices.outputs.php-model) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: php-model
          generator-path: generators/php
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  php-sdk:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.php == 'true' && needs.get-all-test-matrices.outputs.php-sdk != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJSON(needs.get-all-test-matrices.outputs.php-sdk) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: php-sdk
          generator-path: generators/php
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  swift-sdk:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.swift == 'true' && needs.get-all-test-matrices.outputs.swift-sdk != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJSON(needs.get-all-test-matrices.outputs.swift-sdk) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: swift-sdk
          generator-path: generators/swift
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  rust-model:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.rust == 'true' && needs.get-all-test-matrices.outputs.rust-model != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJSON(needs.get-all-test-matrices.outputs.rust-model) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: rust-model
          generator-path: generators/rust
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  rust-sdk:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [setup, changes, get-all-test-matrices]
    if: >-
      ${{
        (needs.changes.outputs.rust == 'true' && needs.get-all-test-matrices.outputs.rust-sdk != ''
        && github.event.pull_request.draft == false) || github.event_name == 'workflow_dispatch'
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      max-parallel: 15 # Limit the number of runners for this job
      matrix:
        include: ${{ fromJSON(needs.get-all-test-matrices.outputs.rust-sdk) }}
    steps:
      - name: Checkout action file
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/run-seed-process

      - name: Run All Seed Tests
        uses: ./.github/actions/run-seed-process
        with:
          sdk-name: rust-sdk
          generator-path: generators/rust
          fixtures-to-run: ${{toJson(matrix.fixtures)}}
          job-index: ${{ strategy.job-index }}
          collect-metrics: ${{ needs.setup.outputs.post-metrics }}

  # Round up all tests into job with defined name for PR merge requirements
  seed-test-results:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs:
      [
        ruby-model,
        ruby-sdk,
        ruby-sdk-v2,
        pydantic,
        python-sdk,
        fastapi,
        openapi,
        postman,
        java-sdk,
        java-model,
        java-spring,
        ts-sdk,
        ts-express,
        go-fiber,
        go-model,
        go-sdk,
        csharp-model,
        csharp-sdk,
        php-model,
        php-sdk,
        swift-sdk,
        rust-model,
        rust-sdk
      ]
    if: >-
      ${{
        always() && !cancelled()
      }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      matrix:
        job-name:
          [
            ruby-model,
            ruby-sdk,
            ruby-sdk-v2,
            pydantic,
            python-sdk,
            fastapi,
            openapi,
            postman,
            java-sdk,
            java-model,
            java-spring,
            ts-sdk,
            ts-express,
            go-fiber,
            go-model,
            go-sdk,
            csharp-model,
            csharp-sdk,
            php-model,
            php-sdk,
            swift-sdk,
            rust-model,
            rust-sdk
          ]
    outputs:
      ruby-model-passing: ${{ steps.report-results.outputs.ruby-model-passing }}
      ruby-sdk-passing: ${{ steps.report-results.outputs.ruby-sdk-passing }}
      ruby-sdk-v2-passing: ${{ steps.report-results.outputs.ruby-sdk-v2-passing }}
      pydantic-passing: ${{ steps.report-results.outputs.pydantic-passing }}
      python-sdk-passing: ${{ steps.report-results.outputs.python-sdk-passing }}
      fastapi-passing: ${{ steps.report-results.outputs.fastapi-passing }}
      openapi-passing: ${{ steps.report-results.outputs.openapi-passing }}
      postman-passing: ${{ steps.report-results.outputs.postman-passing }}
      java-sdk-passing: ${{ steps.report-results.outputs.java-sdk-passing }}
      java-model-passing: ${{ steps.report-results.outputs.java-model-passing }}
      java-spring-passing: ${{ steps.report-results.outputs.java-spring-passing }}
      ts-sdk-passing: ${{ steps.report-results.outputs.ts-sdk-passing }}
      ts-express-passing: ${{ steps.report-results.outputs.ts-express-passing }}
      go-fiber-passing: ${{ steps.report-results.outputs.go-fiber-passing }}
      go-model-passing: ${{ steps.report-results.outputs.go-model-passing }}
      go-sdk-passing: ${{ steps.report-results.outputs.go-sdk-passing }}
      csharp-model-passing: ${{ steps.report-results.outputs.csharp-model-passing }}
      csharp-sdk-passing: ${{ steps.report-results.outputs.csharp-sdk-passing }}
      php-model-passing: ${{ steps.report-results.outputs.php-model-passing }}
      php-sdk-passing: ${{ steps.report-results.outputs.php-sdk-passing }}
      swift-sdk-passing: ${{ steps.report-results.outputs.swift-sdk-passing }}
      rust-model-passing: ${{ steps.report-results.outputs.rust-model-passing }}
      rust-sdk-passing: ${{ steps.report-results.outputs.rust-sdk-passing }}
    steps:
      - name: Report ${{ matrix.job-name }} seed test results
        id: report-results
        run: |
          RESULT="${{ fromJSON(toJSON(needs))[matrix.job-name].result }}"

          # Set output for passing status
          if [ "$RESULT" = "success" ] || [ "$RESULT" = "skipped" ]; then
            echo "${{ matrix.job-name }}-passing=true" >> $GITHUB_OUTPUT
          else
            echo "${{ matrix.job-name }}-passing=false" >> $GITHUB_OUTPUT
          fi

          # Log results and fail if required (for PR requirements)
          if [ "$RESULT" = "success" ]; then
            echo "${{ matrix.job-name }} seed tests are all passing"
          elif [ "$RESULT" = "skipped" ]; then
            echo "No changes detected for ${{ matrix.job-name }} seed tests. Passing."
          else
            echo "${{ matrix.job-name }} seed tests had changes and were not successful"
            echo "Result of parallelized tests: $RESULT"
            exit 1
          fi

  post-metrics:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      [
        setup,
        seed-test-results,
        ruby-model,
        ruby-sdk,
        ruby-sdk-v2,
        pydantic,
        python-sdk,
        fastapi,
        openapi,
        postman,
        java-sdk,
        java-model,
        java-spring,
        ts-sdk,
        ts-express,
        go-fiber,
        go-model,
        go-sdk,
        csharp-model,
        csharp-sdk,
        php-model,
        php-sdk,
        swift-sdk,
        rust-model,
        rust-sdk
      ]
    if: ${{ always() && !cancelled() && needs.setup.outputs.post-metrics == 'true' }}
    strategy:
      fail-fast: false # Let all tests run, even if some fail
      matrix:
        seed-generator-alias:
          [
            ruby-model,
            ruby-sdk,
            ruby-sdk-v2,
            pydantic,
            python-sdk,
            fastapi,
            openapi,
            postman,
            java-sdk,
            java-model,
            java-spring,
            ts-sdk,
            ts-express,
            go-fiber,
            go-model,
            go-sdk,
            csharp-model,
            csharp-sdk,
            php-model,
            php-sdk,
            swift-sdk,
            rust-model,
            rust-sdk
          ]
    steps:
      - name: Create Metrics Artifacts Info
        shell: bash
        id: artifacts-info
        run: |
          DIRECTORY=seed-test-time-artifacts
          echo "metrics_path=$DIRECTORY" >> $GITHUB_OUTPUT
          echo "metrics_pattern=seed-metrics-${{ matrix.seed-generator-alias }}-*.json" >> $GITHUB_OUTPUT
          if [ ! -d "$DIRECTORY" ]; then
            echo "'$DIRECTORY' does NOT exist, creating it now."
            mkdir $DIRECTORY
          else
            echo "WARNING: Directory '$DIRECTORY' already exists. Not an immediate error but could cause a problem downstream."
          fi

      - name: Download Seed Test Time Artifacts
        uses: actions/download-artifact@v5
        with:
          path: ${{ steps.artifacts-info.outputs.metrics_path }}
          pattern: ${{ steps.artifacts-info.outputs.metrics_pattern }}
          merge-multiple: true

      - name: Get Number of Metrics Artifacts
        shell: bash
        id: get-number-of-metric-artifacts
        run: |
          METRICS_PATH="${{ steps.artifacts-info.outputs.metrics_path }}"
          METRICS_PATTERN="${{ steps.artifacts-info.outputs.metrics_pattern }}"
          echo "Looking for files in: $METRICS_PATH"
          echo "Using pattern: $METRICS_PATTERN"

          # Check for artifacts
          file_count=$(find "./$METRICS_PATH" -type f -name "$METRICS_PATTERN" | wc -l)
          if [ "$file_count" -gt 0 ]; then
            echo "Found $file_count artifacts for seed metrics"
          else
            echo "Found 0 artifacts for seed metrics"
            exit 1
          fi

      - name: Display Content of Metrics Artifacts Folder
        run: |
          METRICS_PATH="${{ steps.artifacts-info.outputs.metrics_path }}"
          echo "Content of '$METRICS_PATH' folder:"
          ls -R $METRICS_PATH/

      - name: Parse Seed Test Metrics
        id: parse-seed-test-metrics
        run: |
          METRICS_PATH="${{ steps.artifacts-info.outputs.metrics_path }}"
          METRICS_PATTERN="${{ steps.artifacts-info.outputs.metrics_pattern }}"

          # Combine all JSON files into an array and find min start time and max end time
          min_start=$(jq -r '.startTimeSeconds' ./$METRICS_PATH/$METRICS_PATTERN | sort | head -n 1)
          max_end=$(jq -r '.endTimeSeconds' ./$METRICS_PATH/$METRICS_PATTERN | sort | tail -n 1)

          # Calculate duration in seconds
          duration_seconds=$((max_end - min_start))

          echo "Earliest start time: $min_start"
          echo "Latest end time: $max_end"
          echo "Duration: $duration_seconds"
          echo "duration_seconds=$duration_seconds" >> $GITHUB_OUTPUTß

          # Determine if all tests passing. Note: seed-generator-alias needs to match CI job name for this parsing to work
          all_tests_passing="${{ needs.seed-test-results.outputs[format('{0}-passing', matrix.seed-generator-alias)] }}"

          # If empty for any reason, default to false
          if [ -z "$all_tests_passing" ]; then
            all_tests_passing="false"
          fi

          echo "all_tests_passing=$all_tests_passing" >> $GITHUB_OUTPUT

      - name: Post to PostHog
        # https://github.com/PostHog/posthog-github-action
        uses: PostHog/posthog-github-action@v0.1
        with:
          posthog-token: ${{ secrets.POSTHOG_API_KEY }}
          event: "gh-actions-nightly-seed-test-metrics-testing-event"
          properties: |
            {
              "event_type": "${{ github.event_name }}",
              "branch": "${{ github.ref_name }}",
              "seed_generator_alias": "${{ matrix.seed-generator-alias }}",
              "run_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "duration_seconds": "${{ steps.parse-seed-test-metrics.outputs.duration_seconds }}",
              "all_tests_passing": "${{ steps.parse-seed-test-metrics.outputs.all_tests_passing }}"
            }
